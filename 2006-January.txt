From tm243 at berlios.de  Tue Jan  3 22:32:59 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Tue, 3 Jan 2006 22:32:59 +0100
Subject: [Php-qt-svn] r151 - trunk/tools
Message-ID: <200601032132.k03LWxuN001370@sheep.berlios.de>

Author: tm243
Date: 2006-01-03 22:32:58 +0100 (Tue, 03 Jan 2006)
New Revision: 151

Modified:
   trunk/tools/kalyptusCxxToPHP.pm
Log:
marshal method to handle arguments automatically.

Modified: trunk/tools/kalyptusCxxToPHP.pm
===================================================================
--- trunk/tools/kalyptusCxxToPHP.pm	2005-12-21 21:45:56 UTC (rev 150)
+++ trunk/tools/kalyptusCxxToPHP.pm	2006-01-03 21:32:58 UTC (rev 151)
@@ -14,7 +14,7 @@
 # *                                                                         *
 #***************************************************************************/
 
-# TODO 
+# TODO
 #   - support for all types in method calls
 #   - fit cplusplusToZEND, cplusplusToInvoke, cplusplusToMacro
 #   - setter methods support only one php property (adequate, I believe)
@@ -37,7 +37,7 @@
 
 use vars qw/ @clist $host $who $now $gentext %functionId $docTop
 	$lib $rootnode $outputdir $opt $debug $typeprefix $eventHandlerCount
-	$pastaccess $pastname $pastreturn $pastparams $nullctor $ctorCount @properties @functions @constructors *CLASS *ZEND_PHP_QT *HEADER *QTCTYPES *KDETYPES /;
+	$pastaccess $pastname $pastreturn $pastparams $nullctor $ctorCount @properties @functions @constructors %methods *CLASS *ZEND_PHP_QT *HEADER *QTCTYPES *KDETYPES /;
 
 BEGIN
 {
@@ -393,7 +393,7 @@
 sub cplusplusToMacro
 {
 	my ( $class, $cnode )  = @_;
-    
+
     my $functionname = $cnode->{astNodeName};
     my $classname = $class->{astNodeName};
 
@@ -419,13 +419,13 @@
 
 # print doc in phpDocumentor style
     if(!$mark){
-    
+
         my $c = @functions;
         if($c>0){
             print CLASS "\t}\n";
             print CLASS "}\n";
         }
-    
+
         push @functions, $functionname;
         print CLASS "
 
@@ -434,15 +434,15 @@
  *    function  ",$functionname,"
  *    flags:    ",$function->{Flags},"
  *\n";
- 
+
         my $count = 0;
         foreach $b ( @{$cnode->{ParamList}} ) {
             print CLASS " *    \@param   ",$b->{ArgType},"\n";
-        } 
+        }
         if (!$count) {
             print CLASS " *    \@param   -\n";
         }
- 
+
         print CLASS "
  *    \@access   ",$access,"
  *    \@return   ",$returntype,"
@@ -460,7 +460,7 @@
         print CLASS "}\n";
         return;
     }
-    
+
     if(!$mark){
         print CLASS "ZEND_METHOD(",$classname,", ",$functionname,"){\n";
     }
@@ -480,6 +480,7 @@
         if($count > 0){
             $paraf .= ", ";
         }
+        print CLASS "\t// ",$b->{DefaultValue},"\n";
 # todo: long, double
         if ( $b->{ArgType} =~ /char/ ) {
             print CLASS "\t\tchar* var_",$count,";\n";
@@ -497,7 +498,7 @@
             $paratype .= ", &var_".$count;
             $paraf .= "(".$b->{ArgType}.") var_".$count;
             $short .= "b";
-        } 
+        }
         else {
             print CLASS "\t\tzval* var_",$count,";\n\n";
             $paratype .= ", &var_".$count;
@@ -522,17 +523,17 @@
     # we have a nxn relation
     my $prop;
     my $obj_tmp;
-    
+
     foreach $prop ( @properties ) {
-     
+
        if ( $prop->{WRITE} =~ /$functionname/ ) {
         foreach $obj_tmp ( @properties ) {
             # mostly these methods are setmethods with only one argument
             # maybe source of error
-# todo: test with QLCDNumber            
+# todo: test with QLCDNumber
             my $postfix = cplusplusToZEND($prop->{type});
             $postfix =~ s/zval\*//;
-            if ( $postfix ) {    
+            if ( $postfix ) {
                 $postfix = "_".cplusplusToZEND($prop->{type});
             }
 
@@ -622,8 +623,8 @@
   +----------------------------------------------------------------------+
 */
 /*
- * Copyright (C) 2005 
- * Thomas Moenicke <tm\@ippfp.org>, 
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm\@ippfp.org>,
  * Jean-Luc Gyger <jean_luc.gyger\@freesurf.ch>
  *
 */
@@ -671,9 +672,9 @@
 	# Document all compound nodes
 	Iter::LocalCompounds( $rootnode, sub { writeClassDoc( shift ); } );
 
-    print ZEND_PHP_QT "\n/* 
+    print ZEND_PHP_QT "\n/*
   	Declare any global variables you may need between the BEGIN
-	and END macros here:     
+	and END macros here:
 
 ZEND_BEGIN_MODULE_GLOBALS(php_qt)
 	long  global_value;
@@ -681,12 +682,12 @@
 ZEND_END_MODULE_GLOBALS(php_qt)
 */
 
-/* In every utility function you add that needs to use variables 
-   in php_php_qt_globals, call TSRMLS_FETCH(); after declaring other 
+/* In every utility function you add that needs to use variables
+   in php_php_qt_globals, call TSRMLS_FETCH(); after declaring other
    variables used by that function, or better yet, pass in TSRMLS_CC
    after the last function argument and declare your utility function
    with TSRMLS_DC after the last declared argument.  Always refer to
-   the globals in your function as PHP_QT_G(variable).  You are 
+   the globals in your function as PHP_QT_G(variable).  You are
    encouraged to rename these macros something shorter, see
    examples in any other php module directory.
 */
@@ -763,20 +764,20 @@
 print CLASS "/*
  * PHP-Qt - The PHP language bindings for Qt
  *
- * Copyright (C) 2005 
- * Thomas Moenicke <tm\@ippfp.org>, 
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm\@ippfp.org>,
  * Jean-Luc Gyger <jean_luc.gyger\@freesurf.ch>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
- * 
+ *
  * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Lesser General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
@@ -819,20 +820,20 @@
 /*
  * PHP-Qt - The PHP language bindings for Qt
  *
- * Copyright (C) 2005 
- * Thomas Moenicke <tm\@ippfp.org>, 
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm\@ippfp.org>,
  * Jean-Luc Gyger <jean_luc.gyger\@freesurf.ch>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
- * 
+ *
  * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Lesser General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
@@ -883,6 +884,77 @@
 		sub { print CLASS ""; print CLASS ""; }
 	);
 
+    # traverse
+    foreach my $key (keys %methods){
+        my $node_ = $methods{ $key };
+        my @methods_ = $node_->{"method"};
+# group
+        my @one;
+        my @two;
+        my @three;
+        my @four;
+        my @five;
+
+        print CLASS "
+/*********************************
+ *    class     ",$node->{astNodeName}," */\n";
+
+        my $first = 1;
+
+        foreach my $m_ (@methods_){
+            foreach my $n_ (@{$m_}){
+
+            if($first == 1){
+                $first = 0;
+                print CLASS "/*
+ *    function  ",$n_->{astNodeName},"
+ *    flags:    ",$n_->{Flags},"
+ */\n";
+                print CLASS "ZEND_METHOD(",$node->{astNodeName},", ",$n_->{astNodeName},"){\n";
+            }
+
+
+                my $count = 0;
+                foreach $b ( @{$n_->{ParamList}} ) {
+                    $count++;
+                }
+# copy
+                if($count == 0){
+                } elsif($count == 1){
+                    push @one, $n_;
+                } elsif($count == 2){
+                    push @two, $n_;
+                } elsif($count == 3){
+                    push @three, $n_;
+                } elsif($count == 4){
+                    push @four, $n_;
+                } elsif($count == 5){
+                    push @five, $n_;
+                } else {
+                    print "error, too much args: ",$count," ",$node->{astNodeName}," ",$n_->{astNodeName},"\n";
+                }
+            }
+
+            my %one_ = mergeEquals($node->{astNodeName},1, at one);
+            print CLASS marshal($node->{astNodeName},1,%one_);
+
+            my %two_ = mergeEquals($node->{astNodeName},2, at two);
+            print CLASS marshal($node->{astNodeName},2,%two_);
+
+            my %three_ = mergeEquals($node->{astNodeName},3, at three);
+            print CLASS marshal($node->{astNodeName},3,%three_);
+
+            my %four_ = mergeEquals($node->{astNodeName},4, at four);
+            print CLASS marshal($node->{astNodeName},4,%four_);
+
+            my %five_ = mergeEquals($node->{astNodeName},5, at five);
+            print CLASS marshal($node->{astNodeName},5,%five_);
+
+            print CLASS "}\n"; # ZEND_METHOD
+
+        }
+    }
+
     print CLASS "\n";
 
 # creating the constructor
@@ -915,7 +987,7 @@
                 } #if defined @{$info};
 
                 print CLASS "\t\tif(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,\"",$PHPzend_parse_parameters_s,"\"",$PHPzend_parse_parameters_vars,") == FAILURE) {\n";
-                print CLASS "\t\t\treturn;\n","\t\t}\n"; 
+                print CLASS "\t\t\treturn;\n","\t\t}\n";
 
                 $typeCount = 0;
                 foreach my $info ( @ctor_params ) {
@@ -929,11 +1001,11 @@
                 }
                 print CLASS "\t}\n";
     } if defined @ctor_params;
-    
+
 }
     print CLASS "\n\tPHP_QT_REGISTER(",$function,"_ptr);\n";
     print CLASS "\tRETURN_NULL();\n";
-	print CLASS "}\n";        
+	print CLASS "}\n";
 # destructor
     print CLASS "\nPHP_QT_DESTRUCT(",$function,");\n\n";
 
@@ -985,10 +1057,11 @@
 	if ( kalyptusDataDict::interfacemap($node->{astNodeName}) ne () ) {
 		close INTERFACE;
     }
-    
+
     undef @properties;
     undef @functions;
     undef @constructors;
+    undef %methods;
 }
 
 # for every node
@@ -1185,6 +1258,9 @@
 			    if ( $name =~ /.*Event$/ ) {
 				    return;
 			    }
+# prepare arguments
+                mergeNumbers($class,$m);
+# deprecated
                 cplusplusToMacro($class,$m);
    		    }
 	    }
@@ -1236,8 +1312,8 @@
 
 				}
 #                $enum =~ s/=//g;
-                my @constant = split(/=/,$enum_);                
-                print PHP_QT_MINIT "\t	REGISTER_LONG_CONSTANT(\"",uc($class->{astNodeName}),"_",uc($enum),"_",uc($constant[0]),"\", ",$class->{astNodeName},"::",$constant[0],", CONST_CS | CONST_PERSISTENT);\n";                
+                my @constant = split(/=/,$enum_);
+                print PHP_QT_MINIT "\t	REGISTER_LONG_CONSTANT(\"",uc($class->{astNodeName}),"_",uc($enum),"_",uc($constant[0]),"\", ",$class->{astNodeName},"::",$constant[0],", CONST_CS | CONST_PERSISTENT);\n";
 				$enumCount++;
 
 			}
@@ -1253,13 +1329,263 @@
 
     my @n = Ast::GetProps($cnode);
     foreach $a ( @n ) {
-        print PHP_QT_CPP ">",$a,": ",$cnode->{$a},"\n";
+        print CLASS ">",$a,": ",$cnode->{$a},"\n";
+    }
+}
 
+# diese Methode gruppiert alle Argumente nach Anzahl
+
+sub mergeNumbers
+{
+	my ( $class, $cnode )  = @_;
+
+    my $functionname = $cnode->{astNodeName};
+    my $classname = $class->{astNodeName};
+
+    foreach my $key ( keys %methods ) {
+		if ( $key eq $functionname ) {
+            #add to existing
+			$methods{ $key }->AddPropList("method", $cnode);
+			return;
+		}
     }
 
+    # add new
+    $methods{ $functionname } = Ast::New( $functionname );
+    $methods{ $functionname }->AddPropList("method",$cnode);
 
 
 }
 
+# finds equal strings and groups them
+
+sub mergeEquals {
+
+    my ($classname, $count, @args) = @_;
+    # find all equal strings
+
+    my @param_check;
+    my %tmp;
+    my $skip = 0;       # helping
+# create all strings
+    foreach my $method (@args){
+        my $paramstring = "";
+        foreach my $param ( @{$method->{ParamList}} ) {
+            if ( $param->{ArgType} =~ /char/ ) {
+                $paramstring .= "s";
+            } elsif ( $param->{ArgType} =~ /int/ ) {
+                $paramstring .= "l";
+            } elsif ( $param->{ArgType} =~ /bool/ ) {
+                $paramstring .= "b";
+            } else {
+                $paramstring .= "o";
+            }
+        }
+
+        push @param_check, $paramstring;
+
+# check if already available
+        foreach my $key ( keys %tmp ) {
+# yes: add
+            if ( $key eq $paramstring ) {
+                #add to existing
+                $tmp{ $key }->AddPropList("params", $method);
+                $skip = 1;
+                last;
+            }
+        }
+# no: create new
+        if($skip == 0){
+            $tmp{ $paramstring } = Ast::New( $paramstring );
+            $tmp{ $paramstring }->AddPropList("params",$method);
+        }
+        $skip = 0;
+# add method name
+        $tmp{ $paramstring }->AddProp("methodname",$method->{astNodeName});
+
+    }
+
+    return %tmp;
+
+}
+
+# group by count and strings
+
+sub marshal {
+
+    my ($classname, $count, %args) = @_;
+    my $return;
+
+    my $not_empty = %args;
+    if($not_empty){
+        $return .= "\n\tif (ZEND_NUM_ARGS() == ".$count."){\n";
+    }
+
+
+    my $c = 0;                  # helping variable
+    my $tmp_count = 0;          # helping
+
+# node is the method
+    foreach my $key (keys %args){
+        # docu
+#        foreach $b ( @{$method->{ParamList}} ) {
+#            $return .= " *    \@param   ".$b->{ArgType}."\n";
+#            $return .= " */\n";
+#        }
+
+        # initialize vars and agruments for zend_parse_parameters
+        my $d = 0;                  # helping variable
+        my $paratype;               # for zend
+        my $shortstring = "\"";    # short string for zend function
+        my $param_zend_function;    # parameter for zend function
+        my @objects;                # object stack
+        my $method = $args{$key};   # helping
+        my $object_selection = "";
+
+# identical strings grouped
+        $return .= "\t/* ".$key." */\n";
+
+# first parameters are static, the others coincides with this
+# exception: objects
+        my $params = @{$method->{params}}[0];
+
+# parse the first parameters
+        foreach my $first_param (@{$params->{ParamList}})  {
+
+            # comma for param_zend_function params
+            if($d > 0){
+                $param_zend_function .= " ,";
+            }
+
+            # the types
+# char
+            if ( $first_param->{ArgType} =~ /char/ ) {
+                $return .= "\t\tchar* var_".$c.";   // default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tint* len_".$c.";\n\n";
+
+                $paratype .= ", &var_".$c.", &len_".$c;
+                $param_zend_function .= " var_".$c;
+                $shortstring .= "s";
+# int
+            } elsif ( $first_param->{ArgType} =~ /int/ ) {
+                $return .= "\t\tlong var_".$c.";    // default: ".$first_param->{DefaultValue}."\n";
+
+                $paratype .= ", &var_".$c;
+                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$c;
+                $shortstring .= "l";
+# bool
+            } elsif ( $first_param->{ArgType} =~ /bool/ ) {
+                $return .= "\t\tbool* var_".$c.";   // _default: ".$first_param->{DefaultValue}."\n";
+
+                $paratype .= ", &var_".$c;
+                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$c;
+                $shortstring .= "b";
+# objects
+            } else {
+# while overloading, only one object will be created, query for name
+
+                $return .= "\t\tzval* var_".$c.";   // default: ".$first_param->{DefaultValue}."\n";
+
+                $paratype .= ", &var_".$c;
+                $param_zend_function .= " var_".$c;
+                $shortstring .= "o";
+                push @objects, "var_".$c;   # ?
+                # name query
+                $object_selection .= "\n\t\t\tQString tmp_".$tmp_count."(o->metaObject()->className());\n\n";
+#                $object_selection .= "\t\t\tif(tmp_".$tmp_count." == \"".$first_param->{ArgType}."\"){
+#                RETURN_BOOL(obj->".$method->{methodname}."((".$first_param->{ArgType}.")o, stretch)) \n\t\t\t}";
+            }
+            if(exists $first_param->{DefaultValue} != ""){
+                $shortstring .= "|";
+            }
+        $c++;
+        $d++;
+        }
+
+        my $skip_first = 1;
+        foreach my $params (@{$method->{params}}){
+# skip first, this was already created
+            if($skip_first == 1){
+                $skip_first = 0;
+                $object_selection .= "\t\t\t";
+#                next;
+            } else {
+                $object_selection .= " else ";
+            }
+
+# parse the rest
+            foreach my $param ( @{$params->{ParamList}} ) {
+# skip all excepting objects
+                if ( $param->{ArgType} =~ /char/ ) {
+                } elsif ( $param->{ArgType} =~ /int/ ) {
+                } elsif ( $param->{ArgType} =~ /bool/ ) {
+                } else {
+#print_r($method);
+                    $object_selection .= "if(tmp_".$tmp_count." == \"".$param->{ArgType}."\") {
+                    RETURN_BOOL(obj->".$method->{methodname}."((".$param->{ArgType}.")o, ".$param_zend_function.")) \n\t\t\t}";
+                    $return .= "\t\n";
+                }
+            } # foreach
+        }
+
+        $shortstring .= "\"";
+#        $object_selection .= "\n";
+
+# return value
+        my $returntype = $method->{ReturnType};
+        my $zend_return_type = cplusplusToZEND($returntype);
+
+# write zend_parse_parameters method
+        $return .= "\t\tif(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,".$shortstring.", ".$param_zend_function.") == SUCCESS) {\n";
+        $return .= "\t\t\t".$classname." *obj = (".$classname."*) PHP_QT_FETCH();\n";
+
+# objects as return type
+        my $obj;
+        foreach $obj ( @objects ) {
+            $return .= "\t\t\tQObject* ".$obj." = (QObject*) php_qt_fetch(".$obj.");\n";
+#            $paraf =~ s/$obj/tmp_$obj/;
+        }
+
+        my $not_empty = %args;
+        if($not_empty){
+            $return .= $object_selection;
+            undef $object_selection;
+            $return .= "\n";
+        }
+
+#        $return .= "\t\t$classname *o = ($classname*) PHP_QT_FETCH();\n";
+
+# if no return type specified
+        if ( $zend_return_type eq "NULL" ) {
+            $return .=  "\t\to->".$method->{methodname}."(".$param_zend_function.");\n";
+            $return .=  "\t\tRETURN_NULL();\n";
+# if return type is an object
+        } elsif ( $zend_return_type =~ /zval/ ) {
+        # TODO: consider 'const',
+        # and non-pointer types, pointer types
+            $return .=  "\t\t".$returntype." obj = (".$returntype.") o->".$method->{methodname}."(".$param_zend_function.");\n";
+            $return .=  "\t\tzend_class_entry *ce;                                   \n";
+            $return .=  "\t\t    object_init_ex(return_value, ".$classname."_ce_ptr);     \n";
+            $return .=  "\t\t    zend_rsrc_list_entry le;                            \n";
+            $return .=  "\t\t    le.ptr = &obj;                                       \n";
+            $return .=  "\t\t    php_qt_register(return_value,le);                   \n";
+            $return .=  "\t\t    return;                                             \n";
+        } else {
+            $return .=  "\t\tRETURN_".uc($zend_return_type)."(o->".$method->{methodname}."(".$param_zend_function."));\n" if defined $zend_return_type;
+        }
+        $return .= "\t\t}\n";
+        $tmp_count++;
+    } # foreach args
+
+    my $not_empty = %args;
+    if($not_empty){
+        $return .= "\t}\n";
+    }
+
+
+    return $return;
+
+}
+
 1;
 



From tm243 at berlios.de  Wed Jan  4 01:17:43 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Wed, 4 Jan 2006 01:17:43 +0100
Subject: [Php-qt-svn] r152 - in trunk: . playground
Message-ID: <200601040017.k040HhQQ013667@sheep.berlios.de>

Author: tm243
Date: 2006-01-04 01:17:09 +0100 (Wed, 04 Jan 2006)
New Revision: 152

Added:
   trunk/playground/
   trunk/playground/QLayoutItemInterface.cpp
   trunk/playground/php_qt.snippets.cpp
   trunk/playground/php_qt.snippets2.cpp
   trunk/playground/qabstractbutton.cpp
   trunk/playground/qabstractslider.cpp
   trunk/playground/qactionevent.cpp
   trunk/playground/qapplication.cpp
   trunk/playground/qboxlayout.cpp
   trunk/playground/qchar.cpp
   trunk/playground/qcharref.cpp
   trunk/playground/qclipboardevent.cpp
   trunk/playground/qcloseevent.cpp
   trunk/playground/qcontextmenuevent.cpp
   trunk/playground/qcoreapplication.cpp
   trunk/playground/qdate.cpp
   trunk/playground/qdatetime.cpp
   trunk/playground/qdragenterevent.cpp
   trunk/playground/qdragleaveevent.cpp
   trunk/playground/qdragmoveevent.cpp
   trunk/playground/qdragresponseevent.cpp
   trunk/playground/qdropevent.cpp
   trunk/playground/qfileopenevent.cpp
   trunk/playground/qfocusevent.cpp
   trunk/playground/qfont.cpp
   trunk/playground/qframe.cpp
   trunk/playground/qgridlayout.cpp
   trunk/playground/qhboxlayout.cpp
   trunk/playground/qhelpevent.cpp
   trunk/playground/qhideevent.cpp
   trunk/playground/qhoverevent.cpp
   trunk/playground/qicondragevent.cpp
   trunk/playground/qinputevent.cpp
   trunk/playground/qinputmethodevent.cpp
   trunk/playground/qinputmethodevent__attribute.cpp
   trunk/playground/qkeyevent.cpp
   trunk/playground/qlabel.cpp
   trunk/playground/qlatin1char.cpp
   trunk/playground/qlatin1string.cpp
   trunk/playground/qlayout.cpp
   trunk/playground/qlayoutitem.cpp
   trunk/playground/qlcdnumber.cpp
   trunk/playground/qlineedit.cpp
   trunk/playground/qmouseevent.cpp
   trunk/playground/qmoveevent.cpp
   trunk/playground/qobject.cpp
   trunk/playground/qobjectdata.cpp
   trunk/playground/qobjectuserdata.cpp
   trunk/playground/qpainter.cpp
   trunk/playground/qpaintevent.cpp
   trunk/playground/qpushbutton.cpp
   trunk/playground/qresizeevent.cpp
   trunk/playground/qshortcutevent.cpp
   trunk/playground/qshowevent.cpp
   trunk/playground/qslider.cpp
   trunk/playground/qspaceritem.cpp
   trunk/playground/qstatustipevent.cpp
   trunk/playground/qstring.cpp
   trunk/playground/qtabletevent.cpp
   trunk/playground/qtime.cpp
   trunk/playground/qtimer.cpp
   trunk/playground/qtoolbarchangeevent.cpp
   trunk/playground/qvboxlayout.cpp
   trunk/playground/qwhatsthisclickedevent.cpp
   trunk/playground/qwheelevent.cpp
   trunk/playground/qwidget.cpp
   trunk/playground/qwidgetdata.cpp
   trunk/playground/qwidgetitem.cpp
   trunk/playground/qwindowstatechangeevent.cpp
   trunk/playground/zend_php_qt.h
Log:
added a playground for autogenerated classes, overloading is still not finished yet.

Added: trunk/playground/QLayoutItemInterface.cpp
===================================================================
--- trunk/playground/QLayoutItemInterface.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/QLayoutItemInterface.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,30 @@
+/* QLayoutItemInterface.cpp - QLayoutItemInterface PHP implementation. * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"

Added: trunk/playground/php_qt.snippets.cpp
===================================================================
--- trunk/playground/php_qt.snippets.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/php_qt.snippets.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,2158 @@
+/**/
+
+static zend_function_entry QAbstractButton_methods[] = {
+	ZEND_ME(QAbstractButton,QAbstractButton,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,text,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,icon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,iconSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,shortcut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,isCheckable,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,isChecked,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,isDown,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,autoRepeat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,autoExclusive,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,group,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,animateClick,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,click,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,toggle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QAbstractButton,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QAbstractButton,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QAbstractButton(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QAbstractButton",QAbstractButton_methods);
+    QAbstractButton_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QWidget_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("text");
+	PHP_QT_DECLARE_PROPERTY("icon");
+	PHP_QT_DECLARE_PROPERTY("iconSize");
+	PHP_QT_DECLARE_PROPERTY("shortcut");
+	PHP_QT_DECLARE_PROPERTY("checkable");
+	PHP_QT_DECLARE_PROPERTY("checked");
+	PHP_QT_DECLARE_PROPERTY("autoRepeat");
+	PHP_QT_DECLARE_PROPERTY("autoExclusive");
+	PHP_QT_DECLARE_PROPERTY("down");
+
+}
+static zend_function_entry QAbstractSlider_methods[] = {
+	ZEND_ME(QAbstractSlider,QAbstractSlider,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,orientation,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,minimum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,maximum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,setRange,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,singleStep,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,pageStep,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,hasTracking,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,isSliderDown,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,sliderPosition,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,invertedAppearance,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,invertedControls,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,value,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,triggerAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractSlider,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QAbstractSlider,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QAbstractSlider,setRepeatAction,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QAbstractSlider,repeatAction,NULL,ZEND_ACC_PROTECTED)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QAbstractSlider(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QAbstractSlider",QAbstractSlider_methods);
+    QAbstractSlider_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QWidget_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("minimum");
+	PHP_QT_DECLARE_PROPERTY("maximum");
+	PHP_QT_DECLARE_PROPERTY("singleStep");
+	PHP_QT_DECLARE_PROPERTY("pageStep");
+	PHP_QT_DECLARE_PROPERTY("value");
+	PHP_QT_DECLARE_PROPERTY("sliderPosition");
+	PHP_QT_DECLARE_PROPERTY("tracking");
+	PHP_QT_DECLARE_PROPERTY("orientation");
+	PHP_QT_DECLARE_PROPERTY("invertedAppearance");
+	PHP_QT_DECLARE_PROPERTY("invertedControls");
+	PHP_QT_DECLARE_PROPERTY("sliderDown");
+
+}
+static zend_function_entry QActionEvent_methods[] = {
+	ZEND_ME(QActionEvent,action,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QActionEvent,before,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QActionEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QActionEvent",QActionEvent_methods);
+    QActionEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QApplication_methods[] = {
+	ZEND_ME(QApplication,isSessionRestored,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QApplication,sessionId,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QApplication,sessionKey,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QApplication,setInputContext,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QApplication,inputContext,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QApplication,notify,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QApplication,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,type,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,style,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setStyle,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setStyle,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,colorSpec,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setColorSpec,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,overrideCursor,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setOverrideCursor,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,changeOverrideCursor,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,restoreOverrideCursor,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,palette,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,palette,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,palette,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setPalette,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,font,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setFont,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,fontMetrics,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,windowIcon,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,allWidgets,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,topLevelWidgets,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,desktop,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,activePopupWidget,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,activeModalWidget,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,clipboard,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,focusWidget,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,activeWindow,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setActiveWindow,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,widgetAt,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,widgetAt,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,topLevelAt,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,topLevelAt,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,syncX,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,beep,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,keyboardModifiers,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,mouseButtons,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setDesktopSettingsAware,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,desktopSettingsAware,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,cursorFlashTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setDoubleClickInterval,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,doubleClickInterval,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,keyboardInputInterval,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setWheelScrollLines,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,wheelScrollLines,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,globalStrut,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setStartDragTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,startDragTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setStartDragDistance,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,startDragDistance,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,layoutDirection,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,isRightToLeft,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,isLeftToRight,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,isEffectEnabled,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setEffectEnabled,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,exec,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,setQuitOnLastWindowClosed,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,quitOnLastWindowClosed,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,closeAllWindows,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,aboutQt,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QApplication,event,NULL,ZEND_ACC_PROTECTED)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QApplication(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QApplication",QApplication_methods);
+    QApplication_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QCoreApplication_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("layoutDirection");
+	PHP_QT_DECLARE_PROPERTY("windowIcon");
+	PHP_QT_DECLARE_PROPERTY("cursorFlashTime");
+	PHP_QT_DECLARE_PROPERTY("doubleClickInterval");
+	PHP_QT_DECLARE_PROPERTY("keyboardInputInterval");
+	PHP_QT_DECLARE_PROPERTY("wheelScrollLines");
+	PHP_QT_DECLARE_PROPERTY("globalStrut");
+	PHP_QT_DECLARE_PROPERTY("startDragTime");
+	PHP_QT_DECLARE_PROPERTY("startDragDistance");
+	PHP_QT_DECLARE_PROPERTY("quitOnLastWindowClosed");
+
+}
+static zend_function_entry QBoxLayout_methods[] = {
+	ZEND_ME(QBoxLayout,QBoxLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,direction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,setDirection,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,addSpacing,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,addStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,addWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,addLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,addStrut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,addItem,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,insertSpacing,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,insertStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,insertWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,insertLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,setStretchFactor,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,setStretchFactor,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,minimumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,maximumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,hasHeightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,heightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,minimumHeightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,expandingDirections,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,invalidate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,itemAt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,takeAt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,count,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,setGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QBoxLayout,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QBoxLayout,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QBoxLayout,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QBoxLayout,insertItem,NULL,ZEND_ACC_PROTECTED)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QBoxLayout(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QBoxLayout",QBoxLayout_methods);
+    QBoxLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QLayout_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QChar_methods[] = {
+	ZEND_ME(QChar,digitValue,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,toLower,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,toUpper,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,category,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,direction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,joining,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,hasMirrored,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isLower,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isUpper,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,mirroredChar,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,decomposition,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,decompositionTag,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,combiningClass,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,unicodeVersion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,toAscii,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,toLatin1,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,unicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,unicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isNull,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isPrint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isPunct,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isSpace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isMark,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isLetter,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isLetterOrNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isDigit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isSymbol,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,cell,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,row,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,setCell,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,setRow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,fromAscii,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QChar,fromLatin1,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QChar(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QChar",QChar_methods);
+    QChar_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QCharRef_methods[] = {
+	ZEND_ME(QCharRef,isNull,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isPrint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isPunct,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isSpace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isMark,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isLetter,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isLetterOrNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isDigit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,digitValue,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,toLower,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,toUpper,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,category,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,direction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,joining,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,hasMirrored,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,mirroredChar,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,decomposition,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,decompositionTag,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,combiningClass,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,unicodeVersion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,cell,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,row,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,setCell,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,setRow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,toAscii,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,toLatin1,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,unicode,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QCharRef(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QCharRef",QCharRef_methods);
+    QCharRef_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QClipboardEvent_methods[] = {
+	ZEND_ME(QClipboardEvent,data,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QClipboardEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QClipboardEvent",QClipboardEvent_methods);
+    QClipboardEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QCloseEvent_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QCloseEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QCloseEvent",QCloseEvent_methods);
+    QCloseEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QContextMenuEvent_methods[] = {
+	ZEND_ME(QContextMenuEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,reason,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QContextMenuEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QContextMenuEvent",QContextMenuEvent_methods);
+    QContextMenuEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QCoreApplication_methods[] = {
+	ZEND_ME(QCoreApplication,QCoreApplication,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCoreApplication,bool,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCoreApplication,setEventFilter,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCoreApplication,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,argc,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,argv,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,organizationDomain,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,organizationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,applicationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,instance,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,exec,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,processEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,processEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,exit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,sendPostedEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,sendPostedEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,removePostedEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,hasPendingEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,startingUp,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,closingDown,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,applicationDirPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,applicationFilePath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,setLibraryPaths,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,libraryPaths,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,addLibraryPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,removeLibraryPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,installTranslator,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,removeTranslator,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,translate,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,flush,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,watchUnixSignal,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,quit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,event,NULL,ZEND_ACC_PROTECTED)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QCoreApplication(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QCoreApplication",QCoreApplication_methods);
+    QCoreApplication_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QObject_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("applicationName");
+	PHP_QT_DECLARE_PROPERTY("organizationName");
+	PHP_QT_DECLARE_PROPERTY("organizationDomain");
+
+}
+static zend_function_entry QDate_methods[] = {
+	ZEND_ME(QDate,isNull,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,isValid,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,year,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,month,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,day,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,dayOfWeek,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,dayOfYear,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,daysInMonth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,daysInYear,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,weekNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,setYMD,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,addDays,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,addMonths,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,addYears,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,daysTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,toJulianDay,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,shortMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,shortDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,longMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,longDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,currentDate,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,isLeapYear,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,gregorianToJulian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,julianToGregorian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,fromJulianDay,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QDate(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDate",QDate_methods);
+    QDate_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QDateTime_methods[] = {
+	ZEND_ME(QDateTime,QDateTime,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,isNull,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,isValid,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,date,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,time,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,timeSpec,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toTime_t,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,setDate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,setTime,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,setTimeSpec,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,setTime_t,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addDays,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addMonths,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addYears,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toTimeSpec,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toLocalTime,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toUTC,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,daysTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,secsTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,currentDateTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDateTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDateTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QDateTime(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDateTime",QDateTime_methods);
+    QDateTime_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QDragEnterEvent_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QDragEnterEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDragEnterEvent",QDragEnterEvent_methods);
+    QDragEnterEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QDragMoveEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QDragLeaveEvent_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QDragLeaveEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDragLeaveEvent",QDragLeaveEvent_methods);
+    QDragLeaveEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QDragMoveEvent_methods[] = {
+	ZEND_ME(QDragMoveEvent,answerRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDragMoveEvent,accept,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDragMoveEvent,ignore,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDragMoveEvent,accept,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDragMoveEvent,ignore,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QDragMoveEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDragMoveEvent",QDragMoveEvent_methods);
+    QDragMoveEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QDropEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QDragResponseEvent_methods[] = {
+	ZEND_ME(QDragResponseEvent,dragAccepted,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QDragResponseEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDragResponseEvent",QDragResponseEvent_methods);
+    QDragResponseEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QDropEvent_methods[] = {
+	ZEND_ME(QDropEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,mouseButtons,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,keyboardModifiers,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,possibleActions,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,proposedAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,acceptProposedAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,dropAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,setDropAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,source,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,mimeData,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,format,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,encodedData,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,provides,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QDropEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDropEvent",QDropEvent_methods);
+    QDropEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+	zend_do_inheritance(QDropEvent_ce_ptr, QMimeSource_ce_ptr TSRMLS_CC);
+
+
+}
+static zend_function_entry QFileOpenEvent_methods[] = {
+	ZEND_ME(QFileOpenEvent,file,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QFileOpenEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QFileOpenEvent",QFileOpenEvent_methods);
+    QFileOpenEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QFocusEvent_methods[] = {
+	ZEND_ME(QFocusEvent,gotFocus,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFocusEvent,lostFocus,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFocusEvent,reason,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QFocusEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QFocusEvent",QFocusEvent_methods);
+    QFocusEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QFont_methods[] = {
+	ZEND_ME(QFont,QFont,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,family,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setFamily,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,pointSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setPointSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,pointSizeF,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setPointSizeF,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,pixelSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setPixelSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,weight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setWeight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,bold,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setBold,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setStyle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,style,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,italic,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setItalic,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,underline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setUnderline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,overline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setOverline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,strikeOut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setStrikeOut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,fixedPitch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setFixedPitch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,kerning,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setKerning,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,styleHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,styleStrategy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setStyleHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setStyleStrategy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,stretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,rawMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setRawMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,exactMatch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,isCopyOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,handle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setRawName,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,rawName,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,key,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,fromString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,defaultFamily,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,lastResortFamily,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,lastResortFont,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,resolve,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,resolve,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,resolve,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,substitute,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,substitutes,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,substitutions,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,insertSubstitution,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,insertSubstitutions,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,removeSubstitution,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,initialize,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,cleanup,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,cacheStatistics,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QFont(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QFont",QFont_methods);
+    QFont_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QFrame_methods[] = {
+	ZEND_ME(QFrame,QFrame,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,frameStyle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,setFrameStyle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,frameWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,frameShape,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,frameShadow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,lineWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,midLineWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,frameRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFrame,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFrame,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFrame,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFrame,drawFrame,NULL,ZEND_ACC_PROTECTED)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QFrame(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QFrame",QFrame_methods);
+    QFrame_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QWidget_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("frameShape");
+	PHP_QT_DECLARE_PROPERTY("frameShadow");
+	PHP_QT_DECLARE_PROPERTY("lineWidth");
+	PHP_QT_DECLARE_PROPERTY("midLineWidth");
+	PHP_QT_DECLARE_PROPERTY("frameWidth");
+	PHP_QT_DECLARE_PROPERTY("frameRect");
+
+}
+static zend_function_entry QGridLayout_methods[] = {
+	ZEND_ME(QGridLayout,QGridLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,minimumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,maximumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setRowStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setColumnStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,rowStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,columnStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setRowMinimumHeight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setColumnMinimumWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,rowMinimumHeight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,columnMinimumWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,columnCount,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,rowCount,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,cellRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,hasHeightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,heightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,minimumHeightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,expandingDirections,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,invalidate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,addWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,addWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,addWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,addLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,addLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setOriginCorner,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,originCorner,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,itemAt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,takeAt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,count,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,addItem,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setDefaultPositioning,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,getItemPosition,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QGridLayout,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QGridLayout,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QGridLayout,addItem,NULL,ZEND_ACC_PROTECTED)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QGridLayout(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QGridLayout",QGridLayout_methods);
+    QGridLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QLayout_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QHBoxLayout_methods[] = {
+	ZEND_ME(QHBoxLayout,QHBoxLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHBoxLayout,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QHBoxLayout,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QHBoxLayout,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QHBoxLayout(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QHBoxLayout",QHBoxLayout_methods);
+    QHBoxLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QBoxLayout_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QHelpEvent_methods[] = {
+	ZEND_ME(QHelpEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QHelpEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QHelpEvent",QHelpEvent_methods);
+    QHelpEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QHideEvent_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QHideEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QHideEvent",QHideEvent_methods);
+    QHideEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QHoverEvent_methods[] = {
+	ZEND_ME(QHoverEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHoverEvent,oldPos,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QHoverEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QHoverEvent",QHoverEvent_methods);
+    QHoverEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QIconDragEvent_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QIconDragEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QIconDragEvent",QIconDragEvent_methods);
+    QIconDragEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QInputEvent_methods[] = {
+	ZEND_ME(QInputEvent,modifiers,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QInputEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QInputEvent",QInputEvent_methods);
+    QInputEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QInputMethodEvent_methods[] = {
+	ZEND_ME(QInputMethodEvent,setCommitString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QInputMethodEvent,preeditString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QInputMethodEvent,commitString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QInputMethodEvent,replacementStart,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QInputMethodEvent,replacementLength,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QInputMethodEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QInputMethodEvent",QInputMethodEvent_methods);
+    QInputMethodEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry Attribute_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_Attribute(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"Attribute",Attribute_methods);
+    Attribute_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QKeyEvent_methods[] = {
+	ZEND_ME(QKeyEvent,key,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QKeyEvent,modifiers,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QKeyEvent,text,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QKeyEvent,isAutoRepeat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QKeyEvent,count,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QKeyEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QKeyEvent",QKeyEvent_methods);
+    QKeyEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QLCDNumber_methods[] = {
+	ZEND_ME(QLCDNumber,QLCDNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,smallDecimalPoint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,numDigits,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,checkOverflow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,checkOverflow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,mode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,segmentStyle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,value,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,intValue,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setHexMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setDecMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setOctMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setBinMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLCDNumber,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLCDNumber,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QLCDNumber(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLCDNumber",QLCDNumber_methods);
+    QLCDNumber_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QFrame_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("smallDecimalPoint");
+	PHP_QT_DECLARE_PROPERTY("numDigits");
+	PHP_QT_DECLARE_PROPERTY("mode");
+	PHP_QT_DECLARE_PROPERTY("segmentStyle");
+	PHP_QT_DECLARE_PROPERTY("value");
+	PHP_QT_DECLARE_PROPERTY("intValue");
+
+}
+static zend_function_entry QLabel_methods[] = {
+	ZEND_ME(QLabel,QLabel,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,text,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,pixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,picture,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,movie,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,textFormat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,alignment,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,wordWrap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,indent,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,margin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,hasScaledContents,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,minimumSizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setBuddy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,buddy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,heightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setPicture,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setMovie,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,clear,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLabel,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLabel,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PROTECTED)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QLabel(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLabel",QLabel_methods);
+    QLabel_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QFrame_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("text");
+	PHP_QT_DECLARE_PROPERTY("textFormat");
+	PHP_QT_DECLARE_PROPERTY("pixmap");
+	PHP_QT_DECLARE_PROPERTY("scaledContents");
+	PHP_QT_DECLARE_PROPERTY("alignment");
+	PHP_QT_DECLARE_PROPERTY("wordWrap");
+	PHP_QT_DECLARE_PROPERTY("margin");
+	PHP_QT_DECLARE_PROPERTY("indent");
+
+}
+static zend_function_entry QLatin1Char_methods[] = {
+	ZEND_ME(QLatin1Char,toLatin1,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLatin1Char,unicode,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QLatin1Char(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLatin1Char",QLatin1Char_methods);
+    QLatin1Char_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QLatin1String_methods[] = {
+	ZEND_ME(QLatin1String,latin1,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QLatin1String(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLatin1String",QLatin1String_methods);
+    QLatin1String_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QLayout_methods[] = {
+	ZEND_ME(QLayout,QLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,margin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,spacing,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,setAlignment,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,setAlignment,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,setAlignment,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,sizeConstraint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,setMenuBar,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,menuBar,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,parentWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,invalidate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,geometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,activate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,update,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,addWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,removeWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,removeItem,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,expandingDirections,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,minimumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,maximumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,setGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,isEmpty,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,totalHeightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,totalMinimumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,totalMaximumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,totalSizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,layout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,setEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,isEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayout,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLayout,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLayout,closestAcceptableSize,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QLayout(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLayout",QLayout_methods);
+    QLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QLayoutItem_ce_ptr,NULL TSRMLS_CC);
+	zend_do_inheritance(QLayout_ce_ptr, QObject_ce_ptr TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("margin");
+	PHP_QT_DECLARE_PROPERTY("spacing");
+	PHP_QT_DECLARE_PROPERTY("sizeConstraint");
+
+}
+static zend_function_entry QLayoutItem_methods[] = {
+	ZEND_ME(QLayoutItem,alignment,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLayoutItem,setAlignment,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QLayoutItem(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLayoutItem",QLayoutItem_methods);
+    QLayoutItem_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QLineEdit_methods[] = {
+	ZEND_ME(QLineEdit,QLineEdit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,text,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,displayText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,maxLength,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,hasFrame,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,echoMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,isReadOnly,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,setValidator,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,validator,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,minimumSizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,cursorPosition,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,cursorPositionAt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,alignment,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,cursorForward,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,cursorBackward,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,cursorWordForward,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,cursorWordBackward,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,backspace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,del,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,home,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,end,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,isModified,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,setSelection,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,hasSelectedText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,selectedText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,selectionStart,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,isUndoAvailable,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,isRedoAvailable,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,dragEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,inputMask,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,hasAcceptableInput,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,deselect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,insert,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,createStandardContextMenu,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,inputMethodQuery,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,event,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,clear,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,selectAll,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,undo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,redo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,cut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,copy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,paste,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLineEdit,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLineEdit,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLineEdit,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QLineEdit(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLineEdit",QLineEdit_methods);
+    QLineEdit_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QWidget_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("inputMask");
+	PHP_QT_DECLARE_PROPERTY("text");
+	PHP_QT_DECLARE_PROPERTY("maxLength");
+	PHP_QT_DECLARE_PROPERTY("frame");
+	PHP_QT_DECLARE_PROPERTY("echoMode");
+	PHP_QT_DECLARE_PROPERTY("displayText");
+	PHP_QT_DECLARE_PROPERTY("cursorPosition");
+	PHP_QT_DECLARE_PROPERTY("alignment");
+	PHP_QT_DECLARE_PROPERTY("modified");
+	PHP_QT_DECLARE_PROPERTY("hasSelectedText");
+	PHP_QT_DECLARE_PROPERTY("selectedText");
+	PHP_QT_DECLARE_PROPERTY("dragEnabled");
+	PHP_QT_DECLARE_PROPERTY("readOnly");
+	PHP_QT_DECLARE_PROPERTY("undoAvailable");
+	PHP_QT_DECLARE_PROPERTY("redoAvailable");
+	PHP_QT_DECLARE_PROPERTY("acceptableInput");
+
+}
+static zend_function_entry QMouseEvent_methods[] = {
+	ZEND_ME(QMouseEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,button,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,buttons,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QMouseEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QMouseEvent",QMouseEvent_methods);
+    QMouseEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QMoveEvent_methods[] = {
+	ZEND_ME(QMoveEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMoveEvent,oldPos,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QMoveEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QMoveEvent",QMoveEvent_methods);
+    QMoveEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QObject_methods[] = {
+	ZEND_ME(QObject,objectName,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,isWidgetType,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,signalsBlocked,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,blockSignals,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,thread,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,moveToThread,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,startTimer,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,killTimer,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,children,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,setParent,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,installEventFilter,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,removeEventFilter,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,connect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,disconnect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,disconnect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,dumpObjectTree,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,dumpObjectInfo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,setProperty,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,property,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,setUserData,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,userData,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,parent,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,inherits,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,deleteLater,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QObject,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,connect,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,disconnect,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,registerUserData,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QObject,sender,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QObject,receivers,NULL,ZEND_ACC_PROTECTED)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QObject(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QObject",QObject_methods);
+    QObject_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+	PHP_QT_DECLARE_PROPERTY("objectName");
+
+}
+static zend_function_entry QObjectData_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QObjectData(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QObjectData",QObjectData_methods);
+    QObjectData_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QObjectUserData_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QObjectUserData(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QObjectUserData",QObjectUserData_methods);
+    QObjectUserData_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QPaintEvent_methods[] = {
+	ZEND_ME(QPaintEvent,rect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPaintEvent,region,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QPaintEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QPaintEvent",QPaintEvent_methods);
+    QPaintEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QPainter_methods[] = {
+	ZEND_ME(QPainter,QPainter,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,device,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,begin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,end,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,isActive,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,initFrom,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setCompositionMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,compositionMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,font,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setFont,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fontMetrics,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fontInfo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setPen,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setPen,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setPen,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,pen,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBrush,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBrush,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,brush,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBackgroundMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,backgroundMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,brushOrigin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBrushOrigin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBrushOrigin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBrushOrigin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBackground,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,background,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,clipRegion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,clipPath,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setClipRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setClipRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setClipRegion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setClipPath,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setClipping,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,hasClipping,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,save,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,restore,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setMatrix,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,matrix,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,deviceMatrix,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,resetMatrix,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setMatrixEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,matrixEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,scale,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,shear,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,rotate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,translate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,translate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,translate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,window,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setWindow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setWindow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,viewport,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setViewport,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setViewport,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setViewTransformEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,viewTransformEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,strokePath,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fillPath,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPath,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPoint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPoint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPoint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPoints,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPoints,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPoints,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPoints,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLine,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLine,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLine,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLine,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLines,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLines,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLines,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLines,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRects,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawEllipse,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawEllipse,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolyline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolyline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolyline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolyline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawConvexPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawConvexPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawConvexPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawConvexPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawArc,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawArc,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawArc,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPie,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPie,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPie,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawChord,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawChord,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawChord,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRoundRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRoundRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRoundRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawTiledPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawTiledPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawTiledPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPicture,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPicture,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPicture,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawImage,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawImage,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawImage,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawImage,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawImage,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawImage,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawImage,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setLayoutDirection,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,layoutDirection,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,boundingRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,boundingRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,boundingRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,boundingRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawTextItem,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawTextItem,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawTextItem,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fillRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fillRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fillRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,eraseRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,eraseRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,eraseRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setRenderHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,renderHints,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,paintEngine,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setRedirected,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPainter,redirected,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPainter,restoreRedirected,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QPainter(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QPainter",QPainter_methods);
+    QPainter_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QPushButton_methods[] = {
+	ZEND_ME(QPushButton,QPushButton,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,autoDefault,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,isDefault,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,setMenu,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,menu,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,isFlat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,showMenu,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPushButton,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPushButton,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QPushButton(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QPushButton",QPushButton_methods);
+    QPushButton_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QAbstractButton_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("autoDefault");
+	PHP_QT_DECLARE_PROPERTY("default");
+	PHP_QT_DECLARE_PROPERTY("flat");
+
+}
+static zend_function_entry QResizeEvent_methods[] = {
+	ZEND_ME(QResizeEvent,size,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QResizeEvent,oldSize,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QResizeEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QResizeEvent",QResizeEvent_methods);
+    QResizeEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QShortcutEvent_methods[] = {
+	ZEND_ME(QShortcutEvent,key,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QShortcutEvent,shortcutId,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QShortcutEvent,isAmbiguous,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QShortcutEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QShortcutEvent",QShortcutEvent_methods);
+    QShortcutEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QShowEvent_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QShowEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QShowEvent",QShowEvent_methods);
+    QShowEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QSlider_methods[] = {
+	ZEND_ME(QSlider,QSlider,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSlider,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSlider,minimumSizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSlider,tickPosition,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSlider,tickInterval,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSlider,event,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSlider,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QSlider,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QSlider,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QSlider(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QSlider",QSlider_methods);
+    QSlider_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QAbstractSlider_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("tickPosition");
+	PHP_QT_DECLARE_PROPERTY("tickInterval");
+
+}
+static zend_function_entry QSpacerItem_methods[] = {
+	ZEND_ME(QSpacerItem,changeSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSpacerItem,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSpacerItem,minimumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSpacerItem,maximumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSpacerItem,expandingDirections,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSpacerItem,isEmpty,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSpacerItem,setGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSpacerItem,geometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QSpacerItem,spacerItem,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QSpacerItem(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QSpacerItem",QSpacerItem_methods);
+    QSpacerItem_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QLayoutItem_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QStatusTipEvent_methods[] = {
+	ZEND_ME(QStatusTipEvent,tip,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QStatusTipEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QStatusTipEvent",QStatusTipEvent_methods);
+    QStatusTipEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QString_methods[] = {
+	ZEND_ME(QString,QString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,size,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,count,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,length,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,isEmpty,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,resize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,fill,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,truncate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,chop,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,capacity,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,reserve,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,squeeze,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,unicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,data,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,constData,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,detach,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,isDetached,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,clear,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,at,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,vsprintf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,indexOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,indexOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,lastIndexOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,lastIndexOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,contains,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,contains,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,count,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,count,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,indexOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,lastIndexOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,contains,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,count,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,section,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,section,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,section,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,left,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,right,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,mid,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,startsWith,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,startsWith,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,endsWith,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,endsWith,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,leftJustified,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,rightJustified,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toLower,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toUpper,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,trimmed,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,simplified,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,insert,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,insert,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,insert,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,append,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,append,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,prepend,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,prepend,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,remove,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,remove,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,remove,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,remove,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,split,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,split,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,normalized,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,normalized,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,utf16,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toAscii,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toLatin1,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toUtf8,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toLocal8Bit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setUnicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setUtf16,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,compare,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,localeAwareCompare,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toShort,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toUShort,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toInt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toUInt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toLong,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toULong,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toLongLong,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toULongLong,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toFloat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toDouble,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,prepend,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,prepend,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,append,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,append,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,begin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,constBegin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,end,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,constEnd,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,push_back,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,push_back,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,push_front,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,push_front,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,isNull,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,isSimpleText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,isRightToLeft,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,fromAscii,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,fromLatin1,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,fromUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,fromLocal8Bit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,fromUtf16,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,fromRawData,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,compare,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,localeAwareCompare,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,number,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,number,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,number,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,number,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,number,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QString(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QString",QString_methods);
+    QString_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QTabletEvent_methods[] = {
+	ZEND_ME(QTabletEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,hiResGlobalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,hiResGlobalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,hiResGlobalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,device,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,pointerType,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,uniqueId,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,pressure,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,z,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,tangentialPressure,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,rotation,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,xTilt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,yTilt,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QTabletEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QTabletEvent",QTabletEvent_methods);
+    QTabletEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QTime_methods[] = {
+	ZEND_ME(QTime,isNull,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,isValid,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,hour,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,minute,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,second,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,msec,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,setHMS,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,addSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,secsTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,addMSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,msecsTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,start,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,restart,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,elapsed,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,currentTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QTime(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QTime",QTime_methods);
+    QTime_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QTimer_methods[] = {
+	ZEND_ME(QTimer,QTimer,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,isActive,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,timerId,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,interval,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,isSingleShot,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,start,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,start,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,stop,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTimer,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTimer,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTimer,singleShot,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QTimer(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QTimer",QTimer_methods);
+    QTimer_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QObject_ce_ptr,NULL TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("singleShot");
+	PHP_QT_DECLARE_PROPERTY("interval");
+
+}
+static zend_function_entry QToolBarChangeEvent_methods[] = {
+	ZEND_ME(QToolBarChangeEvent,toggle,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QToolBarChangeEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QToolBarChangeEvent",QToolBarChangeEvent_methods);
+    QToolBarChangeEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QVBoxLayout_methods[] = {
+	ZEND_ME(QVBoxLayout,QVBoxLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QVBoxLayout,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QVBoxLayout,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QVBoxLayout,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QVBoxLayout(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QVBoxLayout",QVBoxLayout_methods);
+    QVBoxLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QBoxLayout_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QWhatsThisClickedEvent_methods[] = {
+	ZEND_ME(QWhatsThisClickedEvent,href,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QWhatsThisClickedEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWhatsThisClickedEvent",QWhatsThisClickedEvent_methods);
+    QWhatsThisClickedEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QWheelEvent_methods[] = {
+	ZEND_ME(QWheelEvent,delta,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,buttons,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,orientation,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QWheelEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWheelEvent",QWheelEvent_methods);
+    QWheelEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QWidget_methods[] = {
+	ZEND_ME(QWidget,QWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,devType,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,winId,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,style,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setStyle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isTopLevel,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isWindow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isModal,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isEnabledTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isEnabledToTLW,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,frameGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,geometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,normalGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,frameSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,width,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,height,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,childrenRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,childrenRegion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,minimumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,maximumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,minimumWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,minimumHeight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,maximumWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,maximumHeight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,sizeIncrement,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,baseSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setFixedSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setFixedSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setFixedWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setFixedHeight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,mapToGlobal,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,mapFromGlobal,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,mapToParent,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,mapFromParent,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,mapTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,mapFrom,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,window,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,topLevelWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,palette,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setBackgroundRole,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,backgroundRole,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setForegroundRole,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,foregroundRole,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,font,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,fontMetrics,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,fontInfo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,cursor,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,unsetCursor,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,hasMouseTracking,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,underMouse,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setMask,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,mask,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,clearMask,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,windowTitle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,windowIcon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,windowIconText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setWindowRole,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,windowRole,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,windowOpacity,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isWindowModified,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,toolTip,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,statusTip,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,whatsThis,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,accessibleName,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,accessibleDescription,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,layoutDirection,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,unsetLayoutDirection,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isRightToLeft,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isLeftToRight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isActiveWindow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,activateWindow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,clearFocus,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,focusPolicy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,hasFocus,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setFocusProxy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,focusProxy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,contextMenuPolicy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,grabMouse,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,grabMouse,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,releaseMouse,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,grabKeyboard,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,releaseKeyboard,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,grabShortcut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,releaseShortcut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setShortcutEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,updatesEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,update,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,update,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,repaint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,repaint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,stackUnder,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,adjustSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isVisible,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isVisibleTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isHidden,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isMinimized,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isMaximized,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isFullScreen,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,windowState,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setWindowState,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,overrideWindowState,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,sizePolicy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,visibleRegion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setContentsMargins,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,getContentsMargins,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,contentsRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,layout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,updateGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setParent,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setParent,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,scroll,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,scroll,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,focusWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,nextInFocusChain,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,acceptDrops,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,addAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,insertAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,removeAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,parentWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setWindowFlags,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,windowFlags,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,overrideWindowFlags,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,windowType,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,childAt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,childAt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,handle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setAttribute,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,testAttribute,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,paintEngine,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,ensurePolished,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,inputContext,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setInputContext,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,isAncestorOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setDisabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,update,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,repaint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setHidden,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,show,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,hide,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,setShown,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,showMinimized,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,showMaximized,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,showFullScreen,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,showNormal,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,close,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,raise,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,lower,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidget,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QWidget,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QWidget,setTabOrder,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QWidget,mouseGrabber,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QWidget,keyboardGrabber,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QWidget,find,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QWidget,event,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QWidget,metric,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QWidget,resetInputContext,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QWidget,updateMicroFocus,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QWidget,create,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QWidget,destroy,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QWidget,focusNextChild,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QWidget,focusPreviousChild,NULL,ZEND_ACC_PROTECTED)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QWidget(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWidget",QWidget_methods);
+    QWidget_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QObject_ce_ptr,NULL TSRMLS_CC);
+	zend_do_inheritance(QWidget_ce_ptr, QPaintDevice_ce_ptr TSRMLS_CC);
+
+	PHP_QT_DECLARE_PROPERTY("modal");
+	PHP_QT_DECLARE_PROPERTY("enabled");
+	PHP_QT_DECLARE_PROPERTY("geometry");
+	PHP_QT_DECLARE_PROPERTY("frameGeometry");
+	PHP_QT_DECLARE_PROPERTY("normalGeometry");
+	PHP_QT_DECLARE_PROPERTY("x");
+	PHP_QT_DECLARE_PROPERTY("y");
+	PHP_QT_DECLARE_PROPERTY("pos");
+	PHP_QT_DECLARE_PROPERTY("frameSize");
+	PHP_QT_DECLARE_PROPERTY("size");
+	PHP_QT_DECLARE_PROPERTY("width");
+	PHP_QT_DECLARE_PROPERTY("height");
+	PHP_QT_DECLARE_PROPERTY("rect");
+	PHP_QT_DECLARE_PROPERTY("childrenRect");
+	PHP_QT_DECLARE_PROPERTY("childrenRegion");
+	PHP_QT_DECLARE_PROPERTY("sizePolicy");
+	PHP_QT_DECLARE_PROPERTY("minimumSize");
+	PHP_QT_DECLARE_PROPERTY("maximumSize");
+	PHP_QT_DECLARE_PROPERTY("minimumWidth");
+	PHP_QT_DECLARE_PROPERTY("minimumHeight");
+	PHP_QT_DECLARE_PROPERTY("maximumWidth");
+	PHP_QT_DECLARE_PROPERTY("maximumHeight");
+	PHP_QT_DECLARE_PROPERTY("sizeIncrement");
+	PHP_QT_DECLARE_PROPERTY("baseSize");
+	PHP_QT_DECLARE_PROPERTY("palette");
+	PHP_QT_DECLARE_PROPERTY("font");
+	PHP_QT_DECLARE_PROPERTY("cursor");
+	PHP_QT_DECLARE_PROPERTY("mouseTracking");
+	PHP_QT_DECLARE_PROPERTY("isActiveWindow");
+	PHP_QT_DECLARE_PROPERTY("focusPolicy");
+	PHP_QT_DECLARE_PROPERTY("focus");
+	PHP_QT_DECLARE_PROPERTY("contextMenuPolicy");
+	PHP_QT_DECLARE_PROPERTY("updatesEnabled");
+	PHP_QT_DECLARE_PROPERTY("visible");
+	PHP_QT_DECLARE_PROPERTY("minimized");
+	PHP_QT_DECLARE_PROPERTY("maximized");
+	PHP_QT_DECLARE_PROPERTY("fullScreen");
+	PHP_QT_DECLARE_PROPERTY("sizeHint");
+	PHP_QT_DECLARE_PROPERTY("minimumSizeHint");
+	PHP_QT_DECLARE_PROPERTY("acceptDrops");
+	PHP_QT_DECLARE_PROPERTY("windowTitle");
+	PHP_QT_DECLARE_PROPERTY("windowIcon");
+	PHP_QT_DECLARE_PROPERTY("windowIconText");
+	PHP_QT_DECLARE_PROPERTY("windowOpacity");
+	PHP_QT_DECLARE_PROPERTY("windowModified");
+	PHP_QT_DECLARE_PROPERTY("toolTip");
+	PHP_QT_DECLARE_PROPERTY("statusTip");
+	PHP_QT_DECLARE_PROPERTY("whatsThis");
+	PHP_QT_DECLARE_PROPERTY("accessibleName");
+	PHP_QT_DECLARE_PROPERTY("accessibleDescription");
+	PHP_QT_DECLARE_PROPERTY("layoutDirection");
+
+}
+static zend_function_entry QWidgetData_methods[] = {
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QWidgetData(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWidgetData",QWidgetData_methods);
+    QWidgetData_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QWidgetItem_methods[] = {
+	ZEND_ME(QWidgetItem,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,minimumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,maximumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,expandingDirections,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,isEmpty,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,setGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,geometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,hasHeightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,heightForWidth,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QWidgetItem(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWidgetItem",QWidgetItem_methods);
+    QWidgetItem_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QLayoutItem_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QWindowStateChangeEvent_methods[] = {
+	ZEND_ME(QWindowStateChangeEvent,oldState,NULL,ZEND_ACC_PUBLIC)
+
+	{NULL,NULL,NULL}
+};
+
+void _register_QWindowStateChangeEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWindowStateChangeEvent",QWindowStateChangeEvent_methods);
+    QWindowStateChangeEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+

Added: trunk/playground/php_qt.snippets2.cpp
===================================================================
--- trunk/playground/php_qt.snippets2.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/php_qt.snippets2.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,379 @@
+
+
+	_register_QAbstractButton(TSRMLS_C);
+
+	_register_QAbstractSlider(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERNOACTION", QAbstractSlider::SliderNoAction, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERSINGLESTEPADD", QAbstractSlider::SliderSingleStepAdd, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERSINGLESTEPSUB", QAbstractSlider::SliderSingleStepSub, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERPAGESTEPADD", QAbstractSlider::SliderPageStepAdd, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERPAGESTEPSUB", QAbstractSlider::SliderPageStepSub, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERTOMINIMUM", QAbstractSlider::SliderToMinimum, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERTOMAXIMUM", QAbstractSlider::SliderToMaximum, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERMOVE", QAbstractSlider::SliderMove, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERCHANGE_SLIDERRANGECHANGE", QAbstractSlider::SliderRangeChange, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERCHANGE_SLIDERORIENTATIONCHANGE", QAbstractSlider::SliderOrientationChange, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERCHANGE_SLIDERSTEPSCHANGE", QAbstractSlider::SliderStepsChange, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERCHANGE_SLIDERVALUECHANGE", QAbstractSlider::SliderValueChange, CONST_CS | CONST_PERSISTENT);
+
+	_register_QActionEvent(TSRMLS_C);
+
+	_register_QApplication(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_TTY", QApplication::Tty, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_GUICLIENT", QApplication::GuiClient, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_GUISERVER", QApplication::GuiServer, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QAPPLICATION_COLORSPEC_NORMALCOLOR", QApplication::NormalColor, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QAPPLICATION_COLORSPEC_CUSTOMCOLOR", QApplication::CustomColor, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QAPPLICATION_COLORSPEC_MANYCOLOR", QApplication::ManyColor, CONST_CS | CONST_PERSISTENT);
+
+	_register_QBoxLayout(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_LEFTTORIGHT", QBoxLayout::LeftToRight, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_RIGHTTOLEFT", QBoxLayout::RightToLeft, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_TOPTOBOTTOM", QBoxLayout::TopToBottom, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_BOTTOMTOTOP", QBoxLayout::BottomToTop, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_DOWN", QBoxLayout::Down, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_UP", QBoxLayout::Up, CONST_CS | CONST_PERSISTENT);
+
+	_register_QChar(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_NULL", QChar::Null, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_NBSP", QChar::Nbsp, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_REPLACEMENTCHARACTER", QChar::ReplacementCharacter, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_OBJECTREPLACEMENTCHARACTER", QChar::ObjectReplacementCharacter, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_BYTEORDERMARK", QChar::ByteOrderMark, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_BYTEORDERSWAPPED", QChar::ByteOrderSwapped, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_PARAGRAPHSEPARATOR", QChar::ParagraphSeparator, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_LINESEPARATOR", QChar::LineSeparator, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_NOCATEGORY", QChar::NoCategory, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_MARK_NONSPACING", QChar::Mark_NonSpacing, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_MARK_SPACINGCOMBINING", QChar::Mark_SpacingCombining, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_MARK_ENCLOSING", QChar::Mark_Enclosing, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_NUMBER_DECIMALDIGIT", QChar::Number_DecimalDigit, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_NUMBER_LETTER", QChar::Number_Letter, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_NUMBER_OTHER", QChar::Number_Other, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SEPARATOR_SPACE", QChar::Separator_Space, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SEPARATOR_LINE", QChar::Separator_Line, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SEPARATOR_PARAGRAPH", QChar::Separator_Paragraph, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_CONTROL", QChar::Other_Control, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_FORMAT", QChar::Other_Format, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_SURROGATE", QChar::Other_Surrogate, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_PRIVATEUSE", QChar::Other_PrivateUse, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_NOTASSIGNED", QChar::Other_NotAssigned, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_UPPERCASE", QChar::Letter_Uppercase, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_LOWERCASE", QChar::Letter_Lowercase, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_TITLECASE", QChar::Letter_Titlecase, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_MODIFIER", QChar::Letter_Modifier, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_OTHER", QChar::Letter_Other, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_CONNECTOR", QChar::Punctuation_Connector, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_DASH", QChar::Punctuation_Dash, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_OPEN", QChar::Punctuation_Open, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_CLOSE", QChar::Punctuation_Close, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_INITIALQUOTE", QChar::Punctuation_InitialQuote, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_FINALQUOTE", QChar::Punctuation_FinalQuote, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_OTHER", QChar::Punctuation_Other, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SYMBOL_MATH", QChar::Symbol_Math, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SYMBOL_CURRENCY", QChar::Symbol_Currency, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SYMBOL_MODIFIER", QChar::Symbol_Modifier, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SYMBOL_OTHER", QChar::Symbol_Other, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_DASK", QChar::Punctuation_Dask, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRL", QChar::DirL, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRR", QChar::DirR, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIREN", QChar::DirEN, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRES", QChar::DirES, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRET", QChar::DirET, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRAN", QChar::DirAN, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRCS", QChar::DirCS, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRB", QChar::DirB, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRS", QChar::DirS, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRWS", QChar::DirWS, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRON", QChar::DirON, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRLRE", QChar::DirLRE, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRLRO", QChar::DirLRO, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRAL", QChar::DirAL, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRRLE", QChar::DirRLE, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRRLO", QChar::DirRLO, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRPDF", QChar::DirPDF, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRNSM", QChar::DirNSM, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRBN", QChar::DirBN, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_NODECOMPOSITION", QChar::NoDecomposition, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_CANONICAL", QChar::Canonical, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_FONT", QChar::Font, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_NOBREAK", QChar::NoBreak, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_INITIAL", QChar::Initial, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_MEDIAL", QChar::Medial, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_FINAL", QChar::Final, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_ISOLATED", QChar::Isolated, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_CIRCLE", QChar::Circle, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_SUPER", QChar::Super, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_SUB", QChar::Sub, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_VERTICAL", QChar::Vertical, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_WIDE", QChar::Wide, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_NARROW", QChar::Narrow, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_SMALL", QChar::Small, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_SQUARE", QChar::Square, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_COMPAT", QChar::Compat, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_FRACTION", QChar::Fraction, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_JOINING_OTHERJOINING", QChar::OtherJoining, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_JOINING_DUAL", QChar::Dual, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_JOINING_RIGHT", QChar::Right, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_JOINING_CENTER", QChar::Center, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWLEFTATTACHED", QChar::Combining_BelowLeftAttached, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWATTACHED", QChar::Combining_BelowAttached, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWRIGHTATTACHED", QChar::Combining_BelowRightAttached, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_LEFTATTACHED", QChar::Combining_LeftAttached, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_RIGHTATTACHED", QChar::Combining_RightAttached, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVELEFTATTACHED", QChar::Combining_AboveLeftAttached, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVEATTACHED", QChar::Combining_AboveAttached, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVERIGHTATTACHED", QChar::Combining_AboveRightAttached, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWLEFT", QChar::Combining_BelowLeft, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOW", QChar::Combining_Below, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWRIGHT", QChar::Combining_BelowRight, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_LEFT", QChar::Combining_Left, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_RIGHT", QChar::Combining_Right, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVELEFT", QChar::Combining_AboveLeft, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVE", QChar::Combining_Above, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVERIGHT", QChar::Combining_AboveRight, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_DOUBLEBELOW", QChar::Combining_DoubleBelow, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_DOUBLEABOVE", QChar::Combining_DoubleAbove, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_IOTASUBSCRIPT", QChar::Combining_IotaSubscript, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_UNASSIGNED", QChar::Unicode_Unassigned, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_1_1", QChar::Unicode_1_1, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_2_0", QChar::Unicode_2_0, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_2_1_2", QChar::Unicode_2_1_2, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_3_0", QChar::Unicode_3_0, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_3_1", QChar::Unicode_3_1, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_3_2", QChar::Unicode_3_2, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_4_0", QChar::Unicode_4_0, CONST_CS | CONST_PERSISTENT);
+
+	_register_QCharRef(TSRMLS_C);
+
+	_register_QClipboardEvent(TSRMLS_C);
+
+	_register_QCloseEvent(TSRMLS_C);
+
+	_register_QContextMenuEvent(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QCONTEXTMENUEVENT_REASON_MOUSE", QContextMenuEvent::Mouse, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCONTEXTMENUEVENT_REASON_KEYBOARD", QContextMenuEvent::Keyboard, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCONTEXTMENUEVENT_REASON_OTHER", QContextMenuEvent::Other, CONST_CS | CONST_PERSISTENT);
+
+	_register_QCoreApplication(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QCOREAPPLICATION_ENCODING_DEFAULTCODEC", QCoreApplication::DefaultCodec, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QCOREAPPLICATION_ENCODING_UNICODEUTF8", QCoreApplication::UnicodeUTF8, CONST_CS | CONST_PERSISTENT);
+
+	_register_QDate(TSRMLS_C);
+
+	_register_QDateTime(TSRMLS_C);
+
+	_register_QDragEnterEvent(TSRMLS_C);
+
+	_register_QDragLeaveEvent(TSRMLS_C);
+
+	_register_QDragMoveEvent(TSRMLS_C);
+
+	_register_QDragResponseEvent(TSRMLS_C);
+
+	_register_QDropEvent(TSRMLS_C);
+
+	_register_QFileOpenEvent(TSRMLS_C);
+
+	_register_QFocusEvent(TSRMLS_C);
+
+	_register_QFont(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_HELVETICA", QFont::Helvetica, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_SANSSERIF", QFont::SansSerif, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_TIMES", QFont::Times, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_SERIF", QFont::Serif, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_COURIER", QFont::Courier, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_TYPEWRITER", QFont::TypeWriter, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_OLDENGLISH", QFont::OldEnglish, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_DECORATIVE", QFont::Decorative, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_SYSTEM", QFont::System, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_ANYSTYLE", QFont::AnyStyle, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERDEFAULT", QFont::PreferDefault, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERBITMAP", QFont::PreferBitmap, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERDEVICE", QFont::PreferDevice, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFEROUTLINE", QFont::PreferOutline, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_FORCEOUTLINE", QFont::ForceOutline, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERMATCH", QFont::PreferMatch, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERQUALITY", QFont::PreferQuality, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERANTIALIAS", QFont::PreferAntialias, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_NOANTIALIAS", QFont::NoAntialias, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_OPENGLCOMPATIBLE", QFont::OpenGLCompatible, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_WEIGHT_LIGHT", QFont::Light, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_WEIGHT_NORMAL", QFont::Normal, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_WEIGHT_DEMIBOLD", QFont::DemiBold, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_WEIGHT_BOLD", QFont::Bold, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_WEIGHT_BLACK", QFont::Black, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLE_STYLENORMAL", QFont::StyleNormal, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLE_STYLEITALIC", QFont::StyleItalic, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STYLE_STYLEOBLIQUE", QFont::StyleOblique, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STRETCH_ULTRACONDENSED", QFont::UltraCondensed, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STRETCH_EXTRACONDENSED", QFont::ExtraCondensed, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STRETCH_CONDENSED", QFont::Condensed, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STRETCH_SEMICONDENSED", QFont::SemiCondensed, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STRETCH_UNSTRETCHED", QFont::Unstretched, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STRETCH_SEMIEXPANDED", QFont::SemiExpanded, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STRETCH_EXPANDED", QFont::Expanded, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STRETCH_EXTRAEXPANDED", QFont::ExtraExpanded, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFONT_STRETCH_ULTRAEXPANDED", QFont::UltraExpanded, CONST_CS | CONST_PERSISTENT);
+
+	_register_QFrame(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QFRAME_SHAPE_NOFRAME", QFrame::NoFrame, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME_SHAPE_BOX", QFrame::Box, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME_SHAPE_PANEL", QFrame::Panel, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME_SHAPE_WINPANEL", QFrame::WinPanel, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME_SHAPE_HLINE", QFrame::HLine, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME_SHAPE_VLINE", QFrame::VLine, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME_SHAPE_STYLEDPANEL", QFrame::StyledPanel, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME_SHADOW_PLAIN", QFrame::Plain, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME_SHADOW_RAISED", QFrame::Raised, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME_SHADOW_SUNKEN", QFrame::Sunken, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME__SHADOW_MASK", QFrame::Shadow_Mask, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QFRAME__SHAPE_MASK", QFrame::Shape_Mask, CONST_CS | CONST_PERSISTENT);
+
+	_register_QGridLayout(TSRMLS_C);
+
+	_register_QHBoxLayout(TSRMLS_C);
+
+	_register_QHelpEvent(TSRMLS_C);
+
+	_register_QHideEvent(TSRMLS_C);
+
+	_register_QHoverEvent(TSRMLS_C);
+
+	_register_QIconDragEvent(TSRMLS_C);
+
+	_register_QInputEvent(TSRMLS_C);
+
+	_register_QInputMethodEvent(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QINPUTMETHODEVENT_ATTRIBUTETYPE_TEXTFORMAT", QInputMethodEvent::TextFormat, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QINPUTMETHODEVENT_ATTRIBUTETYPE_CURSOR", QInputMethodEvent::Cursor, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QINPUTMETHODEVENT_ATTRIBUTETYPE_LANGUAGE", QInputMethodEvent::Language, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QINPUTMETHODEVENT_ATTRIBUTETYPE_RUBY", QInputMethodEvent::Ruby, CONST_CS | CONST_PERSISTENT);
+
+	_register_Attribute(TSRMLS_C);
+
+	_register_QKeyEvent(TSRMLS_C);
+
+	_register_QLCDNumber(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_HEX", QLCDNumber::Hex, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_DEC", QLCDNumber::Dec, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_OCT", QLCDNumber::Oct, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_BIN", QLCDNumber::Bin, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_OUTLINE", QLCDNumber::Outline, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_FILLED", QLCDNumber::Filled, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_FLAT", QLCDNumber::Flat, CONST_CS | CONST_PERSISTENT);
+
+	_register_QLabel(TSRMLS_C);
+
+	_register_QLatin1Char(TSRMLS_C);
+
+	_register_QLatin1String(TSRMLS_C);
+
+	_register_QLayout(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETDEFAULTCONSTRAINT", QLayout::SetDefaultConstraint, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETNOCONSTRAINT", QLayout::SetNoConstraint, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETMINIMUMSIZE", QLayout::SetMinimumSize, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETFIXEDSIZE", QLayout::SetFixedSize, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETMAXIMUMSIZE", QLayout::SetMaximumSize, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETMINANDMAXSIZE", QLayout::SetMinAndMaxSize, CONST_CS | CONST_PERSISTENT);
+
+	_register_QLayoutItem(TSRMLS_C);
+
+	_register_QLineEdit(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QLINEEDIT_ECHOMODE_NORMAL", QLineEdit::Normal, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLINEEDIT_ECHOMODE_NOECHO", QLineEdit::NoEcho, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QLINEEDIT_ECHOMODE_PASSWORD", QLineEdit::Password, CONST_CS | CONST_PERSISTENT);
+
+	_register_QMouseEvent(TSRMLS_C);
+
+	_register_QMoveEvent(TSRMLS_C);
+
+	_register_QObject(TSRMLS_C);
+
+	_register_QObjectData(TSRMLS_C);
+
+	_register_QObjectUserData(TSRMLS_C);
+
+	_register_QPaintEvent(TSRMLS_C);
+
+	_register_QPainter(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QPAINTER_RENDERHINT_ANTIALIASING", QPainter::Antialiasing, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_RENDERHINT_TEXTANTIALIASING", QPainter::TextAntialiasing, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_RENDERHINT_SMOOTHPIXMAPTRANSFORM", QPainter::SmoothPixmapTransform, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_SOURCEOVER", QPainter::CompositionMode_SourceOver, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_DESTINATIONOVER", QPainter::CompositionMode_DestinationOver, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_CLEAR", QPainter::CompositionMode_Clear, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_SOURCE", QPainter::CompositionMode_Source, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_DESTINATION", QPainter::CompositionMode_Destination, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_SOURCEIN", QPainter::CompositionMode_SourceIn, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_DESTINATIONIN", QPainter::CompositionMode_DestinationIn, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_SOURCEOUT", QPainter::CompositionMode_SourceOut, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_DESTINATIONOUT", QPainter::CompositionMode_DestinationOut, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_SOURCEATOP", QPainter::CompositionMode_SourceAtop, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_DESTINATIONATOP", QPainter::CompositionMode_DestinationAtop, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QPAINTER_COMPOSITIONMODE_COMPOSITIONMODE_XOR", QPainter::CompositionMode_Xor, CONST_CS | CONST_PERSISTENT);
+
+	_register_QPushButton(TSRMLS_C);
+
+	_register_QResizeEvent(TSRMLS_C);
+
+	_register_QShortcutEvent(TSRMLS_C);
+
+	_register_QShowEvent(TSRMLS_C);
+
+	_register_QSlider(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_NOTICKS", QSlider::NoTicks, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSABOVE", QSlider::TicksAbove, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSLEFT", QSlider::TicksLeft, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSBELOW", QSlider::TicksBelow, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSRIGHT", QSlider::TicksRight, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSBOTHSIDES", QSlider::TicksBothSides, CONST_CS | CONST_PERSISTENT);
+
+	_register_QSpacerItem(TSRMLS_C);
+
+	_register_QStatusTipEvent(TSRMLS_C);
+
+	_register_QString(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONDEFAULT", QString::SectionDefault, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONSKIPEMPTY", QString::SectionSkipEmpty, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONINCLUDELEADINGSEP", QString::SectionIncludeLeadingSep, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONINCLUDETRAILINGSEP", QString::SectionIncludeTrailingSep, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONCASEINSENSITIVESEPS", QString::SectionCaseInsensitiveSeps, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_SPLITBEHAVIOR_KEEPEMPTYPARTS", QString::KeepEmptyParts, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_SPLITBEHAVIOR_SKIPEMPTYPARTS", QString::SkipEmptyParts, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_D", QString::NormalizationForm_D, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_C", QString::NormalizationForm_C, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_KD", QString::NormalizationForm_KD, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_KC", QString::NormalizationForm_KC, CONST_CS | CONST_PERSISTENT);
+
+	_register_QTabletEvent(TSRMLS_C);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_TABLETDEVICE_NODEVICE", QTabletEvent::NoDevice, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_TABLETDEVICE_PUCK", QTabletEvent::Puck, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_TABLETDEVICE_STYLUS", QTabletEvent::Stylus, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_TABLETDEVICE_AIRBRUSH", QTabletEvent::Airbrush, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_TABLETDEVICE_FOURDMOUSE", QTabletEvent::FourDMouse, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_TABLETDEVICE_XFREEERASER", QTabletEvent::XFreeEraser, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_POINTERTYPE_UNKNOWNPOINTER", QTabletEvent::UnknownPointer, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_POINTERTYPE_PEN", QTabletEvent::Pen, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_POINTERTYPE_CURSOR", QTabletEvent::Cursor, CONST_CS | CONST_PERSISTENT);
+		REGISTER_LONG_CONSTANT("QTABLETEVENT_POINTERTYPE_ERASER", QTabletEvent::Eraser, CONST_CS | CONST_PERSISTENT);
+
+	_register_QTime(TSRMLS_C);
+
+	_register_QTimer(TSRMLS_C);
+
+	_register_QToolBarChangeEvent(TSRMLS_C);
+
+	_register_QVBoxLayout(TSRMLS_C);
+
+	_register_QWhatsThisClickedEvent(TSRMLS_C);
+
+	_register_QWheelEvent(TSRMLS_C);
+
+	_register_QWidget(TSRMLS_C);
+
+	_register_QWidgetData(TSRMLS_C);
+
+	_register_QWidgetItem(TSRMLS_C);
+
+	_register_QWindowStateChangeEvent(TSRMLS_C);

Added: trunk/playground/qabstractbutton.cpp
===================================================================
--- trunk/playground/qabstractbutton.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qabstractbutton.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,765 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QAbstractButton.cpp - QAbstractButton PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QAbstractButton>
+
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QAbstractButton, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QAbstractButton, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QAbstractButton, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractButton, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractButton, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractButton, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  QAbstractButton
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QAbstractButton, QAbstractButton){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		RETURN_~(o->QAbstractButton());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  setText
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, setText){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"text",strlen("text"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  text
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QAbstractButton, text){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		QString obj = (QString) o->text();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  setIcon
+ *    flags:    
+ *
+ *    @param   const QIcon&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, setIcon){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"icon",strlen("icon"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  icon
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QIcon
+*********************************/
+ZEND_METHOD(QAbstractButton, icon){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  iconSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QAbstractButton, iconSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->iconSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  setShortcut
+ *    flags:    
+ *
+ *    @param   const QKeySequence&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, setShortcut){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"shortcut",strlen("shortcut"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  shortcut
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QKeySequence
+*********************************/
+ZEND_METHOD(QAbstractButton, shortcut){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		QKeySequence obj = (QKeySequence) o->shortcut();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  setCheckable
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, setCheckable){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"checkable",strlen("checkable"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  isCheckable
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractButton, isCheckable){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isCheckable());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  isChecked
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractButton, isChecked){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isChecked());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  setDown
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, setDown){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"down",strlen("down"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  isDown
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractButton, isDown){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isDown());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  setAutoRepeat
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, setAutoRepeat){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"autoRepeat",strlen("autoRepeat"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  autoRepeat
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractButton, autoRepeat){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		RETURN_BOOL(o->autoRepeat());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  setAutoExclusive
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, setAutoExclusive){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"autoExclusive",strlen("autoExclusive"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  autoExclusive
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractButton, autoExclusive){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		RETURN_BOOL(o->autoExclusive());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  group
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QButtonGroup *
+*********************************/
+ZEND_METHOD(QAbstractButton, group){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		QButtonGroup * obj = (QButtonGroup *) o->group();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  setIconSize
+ *    flags:    l
+ *
+ *    @param   const QSize&
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, setIconSize){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"iconSize",strlen("iconSize"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  animateClick
+ *    flags:    l
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, animateClick){
+	if (ZEND_NUM_ARGS() == 1){
+	// 100
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		o->animateClick((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  click
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, click){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		o->click();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  toggle
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, toggle){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		o->toggle();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  setChecked
+ *    flags:    l
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractButton, setChecked){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"checked",strlen("checked"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QAbstractButton, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QAbstractButton, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractButton
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QAbstractButton, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QAbstractButton,__construct){
+
+	QAbstractButton *QAbstractButton_ptr = new QAbstractButton();
+
+	PHP_QT_REGISTER(QAbstractButton_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QAbstractButton);
+

Added: trunk/playground/qabstractslider.cpp
===================================================================
--- trunk/playground/qabstractslider.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qabstractslider.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,910 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QAbstractSlider.cpp - QAbstractSlider PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QAbstractSlider>
+
+
+
+/*		public enumSliderAction:long {
+			SliderAction = 0,
+			SliderAction = 1,
+			SliderAction = 2,
+			SliderAction = 3,
+			SliderAction = 4,
+			SliderAction = 5,
+			SliderAction = 6,
+			SliderAction = 7
+		}
+*/
+
+/*		protected enumSliderChange:long {
+			SliderChange = 0,
+			SliderChange = 1,
+			SliderChange = 2,
+			SliderChange = 3
+		}
+*/
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QAbstractSlider, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QAbstractSlider, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QAbstractSlider, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractSlider, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractSlider, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractSlider, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  QAbstractSlider
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QAbstractSlider, QAbstractSlider){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_~(o->QAbstractSlider());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  orientation
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Orientation
+*********************************/
+ZEND_METHOD(QAbstractSlider, orientation){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_LONG(o->orientation());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setMinimum
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setMinimum){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"minimum",strlen("minimum"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  minimum
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QAbstractSlider, minimum){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_LONG(o->minimum());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setMaximum
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setMaximum){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"maximum",strlen("maximum"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  maximum
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QAbstractSlider, maximum){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_LONG(o->maximum());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setRange
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setRange){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		o->setRange((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setSingleStep
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setSingleStep){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"singleStep",strlen("singleStep"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  singleStep
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QAbstractSlider, singleStep){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_LONG(o->singleStep());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setPageStep
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setPageStep){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"pageStep",strlen("pageStep"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  pageStep
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QAbstractSlider, pageStep){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_LONG(o->pageStep());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setTracking
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setTracking){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"tracking",strlen("tracking"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  hasTracking
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractSlider, hasTracking){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasTracking());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setSliderDown
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setSliderDown){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"sliderDown",strlen("sliderDown"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  isSliderDown
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractSlider, isSliderDown){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isSliderDown());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setSliderPosition
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setSliderPosition){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"sliderPosition",strlen("sliderPosition"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  sliderPosition
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QAbstractSlider, sliderPosition){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_LONG(o->sliderPosition());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setInvertedAppearance
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setInvertedAppearance){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"invertedAppearance",strlen("invertedAppearance"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  invertedAppearance
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractSlider, invertedAppearance){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_BOOL(o->invertedAppearance());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setInvertedControls
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setInvertedControls){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"invertedControls",strlen("invertedControls"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  invertedControls
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QAbstractSlider, invertedControls){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_BOOL(o->invertedControls());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  value
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QAbstractSlider, value){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		RETURN_LONG(o->value());
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  triggerAction
+ *    flags:    
+ *
+ *    @param   SliderAction
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, triggerAction){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		o->triggerAction( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setValue
+ *    flags:    l
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setValue){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"value",strlen("value"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setOrientation
+ *    flags:    l
+ *
+ *    @param   Qt::Orientation
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setOrientation){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"orientation",strlen("orientation"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QAbstractSlider, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QAbstractSlider_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QAbstractSlider, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"invertedControls",strlen("invertedControls"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QAbstractSlider, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QAbstractSlider_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  setRepeatAction
+ *    flags:    
+ *
+ *    @param   SliderAction
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, setRepeatAction){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 500
+		long var_1;
+	// 50
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+		o->setRepeatAction( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  repeatAction
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   protected
+ *    @return   SliderAction
+*********************************/
+ZEND_METHOD(QAbstractSlider, repeatAction){
+	if (ZEND_NUM_ARGS() == 0){
+		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QAbstractSlider
+ *    function  sliderChange
+ *    flags:    v
+ *
+ *    @param   SliderChange
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QAbstractSlider, sliderChange){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+
+	}
+}
+
+
+ZEND_METHOD(QAbstractSlider,__construct){
+
+	QAbstractSlider *QAbstractSlider_ptr = new QAbstractSlider();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QAbstractSlider_ptr = new QAbstractSlider(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* dd QAbstractSliderPrivate&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QAbstractSliderPrivate& tmp(Z_STRVAL_P(param_0));
+			QAbstractSlider_ptr = new QAbstractSlider(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_1));
+			QAbstractSlider_ptr = new QAbstractSlider(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QAbstractSlider_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QAbstractSlider);
+

Added: trunk/playground/qactionevent.cpp
===================================================================
--- trunk/playground/qactionevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qactionevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,118 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QActionEvent.cpp - QActionEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QActionEvent>
+
+
+
+/*********************************
+ *    class     QActionEvent
+ *    function  action
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QAction *
+*********************************/
+ZEND_METHOD(QActionEvent, action){
+	if (ZEND_NUM_ARGS() == 0){
+		QActionEvent *o = (QActionEvent*) PHP_QT_FETCH();
+		QAction * obj = (QAction *) o->action();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QActionEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QActionEvent
+ *    function  before
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QAction *
+*********************************/
+ZEND_METHOD(QActionEvent, before){
+	if (ZEND_NUM_ARGS() == 0){
+		QActionEvent *o = (QActionEvent*) PHP_QT_FETCH();
+		QAction * obj = (QAction *) o->before();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QActionEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QActionEvent,__construct){
+
+	QActionEvent *QActionEvent_ptr = new QActionEvent();
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*long type int*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_0));
+			QActionEvent_ptr = new QActionEvent(tmp);
+		}
+		 /*zval* action QAction**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QAction* tmp(Z_STRVAL_P(param_1));
+			QActionEvent_ptr = new QActionEvent(tmp);
+		}
+		 /*zval* before QAction**/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			QAction* tmp(Z_STRVAL_P(param_2));
+			QActionEvent_ptr = new QActionEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QActionEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QActionEvent);
+

Added: trunk/playground/qapplication.cpp
===================================================================
--- trunk/playground/qapplication.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qapplication.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,2003 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QApplication.cpp - QApplication PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QApplication>
+
+
+
+/*		public enumType:long {
+			Type = 0,
+			Type = 1,
+			Type = 2
+		}
+*/
+
+/*		public enumColorSpec:long {
+			NormalColor = 0,
+			CustomColor = 1,
+			ManyColor = 2
+		}
+*/
+
+/*********************************
+ *    class     QApplication
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QApplication, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QApplication, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QApplication, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  QApplication
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QApplication, QApplication){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  isSessionRestored
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, isSessionRestored){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isSessionRestored());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  sessionId
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QApplication, sessionId){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->sessionId();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  sessionKey
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QApplication, sessionKey){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->sessionKey();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  commitData
+ *    flags:    v
+ *
+ *    @param   QSessionManager&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, commitData){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  saveState
+ *    flags:    v
+ *
+ *    @param   QSessionManager&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, saveState){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setInputContext
+ *    flags:    
+ *
+ *    @param   QInputContext*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setInputContext){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setInputContext( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  inputContext
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QInputContext *
+*********************************/
+ZEND_METHOD(QApplication, inputContext){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QInputContext * obj = (QInputContext *) o->inputContext();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  notify
+ *    flags:    
+ *
+ *    @param   QObject*
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, notify){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->notify( tmp_var_0,  tmp_var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QApplication, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QApplication, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"globalStrut",strlen("globalStrut"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QApplication, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  type
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Type
+*********************************/
+ZEND_METHOD(QApplication, type){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->type());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  style
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QStyle *
+*********************************/
+ZEND_METHOD(QApplication, style){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QStyle * obj = (QStyle *) o->style();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setStyle
+ *    flags:    s
+ *
+ *    @param   QStyle*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setStyle){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setStyle( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: setStyle
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QStyle * obj = (QStyle *) o->setStyle( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  colorSpec
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QApplication, colorSpec){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->colorSpec());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setColorSpec
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setColorSpec){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setColorSpec((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  overrideCursor
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QCursor *
+*********************************/
+ZEND_METHOD(QApplication, overrideCursor){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QCursor * obj = (QCursor *) o->overrideCursor();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setOverrideCursor
+ *    flags:    s
+ *
+ *    @param   const QCursor&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setOverrideCursor){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setOverrideCursor( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  changeOverrideCursor
+ *    flags:    s
+ *
+ *    @param   const QCursor&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, changeOverrideCursor){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->changeOverrideCursor( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  restoreOverrideCursor
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, restoreOverrideCursor){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->restoreOverrideCursor();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  palette
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPalette
+*********************************/
+ZEND_METHOD(QApplication, palette){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QPalette obj = (QPalette) o->palette();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: palette
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QPalette obj = (QPalette) o->palette( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: palette
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QPalette obj = (QPalette) o->palette( var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setPalette
+ *    flags:    s
+ *
+ *    @param   const QPalette&
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setPalette){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os", &var_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setPalette( tmp_var_0,  var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  font
+ *    flags:    s
+ *
+ *    @param   const QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QFont
+*********************************/
+ZEND_METHOD(QApplication, font){
+	if (ZEND_NUM_ARGS() == 1){
+	// 0
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QFont obj = (QFont) o->font( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setFont
+ *    flags:    s
+ *
+ *    @param   const QFont&
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setFont){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os", &var_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setFont( tmp_var_0,  var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  fontMetrics
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QFontMetrics
+*********************************/
+ZEND_METHOD(QApplication, fontMetrics){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QFontMetrics obj = (QFontMetrics) o->fontMetrics();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setWindowIcon
+ *    flags:    s
+ *
+ *    @param   const QIcon&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setWindowIcon){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"windowIcon",strlen("windowIcon"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  windowIcon
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QIcon
+*********************************/
+ZEND_METHOD(QApplication, windowIcon){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  allWidgets
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidgetList
+*********************************/
+ZEND_METHOD(QApplication, allWidgets){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidgetList obj = (QWidgetList) o->allWidgets();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  topLevelWidgets
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidgetList
+*********************************/
+ZEND_METHOD(QApplication, topLevelWidgets){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidgetList obj = (QWidgetList) o->topLevelWidgets();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  desktop
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDesktopWidget *
+*********************************/
+ZEND_METHOD(QApplication, desktop){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QDesktopWidget * obj = (QDesktopWidget *) o->desktop();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  activePopupWidget
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QApplication, activePopupWidget){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->activePopupWidget();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  activeModalWidget
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QApplication, activeModalWidget){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->activeModalWidget();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  clipboard
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QClipboard *
+*********************************/
+ZEND_METHOD(QApplication, clipboard){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QClipboard * obj = (QClipboard *) o->clipboard();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  focusWidget
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QApplication, focusWidget){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->focusWidget();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  activeWindow
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QApplication, activeWindow){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->activeWindow();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setActiveWindow
+ *    flags:    s
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setActiveWindow){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setActiveWindow( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  widgetAt
+ *    flags:    s
+ *
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QApplication, widgetAt){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->widgetAt((const QPoint&) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: widgetAt
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->widgetAt((int) var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  topLevelAt
+ *    flags:    s
+ *
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QApplication, topLevelAt){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->topLevelAt((const QPoint&) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: topLevelAt
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->topLevelAt((int) var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  syncX
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, syncX){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->syncX();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  beep
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, beep){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->beep();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  keyboardModifiers
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::KeyboardModifiers
+*********************************/
+ZEND_METHOD(QApplication, keyboardModifiers){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		Qt::KeyboardModifiers obj = (Qt::KeyboardModifiers) o->keyboardModifiers();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  mouseButtons
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::MouseButtons
+*********************************/
+ZEND_METHOD(QApplication, mouseButtons){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		Qt::MouseButtons obj = (Qt::MouseButtons) o->mouseButtons();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setDesktopSettingsAware
+ *    flags:    s
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setDesktopSettingsAware){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setDesktopSettingsAware((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  desktopSettingsAware
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, desktopSettingsAware){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->desktopSettingsAware());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setCursorFlashTime
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setCursorFlashTime){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"cursorFlashTime",strlen("cursorFlashTime"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  cursorFlashTime
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QApplication, cursorFlashTime){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->cursorFlashTime());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setDoubleClickInterval
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setDoubleClickInterval){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setDoubleClickInterval((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  doubleClickInterval
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QApplication, doubleClickInterval){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->doubleClickInterval());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setKeyboardInputInterval
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setKeyboardInputInterval){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"keyboardInputInterval",strlen("keyboardInputInterval"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  keyboardInputInterval
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QApplication, keyboardInputInterval){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->keyboardInputInterval());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setWheelScrollLines
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setWheelScrollLines){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setWheelScrollLines((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  wheelScrollLines
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QApplication, wheelScrollLines){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->wheelScrollLines());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setGlobalStrut
+ *    flags:    s
+ *
+ *    @param   const QSize&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setGlobalStrut){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"globalStrut",strlen("globalStrut"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  globalStrut
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QApplication, globalStrut){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->globalStrut();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setStartDragTime
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setStartDragTime){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setStartDragTime((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  startDragTime
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QApplication, startDragTime){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->startDragTime());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setStartDragDistance
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setStartDragDistance){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setStartDragDistance((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  startDragDistance
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QApplication, startDragDistance){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->startDragDistance());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setLayoutDirection
+ *    flags:    s
+ *
+ *    @param   Qt::LayoutDirection
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setLayoutDirection){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"layoutDirection",strlen("layoutDirection"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  layoutDirection
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::LayoutDirection
+*********************************/
+ZEND_METHOD(QApplication, layoutDirection){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		Qt::LayoutDirection obj = (Qt::LayoutDirection) o->layoutDirection();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  isRightToLeft
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, isRightToLeft){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isRightToLeft());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  isLeftToRight
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, isLeftToRight){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isLeftToRight());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  isEffectEnabled
+ *    flags:    s
+ *
+ *    @param   Qt::UIEffect
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, isEffectEnabled){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isEffectEnabled( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setEffectEnabled
+ *    flags:    s
+ *
+ *    @param   Qt::UIEffect
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setEffectEnabled){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// true
+		bool* var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setEffectEnabled( tmp_var_0, (bool) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  exec
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QApplication, exec){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->exec());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  setQuitOnLastWindowClosed
+ *    flags:    s
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, setQuitOnLastWindowClosed){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->setQuitOnLastWindowClosed((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  quitOnLastWindowClosed
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, quitOnLastWindowClosed){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->quitOnLastWindowClosed());
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  closeAllWindows
+ *    flags:    sl
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, closeAllWindows){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->closeAllWindows();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  aboutQt
+ *    flags:    sl
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QApplication, aboutQt){
+	if (ZEND_NUM_ARGS() == 0){
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		o->aboutQt();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QApplication
+ *    function  event
+ *    flags:    
+ *
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   protected
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QApplication, event){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QApplication *o = (QApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->event( tmp_var_0));
+
+	}
+}
+
+
+ZEND_METHOD(QApplication,__construct){
+
+	QApplication *QApplication_ptr = new QApplication();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long argc int&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int& tmp(Z_STRVAL_P(param_0));
+			QApplication_ptr = new QApplication(tmp);
+		}
+		 /*char argv char***/
+		if(Z_TYPE_P(param_1) == IS_STRING) {
+			char** tmp(Z_STRVAL_P(param_1));
+			QApplication_ptr = new QApplication(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*long argc int&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int& tmp(Z_STRVAL_P(param_0));
+			QApplication_ptr = new QApplication(tmp);
+		}
+		 /*char argv char***/
+		if(Z_TYPE_P(param_1) == IS_STRING) {
+			char** tmp(Z_STRVAL_P(param_1));
+			QApplication_ptr = new QApplication(tmp);
+		}
+		 /*bool GUIenabled bool*/
+		if(Z_TYPE_P(param_2) == IS_BOOL) {
+			bool tmp(Z_STRVAL_P(param_2));
+			QApplication_ptr = new QApplication(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*long argc int&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int& tmp(Z_STRVAL_P(param_0));
+			QApplication_ptr = new QApplication(tmp);
+		}
+		 /*char argv char***/
+		if(Z_TYPE_P(param_1) == IS_STRING) {
+			char** tmp(Z_STRVAL_P(param_1));
+			QApplication_ptr = new QApplication(tmp);
+		}
+		 /*long arg1 Type*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_2));
+			QApplication_ptr = new QApplication(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QApplication_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QApplication);
+

Added: trunk/playground/qboxlayout.cpp
===================================================================
--- trunk/playground/qboxlayout.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qboxlayout.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,1005 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QBoxLayout.cpp - QBoxLayout PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QBoxLayout>
+
+
+
+/*		public enumDirection:long {
+			Direction = 0,
+			Direction = 1,
+			Direction = 2,
+			Direction = 3,
+			Down = TopToBottom,
+			Up = BottomToTop
+		}
+*/
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QBoxLayout, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QBoxLayout, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QBoxLayout, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QBoxLayout, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QBoxLayout, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QBoxLayout, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  QBoxLayout
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QBoxLayout, QBoxLayout){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		RETURN_~(o->QBoxLayout());
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  direction
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Direction
+*********************************/
+ZEND_METHOD(QBoxLayout, direction){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->direction());
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  setDirection
+ *    flags:    
+ *
+ *    @param   Direction
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, setDirection){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->setDirection( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  addSpacing
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, addSpacing){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->addSpacing((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  addStretch
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, addStretch){
+	if (ZEND_NUM_ARGS() == 1){
+	// 0
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->addStretch((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  addWidget
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   int
+ *    @param   Qt::Alignment
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, addWidget){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// 0
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->addWidget( tmp_var_0, (int) var_1,  tmp_var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  addLayout
+ *    flags:    
+ *
+ *    @param   QLayout*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, addLayout){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->addLayout( tmp_var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  addStrut
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, addStrut){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->addStrut((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  addItem
+ *    flags:    
+ *
+ *    @param   QLayoutItem*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, addItem){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->addItem( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  insertSpacing
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, insertSpacing){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->insertSpacing((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  insertStretch
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, insertStretch){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 0
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->insertStretch((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  insertWidget
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   QWidget*
+ *    @param   int
+ *    @param   Qt::Alignment
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, insertWidget){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+	// 0
+		long var_2;
+	// 0
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lolo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->insertWidget((int) var_0,  tmp_var_1, (int) var_2,  tmp_var_3);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  insertLayout
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   QLayout*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, insertLayout){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+	// 0
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->insertLayout((int) var_0,  tmp_var_1, (int) var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  setStretchFactor
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QBoxLayout, setStretchFactor){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		RETURN_BOOL(o->setStretchFactor( tmp_var_0, (int) var_1));
+// marked for overloading: setStretchFactor
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		RETURN_BOOL(o->setStretchFactor( tmp_var_0, (int) var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QBoxLayout, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  minimumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QBoxLayout, minimumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->minimumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  maximumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QBoxLayout, maximumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->maximumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  hasHeightForWidth
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QBoxLayout, hasHeightForWidth){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasHeightForWidth());
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  heightForWidth
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QBoxLayout, heightForWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->heightForWidth((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  minimumHeightForWidth
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QBoxLayout, minimumHeightForWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->minimumHeightForWidth((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  expandingDirections
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Orientations
+*********************************/
+ZEND_METHOD(QBoxLayout, expandingDirections){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		Qt::Orientations obj = (Qt::Orientations) o->expandingDirections();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  invalidate
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, invalidate){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->invalidate();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  itemAt
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QLayoutItem *
+*********************************/
+ZEND_METHOD(QBoxLayout, itemAt){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		QLayoutItem * obj = (QLayoutItem *) o->itemAt((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  takeAt
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QLayoutItem *
+*********************************/
+ZEND_METHOD(QBoxLayout, takeAt){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		QLayoutItem * obj = (QLayoutItem *) o->takeAt((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  count
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QBoxLayout, count){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->count());
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  setGeometry
+ *    flags:    
+ *
+ *    @param   const QRect&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, setGeometry){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->setGeometry( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QBoxLayout, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QBoxLayout, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QBoxLayout, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QBoxLayout
+ *    function  insertItem
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   QLayoutItem*
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QBoxLayout, insertItem){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
+		o->insertItem((int) var_0,  tmp_var_1);
+		RETURN_NULL();
+
+	}
+}
+
+
+ZEND_METHOD(QBoxLayout,__construct){
+
+	QBoxLayout *QBoxLayout_ptr = new QBoxLayout();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long arg1 Direction*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Direction tmp(Z_STRVAL_P(param_0));
+			QBoxLayout_ptr = new QBoxLayout(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_1));
+			QBoxLayout_ptr = new QBoxLayout(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QBoxLayout_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QBoxLayout);
+

Added: trunk/playground/qchar.cpp
===================================================================
--- trunk/playground/qchar.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qchar.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,908 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QChar.cpp - QChar PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*		public enumSpecialCharacter:long {
+			Null = 0x0000,
+			Nbsp = 0x00a0,
+			ReplacementCharacter = 0xfffd,
+			ObjectReplacementCharacter = 0xfffc,
+			ByteOrderMark = 0xfeff,
+			ByteOrderSwapped = 0xfffe,
+			ParagraphSeparator = 0x2029,
+			LineSeparator = 0x2028
+		}
+*/
+
+/*		public enumCategory:long {
+			Category = 0,
+			Category = 1,
+			Category = 2,
+			Category = 3,
+			Category = 4,
+			Category = 5,
+			Category = 6,
+			Category = 7,
+			Category = 8,
+			Category = 9,
+			Category = 10,
+			Category = 11,
+			Category = 12,
+			Category = 13,
+			Category = 14,
+			Category = 15,
+			Category = 16,
+			Category = 17,
+			Category = 18,
+			Category = 19,
+			Category = 20,
+			Category = 21,
+			Category = 22,
+			Category = 23,
+			Category = 24,
+			Category = 25,
+			Category = 26,
+			Category = 27,
+			Category = 28,
+			Category = 29,
+			Category = 30,
+			Punctuation_Dask = Punctuation_Dash
+		}
+*/
+
+/*		public enumDirection:long {
+			Direction = 0,
+			Direction = 1,
+			Direction = 2,
+			Direction = 3,
+			Direction = 4,
+			Direction = 5,
+			Direction = 6,
+			Direction = 7,
+			Direction = 8,
+			Direction = 9,
+			Direction = 10,
+			Direction = 11,
+			Direction = 12,
+			Direction = 13,
+			Direction = 14,
+			Direction = 15,
+			Direction = 16,
+			Direction = 17,
+			Direction = 18
+		}
+*/
+
+/*		public enumDecomposition:long {
+			Decomposition = 0,
+			Decomposition = 1,
+			Decomposition = 2,
+			Decomposition = 3,
+			Decomposition = 4,
+			Decomposition = 5,
+			Decomposition = 6,
+			Decomposition = 7,
+			Decomposition = 8,
+			Decomposition = 9,
+			Decomposition = 10,
+			Decomposition = 11,
+			Decomposition = 12,
+			Decomposition = 13,
+			Decomposition = 14,
+			Decomposition = 15,
+			Decomposition = 16,
+			Decomposition = 17
+		}
+*/
+
+/*		public enumJoining:long {
+			Joining = 0,
+			Joining = 1,
+			Joining = 2,
+			Joining = 3
+		}
+*/
+
+/*		public enumCombiningClass:long {
+			Combining_BelowLeftAttached = 200,
+			Combining_BelowAttached = 202,
+			Combining_BelowRightAttached = 204,
+			Combining_LeftAttached = 208,
+			Combining_RightAttached = 210,
+			Combining_AboveLeftAttached = 212,
+			Combining_AboveAttached = 214,
+			Combining_AboveRightAttached = 216,
+			Combining_BelowLeft = 218,
+			Combining_Below = 220,
+			Combining_BelowRight = 222,
+			Combining_Left = 224,
+			Combining_Right = 226,
+			Combining_AboveLeft = 228,
+			Combining_Above = 230,
+			Combining_AboveRight = 232,
+			Combining_DoubleBelow = 233,
+			Combining_DoubleAbove = 234,
+			Combining_IotaSubscript = 240
+		}
+*/
+
+/*		public enumUnicodeVersion:long {
+			UnicodeVersion = 0,
+			UnicodeVersion = 1,
+			UnicodeVersion = 2,
+			UnicodeVersion = 3,
+			UnicodeVersion = 4,
+			UnicodeVersion = 5,
+			UnicodeVersion = 6,
+			UnicodeVersion = 7
+		}
+*/
+
+/*********************************
+ *    class     QChar
+ *    function  digitValue
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QChar, digitValue){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_LONG(o->digitValue());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  toLower
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar
+*********************************/
+ZEND_METHOD(QChar, toLower){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  toUpper
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar
+*********************************/
+ZEND_METHOD(QChar, toUpper){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  category
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Category
+*********************************/
+ZEND_METHOD(QChar, category){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  direction
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Direction
+*********************************/
+ZEND_METHOD(QChar, direction){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_LONG(o->direction());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  joining
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Joining
+*********************************/
+ZEND_METHOD(QChar, joining){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  hasMirrored
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, hasMirrored){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasMirrored());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isLower
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isLower){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isLower());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isUpper
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isUpper){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isUpper());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  mirroredChar
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar
+*********************************/
+ZEND_METHOD(QChar, mirroredChar){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  decomposition
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QChar, decomposition){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		QString obj = (QString) o->decomposition();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QChar_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  decompositionTag
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Decomposition
+*********************************/
+ZEND_METHOD(QChar, decompositionTag){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  combiningClass
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   unsigned char
+*********************************/
+ZEND_METHOD(QChar, combiningClass){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_CHAR* (o->combiningClass());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  unicodeVersion
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   UnicodeVersion
+*********************************/
+ZEND_METHOD(QChar, unicodeVersion){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  toAscii
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char
+*********************************/
+ZEND_METHOD(QChar, toAscii){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  toLatin1
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char
+*********************************/
+ZEND_METHOD(QChar, toLatin1){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  unicode
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const ushort
+*********************************/
+ZEND_METHOD(QChar, unicode){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+// marked for overloading: unicode
+	}
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		ushort & obj = (ushort &) o->unicode();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QChar_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isNull
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isNull){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isNull());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isPrint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isPrint){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isPrint());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isPunct
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isPunct){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isPunct());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isSpace
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isSpace){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isSpace());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isMark
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isMark){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isMark());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isLetter
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isLetter){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isLetter());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isNumber
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isNumber){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isNumber());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isLetterOrNumber
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isLetterOrNumber){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isLetterOrNumber());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isDigit
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isDigit){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isDigit());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  isSymbol
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QChar, isSymbol){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isSymbol());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  cell
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   uchar
+*********************************/
+ZEND_METHOD(QChar, cell){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_CHAR* (o->cell());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  row
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   uchar
+*********************************/
+ZEND_METHOD(QChar, row){
+	if (ZEND_NUM_ARGS() == 0){
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		RETURN_CHAR* (o->row());
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  setCell
+ *    flags:    
+ *
+ *    @param   uchar
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QChar, setCell){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		o->setCell( var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  setRow
+ *    flags:    
+ *
+ *    @param   uchar
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QChar, setRow){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QChar *o = (QChar*) PHP_QT_FETCH();
+		o->setRow( var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  fromAscii
+ *    flags:    s
+ *
+ *    @param   char
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar
+*********************************/
+ZEND_METHOD(QChar, fromAscii){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QChar *o = (QChar*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QChar
+ *    function  fromLatin1
+ *    flags:    s
+ *
+ *    @param   char
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar
+*********************************/
+ZEND_METHOD(QChar, fromLatin1){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QChar *o = (QChar*) PHP_QT_FETCH();
+
+	}
+}
+
+
+ZEND_METHOD(QChar,__construct){
+
+	QChar *QChar_ptr = new QChar();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*char*  c char*/
+		if(Z_TYPE_P(param_0) == IS_STRING) {
+			char tmp(Z_STRVAL_P(param_0));
+			QChar_ptr = new QChar(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*QLatin1Char ch QLatin1Char*/
+		if(Z_TYPE_P(param_0) == IS_) {
+			QLatin1Char tmp(Z_STRVAL_P(param_0));
+			QChar_ptr = new QChar(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*char*  c uchar*/
+		if(Z_TYPE_P(param_0) == IS_STRING) {
+			uchar tmp(Z_STRVAL_P(param_0));
+			QChar_ptr = new QChar(tmp);
+		}
+		 /*char*  r uchar*/
+		if(Z_TYPE_P(param_1) == IS_STRING) {
+			uchar tmp(Z_STRVAL_P(param_1));
+			QChar_ptr = new QChar(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*ushort rc ushort*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			ushort tmp(Z_STRVAL_P(param_0));
+			QChar_ptr = new QChar(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*short rc short*/
+		if(Z_TYPE_P(param_0) == IS_short) {
+			short tmp(Z_STRVAL_P(param_0));
+			QChar_ptr = new QChar(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*long rc uint*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			uint tmp(Z_STRVAL_P(param_0));
+			QChar_ptr = new QChar(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*SpecialCharacter sc SpecialCharacter*/
+		if(Z_TYPE_P(param_0) == IS_) {
+			SpecialCharacter tmp(Z_STRVAL_P(param_0));
+			QChar_ptr = new QChar(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QChar_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QChar);
+

Added: trunk/playground/qcharref.cpp
===================================================================
--- trunk/playground/qcharref.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qcharref.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,571 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QCharRef.cpp - QCharRef PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  isNull
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, isNull){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isNull());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  isPrint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, isPrint){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isPrint());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  isPunct
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, isPunct){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isPunct());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  isSpace
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, isSpace){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isSpace());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  isMark
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, isMark){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isMark());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  isLetter
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, isLetter){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isLetter());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  isNumber
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, isNumber){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isNumber());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  isLetterOrNumber
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, isLetterOrNumber){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isLetterOrNumber());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  isDigit
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, isDigit){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isDigit());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  digitValue
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QCharRef, digitValue){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_LONG(o->digitValue());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  toLower
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar
+*********************************/
+ZEND_METHOD(QCharRef, toLower){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  toUpper
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar
+*********************************/
+ZEND_METHOD(QCharRef, toUpper){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  category
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar::Category
+*********************************/
+ZEND_METHOD(QCharRef, category){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_LONG(o->category());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  direction
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar::Direction
+*********************************/
+ZEND_METHOD(QCharRef, direction){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_LONG(o->direction());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  joining
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar::Joining
+*********************************/
+ZEND_METHOD(QCharRef, joining){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_LONG(o->joining());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  hasMirrored
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCharRef, hasMirrored){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasMirrored());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  mirroredChar
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar
+*********************************/
+ZEND_METHOD(QCharRef, mirroredChar){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  decomposition
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QCharRef, decomposition){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		QString obj = (QString) o->decomposition();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCharRef_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  decompositionTag
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar::Decomposition
+*********************************/
+ZEND_METHOD(QCharRef, decompositionTag){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_LONG(o->decompositionTag());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  combiningClass
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   uchar
+*********************************/
+ZEND_METHOD(QCharRef, combiningClass){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_CHAR* (o->combiningClass());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  unicodeVersion
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar::UnicodeVersion
+*********************************/
+ZEND_METHOD(QCharRef, unicodeVersion){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		QChar::UnicodeVersion obj = (QChar::UnicodeVersion) o->unicodeVersion();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCharRef_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  cell
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   uchar
+*********************************/
+ZEND_METHOD(QCharRef, cell){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_CHAR* (o->cell());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  row
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   uchar
+*********************************/
+ZEND_METHOD(QCharRef, row){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		RETURN_CHAR* (o->row());
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  setCell
+ *    flags:    
+ *
+ *    @param   uchar
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCharRef, setCell){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		o->setCell( var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  setRow
+ *    flags:    
+ *
+ *    @param   uchar
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCharRef, setRow){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+		o->setRow( var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  toAscii
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char
+*********************************/
+ZEND_METHOD(QCharRef, toAscii){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  toLatin1
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char
+*********************************/
+ZEND_METHOD(QCharRef, toLatin1){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QCharRef
+ *    function  unicode
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const ushort
+*********************************/
+ZEND_METHOD(QCharRef, unicode){
+	if (ZEND_NUM_ARGS() == 0){
+		QCharRef *o = (QCharRef*) PHP_QT_FETCH();
+
+	}
+}
+
+
+ZEND_METHOD(QCharRef,__construct){
+
+	QCharRef *QCharRef_ptr = new QCharRef();
+
+	PHP_QT_REGISTER(QCharRef_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QCharRef);
+

Added: trunk/playground/qclipboardevent.cpp
===================================================================
--- trunk/playground/qclipboardevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qclipboardevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,82 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QClipboardEvent.cpp - QClipboardEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QClipboardEvent>
+
+
+
+/*********************************
+ *    class     QClipboardEvent
+ *    function  data
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QEventPrivate *
+*********************************/
+ZEND_METHOD(QClipboardEvent, data){
+	if (ZEND_NUM_ARGS() == 0){
+		QClipboardEvent *o = (QClipboardEvent*) PHP_QT_FETCH();
+		QEventPrivate * obj = (QEventPrivate *) o->data();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QClipboardEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QClipboardEvent,__construct){
+
+	QClipboardEvent *QClipboardEvent_ptr = new QClipboardEvent();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* data QEventPrivate**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QEventPrivate* tmp(Z_STRVAL_P(param_0));
+			QClipboardEvent_ptr = new QClipboardEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QClipboardEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QClipboardEvent);
+

Added: trunk/playground/qcloseevent.cpp
===================================================================
--- trunk/playground/qcloseevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qcloseevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,54 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QCloseEvent.cpp - QCloseEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QCloseEvent>
+
+
+	}
+}
+
+
+ZEND_METHOD(QCloseEvent,__construct){
+
+	QCloseEvent *QCloseEvent_ptr = new QCloseEvent();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	PHP_QT_REGISTER(QCloseEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QCloseEvent);
+

Added: trunk/playground/qcontextmenuevent.cpp
===================================================================
--- trunk/playground/qcontextmenuevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qcontextmenuevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,232 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QContextMenuEvent.cpp - QContextMenuEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QContextMenuEvent>
+
+
+
+/*		public enumReason:long {
+			Reason = 0,
+			Reason = 1,
+			Reason = 2
+		}
+*/
+
+/*********************************
+ *    class     QContextMenuEvent
+ *    function  x
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QContextMenuEvent, x){
+	if (ZEND_NUM_ARGS() == 0){
+		QContextMenuEvent *o = (QContextMenuEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->x());
+	}
+}
+
+
+/*********************************
+ *    class     QContextMenuEvent
+ *    function  y
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QContextMenuEvent, y){
+	if (ZEND_NUM_ARGS() == 0){
+		QContextMenuEvent *o = (QContextMenuEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->y());
+	}
+}
+
+
+/*********************************
+ *    class     QContextMenuEvent
+ *    function  globalX
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QContextMenuEvent, globalX){
+	if (ZEND_NUM_ARGS() == 0){
+		QContextMenuEvent *o = (QContextMenuEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalX());
+	}
+}
+
+
+/*********************************
+ *    class     QContextMenuEvent
+ *    function  globalY
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QContextMenuEvent, globalY){
+	if (ZEND_NUM_ARGS() == 0){
+		QContextMenuEvent *o = (QContextMenuEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalY());
+	}
+}
+
+
+/*********************************
+ *    class     QContextMenuEvent
+ *    function  pos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint&
+*********************************/
+ZEND_METHOD(QContextMenuEvent, pos){
+	if (ZEND_NUM_ARGS() == 0){
+		QContextMenuEvent *o = (QContextMenuEvent*) PHP_QT_FETCH();
+		const QPoint& obj = (const QPoint&) o->pos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QContextMenuEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QContextMenuEvent
+ *    function  globalPos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint&
+*********************************/
+ZEND_METHOD(QContextMenuEvent, globalPos){
+	if (ZEND_NUM_ARGS() == 0){
+		QContextMenuEvent *o = (QContextMenuEvent*) PHP_QT_FETCH();
+		const QPoint& obj = (const QPoint&) o->globalPos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QContextMenuEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QContextMenuEvent
+ *    function  reason
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Reason
+*********************************/
+ZEND_METHOD(QContextMenuEvent, reason){
+	if (ZEND_NUM_ARGS() == 0){
+		QContextMenuEvent *o = (QContextMenuEvent*) PHP_QT_FETCH();
+
+	}
+}
+
+
+ZEND_METHOD(QContextMenuEvent,__construct){
+
+	QContextMenuEvent *QContextMenuEvent_ptr = new QContextMenuEvent();
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*Reason reason Reason*/
+		if(Z_TYPE_P(param_0) == IS_) {
+			Reason tmp(Z_STRVAL_P(param_0));
+			QContextMenuEvent_ptr = new QContextMenuEvent(tmp);
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_1));
+			QContextMenuEvent_ptr = new QContextMenuEvent(tmp);
+		}
+		 /*long globalPos QPoint&*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_2));
+			QContextMenuEvent_ptr = new QContextMenuEvent(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*Reason reason Reason*/
+		if(Z_TYPE_P(param_0) == IS_) {
+			Reason tmp(Z_STRVAL_P(param_0));
+			QContextMenuEvent_ptr = new QContextMenuEvent(tmp);
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_1));
+			QContextMenuEvent_ptr = new QContextMenuEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QContextMenuEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QContextMenuEvent);
+

Added: trunk/playground/qcoreapplication.cpp
===================================================================
--- trunk/playground/qcoreapplication.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qcoreapplication.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,1153 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QCoreApplication.cpp - QCoreApplication PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QCoreApplication>
+
+
+
+/*		public enumEncoding:long {
+			Encoding = 0,
+			Encoding = 1
+		}
+*/
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QCoreApplication, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QCoreApplication, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QCoreApplication, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCoreApplication, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCoreApplication, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCoreApplication, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  QCoreApplication
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QCoreApplication, QCoreApplication){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		RETURN_~(o->QCoreApplication());
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  notify
+ *    flags:    v
+ *
+ *    @param   QObject*
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCoreApplication, notify){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  bool
+ *    flags:    
+ *
+ *    @param   * EventFilter)(void*
+ *    @param   long*
+ *    @param   -
+
+ *    @access   public
+ *    @return   typedef
+*********************************/
+ZEND_METHOD(QCoreApplication, bool){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		RETURN_INTPTR(o->bool( tmp_var_0,  tmp_var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  setEventFilter
+ *    flags:    
+ *
+ *    @param   EventFilter
+ *    @param   -
+
+ *    @access   public
+ *    @return   EventFilter
+*********************************/
+ZEND_METHOD(QCoreApplication, setEventFilter){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		RETURN_INTPTR(o->setEventFilter( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QCoreApplication, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QCoreApplication, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QCoreApplication, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  argc
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QCoreApplication, argc){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->argc());
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  argv
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   char **
+*********************************/
+ZEND_METHOD(QCoreApplication, argv){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		char ** obj = (char **) o->argv();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  setOrganizationDomain
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, setOrganizationDomain){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"organizationDomain",strlen("organizationDomain"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  organizationDomain
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QCoreApplication, organizationDomain){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->organizationDomain();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  setOrganizationName
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, setOrganizationName){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"organizationName",strlen("organizationName"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  organizationName
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QCoreApplication, organizationName){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->organizationName();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  setApplicationName
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, setApplicationName){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"applicationName",strlen("applicationName"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  applicationName
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QCoreApplication, applicationName){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->applicationName();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  instance
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QCoreApplication *
+*********************************/
+ZEND_METHOD(QCoreApplication, instance){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QCoreApplication * obj = (QCoreApplication *) o->instance();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  exec
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QCoreApplication, exec){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		RETURN_LONG(o->exec());
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  processEvents
+ *    flags:    s
+ *
+ *    @param   QEventLoop::ProcessEventsFlags
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, processEvents){
+	if (ZEND_NUM_ARGS() == 1){
+	// QEventLoop::AllEvents
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->processEvents( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: processEvents
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->processEvents( tmp_var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  exit
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, exit){
+	if (ZEND_NUM_ARGS() == 1){
+	// 0
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->exit((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  sendPostedEvents
+ *    flags:    s
+ *
+ *    @param   QObject*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, sendPostedEvents){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->sendPostedEvents( tmp_var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: sendPostedEvents
+	}
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->sendPostedEvents();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  removePostedEvents
+ *    flags:    s
+ *
+ *    @param   QObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, removePostedEvents){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->removePostedEvents( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  hasPendingEvents
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCoreApplication, hasPendingEvents){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasPendingEvents());
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  startingUp
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCoreApplication, startingUp){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->startingUp());
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  closingDown
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCoreApplication, closingDown){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->closingDown());
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  applicationDirPath
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QCoreApplication, applicationDirPath){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->applicationDirPath();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  applicationFilePath
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QCoreApplication, applicationFilePath){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->applicationFilePath();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  setLibraryPaths
+ *    flags:    s
+ *
+ *    @param   const QStringList&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, setLibraryPaths){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->setLibraryPaths( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  libraryPaths
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QStringList
+*********************************/
+ZEND_METHOD(QCoreApplication, libraryPaths){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QStringList obj = (QStringList) o->libraryPaths();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  addLibraryPath
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, addLibraryPath){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->addLibraryPath( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  removeLibraryPath
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, removeLibraryPath){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->removeLibraryPath( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  installTranslator
+ *    flags:    s
+ *
+ *    @param   QTranslator*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, installTranslator){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->installTranslator( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  removeTranslator
+ *    flags:    s
+ *
+ *    @param   QTranslator*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, removeTranslator){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->removeTranslator( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  translate
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   Encoding
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QCoreApplication, translate){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 
+		char* var_1;
+		int* len_1;
+
+	// 0
+		char* var_2;
+		int* len_2;
+
+	// DefaultCodec
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ssso", &var_0, &len_0, &var_1, &len_1, &var_2, &len_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		QString obj = (QString) o->translate( var_0,  var_1,  var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  flush
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, flush){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->flush();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  watchUnixSignal
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, watchUnixSignal){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		bool* var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->watchUnixSignal((int) var_0, (bool) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  quit
+ *    flags:    sl
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QCoreApplication, quit){
+	if (ZEND_NUM_ARGS() == 0){
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		o->quit();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QCoreApplication
+ *    function  event
+ *    flags:    
+ *
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   protected
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QCoreApplication, event){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
+		RETURN_BOOL(o->event( tmp_var_0));
+
+	}
+}
+
+
+ZEND_METHOD(QCoreApplication,__construct){
+
+	QCoreApplication *QCoreApplication_ptr = new QCoreApplication();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long argc int&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int& tmp(Z_STRVAL_P(param_0));
+			QCoreApplication_ptr = new QCoreApplication(tmp);
+		}
+		 /*char argv char***/
+		if(Z_TYPE_P(param_1) == IS_STRING) {
+			char** tmp(Z_STRVAL_P(param_1));
+			QCoreApplication_ptr = new QCoreApplication(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* p QCoreApplicationPrivate&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QCoreApplicationPrivate& tmp(Z_STRVAL_P(param_0));
+			QCoreApplication_ptr = new QCoreApplication(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QCoreApplication_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QCoreApplication);
+

Added: trunk/playground/qdate.cpp
===================================================================
--- trunk/playground/qdate.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qdate.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,808 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QDate.cpp - QDate PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QDate
+ *    function  isNull
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QDate, isNull){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isNull());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  isValid
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QDate, isValid){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isValid());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  year
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, year){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->year());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  month
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, month){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->month());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  day
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, day){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->day());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  dayOfWeek
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, dayOfWeek){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->dayOfWeek());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  dayOfYear
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, dayOfYear){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->dayOfYear());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  daysInMonth
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, daysInMonth){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->daysInMonth());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  daysInYear
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, daysInYear){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->daysInYear());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  weekNumber
+ *    flags:    c
+ *
+ *    @param   int*
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, weekNumber){
+	if (ZEND_NUM_ARGS() == 1){
+	// 0
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->weekNumber((int*) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  toString
+ *    flags:    c
+ *
+ *    @param   Qt::DateFormat
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QDate, toString){
+	if (ZEND_NUM_ARGS() == 1){
+	// Qt::TextDate
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QString obj = (QString) o->toString( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: toString
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QString obj = (QString) o->toString( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  setYMD
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QDate, setYMD){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_BOOL(o->setYMD((int) var_0, (int) var_1, (int) var_2));
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  addDays
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDate
+*********************************/
+ZEND_METHOD(QDate, addDays){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QDate obj = (QDate) o->addDays((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  addMonths
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDate
+*********************************/
+ZEND_METHOD(QDate, addMonths){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QDate obj = (QDate) o->addMonths((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  addYears
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDate
+*********************************/
+ZEND_METHOD(QDate, addYears){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QDate obj = (QDate) o->addYears((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  daysTo
+ *    flags:    c
+ *
+ *    @param   const QDate&
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, daysTo){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->daysTo( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  toJulianDay
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDate, toJulianDay){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->toJulianDay());
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  shortMonthName
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QDate, shortMonthName){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QString obj = (QString) o->shortMonthName((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  shortDayName
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QDate, shortDayName){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QString obj = (QString) o->shortDayName((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  longMonthName
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QDate, longMonthName){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QString obj = (QString) o->longMonthName((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  longDayName
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QDate, longDayName){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QString obj = (QString) o->longDayName((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  currentDate
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDate
+*********************************/
+ZEND_METHOD(QDate, currentDate){
+	if (ZEND_NUM_ARGS() == 0){
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QDate obj = (QDate) o->currentDate();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  fromString
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   Qt::DateFormat
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDate
+*********************************/
+ZEND_METHOD(QDate, fromString){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::TextDate
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QDate obj = (QDate) o->fromString( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: fromString
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QDate obj = (QDate) o->fromString( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: isValid
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isValid((int) var_0, (int) var_1, (int) var_2));
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  isLeapYear
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QDate, isLeapYear){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isLeapYear((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  gregorianToJulian
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   uint
+*********************************/
+ZEND_METHOD(QDate, gregorianToJulian){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		RETURN_LONG(o->gregorianToJulian((int) var_0, (int) var_1, (int) var_2));
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  julianToGregorian
+ *    flags:    s
+ *
+ *    @param   uint
+ *    @param   int&
+ *    @param   int&
+ *    @param   int&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QDate, julianToGregorian){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		o->julianToGregorian((uint) var_0, (int&) var_1, (int&) var_2, (int&) var_3);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QDate
+ *    function  fromJulianDay
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDate
+*********************************/
+ZEND_METHOD(QDate, fromJulianDay){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDate *o = (QDate*) PHP_QT_FETCH();
+		QDate obj = (QDate) o->fromJulianDay((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDate_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QDate,__construct){
+
+	QDate *QDate_ptr = new QDate();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*long y int*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_0));
+			QDate_ptr = new QDate(tmp);
+		}
+		 /*long m int*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QDate_ptr = new QDate(tmp);
+		}
+		 /*long d int*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_2));
+			QDate_ptr = new QDate(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QDate_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QDate);
+

Added: trunk/playground/qdatetime.cpp
===================================================================
--- trunk/playground/qdatetime.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qdatetime.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,732 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QDateTime.cpp - QDateTime PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  QDateTime
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QDateTime, QDateTime){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		RETURN_~(o->QDateTime());
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  isNull
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QDateTime, isNull){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isNull());
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  isValid
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QDateTime, isValid){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isValid());
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  date
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDate
+*********************************/
+ZEND_METHOD(QDateTime, date){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDate obj = (QDate) o->date();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  time
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QTime
+*********************************/
+ZEND_METHOD(QDateTime, time){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QTime obj = (QTime) o->time();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  timeSpec
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::TimeSpec
+*********************************/
+ZEND_METHOD(QDateTime, timeSpec){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		Qt::TimeSpec obj = (Qt::TimeSpec) o->timeSpec();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  toTime_t
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   uint
+*********************************/
+ZEND_METHOD(QDateTime, toTime_t){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->toTime_t());
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  setDate
+ *    flags:    
+ *
+ *    @param   const QDate&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QDateTime, setDate){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		o->setDate( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  setTime
+ *    flags:    
+ *
+ *    @param   const QTime&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QDateTime, setTime){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		o->setTime( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  setTimeSpec
+ *    flags:    
+ *
+ *    @param   Qt::TimeSpec
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QDateTime, setTimeSpec){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		o->setTimeSpec( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  setTime_t
+ *    flags:    
+ *
+ *    @param   uint
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QDateTime, setTime_t){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		o->setTime_t((uint) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  toString
+ *    flags:    c
+ *
+ *    @param   Qt::DateFormat
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QDateTime, toString){
+	if (ZEND_NUM_ARGS() == 1){
+	// Qt::TextDate
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QString obj = (QString) o->toString( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: toString
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QString obj = (QString) o->toString( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  addDays
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDateTime
+*********************************/
+ZEND_METHOD(QDateTime, addDays){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->addDays((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  addMonths
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDateTime
+*********************************/
+ZEND_METHOD(QDateTime, addMonths){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->addMonths((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  addYears
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDateTime
+*********************************/
+ZEND_METHOD(QDateTime, addYears){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->addYears((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  addSecs
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDateTime
+*********************************/
+ZEND_METHOD(QDateTime, addSecs){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->addSecs((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  toTimeSpec
+ *    flags:    c
+ *
+ *    @param   Qt::TimeSpec
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDateTime
+*********************************/
+ZEND_METHOD(QDateTime, toTimeSpec){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->toTimeSpec( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  toLocalTime
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDateTime
+*********************************/
+ZEND_METHOD(QDateTime, toLocalTime){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->toLocalTime();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  toUTC
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDateTime
+*********************************/
+ZEND_METHOD(QDateTime, toUTC){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->toUTC();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  daysTo
+ *    flags:    c
+ *
+ *    @param   const QDateTime&
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDateTime, daysTo){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->daysTo( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  secsTo
+ *    flags:    c
+ *
+ *    @param   const QDateTime&
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QDateTime, secsTo){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->secsTo( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  currentDateTime
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDateTime
+*********************************/
+ZEND_METHOD(QDateTime, currentDateTime){
+	if (ZEND_NUM_ARGS() == 0){
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->currentDateTime();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDateTime
+ *    function  fromString
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   Qt::DateFormat
+ *    @param   -
+
+ *    @access   public
+ *    @return   QDateTime
+*********************************/
+ZEND_METHOD(QDateTime, fromString){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::TextDate
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->fromString( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: fromString
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
+		QDateTime obj = (QDateTime) o->fromString( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDateTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QDateTime,__construct){
+
+	QDateTime *QDateTime_ptr = new QDateTime();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* arg1 QDate&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QDate& tmp(Z_STRVAL_P(param_0));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*zval* arg1 QDate&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QDate& tmp(Z_STRVAL_P(param_0));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+		 /*zval* arg2 QTime&*/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QTime& tmp(Z_STRVAL_P(param_1));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+		 /*zval* spec Qt::TimeSpec*/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			Qt::TimeSpec tmp(Z_STRVAL_P(param_2));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* other QDateTime&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QDateTime& tmp(Z_STRVAL_P(param_0));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QDateTime_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QDateTime);
+

Added: trunk/playground/qdragenterevent.cpp
===================================================================
--- trunk/playground/qdragenterevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qdragenterevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,84 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QDragEnterEvent.cpp - QDragEnterEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QDragEnterEvent>
+
+
+	}
+}
+
+
+ZEND_METHOD(QDragEnterEvent,__construct){
+
+	QDragEnterEvent *QDragEnterEvent_ptr = new QDragEnterEvent();
+
+	if(ZEND_NUM_ARGS() == 5){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		zval* param_4;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &param_1, &param_2, &param_3, &param_4, &param_5) == FAILURE) {
+			return;
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_0));
+			QDragEnterEvent_ptr = new QDragEnterEvent(tmp);
+		}
+		 /*zval* actions Qt::DropActions*/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			Qt::DropActions tmp(Z_STRVAL_P(param_1));
+			QDragEnterEvent_ptr = new QDragEnterEvent(tmp);
+		}
+		 /*zval* data QMimeData**/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			QMimeData* tmp(Z_STRVAL_P(param_2));
+			QDragEnterEvent_ptr = new QDragEnterEvent(tmp);
+		}
+		 /*zval* buttons Qt::MouseButtons*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			Qt::MouseButtons tmp(Z_STRVAL_P(param_3));
+			QDragEnterEvent_ptr = new QDragEnterEvent(tmp);
+		}
+		 /*zval* modifiers Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_4) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_4));
+			QDragEnterEvent_ptr = new QDragEnterEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QDragEnterEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QDragEnterEvent);
+

Added: trunk/playground/qdragleaveevent.cpp
===================================================================
--- trunk/playground/qdragleaveevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qdragleaveevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,54 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QDragLeaveEvent.cpp - QDragLeaveEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QDragLeaveEvent>
+
+
+	}
+}
+
+
+ZEND_METHOD(QDragLeaveEvent,__construct){
+
+	QDragLeaveEvent *QDragLeaveEvent_ptr = new QDragLeaveEvent();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	PHP_QT_REGISTER(QDragLeaveEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QDragLeaveEvent);
+

Added: trunk/playground/qdragmoveevent.cpp
===================================================================
--- trunk/playground/qdragmoveevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qdragmoveevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,176 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QDragMoveEvent.cpp - QDragMoveEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QDragMoveEvent>
+
+
+
+/*********************************
+ *    class     QDragMoveEvent
+ *    function  answerRect
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QDragMoveEvent, answerRect){
+	if (ZEND_NUM_ARGS() == 0){
+		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->answerRect();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDragMoveEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDragMoveEvent
+ *    function  accept
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QDragMoveEvent, accept){
+	if (ZEND_NUM_ARGS() == 0){
+		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
+		o->accept();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QDragMoveEvent
+ *    function  ignore
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QDragMoveEvent, ignore){
+	if (ZEND_NUM_ARGS() == 0){
+		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
+		o->ignore();
+		RETURN_NULL();
+// marked for overloading: accept
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
+		o->accept( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: ignore
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
+		o->ignore( tmp_var_0);
+		RETURN_NULL();
+
+	}
+}
+
+
+ZEND_METHOD(QDragMoveEvent,__construct){
+
+	QDragMoveEvent *QDragMoveEvent_ptr = new QDragMoveEvent();
+
+	if(ZEND_NUM_ARGS() == 6){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		zval* param_4;
+		zval* param_5;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &param_1, &param_2, &param_3, &param_4, &param_5, &param_6) == FAILURE) {
+			return;
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_0));
+			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
+		}
+		 /*zval* actions Qt::DropActions*/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			Qt::DropActions tmp(Z_STRVAL_P(param_1));
+			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
+		}
+		 /*zval* data QMimeData**/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			QMimeData* tmp(Z_STRVAL_P(param_2));
+			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
+		}
+		 /*zval* buttons Qt::MouseButtons*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			Qt::MouseButtons tmp(Z_STRVAL_P(param_3));
+			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
+		}
+		 /*zval* modifiers Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_4) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_4));
+			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
+		}
+		 /*long type Type*/
+		if(Z_TYPE_P(param_5) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_5));
+			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QDragMoveEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QDragMoveEvent);
+

Added: trunk/playground/qdragresponseevent.cpp
===================================================================
--- trunk/playground/qdragresponseevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qdragresponseevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,76 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QDragResponseEvent.cpp - QDragResponseEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QDragResponseEvent>
+
+
+
+/*********************************
+ *    class     QDragResponseEvent
+ *    function  dragAccepted
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QDragResponseEvent, dragAccepted){
+	if (ZEND_NUM_ARGS() == 0){
+		QDragResponseEvent *o = (QDragResponseEvent*) PHP_QT_FETCH();
+		RETURN_BOOL(o->dragAccepted());
+
+	}
+}
+
+
+ZEND_METHOD(QDragResponseEvent,__construct){
+
+	QDragResponseEvent *QDragResponseEvent_ptr = new QDragResponseEvent();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*bool accepted bool*/
+		if(Z_TYPE_P(param_0) == IS_BOOL) {
+			bool tmp(Z_STRVAL_P(param_0));
+			QDragResponseEvent_ptr = new QDragResponseEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QDragResponseEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QDragResponseEvent);
+

Added: trunk/playground/qdropevent.cpp
===================================================================
--- trunk/playground/qdropevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qdropevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,408 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QDropEvent.cpp - QDropEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QDropEvent>
+
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  pos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QDropEvent, pos){
+	if (ZEND_NUM_ARGS() == 0){
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->pos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDropEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  mouseButtons
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::MouseButtons
+*********************************/
+ZEND_METHOD(QDropEvent, mouseButtons){
+	if (ZEND_NUM_ARGS() == 0){
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		Qt::MouseButtons obj = (Qt::MouseButtons) o->mouseButtons();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDropEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  keyboardModifiers
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::KeyboardModifiers
+*********************************/
+ZEND_METHOD(QDropEvent, keyboardModifiers){
+	if (ZEND_NUM_ARGS() == 0){
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		Qt::KeyboardModifiers obj = (Qt::KeyboardModifiers) o->keyboardModifiers();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDropEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  possibleActions
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::DropActions
+*********************************/
+ZEND_METHOD(QDropEvent, possibleActions){
+	if (ZEND_NUM_ARGS() == 0){
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		Qt::DropActions obj = (Qt::DropActions) o->possibleActions();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDropEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  proposedAction
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::DropAction
+*********************************/
+ZEND_METHOD(QDropEvent, proposedAction){
+	if (ZEND_NUM_ARGS() == 0){
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		Qt::DropAction obj = (Qt::DropAction) o->proposedAction();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDropEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  acceptProposedAction
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QDropEvent, acceptProposedAction){
+	if (ZEND_NUM_ARGS() == 0){
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		o->acceptProposedAction();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  dropAction
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::DropAction
+*********************************/
+ZEND_METHOD(QDropEvent, dropAction){
+	if (ZEND_NUM_ARGS() == 0){
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		Qt::DropAction obj = (Qt::DropAction) o->dropAction();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDropEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  setDropAction
+ *    flags:    
+ *
+ *    @param   Qt::DropAction
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QDropEvent, setDropAction){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		o->setDropAction( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  source
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget*
+*********************************/
+ZEND_METHOD(QDropEvent, source){
+	if (ZEND_NUM_ARGS() == 0){
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		QWidget* obj = (QWidget*) o->source();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDropEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  mimeData
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QMimeData *
+*********************************/
+ZEND_METHOD(QDropEvent, mimeData){
+	if (ZEND_NUM_ARGS() == 0){
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		const QMimeData * obj = (const QMimeData *) o->mimeData();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDropEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  format
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char*
+*********************************/
+ZEND_METHOD(QDropEvent, format){
+	if (ZEND_NUM_ARGS() == 1){
+	// 0
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		const char* obj = (const char*) o->format((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QDropEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  encodedData
+ *    flags:    c
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QByteArray
+*********************************/
+ZEND_METHOD(QDropEvent, encodedData){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		RETURN_BYTE[](o->encodedData( var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QDropEvent
+ *    function  provides
+ *    flags:    c
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QDropEvent, provides){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QDropEvent *o = (QDropEvent*) PHP_QT_FETCH();
+		RETURN_BOOL(o->provides( var_0));
+
+	}
+}
+
+
+ZEND_METHOD(QDropEvent,__construct){
+
+	QDropEvent *QDropEvent_ptr = new QDropEvent();
+
+	if(ZEND_NUM_ARGS() == 6){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		zval* param_4;
+		zval* param_5;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &param_1, &param_2, &param_3, &param_4, &param_5, &param_6) == FAILURE) {
+			return;
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_0));
+			QDropEvent_ptr = new QDropEvent(tmp);
+		}
+		 /*zval* actions Qt::DropActions*/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			Qt::DropActions tmp(Z_STRVAL_P(param_1));
+			QDropEvent_ptr = new QDropEvent(tmp);
+		}
+		 /*zval* data QMimeData**/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			QMimeData* tmp(Z_STRVAL_P(param_2));
+			QDropEvent_ptr = new QDropEvent(tmp);
+		}
+		 /*zval* buttons Qt::MouseButtons*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			Qt::MouseButtons tmp(Z_STRVAL_P(param_3));
+			QDropEvent_ptr = new QDropEvent(tmp);
+		}
+		 /*zval* modifiers Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_4) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_4));
+			QDropEvent_ptr = new QDropEvent(tmp);
+		}
+		 /*long type Type*/
+		if(Z_TYPE_P(param_5) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_5));
+			QDropEvent_ptr = new QDropEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QDropEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QDropEvent);
+

Added: trunk/playground/qfileopenevent.cpp
===================================================================
--- trunk/playground/qfileopenevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qfileopenevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,82 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QFileOpenEvent.cpp - QFileOpenEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QFileOpenEvent>
+
+
+
+/*********************************
+ *    class     QFileOpenEvent
+ *    function  file
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFileOpenEvent, file){
+	if (ZEND_NUM_ARGS() == 0){
+		QFileOpenEvent *o = (QFileOpenEvent*) PHP_QT_FETCH();
+		QString obj = (QString) o->file();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFileOpenEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QFileOpenEvent,__construct){
+
+	QFileOpenEvent *QFileOpenEvent_ptr = new QFileOpenEvent();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* file QString&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_0));
+			QFileOpenEvent_ptr = new QFileOpenEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QFileOpenEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QFileOpenEvent);
+

Added: trunk/playground/qfocusevent.cpp
===================================================================
--- trunk/playground/qfocusevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qfocusevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,124 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QFocusEvent.cpp - QFocusEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QFocusEvent>
+
+
+
+/*********************************
+ *    class     QFocusEvent
+ *    function  gotFocus
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFocusEvent, gotFocus){
+	if (ZEND_NUM_ARGS() == 0){
+		QFocusEvent *o = (QFocusEvent*) PHP_QT_FETCH();
+		RETURN_BOOL(o->gotFocus());
+	}
+}
+
+
+/*********************************
+ *    class     QFocusEvent
+ *    function  lostFocus
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFocusEvent, lostFocus){
+	if (ZEND_NUM_ARGS() == 0){
+		QFocusEvent *o = (QFocusEvent*) PHP_QT_FETCH();
+		RETURN_BOOL(o->lostFocus());
+	}
+}
+
+
+/*********************************
+ *    class     QFocusEvent
+ *    function  reason
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::FocusReason
+*********************************/
+ZEND_METHOD(QFocusEvent, reason){
+	if (ZEND_NUM_ARGS() == 0){
+		QFocusEvent *o = (QFocusEvent*) PHP_QT_FETCH();
+		Qt::FocusReason obj = (Qt::FocusReason) o->reason();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFocusEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QFocusEvent,__construct){
+
+	QFocusEvent *QFocusEvent_ptr = new QFocusEvent();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long type Type*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_0));
+			QFocusEvent_ptr = new QFocusEvent(tmp);
+		}
+		 /*zval* reason Qt::FocusReason*/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			Qt::FocusReason tmp(Z_STRVAL_P(param_1));
+			QFocusEvent_ptr = new QFocusEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QFocusEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QFocusEvent);
+

Added: trunk/playground/qfont.cpp
===================================================================
--- trunk/playground/qfont.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qfont.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,1481 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QFont.cpp - QFont PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*		public enumStyleHint:long {
+			StyleHint = 0,
+			SansSerif = Helvetica,
+			StyleHint = 2,
+			Serif = Times,
+			StyleHint = 4,
+			TypeWriter = Courier,
+			StyleHint = 6,
+			Decorative = OldEnglish,
+			StyleHint = 8,
+			StyleHint = 9
+		}
+*/
+
+/*		public enumStyleStrategy:long {
+			PreferDefault = 0x0001,
+			PreferBitmap = 0x0002,
+			PreferDevice = 0x0004,
+			PreferOutline = 0x0008,
+			ForceOutline = 0x0010,
+			PreferMatch = 0x0020,
+			PreferQuality = 0x0040,
+			PreferAntialias = 0x0080,
+			NoAntialias = 0x0100,
+			OpenGLCompatible = 0x0200
+		}
+*/
+
+/*		public enumWeight:long {
+			Light = 25,
+			Normal = 50,
+			DemiBold = 63,
+			Bold = 75,
+			Black = 87
+		}
+*/
+
+/*		public enumStyle:long {
+			Style = 0,
+			Style = 1,
+			Style = 2
+		}
+*/
+
+/*		public enumStretch:long {
+			UltraCondensed = 50,
+			ExtraCondensed = 62,
+			Condensed = 75,
+			SemiCondensed = 87,
+			Unstretched = 100,
+			SemiExpanded = 112,
+			Expanded = 125,
+			ExtraExpanded = 150,
+			UltraExpanded = 200
+		}
+*/
+
+/*********************************
+ *    class     QFont
+ *    function  QFont
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QFont, QFont){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_~(o->QFont());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  family
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFont, family){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QString obj = (QString) o->family();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setFamily
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setFamily){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setFamily( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  pointSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QFont, pointSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_LONG(o->pointSize());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setPointSize
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setPointSize){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setPointSize((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  pointSizeF
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   qreal
+*********************************/
+ZEND_METHOD(QFont, pointSizeF){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setPointSizeF
+ *    flags:    
+ *
+ *    @param   qreal
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setPointSizeF){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setPointSizeF( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  pixelSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QFont, pixelSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_LONG(o->pixelSize());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setPixelSize
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setPixelSize){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setPixelSize((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  weight
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QFont, weight){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_LONG(o->weight());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setWeight
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setWeight){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setWeight((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  bold
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, bold){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->bold());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setBold
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setBold){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setBold((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setStyle
+ *    flags:    
+ *
+ *    @param   Style
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setStyle){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setStyle( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  style
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Style
+*********************************/
+ZEND_METHOD(QFont, style){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  italic
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, italic){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->italic());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setItalic
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setItalic){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setItalic((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  underline
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, underline){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->underline());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setUnderline
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setUnderline){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setUnderline((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  overline
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, overline){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->overline());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setOverline
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setOverline){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setOverline((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  strikeOut
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, strikeOut){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->strikeOut());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setStrikeOut
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setStrikeOut){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setStrikeOut((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  fixedPitch
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, fixedPitch){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->fixedPitch());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setFixedPitch
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setFixedPitch){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setFixedPitch((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  kerning
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, kerning){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->kerning());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setKerning
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setKerning){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setKerning((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  styleHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   StyleHint
+*********************************/
+ZEND_METHOD(QFont, styleHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_LONG(o->styleHint());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  styleStrategy
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   StyleStrategy
+*********************************/
+ZEND_METHOD(QFont, styleStrategy){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_LONG(o->styleStrategy());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setStyleHint
+ *    flags:    
+ *
+ *    @param   StyleHint
+ *    @param   StyleStrategy
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setStyleHint){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// PreferDefault
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setStyleHint((StyleHint) var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setStyleStrategy
+ *    flags:    
+ *
+ *    @param   StyleStrategy
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setStyleStrategy){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setStyleStrategy( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  stretch
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QFont, stretch){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_LONG(o->stretch());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setStretch
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setStretch){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setStretch((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  rawMode
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, rawMode){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->rawMode());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setRawMode
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setRawMode){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setRawMode((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  exactMatch
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, exactMatch){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->exactMatch());
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  isCopyOf
+ *    flags:    c
+ *
+ *    @param   const QFont&
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, isCopyOf){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isCopyOf( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  handle
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::HANDLE
+*********************************/
+ZEND_METHOD(QFont, handle){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		Qt::HANDLE obj = (Qt::HANDLE) o->handle();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  setRawName
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, setRawName){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->setRawName( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  rawName
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFont, rawName){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QString obj = (QString) o->rawName();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  key
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFont, key){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QString obj = (QString) o->key();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  toString
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFont, toString){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QString obj = (QString) o->toString();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  fromString
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFont, fromString){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_BOOL(o->fromString( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  defaultFamily
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFont, defaultFamily){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QString obj = (QString) o->defaultFamily();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  lastResortFamily
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFont, lastResortFamily){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QString obj = (QString) o->lastResortFamily();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  lastResortFont
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFont, lastResortFont){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QString obj = (QString) o->lastResortFont();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  resolve
+ *    flags:    c
+ *
+ *    @param   const QFont&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QFont
+*********************************/
+ZEND_METHOD(QFont, resolve){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QFont obj = (QFont) o->resolve( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: resolve
+	}
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		RETURN_LONG(o->resolve());
+// marked for overloading: resolve
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->resolve((uint) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  substitute
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFont, substitute){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QString obj = (QString) o->substitute( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  substitutes
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QStringList
+*********************************/
+ZEND_METHOD(QFont, substitutes){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QStringList obj = (QStringList) o->substitutes( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  substitutions
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QStringList
+*********************************/
+ZEND_METHOD(QFont, substitutions){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		QStringList obj = (QStringList) o->substitutions();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFont_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  insertSubstitution
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, insertSubstitution){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->insertSubstitution( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  insertSubstitutions
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   const QStringList&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, insertSubstitutions){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->insertSubstitutions( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  removeSubstitution
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, removeSubstitution){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->removeSubstitution( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  initialize
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, initialize){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->initialize();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  cleanup
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, cleanup){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->cleanup();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFont
+ *    function  cacheStatistics
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFont, cacheStatistics){
+	if (ZEND_NUM_ARGS() == 0){
+		QFont *o = (QFont*) PHP_QT_FETCH();
+		o->cacheStatistics();
+		RETURN_NULL();
+
+	}
+}
+
+
+ZEND_METHOD(QFont,__construct){
+
+	QFont *QFont_ptr = new QFont();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 4){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
+			return;
+		}
+		 /*zval* family QString&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_0));
+			QFont_ptr = new QFont(tmp);
+		}
+		 /*long pointSize int*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QFont_ptr = new QFont(tmp);
+		}
+		 /*long weight int*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_2));
+			QFont_ptr = new QFont(tmp);
+		}
+		 /*bool italic bool*/
+		if(Z_TYPE_P(param_3) == IS_BOOL) {
+			bool tmp(Z_STRVAL_P(param_3));
+			QFont_ptr = new QFont(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* arg1 QFont&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QFont& tmp(Z_STRVAL_P(param_0));
+			QFont_ptr = new QFont(tmp);
+		}
+		 /*long pd QPaintDevice**/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPaintDevice* tmp(Z_STRVAL_P(param_1));
+			QFont_ptr = new QFont(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* arg1 QFont&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QFont& tmp(Z_STRVAL_P(param_0));
+			QFont_ptr = new QFont(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QFont_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QFont);
+

Added: trunk/playground/qframe.cpp
===================================================================
--- trunk/playground/qframe.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qframe.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,672 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QFrame.cpp - QFrame PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QFrame>
+
+
+
+/*		public enumShape:long {
+			NoFrame = 0,
+			Box = 0x0001,
+			Panel = 0x0002,
+			WinPanel = 0x0003,
+			HLine = 0x0004,
+			VLine = 0x0005,
+			StyledPanel = 0x0006
+		}
+*/
+
+/*		public enumShadow:long {
+			Plain = 0x0010,
+			Raised = 0x0020,
+			Sunken = 0x0030
+		}
+*/
+
+/*		public enum:long {
+			Shadow_Mask = 0x00f0,
+			Shape_Mask = 0x000f
+		}
+*/
+
+/*********************************
+ *    class     QFrame
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QFrame, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QFrame, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QFrame, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFrame, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFrame, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QFrame, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  QFrame
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QFrame, QFrame){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		RETURN_~(o->QFrame());
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  frameStyle
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QFrame, frameStyle){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		RETURN_LONG(o->frameStyle());
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  setFrameStyle
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFrame, setFrameStyle){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		o->setFrameStyle((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  frameWidth
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QFrame, frameWidth){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		RETURN_LONG(o->frameWidth());
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QFrame, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFrame_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  frameShape
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Shape
+*********************************/
+ZEND_METHOD(QFrame, frameShape){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  setFrameShape
+ *    flags:    
+ *
+ *    @param   Shape
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFrame, setFrameShape){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"frameShape",strlen("frameShape"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  frameShadow
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Shadow
+*********************************/
+ZEND_METHOD(QFrame, frameShadow){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  setFrameShadow
+ *    flags:    
+ *
+ *    @param   Shadow
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFrame, setFrameShadow){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"frameShadow",strlen("frameShadow"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  lineWidth
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QFrame, lineWidth){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		RETURN_LONG(o->lineWidth());
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  setLineWidth
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFrame, setLineWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"lineWidth",strlen("lineWidth"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  midLineWidth
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QFrame, midLineWidth){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		RETURN_LONG(o->midLineWidth());
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  setMidLineWidth
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFrame, setMidLineWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"midLineWidth",strlen("midLineWidth"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  frameRect
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QFrame, frameRect){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->frameRect();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFrame_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  setFrameRect
+ *    flags:    
+ *
+ *    @param   const QRect&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFrame, setFrameRect){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"frameRect",strlen("frameRect"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QFrame, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFrame_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFrame, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFrame_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QFrame, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QFrame_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QFrame
+ *    function  drawFrame
+ *    flags:    
+ *
+ *    @param   QPainter*
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QFrame, drawFrame){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QFrame *o = (QFrame*) PHP_QT_FETCH();
+		o->drawFrame((QPainter*) var_0);
+		RETURN_NULL();
+
+	}
+}
+
+
+ZEND_METHOD(QFrame,__construct){
+
+	QFrame *QFrame_ptr = new QFrame();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QFrame_ptr = new QFrame(tmp);
+		}
+		 /*long f Qt::WFlags*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			Qt::WFlags tmp(Z_STRVAL_P(param_1));
+			QFrame_ptr = new QFrame(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*zval* dd QFramePrivate&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QFramePrivate& tmp(Z_STRVAL_P(param_0));
+			QFrame_ptr = new QFrame(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_1));
+			QFrame_ptr = new QFrame(tmp);
+		}
+		 /*long f Qt::WFlags*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			Qt::WFlags tmp(Z_STRVAL_P(param_2));
+			QFrame_ptr = new QFrame(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QFrame_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QFrame);
+

Added: trunk/playground/qgridlayout.cpp
===================================================================
--- trunk/playground/qgridlayout.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qgridlayout.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,1171 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QGridLayout.cpp - QGridLayout PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QGridLayout>
+
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QGridLayout, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QGridLayout, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QGridLayout, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QGridLayout, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QGridLayout, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QGridLayout, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  QGridLayout
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QGridLayout, QGridLayout){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_~(o->QGridLayout());
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QGridLayout, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  minimumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QGridLayout, minimumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->minimumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  maximumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QGridLayout, maximumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->maximumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  setRowStretch
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, setRowStretch){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->setRowStretch((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  setColumnStretch
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, setColumnStretch){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->setColumnStretch((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  rowStretch
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QGridLayout, rowStretch){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->rowStretch((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  columnStretch
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QGridLayout, columnStretch){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->columnStretch((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  setRowMinimumHeight
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, setRowMinimumHeight){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->setRowMinimumHeight((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  setColumnMinimumWidth
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, setColumnMinimumWidth){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->setColumnMinimumWidth((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  rowMinimumHeight
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QGridLayout, rowMinimumHeight){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->rowMinimumHeight((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  columnMinimumWidth
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QGridLayout, columnMinimumWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->columnMinimumWidth((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  columnCount
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QGridLayout, columnCount){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->columnCount());
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  rowCount
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QGridLayout, rowCount){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->rowCount());
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  cellRect
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QGridLayout, cellRect){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->cellRect((int) var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  hasHeightForWidth
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QGridLayout, hasHeightForWidth){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasHeightForWidth());
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  heightForWidth
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QGridLayout, heightForWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->heightForWidth((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  minimumHeightForWidth
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QGridLayout, minimumHeightForWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->minimumHeightForWidth((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  expandingDirections
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Orientations
+*********************************/
+ZEND_METHOD(QGridLayout, expandingDirections){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		Qt::Orientations obj = (Qt::Orientations) o->expandingDirections();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  invalidate
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, invalidate){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->invalidate();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  addWidget
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, addWidget){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->addWidget( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: addWidget
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 0
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->addWidget( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		RETURN_NULL();
+// marked for overloading: addWidget
+	}
+	if (ZEND_NUM_ARGS() == 6){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		long var_4;
+	// 0
+		zval* var_5;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->addWidget( tmp_var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  addLayout
+ *    flags:    
+ *
+ *    @param   QLayout*
+ *    @param   int
+ *    @param   int
+ *    @param   Qt::Alignment
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, addLayout){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 0
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->addLayout( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		RETURN_NULL();
+// marked for overloading: addLayout
+	}
+	if (ZEND_NUM_ARGS() == 6){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		long var_4;
+	// 0
+		zval* var_5;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->addLayout( tmp_var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  setOriginCorner
+ *    flags:    
+ *
+ *    @param   Qt::Corner
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, setOriginCorner){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->setOriginCorner( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  originCorner
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Corner
+*********************************/
+ZEND_METHOD(QGridLayout, originCorner){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		Qt::Corner obj = (Qt::Corner) o->originCorner();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  itemAt
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QLayoutItem *
+*********************************/
+ZEND_METHOD(QGridLayout, itemAt){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		QLayoutItem * obj = (QLayoutItem *) o->itemAt((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  takeAt
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QLayoutItem *
+*********************************/
+ZEND_METHOD(QGridLayout, takeAt){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		QLayoutItem * obj = (QLayoutItem *) o->takeAt((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  count
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QGridLayout, count){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->count());
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  setGeometry
+ *    flags:    
+ *
+ *    @param   const QRect&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, setGeometry){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->setGeometry( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  addItem
+ *    flags:    
+ *
+ *    @param   QLayoutItem*
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   Qt::Alignment
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, addItem){
+	if (ZEND_NUM_ARGS() == 6){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 1
+		long var_3;
+	// 1
+		long var_4;
+	// 0
+		zval* var_5;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->addItem( tmp_var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  setDefaultPositioning
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   Qt::Orientation
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, setDefaultPositioning){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->setDefaultPositioning((int) var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  getItemPosition
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int*
+ *    @param   int*
+ *    @param   int*
+ *    @param   int*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QGridLayout, getItemPosition){
+	if (ZEND_NUM_ARGS() == 5){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		long var_4;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll", &var_0, &var_1, &var_2, &var_3, &var_4) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->getItemPosition((int) var_0, (int*) var_1, (int*) var_2, (int*) var_3, (int*) var_4);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QGridLayout, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QGridLayout, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QGridLayout
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QGridLayout, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QGridLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: addItem
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
+		o->addItem( tmp_var_0);
+		RETURN_NULL();
+
+	}
+}
+
+
+ZEND_METHOD(QGridLayout,__construct){
+
+	QGridLayout *QGridLayout_ptr = new QGridLayout();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QGridLayout_ptr = new QGridLayout(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	PHP_QT_REGISTER(QGridLayout_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QGridLayout);
+

Added: trunk/playground/qhboxlayout.cpp
===================================================================
--- trunk/playground/qhboxlayout.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qhboxlayout.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,297 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QHBoxLayout.cpp - QHBoxLayout PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QHBoxLayout>
+
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QHBoxLayout, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QHBoxLayout, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QHBoxLayout, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QHBoxLayout, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QHBoxLayout, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QHBoxLayout, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  QHBoxLayout
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QHBoxLayout, QHBoxLayout){
+	if (ZEND_NUM_ARGS() == 0){
+		QHBoxLayout *o = (QHBoxLayout*) PHP_QT_FETCH();
+		RETURN_~(o->QHBoxLayout());
+	}
+}
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QHBoxLayout, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QHBoxLayout *o = (QHBoxLayout*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QHBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QHBoxLayout, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QHBoxLayout *o = (QHBoxLayout*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QHBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QHBoxLayout
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QHBoxLayout, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QHBoxLayout *o = (QHBoxLayout*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QHBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QHBoxLayout,__construct){
+
+	QHBoxLayout *QHBoxLayout_ptr = new QHBoxLayout();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QHBoxLayout_ptr = new QHBoxLayout(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QHBoxLayout_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QHBoxLayout);
+

Added: trunk/playground/qhelpevent.cpp
===================================================================
--- trunk/playground/qhelpevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qhelpevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,190 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QHelpEvent.cpp - QHelpEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QHelpEvent>
+
+
+
+/*********************************
+ *    class     QHelpEvent
+ *    function  x
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QHelpEvent, x){
+	if (ZEND_NUM_ARGS() == 0){
+		QHelpEvent *o = (QHelpEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->x());
+	}
+}
+
+
+/*********************************
+ *    class     QHelpEvent
+ *    function  y
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QHelpEvent, y){
+	if (ZEND_NUM_ARGS() == 0){
+		QHelpEvent *o = (QHelpEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->y());
+	}
+}
+
+
+/*********************************
+ *    class     QHelpEvent
+ *    function  globalX
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QHelpEvent, globalX){
+	if (ZEND_NUM_ARGS() == 0){
+		QHelpEvent *o = (QHelpEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalX());
+	}
+}
+
+
+/*********************************
+ *    class     QHelpEvent
+ *    function  globalY
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QHelpEvent, globalY){
+	if (ZEND_NUM_ARGS() == 0){
+		QHelpEvent *o = (QHelpEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalY());
+	}
+}
+
+
+/*********************************
+ *    class     QHelpEvent
+ *    function  pos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint&
+*********************************/
+ZEND_METHOD(QHelpEvent, pos){
+	if (ZEND_NUM_ARGS() == 0){
+		QHelpEvent *o = (QHelpEvent*) PHP_QT_FETCH();
+		const QPoint& obj = (const QPoint&) o->pos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QHelpEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QHelpEvent
+ *    function  globalPos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint&
+*********************************/
+ZEND_METHOD(QHelpEvent, globalPos){
+	if (ZEND_NUM_ARGS() == 0){
+		QHelpEvent *o = (QHelpEvent*) PHP_QT_FETCH();
+		const QPoint& obj = (const QPoint&) o->globalPos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QHelpEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QHelpEvent,__construct){
+
+	QHelpEvent *QHelpEvent_ptr = new QHelpEvent();
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*long type Type*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_0));
+			QHelpEvent_ptr = new QHelpEvent(tmp);
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_1));
+			QHelpEvent_ptr = new QHelpEvent(tmp);
+		}
+		 /*long globalPos QPoint&*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_2));
+			QHelpEvent_ptr = new QHelpEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QHelpEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QHelpEvent);
+

Added: trunk/playground/qhideevent.cpp
===================================================================
--- trunk/playground/qhideevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qhideevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,54 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QHideEvent.cpp - QHideEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QHideEvent>
+
+
+	}
+}
+
+
+ZEND_METHOD(QHideEvent,__construct){
+
+	QHideEvent *QHideEvent_ptr = new QHideEvent();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	PHP_QT_REGISTER(QHideEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QHideEvent);
+

Added: trunk/playground/qhoverevent.cpp
===================================================================
--- trunk/playground/qhoverevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qhoverevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,118 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QHoverEvent.cpp - QHoverEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QHoverEvent>
+
+
+
+/*********************************
+ *    class     QHoverEvent
+ *    function  pos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QHoverEvent, pos){
+	if (ZEND_NUM_ARGS() == 0){
+		QHoverEvent *o = (QHoverEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->pos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QHoverEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QHoverEvent
+ *    function  oldPos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QHoverEvent, oldPos){
+	if (ZEND_NUM_ARGS() == 0){
+		QHoverEvent *o = (QHoverEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->oldPos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QHoverEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QHoverEvent,__construct){
+
+	QHoverEvent *QHoverEvent_ptr = new QHoverEvent();
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*long type Type*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_0));
+			QHoverEvent_ptr = new QHoverEvent(tmp);
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_1));
+			QHoverEvent_ptr = new QHoverEvent(tmp);
+		}
+		 /*long oldPos QPoint&*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_2));
+			QHoverEvent_ptr = new QHoverEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QHoverEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QHoverEvent);
+

Added: trunk/playground/qicondragevent.cpp
===================================================================
--- trunk/playground/qicondragevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qicondragevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,54 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QIconDragEvent.cpp - QIconDragEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QIconDragEvent>
+
+
+	}
+}
+
+
+ZEND_METHOD(QIconDragEvent,__construct){
+
+	QIconDragEvent *QIconDragEvent_ptr = new QIconDragEvent();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	PHP_QT_REGISTER(QIconDragEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QIconDragEvent);
+

Added: trunk/playground/qinputevent.cpp
===================================================================
--- trunk/playground/qinputevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qinputevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,88 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QInputEvent.cpp - QInputEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QInputEvent>
+
+
+
+/*********************************
+ *    class     QInputEvent
+ *    function  modifiers
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::KeyboardModifiers
+*********************************/
+ZEND_METHOD(QInputEvent, modifiers){
+	if (ZEND_NUM_ARGS() == 0){
+		QInputEvent *o = (QInputEvent*) PHP_QT_FETCH();
+		Qt::KeyboardModifiers obj = (Qt::KeyboardModifiers) o->modifiers();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QInputEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QInputEvent,__construct){
+
+	QInputEvent *QInputEvent_ptr = new QInputEvent();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long type Type*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_0));
+			QInputEvent_ptr = new QInputEvent(tmp);
+		}
+		 /*zval* modifiers Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_1));
+			QInputEvent_ptr = new QInputEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QInputEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QInputEvent);
+

Added: trunk/playground/qinputmethodevent.cpp
===================================================================
--- trunk/playground/qinputmethodevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qinputmethodevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,189 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QInputMethodEvent.cpp - QInputMethodEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QInputMethodEvent>
+
+
+
+/*		public enumAttributeType:long {
+			AttributeType = 0,
+			AttributeType = 1,
+			AttributeType = 2,
+			AttributeType = 3
+		}
+*/
+
+/*********************************
+ *    class     QInputMethodEvent
+ *    function  setCommitString
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QInputMethodEvent, setCommitString){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// 0
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
+		o->setCommitString( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QInputMethodEvent
+ *    function  preeditString
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QString &
+*********************************/
+ZEND_METHOD(QInputMethodEvent, preeditString){
+	if (ZEND_NUM_ARGS() == 0){
+		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
+		const QString & obj = (const QString &) o->preeditString();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QInputMethodEvent
+ *    function  commitString
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QString &
+*********************************/
+ZEND_METHOD(QInputMethodEvent, commitString){
+	if (ZEND_NUM_ARGS() == 0){
+		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
+		const QString & obj = (const QString &) o->commitString();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QInputMethodEvent
+ *    function  replacementStart
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QInputMethodEvent, replacementStart){
+	if (ZEND_NUM_ARGS() == 0){
+		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->replacementStart());
+	}
+}
+
+
+/*********************************
+ *    class     QInputMethodEvent
+ *    function  replacementLength
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QInputMethodEvent, replacementLength){
+	if (ZEND_NUM_ARGS() == 0){
+		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->replacementLength());
+
+	}
+}
+
+
+ZEND_METHOD(QInputMethodEvent,__construct){
+
+	QInputMethodEvent *QInputMethodEvent_ptr = new QInputMethodEvent();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* other QInputMethodEvent&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QInputMethodEvent& tmp(Z_STRVAL_P(param_0));
+			QInputMethodEvent_ptr = new QInputMethodEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QInputMethodEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QInputMethodEvent);
+

Added: trunk/playground/qinputmethodevent__attribute.cpp
===================================================================
--- trunk/playground/qinputmethodevent__attribute.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qinputmethodevent__attribute.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,75 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Attribute.cpp - Attribute PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+	}
+}
+
+
+ZEND_METHOD(Attribute,__construct){
+
+	Attribute *Attribute_ptr = new Attribute();
+
+	if(ZEND_NUM_ARGS() == 4){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
+			return;
+		}
+		 /*AttributeType t AttributeType*/
+		if(Z_TYPE_P(param_0) == IS_) {
+			AttributeType tmp(Z_STRVAL_P(param_0));
+			Attribute_ptr = new Attribute(tmp);
+		}
+		 /*long s int*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			Attribute_ptr = new Attribute(tmp);
+		}
+		 /*long l int*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_2));
+			Attribute_ptr = new Attribute(tmp);
+		}
+		 /*zval* val QVariant*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			QVariant tmp(Z_STRVAL_P(param_3));
+			Attribute_ptr = new Attribute(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(Attribute_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(Attribute);
+

Added: trunk/playground/qkeyevent.cpp
===================================================================
--- trunk/playground/qkeyevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qkeyevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,190 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QKeyEvent.cpp - QKeyEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QKeyEvent>
+
+
+
+/*********************************
+ *    class     QKeyEvent
+ *    function  key
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QKeyEvent, key){
+	if (ZEND_NUM_ARGS() == 0){
+		QKeyEvent *o = (QKeyEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->key());
+	}
+}
+
+
+/*********************************
+ *    class     QKeyEvent
+ *    function  modifiers
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::KeyboardModifiers
+*********************************/
+ZEND_METHOD(QKeyEvent, modifiers){
+	if (ZEND_NUM_ARGS() == 0){
+		QKeyEvent *o = (QKeyEvent*) PHP_QT_FETCH();
+		Qt::KeyboardModifiers obj = (Qt::KeyboardModifiers) o->modifiers();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QKeyEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QKeyEvent
+ *    function  text
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QKeyEvent, text){
+	if (ZEND_NUM_ARGS() == 0){
+		QKeyEvent *o = (QKeyEvent*) PHP_QT_FETCH();
+		QString obj = (QString) o->text();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QKeyEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QKeyEvent
+ *    function  isAutoRepeat
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QKeyEvent, isAutoRepeat){
+	if (ZEND_NUM_ARGS() == 0){
+		QKeyEvent *o = (QKeyEvent*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isAutoRepeat());
+	}
+}
+
+
+/*********************************
+ *    class     QKeyEvent
+ *    function  count
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QKeyEvent, count){
+	if (ZEND_NUM_ARGS() == 0){
+		QKeyEvent *o = (QKeyEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->count());
+
+	}
+}
+
+
+ZEND_METHOD(QKeyEvent,__construct){
+
+	QKeyEvent *QKeyEvent_ptr = new QKeyEvent();
+
+	if(ZEND_NUM_ARGS() == 6){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		zval* param_4;
+		zval* param_5;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &param_1, &param_2, &param_3, &param_4, &param_5, &param_6) == FAILURE) {
+			return;
+		}
+		 /*long type Type*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_0));
+			QKeyEvent_ptr = new QKeyEvent(tmp);
+		}
+		 /*long key int*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QKeyEvent_ptr = new QKeyEvent(tmp);
+		}
+		 /*zval* modifiers Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_2));
+			QKeyEvent_ptr = new QKeyEvent(tmp);
+		}
+		 /*zval* text QString&*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_3));
+			QKeyEvent_ptr = new QKeyEvent(tmp);
+		}
+		 /*bool autorep bool*/
+		if(Z_TYPE_P(param_4) == IS_BOOL) {
+			bool tmp(Z_STRVAL_P(param_4));
+			QKeyEvent_ptr = new QKeyEvent(tmp);
+		}
+		 /*ushort count ushort*/
+		if(Z_TYPE_P(param_5) == IS_LONG) {
+			ushort tmp(Z_STRVAL_P(param_5));
+			QKeyEvent_ptr = new QKeyEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QKeyEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QKeyEvent);
+

Added: trunk/playground/qlabel.cpp
===================================================================
--- trunk/playground/qlabel.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qlabel.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,993 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QLabel.cpp - QLabel PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QLabel>
+
+
+
+/*********************************
+ *    class     QLabel
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QLabel, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QLabel, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QLabel, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLabel, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLabel, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLabel, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  QLabel
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QLabel, QLabel){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		RETURN_~(o->QLabel());
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  text
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLabel, text){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		QString obj = (QString) o->text();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  pixmap
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPixmap *
+*********************************/
+ZEND_METHOD(QLabel, pixmap){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		const QPixmap * obj = (const QPixmap *) o->pixmap();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  picture
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPicture *
+*********************************/
+ZEND_METHOD(QLabel, picture){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		const QPicture * obj = (const QPicture *) o->picture();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  movie
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMovie *
+*********************************/
+ZEND_METHOD(QLabel, movie){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		QMovie * obj = (QMovie *) o->movie();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  textFormat
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::TextFormat
+*********************************/
+ZEND_METHOD(QLabel, textFormat){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		Qt::TextFormat obj = (Qt::TextFormat) o->textFormat();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setTextFormat
+ *    flags:    
+ *
+ *    @param   Qt::TextFormat
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setTextFormat){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"textFormat",strlen("textFormat"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  alignment
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Alignment
+*********************************/
+ZEND_METHOD(QLabel, alignment){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		Qt::Alignment obj = (Qt::Alignment) o->alignment();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setAlignment
+ *    flags:    
+ *
+ *    @param   Qt::Alignment
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setAlignment){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"alignment",strlen("alignment"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setWordWrap
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setWordWrap){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"wordWrap",strlen("wordWrap"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  wordWrap
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLabel, wordWrap){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		RETURN_BOOL(o->wordWrap());
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  indent
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLabel, indent){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		RETURN_LONG(o->indent());
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setIndent
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setIndent){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"indent",strlen("indent"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  margin
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLabel, margin){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		RETURN_LONG(o->margin());
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setMargin
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setMargin){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"margin",strlen("margin"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  hasScaledContents
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLabel, hasScaledContents){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasScaledContents());
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setScaledContents
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setScaledContents){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"scaledContents",strlen("scaledContents"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLabel, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  minimumSizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLabel, minimumSizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->minimumSizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setBuddy
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setBuddy){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		o->setBuddy( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  buddy
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QLabel, buddy){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->buddy();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  heightForWidth
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLabel, heightForWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		RETURN_LONG(o->heightForWidth((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setText
+ *    flags:    l
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setText){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"text",strlen("text"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setPixmap
+ *    flags:    l
+ *
+ *    @param   const QPixmap&
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setPixmap){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"pixmap",strlen("pixmap"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setPicture
+ *    flags:    l
+ *
+ *    @param   const QPicture&
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setPicture){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		o->setPicture( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setMovie
+ *    flags:    l
+ *
+ *    @param   QMovie*
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setMovie){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		o->setMovie( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  setNum
+ *    flags:    l
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, setNum){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		o->setNum((int) var_0);
+		RETURN_NULL();
+// marked for overloading: setNum
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		o->setNum( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  clear
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLabel, clear){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		o->clear();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QLabel, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLabel, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLabel, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLabel_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLabel
+ *    function  event
+ *    flags:    
+ *
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   protected
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLabel, event){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLabel *o = (QLabel*) PHP_QT_FETCH();
+		RETURN_BOOL(o->event( tmp_var_0));
+
+	}
+}
+
+
+ZEND_METHOD(QLabel,__construct){
+
+	QLabel *QLabel_ptr = new QLabel();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QLabel_ptr = new QLabel(tmp);
+		}
+		 /*long f Qt::WFlags*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			Qt::WFlags tmp(Z_STRVAL_P(param_1));
+			QLabel_ptr = new QLabel(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*zval* text QString&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_0));
+			QLabel_ptr = new QLabel(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_1));
+			QLabel_ptr = new QLabel(tmp);
+		}
+		 /*long f Qt::WFlags*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			Qt::WFlags tmp(Z_STRVAL_P(param_2));
+			QLabel_ptr = new QLabel(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QLabel_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QLabel);
+

Added: trunk/playground/qlatin1char.cpp
===================================================================
--- trunk/playground/qlatin1char.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qlatin1char.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,89 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QLatin1Char.cpp - QLatin1Char PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QLatin1Char
+ *    function  toLatin1
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char
+*********************************/
+ZEND_METHOD(QLatin1Char, toLatin1){
+	if (ZEND_NUM_ARGS() == 0){
+		QLatin1Char *o = (QLatin1Char*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QLatin1Char
+ *    function  unicode
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const ushort
+*********************************/
+ZEND_METHOD(QLatin1Char, unicode){
+	if (ZEND_NUM_ARGS() == 0){
+		QLatin1Char *o = (QLatin1Char*) PHP_QT_FETCH();
+
+	}
+}
+
+
+ZEND_METHOD(QLatin1Char,__construct){
+
+	QLatin1Char *QLatin1Char_ptr = new QLatin1Char();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*char*  c char*/
+		if(Z_TYPE_P(param_0) == IS_STRING) {
+			char tmp(Z_STRVAL_P(param_0));
+			QLatin1Char_ptr = new QLatin1Char(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QLatin1Char_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QLatin1Char);
+

Added: trunk/playground/qlatin1string.cpp
===================================================================
--- trunk/playground/qlatin1string.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qlatin1string.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,79 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QLatin1String.cpp - QLatin1String PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QLatin1String
+ *    function  latin1
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QLatin1String, latin1){
+	if (ZEND_NUM_ARGS() == 0){
+		QLatin1String *o = (QLatin1String*) PHP_QT_FETCH();
+		const char * obj = (const char *) o->latin1();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLatin1String_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QLatin1String,__construct){
+
+	QLatin1String *QLatin1String_ptr = new QLatin1String();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*char*  s char**/
+		if(Z_TYPE_P(param_0) == IS_STRING) {
+			char* tmp(Z_STRVAL_P(param_0));
+			QLatin1String_ptr = new QLatin1String(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QLatin1String_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QLatin1String);
+

Added: trunk/playground/qlayout.cpp
===================================================================
--- trunk/playground/qlayout.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qlayout.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,1115 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QLayout.cpp - QLayout PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QLayout>
+
+
+
+/*		public enumSizeConstraint:long {
+			SizeConstraint = 0,
+			SizeConstraint = 1,
+			SizeConstraint = 2,
+			SizeConstraint = 3,
+			SizeConstraint = 4,
+			SizeConstraint = 5
+		}
+*/
+
+/*********************************
+ *    class     QLayout
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QLayout, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QLayout, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QLayout, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLayout, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLayout, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLayout, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  QLayout
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QLayout, QLayout){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		RETURN_~(o->QLayout());
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  margin
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLayout, margin){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->margin());
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  spacing
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLayout, spacing){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->spacing());
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  setMargin
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, setMargin){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"margin",strlen("margin"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  setSpacing
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, setSpacing){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"spacing",strlen("spacing"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  setAlignment
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   Qt::Alignment
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLayout, setAlignment){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		RETURN_BOOL(o->setAlignment( tmp_var_0,  tmp_var_1));
+// marked for overloading: setAlignment
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		RETURN_BOOL(o->setAlignment( tmp_var_0,  tmp_var_1));
+// marked for overloading: setAlignment
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		o->setAlignment( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  setSizeConstraint
+ *    flags:    
+ *
+ *    @param   SizeConstraint
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, setSizeConstraint){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizeConstraint",strlen("sizeConstraint"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  sizeConstraint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   SizeConstraint
+*********************************/
+ZEND_METHOD(QLayout, sizeConstraint){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  setMenuBar
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, setMenuBar){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		o->setMenuBar( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  menuBar
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QLayout, menuBar){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->menuBar();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  parentWidget
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QLayout, parentWidget){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->parentWidget();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  invalidate
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, invalidate){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		o->invalidate();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  geometry
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QLayout, geometry){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->geometry();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  activate
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLayout, activate){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		RETURN_BOOL(o->activate());
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  update
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, update){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		o->update();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  addWidget
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, addWidget){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		o->addWidget( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  addItem
+ *    flags:    pv
+ *
+ *    @param   QLayoutItem*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, addItem){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  removeWidget
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, removeWidget){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		o->removeWidget( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  removeItem
+ *    flags:    
+ *
+ *    @param   QLayoutItem*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, removeItem){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		o->removeItem( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  expandingDirections
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Orientations
+*********************************/
+ZEND_METHOD(QLayout, expandingDirections){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		Qt::Orientations obj = (Qt::Orientations) o->expandingDirections();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  minimumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLayout, minimumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->minimumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  maximumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLayout, maximumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->maximumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  setGeometry
+ *    flags:    p
+ *
+ *    @param   const QRect&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, setGeometry){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		o->setGeometry( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  itemAt
+ *    flags:    cpv
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QLayoutItem *
+*********************************/
+ZEND_METHOD(QLayout, itemAt){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  takeAt
+ *    flags:    pv
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QLayoutItem *
+*********************************/
+ZEND_METHOD(QLayout, takeAt){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  indexOf
+ *    flags:    cv
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLayout, indexOf){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  count
+ *    flags:    cpv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLayout, count){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  isEmpty
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLayout, isEmpty){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isEmpty());
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  totalHeightForWidth
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLayout, totalHeightForWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		RETURN_LONG(o->totalHeightForWidth((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  totalMinimumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLayout, totalMinimumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->totalMinimumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  totalMaximumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLayout, totalMaximumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->totalMaximumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  totalSizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLayout, totalSizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->totalSizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  layout
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QLayout *
+*********************************/
+ZEND_METHOD(QLayout, layout){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QLayout * obj = (QLayout *) o->layout();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  setEnabled
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayout, setEnabled){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		o->setEnabled((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  isEnabled
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLayout, isEnabled){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isEnabled());
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QLayout, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLayout, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizeConstraint",strlen("sizeConstraint"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLayout, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayout
+ *    function  closestAcceptableSize
+ *    flags:    s
+ *
+ *    @param   const QWidget*
+ *    @param   const QSize&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLayout, closestAcceptableSize){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QLayout *o = (QLayout*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->closestAcceptableSize( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QLayout,__construct){
+
+	QLayout *QLayout_ptr = new QLayout();
+
+	PHP_QT_REGISTER(QLayout_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QLayout);
+

Added: trunk/playground/qlayoutitem.cpp
===================================================================
--- trunk/playground/qlayoutitem.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qlayoutitem.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,367 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QLayoutItem.cpp - QLayoutItem PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  QLayoutItem
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QLayoutItem, QLayoutItem){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  sizeHint
+ *    flags:    cpv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLayoutItem, sizeHint){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  minimumSize
+ *    flags:    cpv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLayoutItem, minimumSize){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  maximumSize
+ *    flags:    cpv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLayoutItem, maximumSize){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  expandingDirections
+ *    flags:    cpv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Orientations
+*********************************/
+ZEND_METHOD(QLayoutItem, expandingDirections){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  setGeometry
+ *    flags:    pv
+ *
+ *    @param   const QRect&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayoutItem, setGeometry){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  geometry
+ *    flags:    cpv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QLayoutItem, geometry){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  isEmpty
+ *    flags:    cpv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLayoutItem, isEmpty){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  hasHeightForWidth
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLayoutItem, hasHeightForWidth){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  heightForWidth
+ *    flags:    cv
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLayoutItem, heightForWidth){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  minimumHeightForWidth
+ *    flags:    cv
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLayoutItem, minimumHeightForWidth){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  invalidate
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayoutItem, invalidate){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  widget
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QLayoutItem, widget){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  layout
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QLayout *
+*********************************/
+ZEND_METHOD(QLayoutItem, layout){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  spacerItem
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSpacerItem *
+*********************************/
+ZEND_METHOD(QLayoutItem, spacerItem){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  alignment
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Alignment
+*********************************/
+ZEND_METHOD(QLayoutItem, alignment){
+	if (ZEND_NUM_ARGS() == 0){
+		QLayoutItem *o = (QLayoutItem*) PHP_QT_FETCH();
+		Qt::Alignment obj = (Qt::Alignment) o->alignment();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLayoutItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLayoutItem
+ *    function  setAlignment
+ *    flags:    
+ *
+ *    @param   Qt::Alignment
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLayoutItem, setAlignment){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLayoutItem *o = (QLayoutItem*) PHP_QT_FETCH();
+		o->setAlignment( tmp_var_0);
+		RETURN_NULL();
+
+	}
+}
+
+
+ZEND_METHOD(QLayoutItem,__construct){
+
+	QLayoutItem *QLayoutItem_ptr = new QLayoutItem();
+
+	PHP_QT_REGISTER(QLayoutItem_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QLayoutItem);
+

Added: trunk/playground/qlcdnumber.cpp
===================================================================
--- trunk/playground/qlcdnumber.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qlcdnumber.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,712 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QLCDNumber.cpp - QLCDNumber PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QLCDNumber>
+
+
+
+/*		public enumMode:long {
+			Mode = 0,
+			Mode = 1,
+			Mode = 2,
+			Mode = 3
+		}
+*/
+
+/*		public enumSegmentStyle:long {
+			SegmentStyle = 0,
+			SegmentStyle = 1,
+			SegmentStyle = 2
+		}
+*/
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QLCDNumber, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QLCDNumber, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QLCDNumber, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLCDNumber, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLCDNumber, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLCDNumber, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  QLCDNumber
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QLCDNumber, QLCDNumber){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		RETURN_~(o->QLCDNumber());
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  smallDecimalPoint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLCDNumber, smallDecimalPoint){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		RETURN_BOOL(o->smallDecimalPoint());
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  numDigits
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLCDNumber, numDigits){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		RETURN_LONG(o->numDigits());
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  setNumDigits
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLCDNumber, setNumDigits){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"numDigits",strlen("numDigits"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  checkOverflow
+ *    flags:    c
+ *
+ *    @param   double
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLCDNumber, checkOverflow){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		RETURN_BOOL(o->checkOverflow( tmp_var_0));
+// marked for overloading: checkOverflow
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		RETURN_BOOL(o->checkOverflow((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  mode
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Mode
+*********************************/
+ZEND_METHOD(QLCDNumber, mode){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		RETURN_LONG(o->mode());
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  setMode
+ *    flags:    
+ *
+ *    @param   Mode
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLCDNumber, setMode){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"mode",strlen("mode"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  segmentStyle
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   SegmentStyle
+*********************************/
+ZEND_METHOD(QLCDNumber, segmentStyle){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		RETURN_LONG(o->segmentStyle());
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  setSegmentStyle
+ *    flags:    
+ *
+ *    @param   SegmentStyle
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLCDNumber, setSegmentStyle){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"segmentStyle",strlen("segmentStyle"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  value
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   double
+*********************************/
+ZEND_METHOD(QLCDNumber, value){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		RETURN_DOUBLE(o->value());
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  intValue
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLCDNumber, intValue){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		RETURN_LONG(o->intValue());
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLCDNumber, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLCDNumber_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  display
+ *    flags:    l
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLCDNumber, display){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_double(Z_OBJCE_P(getThis()),getThis(),"value",strlen("value"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: display
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_double(Z_OBJCE_P(getThis()),getThis(),"value",strlen("value"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: display
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_double(Z_OBJCE_P(getThis()),getThis(),"value",strlen("value"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  setHexMode
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLCDNumber, setHexMode){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		o->setHexMode();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  setDecMode
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLCDNumber, setDecMode){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		o->setDecMode();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  setOctMode
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLCDNumber, setOctMode){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		o->setOctMode();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  setBinMode
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLCDNumber, setBinMode){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		o->setBinMode();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  setSmallDecimalPoint
+ *    flags:    l
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLCDNumber, setSmallDecimalPoint){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"smallDecimalPoint",strlen("smallDecimalPoint"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QLCDNumber, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLCDNumber_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLCDNumber, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLCDNumber_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLCDNumber
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLCDNumber, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLCDNumber_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QLCDNumber,__construct){
+
+	QLCDNumber *QLCDNumber_ptr = new QLCDNumber();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QLCDNumber_ptr = new QLCDNumber(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long numDigits uint*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			uint tmp(Z_STRVAL_P(param_0));
+			QLCDNumber_ptr = new QLCDNumber(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_1));
+			QLCDNumber_ptr = new QLCDNumber(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QLCDNumber_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QLCDNumber);
+

Added: trunk/playground/qlineedit.cpp
===================================================================
--- trunk/playground/qlineedit.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qlineedit.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,1502 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QLineEdit.cpp - QLineEdit PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QLineEdit>
+
+
+
+/*		public enumEchoMode:long {
+			EchoMode = 0,
+			EchoMode = 1,
+			EchoMode = 2
+		}
+*/
+
+/*********************************
+ *    class     QLineEdit
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QLineEdit, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QLineEdit, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QLineEdit, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  QLineEdit
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QLineEdit, QLineEdit){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_~(o->QLineEdit());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  text
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLineEdit, text){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QString obj = (QString) o->text();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  displayText
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLineEdit, displayText){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QString obj = (QString) o->displayText();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  maxLength
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLineEdit, maxLength){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_LONG(o->maxLength());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setMaxLength
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setMaxLength){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"maxLength",strlen("maxLength"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setFrame
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setFrame){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"frame",strlen("frame"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  hasFrame
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, hasFrame){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasFrame());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  echoMode
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   EchoMode
+*********************************/
+ZEND_METHOD(QLineEdit, echoMode){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_LONG(o->echoMode());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setEchoMode
+ *    flags:    
+ *
+ *    @param   EchoMode
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setEchoMode){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"echoMode",strlen("echoMode"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  isReadOnly
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, isReadOnly){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isReadOnly());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setReadOnly
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setReadOnly){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"readOnly",strlen("readOnly"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setValidator
+ *    flags:    
+ *
+ *    @param   const QValidator*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setValidator){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->setValidator( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  validator
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QValidator *
+*********************************/
+ZEND_METHOD(QLineEdit, validator){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		const QValidator * obj = (const QValidator *) o->validator();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLineEdit, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  minimumSizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QLineEdit, minimumSizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->minimumSizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  cursorPosition
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLineEdit, cursorPosition){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_LONG(o->cursorPosition());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setCursorPosition
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setCursorPosition){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"cursorPosition",strlen("cursorPosition"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  cursorPositionAt
+ *    flags:    
+ *
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLineEdit, cursorPositionAt){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_LONG(o->cursorPositionAt((const QPoint&) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setAlignment
+ *    flags:    
+ *
+ *    @param   Qt::Alignment
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setAlignment){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"alignment",strlen("alignment"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  alignment
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Alignment
+*********************************/
+ZEND_METHOD(QLineEdit, alignment){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		Qt::Alignment obj = (Qt::Alignment) o->alignment();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  cursorForward
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, cursorForward){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		bool* var_0;
+	// 1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->cursorForward((bool) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  cursorBackward
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, cursorBackward){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		bool* var_0;
+	// 1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->cursorBackward((bool) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  cursorWordForward
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, cursorWordForward){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->cursorWordForward((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  cursorWordBackward
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, cursorWordBackward){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->cursorWordBackward((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  backspace
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, backspace){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->backspace();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  del
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, del){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->del();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  home
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, home){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->home((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  end
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, end){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->end((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  isModified
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, isModified){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isModified());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setModified
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setModified){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"modified",strlen("modified"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setSelection
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setSelection){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->setSelection((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  hasSelectedText
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, hasSelectedText){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasSelectedText());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  selectedText
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLineEdit, selectedText){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QString obj = (QString) o->selectedText();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  selectionStart
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QLineEdit, selectionStart){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_LONG(o->selectionStart());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  isUndoAvailable
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, isUndoAvailable){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isUndoAvailable());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  isRedoAvailable
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, isRedoAvailable){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isRedoAvailable());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setDragEnabled
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setDragEnabled){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"dragEnabled",strlen("dragEnabled"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  dragEnabled
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, dragEnabled){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_BOOL(o->dragEnabled());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  inputMask
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLineEdit, inputMask){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QString obj = (QString) o->inputMask();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setInputMask
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setInputMask){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"inputMask",strlen("inputMask"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  hasAcceptableInput
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, hasAcceptableInput){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasAcceptableInput());
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  deselect
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, deselect){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->deselect();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  insert
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, insert){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->insert( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  createStandardContextMenu
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMenu *
+*********************************/
+ZEND_METHOD(QLineEdit, createStandardContextMenu){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QMenu * obj = (QMenu *) o->createStandardContextMenu();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  inputMethodQuery
+ *    flags:    c
+ *
+ *    @param   Qt::InputMethodQuery
+ *    @param   -
+
+ *    @access   public
+ *    @return   QVariant
+*********************************/
+ZEND_METHOD(QLineEdit, inputMethodQuery){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QVariant obj = (QVariant) o->inputMethodQuery( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  event
+ *    flags:    
+ *
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QLineEdit, event){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		RETURN_BOOL(o->event( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  setText
+ *    flags:    l
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, setText){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"text",strlen("text"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  clear
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, clear){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->clear();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  selectAll
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, selectAll){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->selectAll();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  undo
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, undo){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->undo();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  redo
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, redo){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->redo();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  cut
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, cut){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->cut();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  copy
+ *    flags:    cl
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, copy){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->copy();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  paste
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QLineEdit, paste){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		o->paste();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QLineEdit, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLineEdit, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QLineEdit
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QLineEdit, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QLineEdit_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QLineEdit,__construct){
+
+	QLineEdit *QLineEdit_ptr = new QLineEdit();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QLineEdit_ptr = new QLineEdit(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* arg1 QString&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_0));
+			QLineEdit_ptr = new QLineEdit(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_1));
+			QLineEdit_ptr = new QLineEdit(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QLineEdit_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QLineEdit);
+

Added: trunk/playground/qmouseevent.cpp
===================================================================
--- trunk/playground/qmouseevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qmouseevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,292 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QMouseEvent.cpp - QMouseEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QMouseEvent>
+
+
+
+/*********************************
+ *    class     QMouseEvent
+ *    function  pos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QMouseEvent, pos){
+	if (ZEND_NUM_ARGS() == 0){
+		QMouseEvent *o = (QMouseEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->pos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QMouseEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QMouseEvent
+ *    function  globalPos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QMouseEvent, globalPos){
+	if (ZEND_NUM_ARGS() == 0){
+		QMouseEvent *o = (QMouseEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->globalPos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QMouseEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QMouseEvent
+ *    function  x
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QMouseEvent, x){
+	if (ZEND_NUM_ARGS() == 0){
+		QMouseEvent *o = (QMouseEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->x());
+	}
+}
+
+
+/*********************************
+ *    class     QMouseEvent
+ *    function  y
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QMouseEvent, y){
+	if (ZEND_NUM_ARGS() == 0){
+		QMouseEvent *o = (QMouseEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->y());
+	}
+}
+
+
+/*********************************
+ *    class     QMouseEvent
+ *    function  globalX
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QMouseEvent, globalX){
+	if (ZEND_NUM_ARGS() == 0){
+		QMouseEvent *o = (QMouseEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalX());
+	}
+}
+
+
+/*********************************
+ *    class     QMouseEvent
+ *    function  globalY
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QMouseEvent, globalY){
+	if (ZEND_NUM_ARGS() == 0){
+		QMouseEvent *o = (QMouseEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalY());
+	}
+}
+
+
+/*********************************
+ *    class     QMouseEvent
+ *    function  button
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::MouseButton
+*********************************/
+ZEND_METHOD(QMouseEvent, button){
+	if (ZEND_NUM_ARGS() == 0){
+		QMouseEvent *o = (QMouseEvent*) PHP_QT_FETCH();
+		Qt::MouseButton obj = (Qt::MouseButton) o->button();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QMouseEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QMouseEvent
+ *    function  buttons
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::MouseButtons
+*********************************/
+ZEND_METHOD(QMouseEvent, buttons){
+	if (ZEND_NUM_ARGS() == 0){
+		QMouseEvent *o = (QMouseEvent*) PHP_QT_FETCH();
+		Qt::MouseButtons obj = (Qt::MouseButtons) o->buttons();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QMouseEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QMouseEvent,__construct){
+
+	QMouseEvent *QMouseEvent_ptr = new QMouseEvent();
+
+	if(ZEND_NUM_ARGS() == 5){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		zval* param_4;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &param_1, &param_2, &param_3, &param_4, &param_5) == FAILURE) {
+			return;
+		}
+		 /*long type Type*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_0));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_1));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+		 /*zval* button Qt::MouseButton*/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			Qt::MouseButton tmp(Z_STRVAL_P(param_2));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+		 /*zval* buttons Qt::MouseButtons*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			Qt::MouseButtons tmp(Z_STRVAL_P(param_3));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+		 /*zval* modifiers Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_4) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_4));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 6){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		zval* param_4;
+		zval* param_5;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &param_1, &param_2, &param_3, &param_4, &param_5, &param_6) == FAILURE) {
+			return;
+		}
+		 /*long type Type*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_0));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_1));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+		 /*long globalPos QPoint&*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_2));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+		 /*zval* button Qt::MouseButton*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			Qt::MouseButton tmp(Z_STRVAL_P(param_3));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+		 /*zval* buttons Qt::MouseButtons*/
+		if(Z_TYPE_P(param_4) == IS_OBJECT) {
+			Qt::MouseButtons tmp(Z_STRVAL_P(param_4));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+		 /*zval* modifiers Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_5) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_5));
+			QMouseEvent_ptr = new QMouseEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QMouseEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QMouseEvent);
+

Added: trunk/playground/qmoveevent.cpp
===================================================================
--- trunk/playground/qmoveevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qmoveevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,112 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QMoveEvent.cpp - QMoveEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QMoveEvent>
+
+
+
+/*********************************
+ *    class     QMoveEvent
+ *    function  pos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QMoveEvent, pos){
+	if (ZEND_NUM_ARGS() == 0){
+		QMoveEvent *o = (QMoveEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->pos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QMoveEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QMoveEvent
+ *    function  oldPos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QMoveEvent, oldPos){
+	if (ZEND_NUM_ARGS() == 0){
+		QMoveEvent *o = (QMoveEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->oldPos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QMoveEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QMoveEvent,__construct){
+
+	QMoveEvent *QMoveEvent_ptr = new QMoveEvent();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_0));
+			QMoveEvent_ptr = new QMoveEvent(tmp);
+		}
+		 /*long oldPos QPoint&*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_1));
+			QMoveEvent_ptr = new QMoveEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QMoveEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QMoveEvent);
+

Added: trunk/playground/qobject.cpp
===================================================================
--- trunk/playground/qobject.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qobject.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,1234 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QObject.cpp - QObject PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QObject
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QObject, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QObject, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QObject, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  QObject
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QObject, QObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  event
+ *    flags:    v
+ *
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, event){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  eventFilter
+ *    flags:    v
+ *
+ *    @param   QObject*
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, eventFilter){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// marked for overloading: metaObject
+	}
+ZEND_METHOD(QObject, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  objectName
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QObject, objectName){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QString obj = (QString) o->objectName();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  setObjectName
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, setObjectName){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"objectName",strlen("objectName"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  isWidgetType
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, isWidgetType){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isWidgetType());
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  signalsBlocked
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, signalsBlocked){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->signalsBlocked());
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  blockSignals
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, blockSignals){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->blockSignals((bool) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  thread
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QThread *
+*********************************/
+ZEND_METHOD(QObject, thread){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QThread * obj = (QThread *) o->thread();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  moveToThread
+ *    flags:    
+ *
+ *    @param   QThread*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, moveToThread){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		o->moveToThread( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  startTimer
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QObject, startTimer){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_LONG(o->startTimer((int) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  killTimer
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, killTimer){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		o->killTimer((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  children
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QObjectList &
+*********************************/
+ZEND_METHOD(QObject, children){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		const QObjectList & obj = (const QObjectList &) o->children();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  setParent
+ *    flags:    
+ *
+ *    @param   QObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, setParent){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		o->setParent( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  installEventFilter
+ *    flags:    
+ *
+ *    @param   QObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, installEventFilter){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		o->installEventFilter( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  removeEventFilter
+ *    flags:    
+ *
+ *    @param   QObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, removeEventFilter){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		o->removeEventFilter( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  connect
+ *    flags:    c
+ *
+ *    @param   const QObject*
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   Qt::ConnectionType
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, connect){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		char* var_1;
+		int* len_1;
+
+	// 
+		char* var_2;
+		int* len_2;
+
+	// Qt::AutoConnection
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osso", &var_0, &var_1, &len_1, &var_2, &len_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->connect( tmp_var_0,  var_1,  var_2,  tmp_var_3));
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  disconnect
+ *    flags:    
+ *
+ *    @param   const char*
+ *    @param   const QObject*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, disconnect){
+	if (ZEND_NUM_ARGS() == 3){
+	// 0
+		char* var_0;
+		int* len_0;
+
+	// 0
+		zval* var_1;
+
+	// 0
+		char* var_2;
+		int* len_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sos", &var_0, &len_0, &var_1, &var_2, &len_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->disconnect( var_0,  tmp_var_1,  var_2));
+// marked for overloading: disconnect
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os", &var_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->disconnect( tmp_var_0,  var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  dumpObjectTree
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, dumpObjectTree){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		o->dumpObjectTree();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  dumpObjectInfo
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, dumpObjectInfo){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		o->dumpObjectInfo();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  setProperty
+ *    flags:    
+ *
+ *    @param   const char*
+ *    @param   const QVariant&
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, setProperty){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_0, &len_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->setProperty( var_0,  tmp_var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  property
+ *    flags:    c
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QVariant
+*********************************/
+ZEND_METHOD(QObject, property){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QVariant obj = (QVariant) o->property( var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  setUserData
+ *    flags:    
+ *
+ *    @param   uint
+ *    @param   QObjectUserData*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, setUserData){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		o->setUserData((uint) var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  userData
+ *    flags:    c
+ *
+ *    @param   uint
+ *    @param   -
+
+ *    @access   public
+ *    @return   QObjectUserData*
+*********************************/
+ZEND_METHOD(QObject, userData){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QObjectUserData* obj = (QObjectUserData*) o->userData((uint) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  parent
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QObject *
+*********************************/
+ZEND_METHOD(QObject, parent){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QObject * obj = (QObject *) o->parent();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  inherits
+ *    flags:    c
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QObject, inherits){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->inherits( var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  deleteLater
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, deleteLater){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		o->deleteLater();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QObject, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QObject, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QObject, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: tr
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: trUtf8
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: tr
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: trUtf8
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: connect
+	}
+	if (ZEND_NUM_ARGS() == 5){
+	// 
+		zval* var_0;
+
+	// 
+		char* var_1;
+		int* len_1;
+
+	// 
+		zval* var_2;
+
+	// 
+		char* var_3;
+		int* len_3;
+
+	// Qt::AutoConnection
+		zval* var_4;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ososo", &var_0, &var_1, &len_1, &var_2, &var_3, &len_3, &var_4) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->connect( tmp_var_0,  var_1,  tmp_var_2,  var_3,  tmp_var_4));
+// marked for overloading: disconnect
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		char* var_1;
+		int* len_1;
+
+	// 
+		zval* var_2;
+
+	// 
+		char* var_3;
+		int* len_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osos", &var_0, &var_1, &len_1, &var_2, &var_3, &len_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_BOOL(o->disconnect( tmp_var_0,  var_1,  tmp_var_2,  var_3));
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  registerUserData
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   uint
+*********************************/
+ZEND_METHOD(QObject, registerUserData){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_LONG(o->registerUserData());
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  sender
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   protected
+ *    @return   QObject *
+*********************************/
+ZEND_METHOD(QObject, sender){
+	if (ZEND_NUM_ARGS() == 0){
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		QObject * obj = (QObject *) o->sender();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QObject_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  receivers
+ *    flags:    c
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   protected
+ *    @return   int
+*********************************/
+ZEND_METHOD(QObject, receivers){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject *o = (QObject*) PHP_QT_FETCH();
+		RETURN_LONG(o->receivers( var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  connectNotify
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, connectNotify){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QObject
+ *    function  disconnectNotify
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QObject, disconnectNotify){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+
+	}
+}
+
+
+ZEND_METHOD(QObject,__construct){
+
+	QObject *QObject_ptr = new QObject();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QObject**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QObject* tmp(Z_STRVAL_P(param_0));
+			QObject_ptr = new QObject(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* dd QObjectPrivate&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QObjectPrivate& tmp(Z_STRVAL_P(param_0));
+			QObject_ptr = new QObject(tmp);
+		}
+		 /*zval* parent QObject**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QObject* tmp(Z_STRVAL_P(param_1));
+			QObject_ptr = new QObject(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QObject_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QObject);
+

Added: trunk/playground/qobjectdata.cpp
===================================================================
--- trunk/playground/qobjectdata.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qobjectdata.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,61 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QObjectData.cpp - QObjectData PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QObjectData
+ *    function  QObjectData
+ *    flags:    pv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QObjectData, QObjectData){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+
+	}
+}
+
+
+ZEND_METHOD(QObjectData,__construct){
+
+	QObjectData *QObjectData_ptr = new QObjectData();
+
+	PHP_QT_REGISTER(QObjectData_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QObjectData);
+

Added: trunk/playground/qobjectuserdata.cpp
===================================================================
--- trunk/playground/qobjectuserdata.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qobjectuserdata.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,61 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QObjectUserData.cpp - QObjectUserData PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QObjectUserData
+ *    function  QObjectUserData
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QObjectUserData, QObjectUserData){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+
+	}
+}
+
+
+ZEND_METHOD(QObjectUserData,__construct){
+
+	QObjectUserData *QObjectUserData_ptr = new QObjectUserData();
+
+	PHP_QT_REGISTER(QObjectUserData_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QObjectUserData);
+

Added: trunk/playground/qpainter.cpp
===================================================================
--- trunk/playground/qpainter.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qpainter.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,3496 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QPainter.cpp - QPainter PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*		public enumRenderHint:long {
+			Antialiasing = 0x01,
+			TextAntialiasing = 0x02,
+			SmoothPixmapTransform = 0x04
+		}
+*/
+
+/*		public enumCompositionMode:long {
+			CompositionMode = 0,
+			CompositionMode = 1,
+			CompositionMode = 2,
+			CompositionMode = 3,
+			CompositionMode = 4,
+			CompositionMode = 5,
+			CompositionMode = 6,
+			CompositionMode = 7,
+			CompositionMode = 8,
+			CompositionMode = 9,
+			CompositionMode = 10,
+			CompositionMode = 11
+		}
+*/
+
+/*********************************
+ *    class     QPainter
+ *    function  QPainter
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QPainter, QPainter){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		RETURN_~(o->QPainter());
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  device
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPaintDevice *
+*********************************/
+ZEND_METHOD(QPainter, device){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QPaintDevice * obj = (QPaintDevice *) o->device();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  begin
+ *    flags:    
+ *
+ *    @param   QPaintDevice*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPainter, begin){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		RETURN_BOOL(o->begin((QPaintDevice*) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  end
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPainter, end){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		RETURN_BOOL(o->end());
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  isActive
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPainter, isActive){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isActive());
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  initFrom
+ *    flags:    
+ *
+ *    @param   const QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, initFrom){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->initFrom( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setCompositionMode
+ *    flags:    
+ *
+ *    @param   CompositionMode
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setCompositionMode){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setCompositionMode( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  compositionMode
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   CompositionMode
+*********************************/
+ZEND_METHOD(QPainter, compositionMode){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  font
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QFont &
+*********************************/
+ZEND_METHOD(QPainter, font){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		const QFont & obj = (const QFont &) o->font();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setFont
+ *    flags:    
+ *
+ *    @param   const QFont&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setFont){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setFont( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  fontMetrics
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QFontMetrics
+*********************************/
+ZEND_METHOD(QPainter, fontMetrics){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QFontMetrics obj = (QFontMetrics) o->fontMetrics();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  fontInfo
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QFontInfo
+*********************************/
+ZEND_METHOD(QPainter, fontInfo){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QFontInfo obj = (QFontInfo) o->fontInfo();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setPen
+ *    flags:    
+ *
+ *    @param   const QColor&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setPen){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setPen( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: setPen
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setPen( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: setPen
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setPen( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  pen
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPen &
+*********************************/
+ZEND_METHOD(QPainter, pen){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		const QPen & obj = (const QPen &) o->pen();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setBrush
+ *    flags:    
+ *
+ *    @param   const QBrush&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setBrush){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setBrush( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: setBrush
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setBrush( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  brush
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QBrush &
+*********************************/
+ZEND_METHOD(QPainter, brush){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		const QBrush & obj = (const QBrush &) o->brush();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setBackgroundMode
+ *    flags:    
+ *
+ *    @param   Qt::BGMode
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setBackgroundMode){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setBackgroundMode( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  backgroundMode
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::BGMode
+*********************************/
+ZEND_METHOD(QPainter, backgroundMode){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		Qt::BGMode obj = (Qt::BGMode) o->backgroundMode();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  brushOrigin
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPoint
+*********************************/
+ZEND_METHOD(QPainter, brushOrigin){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		RETURN_LONG(o->brushOrigin());
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setBrushOrigin
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setBrushOrigin){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setBrushOrigin((int) var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: setBrushOrigin
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setBrushOrigin((const QPoint&) var_0);
+		RETURN_NULL();
+// marked for overloading: setBrushOrigin
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setBrushOrigin((const QPointF&) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setBackground
+ *    flags:    
+ *
+ *    @param   const QBrush&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setBackground){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setBackground( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  background
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QBrush &
+*********************************/
+ZEND_METHOD(QPainter, background){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		const QBrush & obj = (const QBrush &) o->background();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  clipRegion
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRegion
+*********************************/
+ZEND_METHOD(QPainter, clipRegion){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QRegion obj = (QRegion) o->clipRegion();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  clipPath
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPainterPath
+*********************************/
+ZEND_METHOD(QPainter, clipPath){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setClipRect
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   Qt::ClipOperation
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setClipRect){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::ReplaceClip
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setClipRect( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: setClipRect
+	}
+	if (ZEND_NUM_ARGS() == 5){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// Qt::ReplaceClip
+		zval* var_4;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_0, &var_1, &var_2, &var_3, &var_4) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setClipRect((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setClipRegion
+ *    flags:    
+ *
+ *    @param   const QRegion&
+ *    @param   Qt::ClipOperation
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setClipRegion){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::ReplaceClip
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setClipRegion( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setClipPath
+ *    flags:    
+ *
+ *    @param   const QPainterPath&
+ *    @param   Qt::ClipOperation
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setClipPath){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// Qt::ReplaceClip
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setClipPath((const QPainterPath&) var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setClipping
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setClipping){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setClipping((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  hasClipping
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPainter, hasClipping){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasClipping());
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  save
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, save){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->save();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  restore
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, restore){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->restore();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setMatrix
+ *    flags:    
+ *
+ *    @param   const QMatrix&
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setMatrix){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// false
+		bool* var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setMatrix( tmp_var_0, (bool) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  matrix
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QMatrix &
+*********************************/
+ZEND_METHOD(QPainter, matrix){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		const QMatrix & obj = (const QMatrix &) o->matrix();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  deviceMatrix
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QMatrix &
+*********************************/
+ZEND_METHOD(QPainter, deviceMatrix){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		const QMatrix & obj = (const QMatrix &) o->deviceMatrix();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  resetMatrix
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, resetMatrix){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->resetMatrix();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setMatrixEnabled
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setMatrixEnabled){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setMatrixEnabled((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  matrixEnabled
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPainter, matrixEnabled){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		RETURN_BOOL(o->matrixEnabled());
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  scale
+ *    flags:    
+ *
+ *    @param   qreal
+ *    @param   qreal
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, scale){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->scale( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  shear
+ *    flags:    
+ *
+ *    @param   qreal
+ *    @param   qreal
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, shear){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->shear( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  rotate
+ *    flags:    
+ *
+ *    @param   qreal
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, rotate){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->rotate( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  translate
+ *    flags:    
+ *
+ *    @param   const QPointF&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, translate){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->translate((const QPointF&) var_0);
+		RETURN_NULL();
+// marked for overloading: translate
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->translate((const QPoint&) var_0);
+		RETURN_NULL();
+// marked for overloading: translate
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->translate( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  window
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QPainter, window){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->window();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setWindow
+ *    flags:    
+ *
+ *    @param   const QRect&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setWindow){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setWindow( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: setWindow
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setWindow((int) var_0, (int) var_1, (int) var_2, (int) var_3);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  viewport
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QPainter, viewport){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->viewport();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setViewport
+ *    flags:    
+ *
+ *    @param   const QRect&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setViewport){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setViewport( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: setViewport
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setViewport((int) var_0, (int) var_1, (int) var_2, (int) var_3);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setViewTransformEnabled
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setViewTransformEnabled){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setViewTransformEnabled((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  viewTransformEnabled
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPainter, viewTransformEnabled){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		RETURN_BOOL(o->viewTransformEnabled());
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  strokePath
+ *    flags:    
+ *
+ *    @param   const QPainterPath&
+ *    @param   const QPen&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, strokePath){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->strokePath((const QPainterPath&) var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  fillPath
+ *    flags:    
+ *
+ *    @param   const QPainterPath&
+ *    @param   const QBrush&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, fillPath){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->fillPath((const QPainterPath&) var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawPath
+ *    flags:    
+ *
+ *    @param   const QPainterPath&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawPath){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPath((const QPainterPath&) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawPoint
+ *    flags:    
+ *
+ *    @param   const QPointF&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawPoint){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPoint((const QPointF&) var_0);
+		RETURN_NULL();
+// marked for overloading: drawPoint
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPoint((const QPoint&) var_0);
+		RETURN_NULL();
+// marked for overloading: drawPoint
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPoint((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawPoints
+ *    flags:    
+ *
+ *    @param   const QPointF*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawPoints){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPoints((const QPointF*) var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: drawPoints
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPoints( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: drawPoints
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPoints((const QPoint*) var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: drawPoints
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPoints( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawLine
+ *    flags:    
+ *
+ *    @param   const QLineF&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawLine){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawLine( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: drawLine
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawLine((int) var_0, (int) var_1, (int) var_2, (int) var_3);
+		RETURN_NULL();
+// marked for overloading: drawLine
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawLine((const QPoint&) var_0, (const QPoint&) var_1);
+		RETURN_NULL();
+// marked for overloading: drawLine
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawLine((const QPointF&) var_0, (const QPointF&) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawLines
+ *    flags:    
+ *
+ *    @param   const QLineF*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawLines){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawLines( tmp_var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: drawLines
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawLines((const QPointF*) var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: drawLines
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawLines( tmp_var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: drawLines
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawLines((const QPoint*) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawRect
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawRect){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawRect( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: drawRect
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawRect((int) var_0, (int) var_1, (int) var_2, (int) var_3);
+		RETURN_NULL();
+// marked for overloading: drawRect
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawRect( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawRects
+ *    flags:    
+ *
+ *    @param   const QRectF*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawRects){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawRects( tmp_var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawEllipse
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawEllipse){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawEllipse( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: drawEllipse
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawEllipse((int) var_0, (int) var_1, (int) var_2, (int) var_3);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawPolyline
+ *    flags:    
+ *
+ *    @param   const QPointF*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawPolyline){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPolyline((const QPointF*) var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: drawPolyline
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPolyline( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: drawPolyline
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPolyline((const QPoint*) var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: drawPolyline
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPolyline( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawPolygon
+ *    flags:    
+ *
+ *    @param   const QPointF*
+ *    @param   int
+ *    @param   Qt::FillRule
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawPolygon){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// Qt::OddEvenFill
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPolygon((const QPointF*) var_0, (int) var_1,  tmp_var_2);
+		RETURN_NULL();
+// marked for overloading: drawPolygon
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::OddEvenFill
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPolygon( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawPolygon
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// Qt::OddEvenFill
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPolygon((const QPoint*) var_0, (int) var_1,  tmp_var_2);
+		RETURN_NULL();
+// marked for overloading: drawPolygon
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::OddEvenFill
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPolygon( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawConvexPolygon
+ *    flags:    
+ *
+ *    @param   const QPointF*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawConvexPolygon){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawConvexPolygon((const QPointF*) var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: drawConvexPolygon
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawConvexPolygon( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: drawConvexPolygon
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawConvexPolygon((const QPoint*) var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: drawConvexPolygon
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawConvexPolygon( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawArc
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawArc){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawArc( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+// marked for overloading: drawArc
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawArc( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+// marked for overloading: drawArc
+	}
+	if (ZEND_NUM_ARGS() == 6){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		long var_4;
+	// 
+		long var_5;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawArc((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4, (int) var_5);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawPie
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawPie){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPie( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+// marked for overloading: drawPie
+	}
+	if (ZEND_NUM_ARGS() == 6){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		long var_4;
+	// 
+		long var_5;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPie((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4, (int) var_5);
+		RETURN_NULL();
+// marked for overloading: drawPie
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPie( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawChord
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawChord){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawChord( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+// marked for overloading: drawChord
+	}
+	if (ZEND_NUM_ARGS() == 6){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		long var_4;
+	// 
+		long var_5;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawChord((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4, (int) var_5);
+		RETURN_NULL();
+// marked for overloading: drawChord
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawChord( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawRoundRect
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawRoundRect){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 25
+		long var_1;
+	// 25
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawRoundRect( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+// marked for overloading: drawRoundRect
+	}
+	if (ZEND_NUM_ARGS() == 6){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 25
+		long var_4;
+	// 25
+		long var_5;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawRoundRect((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4, (int) var_5);
+		RETURN_NULL();
+// marked for overloading: drawRoundRect
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 25
+		long var_1;
+	// 25
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawRoundRect( tmp_var_0, (int) var_1, (int) var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawTiledPixmap
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   const QPixmap&
+ *    @param   const QPointF&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawTiledPixmap){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// QPointF()
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawTiledPixmap( tmp_var_0,  tmp_var_1, (const QPointF&) var_2);
+		RETURN_NULL();
+// marked for overloading: drawTiledPixmap
+	}
+	if (ZEND_NUM_ARGS() == 7){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		zval* var_4;
+
+	// 0
+		long var_5;
+	// 0
+		long var_6;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllloll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawTiledPixmap((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4, (int) var_5, (int) var_6);
+		RETURN_NULL();
+// marked for overloading: drawTiledPixmap
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// QPoint()
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawTiledPixmap( tmp_var_0,  tmp_var_1, (const QPoint&) var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawPicture
+ *    flags:    
+ *
+ *    @param   const QPointF&
+ *    @param   const QPicture&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawPicture){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPicture((const QPointF&) var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawPicture
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPicture((int) var_0, (int) var_1,  tmp_var_2);
+		RETURN_NULL();
+// marked for overloading: drawPicture
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPicture((const QPoint&) var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawPixmap
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   const QPixmap&
+ *    @param   const QRectF&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawPixmap){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap( tmp_var_0,  tmp_var_1,  tmp_var_2);
+		RETURN_NULL();
+// marked for overloading: drawPixmap
+	}
+	if (ZEND_NUM_ARGS() == 9){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		zval* var_4;
+
+	// 
+		long var_5;
+	// 
+		long var_6;
+	// 
+		long var_7;
+	// 
+		long var_8;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllollll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6, &var_7, &var_8) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4, (int) var_5, (int) var_6, (int) var_7, (int) var_8);
+		RETURN_NULL();
+// marked for overloading: drawPixmap
+	}
+	if (ZEND_NUM_ARGS() == 7){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+	// 
+		long var_3;
+	// 
+		long var_4;
+	// 
+		long var_5;
+	// 
+		long var_6;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llollll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap((int) var_0, (int) var_1,  tmp_var_2, (int) var_3, (int) var_4, (int) var_5, (int) var_6);
+		RETURN_NULL();
+// marked for overloading: drawPixmap
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"loo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap((const QPointF&) var_0,  tmp_var_1,  tmp_var_2);
+		RETURN_NULL();
+// marked for overloading: drawPixmap
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"loo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap((const QPoint&) var_0,  tmp_var_1,  tmp_var_2);
+		RETURN_NULL();
+// marked for overloading: drawPixmap
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap((const QPointF&) var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawPixmap
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap((const QPoint&) var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawPixmap
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap((int) var_0, (int) var_1,  tmp_var_2);
+		RETURN_NULL();
+// marked for overloading: drawPixmap
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawPixmap
+	}
+	if (ZEND_NUM_ARGS() == 5){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		zval* var_4;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_0, &var_1, &var_2, &var_3, &var_4) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawPixmap((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawImage
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   const QImage&
+ *    @param   const QRectF&
+ *    @param   Qt::ImageConversionFlags
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawImage){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// 
+		zval* var_2;
+
+	// Qt::AutoColor
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawImage( tmp_var_0,  tmp_var_1,  tmp_var_2,  tmp_var_3);
+		RETURN_NULL();
+// marked for overloading: drawImage
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+	// 
+		zval* var_2;
+
+	// Qt::AutoColor
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"looo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawImage((const QPointF&) var_0,  tmp_var_1,  tmp_var_2,  tmp_var_3);
+		RETURN_NULL();
+// marked for overloading: drawImage
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+	// 
+		zval* var_2;
+
+	// Qt::AutoColor
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"looo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawImage((const QPoint&) var_0,  tmp_var_1,  tmp_var_2,  tmp_var_3);
+		RETURN_NULL();
+// marked for overloading: drawImage
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawImage( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawImage
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawImage((const QPointF&) var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawImage
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawImage((const QPoint&) var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawImage
+	}
+	if (ZEND_NUM_ARGS() == 8){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+	// 0
+		long var_3;
+	// 0
+		long var_4;
+	// -1
+		long var_5;
+	// -1
+		long var_6;
+	// Qt::AutoColor
+		zval* var_7;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llollllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6, &var_7) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QObject* tmp_var_7 = (QObject*) php_qt_fetch(var_7);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawImage((int) var_0, (int) var_1,  tmp_var_2, (int) var_3, (int) var_4, (int) var_5, (int) var_6,  tmp_var_7);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setLayoutDirection
+ *    flags:    
+ *
+ *    @param   Qt::LayoutDirection
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setLayoutDirection){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setLayoutDirection( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  layoutDirection
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::LayoutDirection
+*********************************/
+ZEND_METHOD(QPainter, layoutDirection){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		Qt::LayoutDirection obj = (Qt::LayoutDirection) o->layoutDirection();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawText
+ *    flags:    
+ *
+ *    @param   const QPointF&
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawText){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawText((const QPointF&) var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawText
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawText((const QPoint&) var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawText
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawText((int) var_0, (int) var_1,  tmp_var_2);
+		RETURN_NULL();
+// marked for overloading: drawText
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+	// 0
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oloo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawText( tmp_var_0, (int) var_1,  tmp_var_2,  tmp_var_3);
+		RETURN_NULL();
+// marked for overloading: drawText
+	}
+	if (ZEND_NUM_ARGS() == 7){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		long var_4;
+	// 
+		zval* var_5;
+
+	// 0
+		zval* var_6;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllloo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
+		QObject* tmp_var_6 = (QObject*) php_qt_fetch(var_6);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawText((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5,  tmp_var_6);
+		RETURN_NULL();
+// marked for overloading: drawText
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// QTextOption()
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawText( tmp_var_0,  tmp_var_1,  tmp_var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  boundingRect
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   int
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRectF
+*********************************/
+ZEND_METHOD(QPainter, boundingRect){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+// marked for overloading: boundingRect
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->boundingRect( tmp_var_0, (int) var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: boundingRect
+	}
+	if (ZEND_NUM_ARGS() == 6){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		long var_4;
+	// 
+		zval* var_5;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->boundingRect((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: boundingRect
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// QTextOption()
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  drawTextItem
+ *    flags:    
+ *
+ *    @param   const QPointF&
+ *    @param   const QTextItem&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, drawTextItem){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawTextItem((const QPointF&) var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: drawTextItem
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawTextItem((int) var_0, (int) var_1,  tmp_var_2);
+		RETURN_NULL();
+// marked for overloading: drawTextItem
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->drawTextItem((const QPoint&) var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  fillRect
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   const QBrush&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, fillRect){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->fillRect( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+// marked for overloading: fillRect
+	}
+	if (ZEND_NUM_ARGS() == 5){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+	// 
+		zval* var_4;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_0, &var_1, &var_2, &var_3, &var_4) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->fillRect((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4);
+		RETURN_NULL();
+// marked for overloading: fillRect
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->fillRect( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  eraseRect
+ *    flags:    
+ *
+ *    @param   const QRectF&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, eraseRect){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->eraseRect( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: eraseRect
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->eraseRect((int) var_0, (int) var_1, (int) var_2, (int) var_3);
+		RETURN_NULL();
+// marked for overloading: eraseRect
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->eraseRect( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setRenderHint
+ *    flags:    
+ *
+ *    @param   RenderHint
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setRenderHint){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// true
+		bool* var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setRenderHint((RenderHint) var_0, (bool) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  renderHints
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   RenderHints
+*********************************/
+ZEND_METHOD(QPainter, renderHints){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  paintEngine
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPaintEngine *
+*********************************/
+ZEND_METHOD(QPainter, paintEngine){
+	if (ZEND_NUM_ARGS() == 0){
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QPaintEngine * obj = (QPaintEngine *) o->paintEngine();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  setRedirected
+ *    flags:    s
+ *
+ *    @param   const QPaintDevice*
+ *    @param   QPaintDevice*
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, setRedirected){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// QPoint()
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->setRedirected((const QPaintDevice*) var_0, (QPaintDevice*) var_1, (const QPoint&) var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  redirected
+ *    flags:    s
+ *
+ *    @param   const QPaintDevice*
+ *    @param   QPoint*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPaintDevice *
+*********************************/
+ZEND_METHOD(QPainter, redirected){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 0
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		QPaintDevice * obj = (QPaintDevice *) o->redirected((const QPaintDevice*) var_0, (QPoint*) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPainter_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPainter
+ *    function  restoreRedirected
+ *    flags:    s
+ *
+ *    @param   const QPaintDevice*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPainter, restoreRedirected){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPainter *o = (QPainter*) PHP_QT_FETCH();
+		o->restoreRedirected((const QPaintDevice*) var_0);
+		RETURN_NULL();
+
+	}
+}
+
+
+ZEND_METHOD(QPainter,__construct){
+
+	QPainter *QPainter_ptr = new QPainter();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*long arg1 QPaintDevice**/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			QPaintDevice* tmp(Z_STRVAL_P(param_0));
+			QPainter_ptr = new QPainter(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QPainter_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QPainter);
+

Added: trunk/playground/qpaintevent.cpp
===================================================================
--- trunk/playground/qpaintevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qpaintevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,118 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QPaintEvent.cpp - QPaintEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QPaintEvent>
+
+
+
+/*********************************
+ *    class     QPaintEvent
+ *    function  rect
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QRect &
+*********************************/
+ZEND_METHOD(QPaintEvent, rect){
+	if (ZEND_NUM_ARGS() == 0){
+		QPaintEvent *o = (QPaintEvent*) PHP_QT_FETCH();
+		const QRect & obj = (const QRect &) o->rect();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPaintEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPaintEvent
+ *    function  region
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QRegion &
+*********************************/
+ZEND_METHOD(QPaintEvent, region){
+	if (ZEND_NUM_ARGS() == 0){
+		QPaintEvent *o = (QPaintEvent*) PHP_QT_FETCH();
+		const QRegion & obj = (const QRegion &) o->region();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPaintEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QPaintEvent,__construct){
+
+	QPaintEvent *QPaintEvent_ptr = new QPaintEvent();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* paintRegion QRegion&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QRegion& tmp(Z_STRVAL_P(param_0));
+			QPaintEvent_ptr = new QPaintEvent(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* paintRect QRect&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QRect& tmp(Z_STRVAL_P(param_0));
+			QPaintEvent_ptr = new QPaintEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QPaintEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QPaintEvent);
+

Added: trunk/playground/qpushbutton.cpp
===================================================================
--- trunk/playground/qpushbutton.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qpushbutton.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,553 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QPushButton.cpp - QPushButton PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QPushButton>
+
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QPushButton, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QPushButton, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QPushButton, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPushButton, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPushButton, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPushButton, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  QPushButton
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QPushButton, QPushButton){
+	if (ZEND_NUM_ARGS() == 0){
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		RETURN_~(o->QPushButton());
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QPushButton, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPushButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  autoDefault
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPushButton, autoDefault){
+	if (ZEND_NUM_ARGS() == 0){
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		RETURN_BOOL(o->autoDefault());
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  setAutoDefault
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPushButton, setAutoDefault){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"autoDefault",strlen("autoDefault"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  isDefault
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPushButton, isDefault){
+	if (ZEND_NUM_ARGS() == 0){
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isDefault());
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  setDefault
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPushButton, setDefault){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"default",strlen("default"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  setMenu
+ *    flags:    
+ *
+ *    @param   QMenu*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPushButton, setMenu){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		o->setMenu( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  menu
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMenu*
+*********************************/
+ZEND_METHOD(QPushButton, menu){
+	if (ZEND_NUM_ARGS() == 0){
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		QMenu* obj = (QMenu*) o->menu();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPushButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  setFlat
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPushButton, setFlat){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"flat",strlen("flat"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  isFlat
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QPushButton, isFlat){
+	if (ZEND_NUM_ARGS() == 0){
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isFlat());
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  showMenu
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QPushButton, showMenu){
+	if (ZEND_NUM_ARGS() == 0){
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		o->showMenu();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QPushButton, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPushButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QPushButton, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPushButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QPushButton
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QPushButton, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QPushButton_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QPushButton,__construct){
+
+	QPushButton *QPushButton_ptr = new QPushButton();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QPushButton_ptr = new QPushButton(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* text QString&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_0));
+			QPushButton_ptr = new QPushButton(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_1));
+			QPushButton_ptr = new QPushButton(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*zval* icon QIcon&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QIcon& tmp(Z_STRVAL_P(param_0));
+			QPushButton_ptr = new QPushButton(tmp);
+		}
+		 /*zval* text QString&*/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_1));
+			QPushButton_ptr = new QPushButton(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_2));
+			QPushButton_ptr = new QPushButton(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QPushButton_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QPushButton);
+

Added: trunk/playground/qresizeevent.cpp
===================================================================
--- trunk/playground/qresizeevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qresizeevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,112 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QResizeEvent.cpp - QResizeEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QResizeEvent>
+
+
+
+/*********************************
+ *    class     QResizeEvent
+ *    function  size
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QSize &
+*********************************/
+ZEND_METHOD(QResizeEvent, size){
+	if (ZEND_NUM_ARGS() == 0){
+		QResizeEvent *o = (QResizeEvent*) PHP_QT_FETCH();
+		const QSize & obj = (const QSize &) o->size();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QResizeEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QResizeEvent
+ *    function  oldSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QSize &
+*********************************/
+ZEND_METHOD(QResizeEvent, oldSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QResizeEvent *o = (QResizeEvent*) PHP_QT_FETCH();
+		const QSize & obj = (const QSize &) o->oldSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QResizeEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QResizeEvent,__construct){
+
+	QResizeEvent *QResizeEvent_ptr = new QResizeEvent();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* size QSize&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QSize& tmp(Z_STRVAL_P(param_0));
+			QResizeEvent_ptr = new QResizeEvent(tmp);
+		}
+		 /*zval* oldSize QSize&*/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QSize& tmp(Z_STRVAL_P(param_1));
+			QResizeEvent_ptr = new QResizeEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QResizeEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QResizeEvent);
+

Added: trunk/playground/qshortcutevent.cpp
===================================================================
--- trunk/playground/qshortcutevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qshortcutevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,130 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QShortcutEvent.cpp - QShortcutEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QShortcutEvent>
+
+
+
+/*********************************
+ *    class     QShortcutEvent
+ *    function  key
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QKeySequence &
+*********************************/
+ZEND_METHOD(QShortcutEvent, key){
+	if (ZEND_NUM_ARGS() == 0){
+		QShortcutEvent *o = (QShortcutEvent*) PHP_QT_FETCH();
+		const QKeySequence & obj = (const QKeySequence &) o->key();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QShortcutEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QShortcutEvent
+ *    function  shortcutId
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QShortcutEvent, shortcutId){
+	if (ZEND_NUM_ARGS() == 0){
+		QShortcutEvent *o = (QShortcutEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->shortcutId());
+	}
+}
+
+
+/*********************************
+ *    class     QShortcutEvent
+ *    function  isAmbiguous
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QShortcutEvent, isAmbiguous){
+	if (ZEND_NUM_ARGS() == 0){
+		QShortcutEvent *o = (QShortcutEvent*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isAmbiguous());
+
+	}
+}
+
+
+ZEND_METHOD(QShortcutEvent,__construct){
+
+	QShortcutEvent *QShortcutEvent_ptr = new QShortcutEvent();
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*zval* key QKeySequence&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QKeySequence& tmp(Z_STRVAL_P(param_0));
+			QShortcutEvent_ptr = new QShortcutEvent(tmp);
+		}
+		 /*long identifier int*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QShortcutEvent_ptr = new QShortcutEvent(tmp);
+		}
+		 /*bool ambiguous bool*/
+		if(Z_TYPE_P(param_2) == IS_BOOL) {
+			bool tmp(Z_STRVAL_P(param_2));
+			QShortcutEvent_ptr = new QShortcutEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QShortcutEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QShortcutEvent);
+

Added: trunk/playground/qshowevent.cpp
===================================================================
--- trunk/playground/qshowevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qshowevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,54 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QShowEvent.cpp - QShowEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QShowEvent>
+
+
+	}
+}
+
+
+ZEND_METHOD(QShowEvent,__construct){
+
+	QShowEvent *QShowEvent_ptr = new QShowEvent();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	PHP_QT_REGISTER(QShowEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QShowEvent);
+

Added: trunk/playground/qslider.cpp
===================================================================
--- trunk/playground/qslider.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qslider.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,477 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QSlider.cpp - QSlider PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QSlider>
+
+
+
+/*		public enumTickPosition:long {
+			NoTicks = 0,
+			TicksAbove = 1,
+			TicksLeft = TicksAbove,
+			TicksBelow = 2,
+			TicksRight = TicksBelow,
+			TicksBothSides = 3
+		}
+*/
+
+/*********************************
+ *    class     QSlider
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QSlider, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QSlider, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QSlider, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QSlider, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QSlider, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QSlider, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  QSlider
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QSlider, QSlider){
+	if (ZEND_NUM_ARGS() == 0){
+		QSlider *o = (QSlider*) PHP_QT_FETCH();
+		RETURN_~(o->QSlider());
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QSlider, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QSlider *o = (QSlider*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSlider_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  minimumSizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QSlider, minimumSizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QSlider *o = (QSlider*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->minimumSizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSlider_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  setTickPosition
+ *    flags:    
+ *
+ *    @param   TickPosition
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QSlider, setTickPosition){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"tickPosition",strlen("tickPosition"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  tickPosition
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   TickPosition
+*********************************/
+ZEND_METHOD(QSlider, tickPosition){
+	if (ZEND_NUM_ARGS() == 0){
+		QSlider *o = (QSlider*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  setTickInterval
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QSlider, setTickInterval){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"tickInterval",strlen("tickInterval"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  tickInterval
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QSlider, tickInterval){
+	if (ZEND_NUM_ARGS() == 0){
+		QSlider *o = (QSlider*) PHP_QT_FETCH();
+		RETURN_LONG(o->tickInterval());
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  event
+ *    flags:    
+ *
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QSlider, event){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QSlider *o = (QSlider*) PHP_QT_FETCH();
+		RETURN_BOOL(o->event( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QSlider, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QSlider *o = (QSlider*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSlider_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QSlider, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QSlider *o = (QSlider*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSlider_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QSlider
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QSlider, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QSlider *o = (QSlider*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSlider_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QSlider,__construct){
+
+	QSlider *QSlider_ptr = new QSlider();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QSlider_ptr = new QSlider(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long orientation Qt::Orientation*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Qt::Orientation tmp(Z_STRVAL_P(param_0));
+			QSlider_ptr = new QSlider(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_1));
+			QSlider_ptr = new QSlider(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QSlider_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QSlider);
+

Added: trunk/playground/qspaceritem.cpp
===================================================================
--- trunk/playground/qspaceritem.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qspaceritem.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,303 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QSpacerItem.cpp - QSpacerItem PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QSpacerItem>
+
+
+
+/*********************************
+ *    class     QSpacerItem
+ *    function  changeSize
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QSizePolicy::Policy
+ *    @param   QSizePolicy::Policy
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QSpacerItem, changeSize){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// QSizePolicy::Minimum
+		zval* var_2;
+
+	// QSizePolicy::Minimum
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lloo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
+		o->changeSize((int) var_0, (int) var_1,  tmp_var_2,  tmp_var_3);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QSpacerItem
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QSpacerItem, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QSpacerItem
+ *    function  minimumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QSpacerItem, minimumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->minimumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QSpacerItem
+ *    function  maximumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QSpacerItem, maximumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->maximumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QSpacerItem
+ *    function  expandingDirections
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Orientations
+*********************************/
+ZEND_METHOD(QSpacerItem, expandingDirections){
+	if (ZEND_NUM_ARGS() == 0){
+		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
+		Qt::Orientations obj = (Qt::Orientations) o->expandingDirections();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QSpacerItem
+ *    function  isEmpty
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QSpacerItem, isEmpty){
+	if (ZEND_NUM_ARGS() == 0){
+		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isEmpty());
+	}
+}
+
+
+/*********************************
+ *    class     QSpacerItem
+ *    function  setGeometry
+ *    flags:    
+ *
+ *    @param   const QRect&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QSpacerItem, setGeometry){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
+		o->setGeometry( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QSpacerItem
+ *    function  geometry
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QSpacerItem, geometry){
+	if (ZEND_NUM_ARGS() == 0){
+		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->geometry();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QSpacerItem
+ *    function  spacerItem
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSpacerItem *
+*********************************/
+ZEND_METHOD(QSpacerItem, spacerItem){
+	if (ZEND_NUM_ARGS() == 0){
+		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
+		QSpacerItem * obj = (QSpacerItem *) o->spacerItem();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QSpacerItem,__construct){
+
+	QSpacerItem *QSpacerItem_ptr = new QSpacerItem();
+
+	if(ZEND_NUM_ARGS() == 4){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
+			return;
+		}
+		 /*long w int*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_0));
+			QSpacerItem_ptr = new QSpacerItem(tmp);
+		}
+		 /*long h int*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QSpacerItem_ptr = new QSpacerItem(tmp);
+		}
+		 /*zval* hData QSizePolicy::Policy*/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			QSizePolicy::Policy tmp(Z_STRVAL_P(param_2));
+			QSpacerItem_ptr = new QSpacerItem(tmp);
+		}
+		 /*zval* vData QSizePolicy::Policy*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			QSizePolicy::Policy tmp(Z_STRVAL_P(param_3));
+			QSpacerItem_ptr = new QSpacerItem(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QSpacerItem_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QSpacerItem);
+

Added: trunk/playground/qstatustipevent.cpp
===================================================================
--- trunk/playground/qstatustipevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qstatustipevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,82 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QStatusTipEvent.cpp - QStatusTipEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QStatusTipEvent>
+
+
+
+/*********************************
+ *    class     QStatusTipEvent
+ *    function  tip
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QStatusTipEvent, tip){
+	if (ZEND_NUM_ARGS() == 0){
+		QStatusTipEvent *o = (QStatusTipEvent*) PHP_QT_FETCH();
+		QString obj = (QString) o->tip();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QStatusTipEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QStatusTipEvent,__construct){
+
+	QStatusTipEvent *QStatusTipEvent_ptr = new QStatusTipEvent();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* tip QString&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_0));
+			QStatusTipEvent_ptr = new QStatusTipEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QStatusTipEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QStatusTipEvent);
+

Added: trunk/playground/qstring.cpp
===================================================================
--- trunk/playground/qstring.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qstring.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,3563 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QString.cpp - QString PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*		public enumSectionFlag:long {
+			SectionDefault = 0x00,
+			SectionSkipEmpty = 0x01,
+			SectionIncludeLeadingSep = 0x02,
+			SectionIncludeTrailingSep = 0x04,
+			SectionCaseInsensitiveSeps = 0x08
+		}
+*/
+
+/*		public enumSplitBehavior:long {
+			SplitBehavior = 0,
+			SplitBehavior = 1
+		}
+*/
+
+/*		public enumNormalizationForm:long {
+			NormalizationForm = 0,
+			NormalizationForm = 1,
+			NormalizationForm = 2,
+			NormalizationForm = 3
+		}
+*/
+
+/*********************************
+ *    class     QString
+ *    function  QString
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QString, QString){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_~(o->QString());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  size
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QString, size){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->size());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  count
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QString, count){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->count());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  length
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QString, length){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->length());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  isEmpty
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QString, isEmpty){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isEmpty());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  resize
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QString, resize){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->resize((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  fill
+ *    flags:    
+ *
+ *    @param   QChar
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, fill){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// -1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->fill( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  truncate
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QString, truncate){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->truncate((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  chop
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QString, chop){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->chop((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  capacity
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QString, capacity){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->capacity());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  reserve
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QString, reserve){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->reserve((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  squeeze
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QString, squeeze){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->squeeze();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  unicode
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QChar *
+*********************************/
+ZEND_METHOD(QString, unicode){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		const QChar * obj = (const QChar *) o->unicode();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  data
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QChar *
+*********************************/
+ZEND_METHOD(QString, data){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		QChar * obj = (QChar *) o->data();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  constData
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QChar *
+*********************************/
+ZEND_METHOD(QString, constData){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		const QChar * obj = (const QChar *) o->constData();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  detach
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QString, detach){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->detach();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  isDetached
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QString, isDetached){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isDetached());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  clear
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QString, clear){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->clear();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  at
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QChar
+*********************************/
+ZEND_METHOD(QString, at){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  arg
+ *    flags:    c
+ *
+ *    @param   qlonglong
+ *    @param   int
+ *    @param   int
+ *    @param   const QChar&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, arg){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// 10
+		long var_2;
+	// QLatin1Char(' ')
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// 10
+		long var_2;
+	// QLatin1Char(' ')
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// 10
+		long var_2;
+	// QLatin1Char(' ')
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// 10
+		long var_2;
+	// QLatin1Char(' ')
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 0
+		long var_1;
+	// 10
+		long var_2;
+	// QLatin1Char(' ')
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg((int) var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// 10
+		long var_2;
+	// QLatin1Char(' ')
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// 10
+		long var_2;
+	// QLatin1Char(' ')
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 5){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// 'g'
+		char* var_2;
+		int* len_2;
+
+	// -1
+		long var_3;
+	// QLatin1Char(' ')
+		zval* var_4;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olslo", &var_0, &var_1, &var_2, &len_2, &var_3, &var_4) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0, (int) var_1,  var_2, (int) var_3,  tmp_var_4);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		long var_1;
+	// QLatin1Char(' ')
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"slo", &var_0, &len_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( var_0, (int) var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// QLatin1Char(' ')
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0, (int) var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// QLatin1Char(' ')
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0, (int) var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0,  tmp_var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: arg
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// 
+		zval* var_2;
+
+	// 
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->arg( tmp_var_0,  tmp_var_1,  tmp_var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  vsprintf
+ *    flags:    
+ *
+ *    @param   const char*
+ *    @param   va_list
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, vsprintf){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_0, &len_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->vsprintf( var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  indexOf
+ *    flags:    c
+ *
+ *    @param   QChar
+ *    @param   int
+ *    @param   Qt::CaseSensitivity
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QString, indexOf){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// Qt::CaseSensitive
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->indexOf( tmp_var_0, (int) var_1,  tmp_var_2));
+// marked for overloading: indexOf
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+	// Qt::CaseSensitive
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->indexOf( tmp_var_0, (int) var_1,  tmp_var_2));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  lastIndexOf
+ *    flags:    c
+ *
+ *    @param   QChar
+ *    @param   int
+ *    @param   Qt::CaseSensitivity
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QString, lastIndexOf){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// -1
+		long var_1;
+	// Qt::CaseSensitive
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->lastIndexOf( tmp_var_0, (int) var_1,  tmp_var_2));
+// marked for overloading: lastIndexOf
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// -1
+		long var_1;
+	// Qt::CaseSensitive
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->lastIndexOf( tmp_var_0, (int) var_1,  tmp_var_2));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  contains
+ *    flags:    c
+ *
+ *    @param   QChar
+ *    @param   Qt::CaseSensitivity
+ *    @param   -
+
+ *    @access   public
+ *    @return   QBool
+*********************************/
+ZEND_METHOD(QString, contains){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+// marked for overloading: contains
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+// marked for overloading: count
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->count( tmp_var_0,  tmp_var_1));
+// marked for overloading: count
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->count( tmp_var_0,  tmp_var_1));
+// marked for overloading: indexOf
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 0
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->indexOf( tmp_var_0, (int) var_1));
+// marked for overloading: lastIndexOf
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// -1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->lastIndexOf( tmp_var_0, (int) var_1));
+// marked for overloading: contains
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+// marked for overloading: count
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->count( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  section
+ *    flags:    c
+ *
+ *    @param   QChar
+ *    @param   int
+ *    @param   int
+ *    @param   SectionFlags
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, section){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// -1
+		long var_2;
+	// SectionDefault
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->section( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: section
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// -1
+		long var_2;
+	// SectionDefault
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->section( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: section
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+	// -1
+		long var_2;
+	// SectionDefault
+		zval* var_3;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->section( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  left
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, left){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->left((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  right
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, right){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->right((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  mid
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, mid){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// -1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->mid((int) var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  startsWith
+ *    flags:    c
+ *
+ *    @param   const QString&
+ *    @param   Qt::CaseSensitivity
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QString, startsWith){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BOOL(o->startsWith( tmp_var_0,  tmp_var_1));
+// marked for overloading: startsWith
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BOOL(o->startsWith( tmp_var_0,  tmp_var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  endsWith
+ *    flags:    c
+ *
+ *    @param   const QString&
+ *    @param   Qt::CaseSensitivity
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QString, endsWith){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BOOL(o->endsWith( tmp_var_0,  tmp_var_1));
+// marked for overloading: endsWith
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BOOL(o->endsWith( tmp_var_0,  tmp_var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  leftJustified
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   QChar
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, leftJustified){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// QLatin1Char(' ')
+		zval* var_1;
+
+	// false
+		bool* var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lob", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->leftJustified((int) var_0,  tmp_var_1, (bool) var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  rightJustified
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   QChar
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, rightJustified){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// QLatin1Char(' ')
+		zval* var_1;
+
+	// false
+		bool* var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lob", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->rightJustified((int) var_0,  tmp_var_1, (bool) var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toLower
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, toLower){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->toLower();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toUpper
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, toUpper){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->toUpper();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  trimmed
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, trimmed){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->trimmed();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  simplified
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, simplified){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->simplified();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  insert
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   QChar
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, insert){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->insert((int) var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: insert
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+	// 
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->insert((int) var_0,  tmp_var_1, (int) var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: insert
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->insert((int) var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  append
+ *    flags:    
+ *
+ *    @param   QChar
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, append){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->append( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: append
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->append( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  prepend
+ *    flags:    
+ *
+ *    @param   QChar
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, prepend){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->prepend( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: prepend
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->prepend( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  remove
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, remove){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->remove((int) var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: remove
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->remove( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: remove
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::CaseSensitive
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->remove( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  replace
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QChar
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, replace){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->replace((int) var_0, (int) var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: replace
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->replace((int) var_0, (int) var_1,  tmp_var_2, (int) var_3);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: replace
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->replace((int) var_0, (int) var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: replace
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// Qt::CaseSensitive
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->replace( tmp_var_0,  tmp_var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: replace
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// Qt::CaseSensitive
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->replace( tmp_var_0,  tmp_var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: replace
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+	// Qt::CaseSensitive
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->replace( tmp_var_0,  tmp_var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: replace
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->replace( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: remove
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->remove( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  split
+ *    flags:    c
+ *
+ *    @param   const QString&
+ *    @param   SplitBehavior
+ *    @param   Qt::CaseSensitivity
+ *    @param   -
+
+ *    @access   public
+ *    @return   QStringList
+*********************************/
+ZEND_METHOD(QString, split){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// KeepEmptyParts
+		zval* var_1;
+
+	// Qt::CaseSensitive
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QStringList obj = (QStringList) o->split( tmp_var_0,  tmp_var_1,  tmp_var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: split
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// KeepEmptyParts
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QStringList obj = (QStringList) o->split( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  normalized
+ *    flags:    c
+ *
+ *    @param   NormalizationForm
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, normalized){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->normalized( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: normalized
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->normalized( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  utf16
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const ushort *
+*********************************/
+ZEND_METHOD(QString, utf16){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		const ushort * obj = (const ushort *) o->utf16();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toAscii
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QByteArray
+*********************************/
+ZEND_METHOD(QString, toAscii){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BYTE[](o->toAscii());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toLatin1
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QByteArray
+*********************************/
+ZEND_METHOD(QString, toLatin1){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BYTE[](o->toLatin1());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toUtf8
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QByteArray
+*********************************/
+ZEND_METHOD(QString, toUtf8){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BYTE[](o->toUtf8());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toLocal8Bit
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QByteArray
+*********************************/
+ZEND_METHOD(QString, toLocal8Bit){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BYTE[](o->toLocal8Bit());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  setUnicode
+ *    flags:    
+ *
+ *    @param   const QChar*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, setUnicode){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setUnicode( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  setUtf16
+ *    flags:    
+ *
+ *    @param   const ushort*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, setUtf16){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setUtf16( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  compare
+ *    flags:    c
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QString, compare){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->compare( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  localeAwareCompare
+ *    flags:    c
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QString, localeAwareCompare){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->localeAwareCompare( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toShort
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   short
+*********************************/
+ZEND_METHOD(QString, toShort){
+	if (ZEND_NUM_ARGS() == 2){
+	// 0
+		bool* var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_SHORT(o->toShort((bool*) var_0, (int) var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toUShort
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   ushort
+*********************************/
+ZEND_METHOD(QString, toUShort){
+	if (ZEND_NUM_ARGS() == 2){
+	// 0
+		bool* var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_USHORT(o->toUShort((bool*) var_0, (int) var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toInt
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QString, toInt){
+	if (ZEND_NUM_ARGS() == 2){
+	// 0
+		bool* var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->toInt((bool*) var_0, (int) var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toUInt
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   uint
+*********************************/
+ZEND_METHOD(QString, toUInt){
+	if (ZEND_NUM_ARGS() == 2){
+	// 0
+		bool* var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->toUInt((bool*) var_0, (int) var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toLong
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   long
+*********************************/
+ZEND_METHOD(QString, toLong){
+	if (ZEND_NUM_ARGS() == 2){
+	// 0
+		bool* var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->toLong((bool*) var_0, (int) var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toULong
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   ulong
+*********************************/
+ZEND_METHOD(QString, toULong){
+	if (ZEND_NUM_ARGS() == 2){
+	// 0
+		bool* var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_ULONG(o->toULong((bool*) var_0, (int) var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toLongLong
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   qlonglong
+*********************************/
+ZEND_METHOD(QString, toLongLong){
+	if (ZEND_NUM_ARGS() == 2){
+	// 0
+		bool* var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toULongLong
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   qulonglong
+*********************************/
+ZEND_METHOD(QString, toULongLong){
+	if (ZEND_NUM_ARGS() == 2){
+	// 0
+		bool* var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toFloat
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   -
+
+ *    @access   public
+ *    @return   float
+*********************************/
+ZEND_METHOD(QString, toFloat){
+	if (ZEND_NUM_ARGS() == 1){
+	// 0
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_FLOAT(o->toFloat((bool*) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  toDouble
+ *    flags:    c
+ *
+ *    @param   bool*
+ *    @param   -
+
+ *    @access   public
+ *    @return   double
+*********************************/
+ZEND_METHOD(QString, toDouble){
+	if (ZEND_NUM_ARGS() == 1){
+	// 0
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_DOUBLE(o->toDouble((bool*) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  setNum
+ *    flags:    
+ *
+ *    @param   short
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString &
+*********************************/
+ZEND_METHOD(QString, setNum){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: setNum
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: setNum
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setNum((int) var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: setNum
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: setNum
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: setNum
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: setNum
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 'g'
+		char* var_1;
+		int* len_1;
+
+	// 6
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osl", &var_0, &var_1, &len_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setNum( tmp_var_0,  var_1, (int) var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: setNum
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 'g'
+		char* var_1;
+		int* len_1;
+
+	// 6
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osl", &var_0, &var_1, &len_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->setNum( tmp_var_0,  var_1, (int) var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: prepend
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->prepend( var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: prepend
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->prepend( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: append
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		char* var_0;
+		int* len_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->append( var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: append
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString & obj = (QString &) o->append( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  begin
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   iterator
+*********************************/
+ZEND_METHOD(QString, begin){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_INTPTR(o->begin());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  constBegin
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const_iterator
+*********************************/
+ZEND_METHOD(QString, constBegin){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  end
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   iterator
+*********************************/
+ZEND_METHOD(QString, end){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_INTPTR(o->end());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  constEnd
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const_iterator
+*********************************/
+ZEND_METHOD(QString, constEnd){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  push_back
+ *    flags:    
+ *
+ *    @param   QChar
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QString, push_back){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->push_back( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: push_back
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->push_back( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  push_front
+ *    flags:    
+ *
+ *    @param   QChar
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QString, push_front){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->push_front( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: push_front
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		o->push_front( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  isNull
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QString, isNull){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isNull());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  isSimpleText
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QString, isSimpleText){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isSimpleText());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  isRightToLeft
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QString, isRightToLeft){
+	if (ZEND_NUM_ARGS() == 0){
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isRightToLeft());
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  fromAscii
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, fromAscii){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// -1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl", &var_0, &len_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->fromAscii( var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  fromLatin1
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, fromLatin1){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// -1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl", &var_0, &len_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->fromLatin1( var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  fromUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, fromUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// -1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl", &var_0, &len_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->fromUtf8( var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  fromLocal8Bit
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, fromLocal8Bit){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// -1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl", &var_0, &len_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->fromLocal8Bit( var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  fromUtf16
+ *    flags:    s
+ *
+ *    @param   const ushort*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, fromUtf16){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// -1
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->fromUtf16( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  fromRawData
+ *    flags:    s
+ *
+ *    @param   const QChar*
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, fromRawData){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->fromRawData( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: compare
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->compare( tmp_var_0,  tmp_var_1));
+// marked for overloading: localeAwareCompare
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QString *o = (QString*) PHP_QT_FETCH();
+		RETURN_LONG(o->localeAwareCompare( tmp_var_0,  tmp_var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QString
+ *    function  number
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QString, number){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->number((int) var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: number
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->number( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: number
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->number( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: number
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 10
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->number( tmp_var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: number
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		zval* var_0;
+
+	// 'g'
+		char* var_1;
+		int* len_1;
+
+	// 6
+		long var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osl", &var_0, &var_1, &len_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QString *o = (QString*) PHP_QT_FETCH();
+		QString obj = (QString) o->number( tmp_var_0,  var_1, (int) var_2);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QString_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QString,__construct){
+
+	QString *QString_ptr = new QString();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* unicode QChar**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QChar* tmp(Z_STRVAL_P(param_0));
+			QString_ptr = new QString(tmp);
+		}
+		 /*long size int*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QString_ptr = new QString(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*QChar c QChar*/
+		if(Z_TYPE_P(param_0) == IS_) {
+			QChar tmp(Z_STRVAL_P(param_0));
+			QString_ptr = new QString(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long size int*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_0));
+			QString_ptr = new QString(tmp);
+		}
+		 /*QChar c QChar*/
+		if(Z_TYPE_P(param_1) == IS_) {
+			QChar tmp(Z_STRVAL_P(param_1));
+			QString_ptr = new QString(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* latin1 QLatin1String&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QLatin1String& tmp(Z_STRVAL_P(param_0));
+			QString_ptr = new QString(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* arg1 QString&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_0));
+			QString_ptr = new QString(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*char*  ch char**/
+		if(Z_TYPE_P(param_0) == IS_STRING) {
+			char* tmp(Z_STRVAL_P(param_0));
+			QString_ptr = new QString(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*byte[] a QByteArray&*/
+		if(Z_TYPE_P(param_0) == IS_ARRAY) {
+			QByteArray& tmp(Z_STRVAL_P(param_0));
+			QString_ptr = new QString(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* arg1 Null&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			Null& tmp(Z_STRVAL_P(param_0));
+			QString_ptr = new QString(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QString_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QString);
+

Added: trunk/playground/qtabletevent.cpp
===================================================================
--- trunk/playground/qtabletevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qtabletevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,488 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QTabletEvent.cpp - QTabletEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QTabletEvent>
+
+
+
+/*		public enumTabletDevice:long {
+			TabletDevice = 0,
+			TabletDevice = 1,
+			TabletDevice = 2,
+			TabletDevice = 3,
+			TabletDevice = 4,
+			TabletDevice = 5
+		}
+*/
+
+/*		public enumPointerType:long {
+			PointerType = 0,
+			PointerType = 1,
+			PointerType = 2,
+			PointerType = 3
+		}
+*/
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  pos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QTabletEvent, pos){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->pos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTabletEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  globalPos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QTabletEvent, globalPos){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->globalPos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTabletEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  hiResGlobalPos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPointF &
+*********************************/
+ZEND_METHOD(QTabletEvent, hiResGlobalPos){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		const QPointF & obj = (const QPointF &) o->hiResGlobalPos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTabletEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  x
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTabletEvent, x){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->x());
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  y
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTabletEvent, y){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->y());
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  globalX
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTabletEvent, globalX){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalX());
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  globalY
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTabletEvent, globalY){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalY());
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  hiResGlobalX
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   qreal
+*********************************/
+ZEND_METHOD(QTabletEvent, hiResGlobalX){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  hiResGlobalY
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   qreal
+*********************************/
+ZEND_METHOD(QTabletEvent, hiResGlobalY){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  device
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   TabletDevice
+*********************************/
+ZEND_METHOD(QTabletEvent, device){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  pointerType
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   PointerType
+*********************************/
+ZEND_METHOD(QTabletEvent, pointerType){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  uniqueId
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   qint64
+*********************************/
+ZEND_METHOD(QTabletEvent, uniqueId){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  pressure
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   qreal
+*********************************/
+ZEND_METHOD(QTabletEvent, pressure){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  z
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTabletEvent, z){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->z());
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  tangentialPressure
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   qreal
+*********************************/
+ZEND_METHOD(QTabletEvent, tangentialPressure){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  rotation
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   qreal
+*********************************/
+ZEND_METHOD(QTabletEvent, rotation){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  xTilt
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTabletEvent, xTilt){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->xTilt());
+	}
+}
+
+
+/*********************************
+ *    class     QTabletEvent
+ *    function  yTilt
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTabletEvent, yTilt){
+	if (ZEND_NUM_ARGS() == 0){
+		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->yTilt());
+
+	}
+}
+
+
+ZEND_METHOD(QTabletEvent,__construct){
+
+	QTabletEvent *QTabletEvent_ptr = new QTabletEvent();
+
+	if(ZEND_NUM_ARGS() == 14){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		zval* param_4;
+		zval* param_5;
+		zval* param_6;
+		zval* param_7;
+		zval* param_8;
+		zval* param_9;
+		zval* param_10;
+		zval* param_11;
+		zval* param_12;
+		zval* param_13;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzzzzzzzzz", &param_1, &param_2, &param_3, &param_4, &param_5, &param_6, &param_7, &param_8, &param_9, &param_10, &param_11, &param_12, &param_13, &param_14) == FAILURE) {
+			return;
+		}
+		 /*long t Type*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			Type tmp(Z_STRVAL_P(param_0));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_1));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*long globalPos QPoint&*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_2));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*zval* hiResGlobalPos QPointF&*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			QPointF& tmp(Z_STRVAL_P(param_3));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*long device int*/
+		if(Z_TYPE_P(param_4) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_4));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*long pointerType int*/
+		if(Z_TYPE_P(param_5) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_5));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*qreal pressure qreal*/
+		if(Z_TYPE_P(param_6) == IS_) {
+			qreal tmp(Z_STRVAL_P(param_6));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*long xTilt int*/
+		if(Z_TYPE_P(param_7) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_7));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*long yTilt int*/
+		if(Z_TYPE_P(param_8) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_8));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*qreal tangentialPressure qreal*/
+		if(Z_TYPE_P(param_9) == IS_) {
+			qreal tmp(Z_STRVAL_P(param_9));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*qreal rotation qreal*/
+		if(Z_TYPE_P(param_10) == IS_) {
+			qreal tmp(Z_STRVAL_P(param_10));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*long z int*/
+		if(Z_TYPE_P(param_11) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_11));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*zval* keyState Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_12) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_12));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+		 /*qint64 uniqueID qint64*/
+		if(Z_TYPE_P(param_13) == IS_) {
+			qint64 tmp(Z_STRVAL_P(param_13));
+			QTabletEvent_ptr = new QTabletEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QTabletEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QTabletEvent);
+

Added: trunk/playground/qtime.cpp
===================================================================
--- trunk/playground/qtime.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qtime.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,536 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QTime.cpp - QTime PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QTime
+ *    function  isNull
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QTime, isNull){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isNull());
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  isValid
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QTime, isValid){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isValid());
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  hour
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTime, hour){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->hour());
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  minute
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTime, minute){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->minute());
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  second
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTime, second){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->second());
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  msec
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTime, msec){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->msec());
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  toString
+ *    flags:    c
+ *
+ *    @param   Qt::DateFormat
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QTime, toString){
+	if (ZEND_NUM_ARGS() == 1){
+	// Qt::TextDate
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		QString obj = (QString) o->toString( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: toString
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		QString obj = (QString) o->toString( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  setHMS
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QTime, setHMS){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 0
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_BOOL(o->setHMS((int) var_0, (int) var_1, (int) var_2, (int) var_3));
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  addSecs
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QTime
+*********************************/
+ZEND_METHOD(QTime, addSecs){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		QTime obj = (QTime) o->addSecs((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  secsTo
+ *    flags:    c
+ *
+ *    @param   const QTime&
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTime, secsTo){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->secsTo( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  addMSecs
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QTime
+*********************************/
+ZEND_METHOD(QTime, addMSecs){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		QTime obj = (QTime) o->addMSecs((int) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  msecsTo
+ *    flags:    c
+ *
+ *    @param   const QTime&
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTime, msecsTo){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->msecsTo( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  start
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QTime, start){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		o->start();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  restart
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTime, restart){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->restart());
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  elapsed
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTime, elapsed){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_LONG(o->elapsed());
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  currentTime
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QTime
+*********************************/
+ZEND_METHOD(QTime, currentTime){
+	if (ZEND_NUM_ARGS() == 0){
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		QTime obj = (QTime) o->currentTime();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTime
+ *    function  fromString
+ *    flags:    s
+ *
+ *    @param   const QString&
+ *    @param   Qt::DateFormat
+ *    @param   -
+
+ *    @access   public
+ *    @return   QTime
+*********************************/
+ZEND_METHOD(QTime, fromString){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::TextDate
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		QTime obj = (QTime) o->fromString( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: fromString
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		QTime obj = (QTime) o->fromString( tmp_var_0,  tmp_var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTime_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: isValid
+	}
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 0
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QTime *o = (QTime*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isValid((int) var_0, (int) var_1, (int) var_2, (int) var_3));
+
+	}
+}
+
+
+ZEND_METHOD(QTime,__construct){
+
+	QTime *QTime_ptr = new QTime();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 4){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
+			return;
+		}
+		 /*long h int*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_0));
+			QTime_ptr = new QTime(tmp);
+		}
+		 /*long m int*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QTime_ptr = new QTime(tmp);
+		}
+		 /*long s int*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_2));
+			QTime_ptr = new QTime(tmp);
+		}
+		 /*long ms int*/
+		if(Z_TYPE_P(param_3) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_3));
+			QTime_ptr = new QTime(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QTime_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QTime);
+

Added: trunk/playground/qtimer.cpp
===================================================================
--- trunk/playground/qtimer.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qtimer.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,496 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QTimer.cpp - QTimer PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QTimer>
+
+
+
+/*********************************
+ *    class     QTimer
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QTimer, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QTimer, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QTimer, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QTimer, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QTimer, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QTimer, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  QTimer
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QTimer, QTimer){
+	if (ZEND_NUM_ARGS() == 0){
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		RETURN_~(o->QTimer());
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  isActive
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QTimer, isActive){
+	if (ZEND_NUM_ARGS() == 0){
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isActive());
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  timerId
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTimer, timerId){
+	if (ZEND_NUM_ARGS() == 0){
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		RETURN_LONG(o->timerId());
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  setInterval
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QTimer, setInterval){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"interval",strlen("interval"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  interval
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QTimer, interval){
+	if (ZEND_NUM_ARGS() == 0){
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		RETURN_LONG(o->interval());
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  setSingleShot
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QTimer, setSingleShot){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"singleShot",strlen("singleShot"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  isSingleShot
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QTimer, isSingleShot){
+	if (ZEND_NUM_ARGS() == 0){
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isSingleShot());
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  start
+ *    flags:    l
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QTimer, start){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		o->start((int) var_0);
+		RETURN_NULL();
+// marked for overloading: start
+	}
+	if (ZEND_NUM_ARGS() == 0){
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		o->start();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  stop
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QTimer, stop){
+	if (ZEND_NUM_ARGS() == 0){
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		o->stop();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QTimer, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTimer_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QTimer, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTimer_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QTimer, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QTimer_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QTimer
+ *    function  singleShot
+ *    flags:    s
+ *
+ *    @param   int
+ *    @param   QObject*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QTimer, singleShot){
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		zval* var_1;
+
+	// 
+		char* var_2;
+		int* len_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"los", &var_0, &var_1, &var_2, &len_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QTimer *o = (QTimer*) PHP_QT_FETCH();
+		o->singleShot((int) var_0,  tmp_var_1,  var_2);
+		RETURN_NULL();
+
+	}
+}
+
+
+ZEND_METHOD(QTimer,__construct){
+
+	QTimer *QTimer_ptr = new QTimer();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QObject**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QObject* tmp(Z_STRVAL_P(param_0));
+			QTimer_ptr = new QTimer(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QTimer_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QTimer);
+

Added: trunk/playground/qtoolbarchangeevent.cpp
===================================================================
--- trunk/playground/qtoolbarchangeevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qtoolbarchangeevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,76 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QToolBarChangeEvent.cpp - QToolBarChangeEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QToolBarChangeEvent>
+
+
+
+/*********************************
+ *    class     QToolBarChangeEvent
+ *    function  toggle
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QToolBarChangeEvent, toggle){
+	if (ZEND_NUM_ARGS() == 0){
+		QToolBarChangeEvent *o = (QToolBarChangeEvent*) PHP_QT_FETCH();
+		RETURN_BOOL(o->toggle());
+
+	}
+}
+
+
+ZEND_METHOD(QToolBarChangeEvent,__construct){
+
+	QToolBarChangeEvent *QToolBarChangeEvent_ptr = new QToolBarChangeEvent();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*bool t bool*/
+		if(Z_TYPE_P(param_0) == IS_BOOL) {
+			bool tmp(Z_STRVAL_P(param_0));
+			QToolBarChangeEvent_ptr = new QToolBarChangeEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QToolBarChangeEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QToolBarChangeEvent);
+

Added: trunk/playground/qvboxlayout.cpp
===================================================================
--- trunk/playground/qvboxlayout.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qvboxlayout.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,297 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QVBoxLayout.cpp - QVBoxLayout PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QVBoxLayout>
+
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QVBoxLayout, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QVBoxLayout, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QVBoxLayout, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QVBoxLayout, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QVBoxLayout, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QVBoxLayout, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  QVBoxLayout
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QVBoxLayout, QVBoxLayout){
+	if (ZEND_NUM_ARGS() == 0){
+		QVBoxLayout *o = (QVBoxLayout*) PHP_QT_FETCH();
+		RETURN_~(o->QVBoxLayout());
+	}
+}
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QVBoxLayout, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QVBoxLayout *o = (QVBoxLayout*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QVBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QVBoxLayout, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QVBoxLayout *o = (QVBoxLayout*) PHP_QT_FETCH();
+		QString obj = (QString) o->tr( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QVBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QVBoxLayout
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QVBoxLayout, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QVBoxLayout *o = (QVBoxLayout*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QVBoxLayout_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QVBoxLayout,__construct){
+
+	QVBoxLayout *QVBoxLayout_ptr = new QVBoxLayout();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QVBoxLayout_ptr = new QVBoxLayout(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QVBoxLayout_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QVBoxLayout);
+

Added: trunk/playground/qwhatsthisclickedevent.cpp
===================================================================
--- trunk/playground/qwhatsthisclickedevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qwhatsthisclickedevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,82 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QWhatsThisClickedEvent.cpp - QWhatsThisClickedEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QWhatsThisClickedEvent>
+
+
+
+/*********************************
+ *    class     QWhatsThisClickedEvent
+ *    function  href
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWhatsThisClickedEvent, href){
+	if (ZEND_NUM_ARGS() == 0){
+		QWhatsThisClickedEvent *o = (QWhatsThisClickedEvent*) PHP_QT_FETCH();
+		QString obj = (QString) o->href();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWhatsThisClickedEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QWhatsThisClickedEvent,__construct){
+
+	QWhatsThisClickedEvent *QWhatsThisClickedEvent_ptr = new QWhatsThisClickedEvent();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* href QString&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QString& tmp(Z_STRVAL_P(param_0));
+			QWhatsThisClickedEvent_ptr = new QWhatsThisClickedEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QWhatsThisClickedEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QWhatsThisClickedEvent);
+

Added: trunk/playground/qwheelevent.cpp
===================================================================
--- trunk/playground/qwheelevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qwheelevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,304 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QWheelEvent.cpp - QWheelEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QWheelEvent>
+
+
+
+/*********************************
+ *    class     QWheelEvent
+ *    function  delta
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWheelEvent, delta){
+	if (ZEND_NUM_ARGS() == 0){
+		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->delta());
+	}
+}
+
+
+/*********************************
+ *    class     QWheelEvent
+ *    function  pos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QWheelEvent, pos){
+	if (ZEND_NUM_ARGS() == 0){
+		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->pos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWheelEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWheelEvent
+ *    function  globalPos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPoint &
+*********************************/
+ZEND_METHOD(QWheelEvent, globalPos){
+	if (ZEND_NUM_ARGS() == 0){
+		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
+		const QPoint & obj = (const QPoint &) o->globalPos();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWheelEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWheelEvent
+ *    function  x
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWheelEvent, x){
+	if (ZEND_NUM_ARGS() == 0){
+		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->x());
+	}
+}
+
+
+/*********************************
+ *    class     QWheelEvent
+ *    function  y
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWheelEvent, y){
+	if (ZEND_NUM_ARGS() == 0){
+		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->y());
+	}
+}
+
+
+/*********************************
+ *    class     QWheelEvent
+ *    function  globalX
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWheelEvent, globalX){
+	if (ZEND_NUM_ARGS() == 0){
+		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalX());
+	}
+}
+
+
+/*********************************
+ *    class     QWheelEvent
+ *    function  globalY
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWheelEvent, globalY){
+	if (ZEND_NUM_ARGS() == 0){
+		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->globalY());
+	}
+}
+
+
+/*********************************
+ *    class     QWheelEvent
+ *    function  buttons
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::MouseButtons
+*********************************/
+ZEND_METHOD(QWheelEvent, buttons){
+	if (ZEND_NUM_ARGS() == 0){
+		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
+		Qt::MouseButtons obj = (Qt::MouseButtons) o->buttons();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWheelEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWheelEvent
+ *    function  orientation
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Orientation
+*********************************/
+ZEND_METHOD(QWheelEvent, orientation){
+	if (ZEND_NUM_ARGS() == 0){
+		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
+		RETURN_LONG(o->orientation());
+
+	}
+}
+
+
+ZEND_METHOD(QWheelEvent,__construct){
+
+	QWheelEvent *QWheelEvent_ptr = new QWheelEvent();
+
+	if(ZEND_NUM_ARGS() == 5){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		zval* param_4;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &param_1, &param_2, &param_3, &param_4, &param_5) == FAILURE) {
+			return;
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_0));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+		 /*long delta int*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+		 /*zval* buttons Qt::MouseButtons*/
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			Qt::MouseButtons tmp(Z_STRVAL_P(param_2));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+		 /*zval* modifiers Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_3));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+		 /*long orient Qt::Orientation*/
+		if(Z_TYPE_P(param_4) == IS_LONG) {
+			Qt::Orientation tmp(Z_STRVAL_P(param_4));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 6){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		zval* param_4;
+		zval* param_5;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &param_1, &param_2, &param_3, &param_4, &param_5, &param_6) == FAILURE) {
+			return;
+		}
+		 /*long pos QPoint&*/
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_0));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+		 /*long globalPos QPoint&*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			QPoint& tmp(Z_STRVAL_P(param_1));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+		 /*long delta int*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_2));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+		 /*zval* buttons Qt::MouseButtons*/
+		if(Z_TYPE_P(param_3) == IS_OBJECT) {
+			Qt::MouseButtons tmp(Z_STRVAL_P(param_3));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+		 /*zval* modifiers Qt::KeyboardModifiers*/
+		if(Z_TYPE_P(param_4) == IS_OBJECT) {
+			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_4));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+		 /*long orient Qt::Orientation*/
+		if(Z_TYPE_P(param_5) == IS_LONG) {
+			Qt::Orientation tmp(Z_STRVAL_P(param_5));
+			QWheelEvent_ptr = new QWheelEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QWheelEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QWheelEvent);
+

Added: trunk/playground/qwidget.cpp
===================================================================
--- trunk/playground/qwidget.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qwidget.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,5173 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QWidget.cpp - QWidget PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QWidget>
+
+
+
+/*********************************
+ *    class     QWidget
+ *    function  metaObject
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject *
+*********************************/
+ZEND_METHOD(QWidget, metaObject){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  className
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const char *
+*********************************/
+ZEND_METHOD(QWidget, className){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  qt_cast
+ *    flags:    v
+ *
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void*
+*********************************/
+ZEND_METHOD(QWidget, qt_cast){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  qt_invoke
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, qt_invoke){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  qt_emit
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   QUObject*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, qt_emit){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  qt_property
+ *    flags:    v
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   QVariant*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, qt_property){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+// skip qObject
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  QWidget
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   ~
+*********************************/
+ZEND_METHOD(QWidget, QWidget){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_~(o->QWidget());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  devType
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, devType){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->devType());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  winId
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   WId
+*********************************/
+ZEND_METHOD(QWidget, winId){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->winId());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  style
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QStyle *
+*********************************/
+ZEND_METHOD(QWidget, style){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QStyle * obj = (QStyle *) o->style();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setStyle
+ *    flags:    
+ *
+ *    @param   QStyle*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setStyle){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setStyle( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isTopLevel
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isTopLevel){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isTopLevel());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isWindow
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isWindow){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isWindow());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isModal
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isModal){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isModal());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isEnabled
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isEnabled){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isEnabled());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isEnabledTo
+ *    flags:    c
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isEnabledTo){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isEnabledTo( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isEnabledToTLW
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isEnabledToTLW){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isEnabledToTLW());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  frameGeometry
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QWidget, frameGeometry){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->frameGeometry();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  geometry
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QRect &
+*********************************/
+ZEND_METHOD(QWidget, geometry){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		const QRect & obj = (const QRect &) o->geometry();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  normalGeometry
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QWidget, normalGeometry){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->normalGeometry();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  x
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, x){
+	if (ZEND_NUM_ARGS() == 0){
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"maximumSize",strlen("maximumSize"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  y
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, y){
+	if (ZEND_NUM_ARGS() == 0){
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"geometry",strlen("geometry"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  pos
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPoint
+*********************************/
+ZEND_METHOD(QWidget, pos){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->pos());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  frameSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidget, frameSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->frameSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  size
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidget, size){
+	if (ZEND_NUM_ARGS() == 0){
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"size",strlen("size"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  width
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, width){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->width());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  height
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, height){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->height());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  rect
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QWidget, rect){
+	if (ZEND_NUM_ARGS() == 0){
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"layoutDirection",strlen("layoutDirection"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  childrenRect
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QWidget, childrenRect){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->childrenRect();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  childrenRegion
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRegion
+*********************************/
+ZEND_METHOD(QWidget, childrenRegion){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QRegion obj = (QRegion) o->childrenRegion();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  minimumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidget, minimumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->minimumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  maximumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidget, maximumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->maximumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  minimumWidth
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, minimumWidth){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->minimumWidth());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  minimumHeight
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, minimumHeight){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->minimumHeight());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  maximumWidth
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, maximumWidth){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->maximumWidth());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  maximumHeight
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, maximumHeight){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->maximumHeight());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setMinimumSize
+ *    flags:    
+ *
+ *    @param   const QSize&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setMinimumSize){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"minimumSize",strlen("minimumSize"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: setMinimumSize
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"minimumSize",strlen("minimumSize"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setMaximumSize
+ *    flags:    
+ *
+ *    @param   const QSize&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setMaximumSize){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"maximumSize",strlen("maximumSize"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: setMaximumSize
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"maximumSize",strlen("maximumSize"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setMinimumWidth
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setMinimumWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"minimumWidth",strlen("minimumWidth"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setMinimumHeight
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setMinimumHeight){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"minimumHeight",strlen("minimumHeight"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setMaximumWidth
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setMaximumWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"maximumWidth",strlen("maximumWidth"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setMaximumHeight
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setMaximumHeight){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"maximumHeight",strlen("maximumHeight"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  sizeIncrement
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidget, sizeIncrement){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeIncrement();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setSizeIncrement
+ *    flags:    
+ *
+ *    @param   const QSize&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setSizeIncrement){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizeIncrement",strlen("sizeIncrement"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: setSizeIncrement
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizeIncrement",strlen("sizeIncrement"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  baseSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidget, baseSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->baseSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setBaseSize
+ *    flags:    
+ *
+ *    @param   const QSize&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setBaseSize){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"baseSize",strlen("baseSize"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: setBaseSize
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"baseSize",strlen("baseSize"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setFixedSize
+ *    flags:    
+ *
+ *    @param   const QSize&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setFixedSize){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setFixedSize( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: setFixedSize
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setFixedSize((int) var_0, (int) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setFixedWidth
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setFixedWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setFixedWidth((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setFixedHeight
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setFixedHeight){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setFixedHeight((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  mapToGlobal
+ *    flags:    c
+ *
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPoint
+*********************************/
+ZEND_METHOD(QWidget, mapToGlobal){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->mapToGlobal((const QPoint&) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  mapFromGlobal
+ *    flags:    c
+ *
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPoint
+*********************************/
+ZEND_METHOD(QWidget, mapFromGlobal){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->mapFromGlobal((const QPoint&) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  mapToParent
+ *    flags:    c
+ *
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPoint
+*********************************/
+ZEND_METHOD(QWidget, mapToParent){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->mapToParent((const QPoint&) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  mapFromParent
+ *    flags:    c
+ *
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPoint
+*********************************/
+ZEND_METHOD(QWidget, mapFromParent){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->mapFromParent((const QPoint&) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  mapTo
+ *    flags:    c
+ *
+ *    @param   QWidget*
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPoint
+*********************************/
+ZEND_METHOD(QWidget, mapTo){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->mapTo( tmp_var_0, (const QPoint&) var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  mapFrom
+ *    flags:    c
+ *
+ *    @param   QWidget*
+ *    @param   const QPoint&
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPoint
+*********************************/
+ZEND_METHOD(QWidget, mapFrom){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->mapFrom( tmp_var_0, (const QPoint&) var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  window
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, window){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->window();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  topLevelWidget
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, topLevelWidget){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->topLevelWidget();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  palette
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QPalette &
+*********************************/
+ZEND_METHOD(QWidget, palette){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		const QPalette & obj = (const QPalette &) o->palette();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setPalette
+ *    flags:    
+ *
+ *    @param   const QPalette&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setPalette){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"palette",strlen("palette"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setBackgroundRole
+ *    flags:    
+ *
+ *    @param   QPalette::ColorRole
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setBackgroundRole){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setBackgroundRole( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  backgroundRole
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPalette::ColorRole
+*********************************/
+ZEND_METHOD(QWidget, backgroundRole){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QPalette::ColorRole obj = (QPalette::ColorRole) o->backgroundRole();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setForegroundRole
+ *    flags:    
+ *
+ *    @param   QPalette::ColorRole
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setForegroundRole){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setForegroundRole( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  foregroundRole
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPalette::ColorRole
+*********************************/
+ZEND_METHOD(QWidget, foregroundRole){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QPalette::ColorRole obj = (QPalette::ColorRole) o->foregroundRole();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  font
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   const QFont &
+*********************************/
+ZEND_METHOD(QWidget, font){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		const QFont & obj = (const QFont &) o->font();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setFont
+ *    flags:    
+ *
+ *    @param   const QFont&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setFont){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"font",strlen("font"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  fontMetrics
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QFontMetrics
+*********************************/
+ZEND_METHOD(QWidget, fontMetrics){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QFontMetrics obj = (QFontMetrics) o->fontMetrics();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  fontInfo
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QFontInfo
+*********************************/
+ZEND_METHOD(QWidget, fontInfo){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QFontInfo obj = (QFontInfo) o->fontInfo();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  cursor
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QCursor
+*********************************/
+ZEND_METHOD(QWidget, cursor){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QCursor obj = (QCursor) o->cursor();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setCursor
+ *    flags:    
+ *
+ *    @param   const QCursor&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setCursor){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"cursor",strlen("cursor"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  unsetCursor
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, unsetCursor){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->unsetCursor();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setMouseTracking
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setMouseTracking){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"mouseTracking",strlen("mouseTracking"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  hasMouseTracking
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, hasMouseTracking){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasMouseTracking());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  underMouse
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, underMouse){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->underMouse());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setMask
+ *    flags:    
+ *
+ *    @param   const QBitmap&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setMask){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setMask( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  mask
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRegion
+*********************************/
+ZEND_METHOD(QWidget, mask){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QRegion obj = (QRegion) o->mask();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  clearMask
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, clearMask){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->clearMask();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setWindowTitle
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setWindowTitle){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"windowTitle",strlen("windowTitle"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  windowTitle
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, windowTitle){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QString obj = (QString) o->windowTitle();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setWindowIcon
+ *    flags:    
+ *
+ *    @param   const QIcon&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setWindowIcon){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"windowIcon",strlen("windowIcon"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  windowIcon
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QIcon
+*********************************/
+ZEND_METHOD(QWidget, windowIcon){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setWindowIconText
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setWindowIconText){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"windowIconText",strlen("windowIconText"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  windowIconText
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, windowIconText){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QString obj = (QString) o->windowIconText();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setWindowRole
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setWindowRole){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setWindowRole( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  windowRole
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, windowRole){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QString obj = (QString) o->windowRole();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setWindowOpacity
+ *    flags:    
+ *
+ *    @param   qreal
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setWindowOpacity){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_double(Z_OBJCE_P(getThis()),getThis(),"windowOpacity",strlen("windowOpacity"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  windowOpacity
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   qreal
+*********************************/
+ZEND_METHOD(QWidget, windowOpacity){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isWindowModified
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isWindowModified){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isWindowModified());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setToolTip
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setToolTip){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"toolTip",strlen("toolTip"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  toolTip
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, toolTip){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QString obj = (QString) o->toolTip();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setStatusTip
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setStatusTip){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"statusTip",strlen("statusTip"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  statusTip
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, statusTip){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QString obj = (QString) o->statusTip();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setWhatsThis
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setWhatsThis){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"whatsThis",strlen("whatsThis"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  whatsThis
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, whatsThis){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QString obj = (QString) o->whatsThis();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  accessibleName
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, accessibleName){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QString obj = (QString) o->accessibleName();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setAccessibleName
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setAccessibleName){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"accessibleName",strlen("accessibleName"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  accessibleDescription
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, accessibleDescription){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QString obj = (QString) o->accessibleDescription();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setAccessibleDescription
+ *    flags:    
+ *
+ *    @param   const QString&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setAccessibleDescription){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"accessibleDescription",strlen("accessibleDescription"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setLayoutDirection
+ *    flags:    
+ *
+ *    @param   Qt::LayoutDirection
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setLayoutDirection){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"layoutDirection",strlen("layoutDirection"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  layoutDirection
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::LayoutDirection
+*********************************/
+ZEND_METHOD(QWidget, layoutDirection){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		Qt::LayoutDirection obj = (Qt::LayoutDirection) o->layoutDirection();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  unsetLayoutDirection
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, unsetLayoutDirection){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->unsetLayoutDirection();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isRightToLeft
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isRightToLeft){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isRightToLeft());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isLeftToRight
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isLeftToRight){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isLeftToRight());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isActiveWindow
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isActiveWindow){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isActiveWindow());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  activateWindow
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, activateWindow){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->activateWindow();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  clearFocus
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, clearFocus){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->clearFocus();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setFocus
+ *    flags:    
+ *
+ *    @param   Qt::FocusReason
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setFocus){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"focusPolicy",strlen("focusPolicy"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  focusPolicy
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::FocusPolicy
+*********************************/
+ZEND_METHOD(QWidget, focusPolicy){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		Qt::FocusPolicy obj = (Qt::FocusPolicy) o->focusPolicy();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setFocusPolicy
+ *    flags:    
+ *
+ *    @param   Qt::FocusPolicy
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setFocusPolicy){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"focusPolicy",strlen("focusPolicy"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  hasFocus
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, hasFocus){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasFocus());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setFocusProxy
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setFocusProxy){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setFocusProxy( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  focusProxy
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, focusProxy){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->focusProxy();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  contextMenuPolicy
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::ContextMenuPolicy
+*********************************/
+ZEND_METHOD(QWidget, contextMenuPolicy){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		Qt::ContextMenuPolicy obj = (Qt::ContextMenuPolicy) o->contextMenuPolicy();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setContextMenuPolicy
+ *    flags:    
+ *
+ *    @param   Qt::ContextMenuPolicy
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setContextMenuPolicy){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"contextMenuPolicy",strlen("contextMenuPolicy"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  grabMouse
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, grabMouse){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->grabMouse();
+		RETURN_NULL();
+// marked for overloading: grabMouse
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->grabMouse( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  releaseMouse
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, releaseMouse){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->releaseMouse();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  grabKeyboard
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, grabKeyboard){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->grabKeyboard();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  releaseKeyboard
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, releaseKeyboard){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->releaseKeyboard();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  grabShortcut
+ *    flags:    
+ *
+ *    @param   const QKeySequence&
+ *    @param   Qt::ShortcutContext
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, grabShortcut){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// Qt::WindowShortcut
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->grabShortcut( tmp_var_0,  tmp_var_1));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  releaseShortcut
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, releaseShortcut){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->releaseShortcut((int) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setShortcutEnabled
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setShortcutEnabled){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// true
+		bool* var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setShortcutEnabled((int) var_0, (bool) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  updatesEnabled
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, updatesEnabled){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->updatesEnabled());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setUpdatesEnabled
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setUpdatesEnabled){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"updatesEnabled",strlen("updatesEnabled"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  update
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, update){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->update((int) var_0, (int) var_1, (int) var_2, (int) var_3);
+		RETURN_NULL();
+// marked for overloading: update
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->update( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  repaint
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, repaint){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->repaint((int) var_0, (int) var_1, (int) var_2, (int) var_3);
+		RETURN_NULL();
+// marked for overloading: repaint
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->repaint( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  stackUnder
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, stackUnder){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->stackUnder( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  move
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, move){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"pos",strlen("pos"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: move
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"pos",strlen("pos"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  resize
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, resize){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"size",strlen("size"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: resize
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"size",strlen("size"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setGeometry
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setGeometry){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"geometry",strlen("geometry"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: setGeometry
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"geometry",strlen("geometry"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  adjustSize
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, adjustSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->adjustSize();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isVisible
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isVisible){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isVisible());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isVisibleTo
+ *    flags:    c
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isVisibleTo){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isVisibleTo( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isHidden
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isHidden){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isHidden());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isMinimized
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isMinimized){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isMinimized());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isMaximized
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isMaximized){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isMaximized());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isFullScreen
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isFullScreen){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isFullScreen());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  windowState
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::WindowStates
+*********************************/
+ZEND_METHOD(QWidget, windowState){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		Qt::WindowStates obj = (Qt::WindowStates) o->windowState();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setWindowState
+ *    flags:    
+ *
+ *    @param   Qt::WindowStates
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setWindowState){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setWindowState( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  overrideWindowState
+ *    flags:    
+ *
+ *    @param   Qt::WindowStates
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, overrideWindowState){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->overrideWindowState( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  sizeHint
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidget, sizeHint){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  minimumSizeHint
+ *    flags:    cv
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidget, minimumSizeHint){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  sizePolicy
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSizePolicy
+*********************************/
+ZEND_METHOD(QWidget, sizePolicy){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QSizePolicy obj = (QSizePolicy) o->sizePolicy();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setSizePolicy
+ *    flags:    
+ *
+ *    @param   QSizePolicy
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setSizePolicy){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizePolicy",strlen("sizePolicy"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: setSizePolicy
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizePolicy",strlen("sizePolicy"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  heightForWidth
+ *    flags:    cv
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, heightForWidth){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  visibleRegion
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRegion
+*********************************/
+ZEND_METHOD(QWidget, visibleRegion){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QRegion obj = (QRegion) o->visibleRegion();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setContentsMargins
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setContentsMargins){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setContentsMargins((int) var_0, (int) var_1, (int) var_2, (int) var_3);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  getContentsMargins
+ *    flags:    c
+ *
+ *    @param   int*
+ *    @param   int*
+ *    @param   int*
+ *    @param   int*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, getContentsMargins){
+	if (ZEND_NUM_ARGS() == 4){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		long var_2;
+	// 
+		long var_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->getContentsMargins((int*) var_0, (int*) var_1, (int*) var_2, (int*) var_3);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  contentsRect
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QWidget, contentsRect){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->contentsRect();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  layout
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QLayout *
+*********************************/
+ZEND_METHOD(QWidget, layout){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QLayout * obj = (QLayout *) o->layout();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setLayout
+ *    flags:    
+ *
+ *    @param   QLayout*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setLayout){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"layoutDirection",strlen("layoutDirection"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  updateGeometry
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, updateGeometry){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->updateGeometry();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setParent
+ *    flags:    
+ *
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setParent){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setParent( tmp_var_0);
+		RETURN_NULL();
+// marked for overloading: setParent
+	}
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setParent( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  scroll
+ *    flags:    
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, scroll){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->scroll((int) var_0, (int) var_1);
+		RETURN_NULL();
+// marked for overloading: scroll
+	}
+	if (ZEND_NUM_ARGS() == 3){
+	// 
+		long var_0;
+	// 
+		long var_1;
+	// 
+		zval* var_2;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->scroll((int) var_0, (int) var_1,  tmp_var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  focusWidget
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, focusWidget){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->focusWidget();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  nextInFocusChain
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, nextInFocusChain){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->nextInFocusChain();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  acceptDrops
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, acceptDrops){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->acceptDrops());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setAcceptDrops
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setAcceptDrops){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"acceptDrops",strlen("acceptDrops"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  addAction
+ *    flags:    
+ *
+ *    @param   QAction*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, addAction){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->addAction( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  insertAction
+ *    flags:    
+ *
+ *    @param   QAction*
+ *    @param   QAction*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, insertAction){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->insertAction( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  removeAction
+ *    flags:    
+ *
+ *    @param   QAction*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, removeAction){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->removeAction( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  parentWidget
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, parentWidget){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->parentWidget();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setWindowFlags
+ *    flags:    
+ *
+ *    @param   Qt::WindowFlags
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setWindowFlags){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setWindowFlags( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  windowFlags
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::WindowFlags
+*********************************/
+ZEND_METHOD(QWidget, windowFlags){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		Qt::WindowFlags obj = (Qt::WindowFlags) o->windowFlags();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  overrideWindowFlags
+ *    flags:    
+ *
+ *    @param   Qt::WindowFlags
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, overrideWindowFlags){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->overrideWindowFlags( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  windowType
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::WindowType
+*********************************/
+ZEND_METHOD(QWidget, windowType){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		Qt::WindowType obj = (Qt::WindowType) o->windowType();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  childAt
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, childAt){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		long var_0;
+	// 
+		long var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->childAt((int) var_0, (int) var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+// marked for overloading: childAt
+	}
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->childAt((const QPoint&) var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  handle
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::HANDLE
+*********************************/
+ZEND_METHOD(QWidget, handle){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		Qt::HANDLE obj = (Qt::HANDLE) o->handle();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setAttribute
+ *    flags:    
+ *
+ *    @param   Qt::WidgetAttribute
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setAttribute){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// true
+		bool* var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setAttribute( tmp_var_0, (bool) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  testAttribute
+ *    flags:    c
+ *
+ *    @param   Qt::WidgetAttribute
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, testAttribute){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->testAttribute( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  paintEngine
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QPaintEngine *
+*********************************/
+ZEND_METHOD(QWidget, paintEngine){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QPaintEngine * obj = (QPaintEngine *) o->paintEngine();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  ensurePolished
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, ensurePolished){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->ensurePolished();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  inputContext
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QInputContext *
+*********************************/
+ZEND_METHOD(QWidget, inputContext){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QInputContext * obj = (QInputContext *) o->inputContext();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setInputContext
+ *    flags:    
+ *
+ *    @param   QInputContext*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setInputContext){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setInputContext( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  isAncestorOf
+ *    flags:    c
+ *
+ *    @param   const QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, isAncestorOf){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isAncestorOf( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  inputMethodQuery
+ *    flags:    cv
+ *
+ *    @param   Qt::InputMethodQuery
+ *    @param   -
+
+ *    @access   public
+ *    @return   QVariant
+*********************************/
+ZEND_METHOD(QWidget, inputMethodQuery){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setEnabled
+ *    flags:    l
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setEnabled){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"enabled",strlen("enabled"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setDisabled
+ *    flags:    l
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setDisabled){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setDisabled((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setWindowModified
+ *    flags:    l
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setWindowModified){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"windowModified",strlen("windowModified"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: setFocus
+	}
+	if (ZEND_NUM_ARGS() == 0){
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"focusPolicy",strlen("focusPolicy"),var_0 TSRMLS_CC);
+	}
+// marked for overloading: update
+	}
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->update();
+		RETURN_NULL();
+// marked for overloading: repaint
+	}
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->repaint();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setVisible
+ *    flags:    vl
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setVisible){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setHidden
+ *    flags:    l
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setHidden){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setHidden((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  show
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, show){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->show();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  hide
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, hide){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->hide();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setShown
+ *    flags:    l
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setShown){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		bool* var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setShown((bool) var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  showMinimized
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, showMinimized){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->showMinimized();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  showMaximized
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, showMaximized){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->showMaximized();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  showFullScreen
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, showFullScreen){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->showFullScreen();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  showNormal
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, showNormal){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->showNormal();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  close
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, close){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->close());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  raise
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, raise){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->raise();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  lower
+ *    flags:    l
+ *
+ *    @param   -
+
+ *    @access   public_slots
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, lower){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->lower();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  staticMetaObject
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QMetaObject*
+*********************************/
+ZEND_METHOD(QWidget, staticMetaObject){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  tr
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, tr){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"geometry",strlen("geometry"),var_0 TSRMLS_CC);
+	}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  trUtf8
+ *    flags:    s
+ *
+ *    @param   const char*
+ *    @param   const char*
+ *    @param   -
+
+ *    @access   public
+ *    @return   QString
+*********************************/
+ZEND_METHOD(QWidget, trUtf8){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		char* var_0;
+		int* len_0;
+
+	// 0
+		char* var_1;
+		int* len_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QString obj = (QString) o->trUtf8( var_0,  var_1);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  setTabOrder
+ *    flags:    s
+ *
+ *    @param   QWidget*
+ *    @param   QWidget*
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, setTabOrder){
+	if (ZEND_NUM_ARGS() == 2){
+	// 
+		zval* var_0;
+
+	// 
+		zval* var_1;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->setTabOrder( tmp_var_0,  tmp_var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  mouseGrabber
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, mouseGrabber){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->mouseGrabber();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  keyboardGrabber
+ *    flags:    s
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, keyboardGrabber){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->keyboardGrabber();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  find
+ *    flags:    s
+ *
+ *    @param   WId
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidget, find){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		QWidget * obj = (QWidget *) o->find( tmp_var_0);
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidget_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  event
+ *    flags:    
+ *
+ *    @param   QEvent*
+ *    @param   -
+
+ *    @access   protected
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, event){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->event( tmp_var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  metric
+ *    flags:    c
+ *
+ *    @param   PaintDeviceMetric
+ *    @param   -
+
+ *    @access   protected
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidget, metric){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_LONG(o->metric((PaintDeviceMetric) var_0));
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  resetInputContext
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, resetInputContext){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->resetInputContext();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  updateMicroFocus
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, updateMicroFocus){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->updateMicroFocus();
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  create
+ *    flags:    
+ *
+ *    @param   WId
+ *    @param   bool
+ *    @param   bool
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, create){
+	if (ZEND_NUM_ARGS() == 3){
+	// 0
+		zval* var_0;
+
+	// true
+		bool* var_1;
+	// true
+		bool* var_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"obb", &var_0, &var_1, &var_2) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->create( tmp_var_0, (bool) var_1, (bool) var_2);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  destroy
+ *    flags:    
+ *
+ *    @param   bool
+ *    @param   bool
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, destroy){
+	if (ZEND_NUM_ARGS() == 2){
+	// true
+		bool* var_0;
+	// true
+		bool* var_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bb", &var_0, &var_1) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		o->destroy((bool) var_0, (bool) var_1);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  focusNextPrevChild
+ *    flags:    v
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   protected
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, focusNextPrevChild){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  focusNextChild
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   protected
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, focusNextChild){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->focusNextChild());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  focusPreviousChild
+ *    flags:    
+ *
+ *    @param   -
+
+ *    @access   protected
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidget, focusPreviousChild){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidget *o = (QWidget*) PHP_QT_FETCH();
+		RETURN_BOOL(o->focusPreviousChild());
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  styleChange
+ *    flags:    v
+ *
+ *    @param   QStyle&
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, styleChange){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  enabledChange
+ *    flags:    v
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, enabledChange){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  paletteChange
+ *    flags:    v
+ *
+ *    @param   const QPalette&
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, paletteChange){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  fontChange
+ *    flags:    v
+ *
+ *    @param   const QFont&
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, fontChange){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  windowActivationChange
+ *    flags:    v
+ *
+ *    @param   bool
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, windowActivationChange){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidget
+ *    function  languageChange
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   protected
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidget, languageChange){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+
+	}
+}
+
+
+ZEND_METHOD(QWidget,__construct){
+
+	QWidget *QWidget_ptr = new QWidget();
+
+	if(ZEND_NUM_ARGS() == 2){
+		zval* param_0;
+		zval* param_1;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QWidget_ptr = new QWidget(tmp);
+		}
+		 /*long f Qt::WFlags*/
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			Qt::WFlags tmp(Z_STRVAL_P(param_1));
+			QWidget_ptr = new QWidget(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
+			return;
+		}
+		 /*zval* d QWidgetPrivate&*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidgetPrivate& tmp(Z_STRVAL_P(param_0));
+			QWidget_ptr = new QWidget(tmp);
+		}
+		 /*zval* parent QWidget**/
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_1));
+			QWidget_ptr = new QWidget(tmp);
+		}
+		 /*long f Qt::WFlags*/
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			Qt::WFlags tmp(Z_STRVAL_P(param_2));
+			QWidget_ptr = new QWidget(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QWidget_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QWidget);
+

Added: trunk/playground/qwidgetdata.cpp
===================================================================
--- trunk/playground/qwidgetdata.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qwidgetdata.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,45 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QWidgetData.cpp - QWidgetData PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+	}
+}
+
+
+ZEND_METHOD(QWidgetData,__construct){
+
+	QWidgetData *QWidgetData_ptr = new QWidgetData();
+
+	PHP_QT_REGISTER(QWidgetData_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QWidgetData);
+

Added: trunk/playground/qwidgetitem.cpp
===================================================================
--- trunk/playground/qwidgetitem.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qwidgetitem.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,283 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QWidgetItem.cpp - QWidgetItem PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QWidgetItem>
+
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  sizeHint
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidgetItem, sizeHint){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidgetItem *o = (QWidgetItem*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->sizeHint();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidgetItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  minimumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidgetItem, minimumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidgetItem *o = (QWidgetItem*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->minimumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidgetItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  maximumSize
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QSize
+*********************************/
+ZEND_METHOD(QWidgetItem, maximumSize){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidgetItem *o = (QWidgetItem*) PHP_QT_FETCH();
+		QSize obj = (QSize) o->maximumSize();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidgetItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  expandingDirections
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::Orientations
+*********************************/
+ZEND_METHOD(QWidgetItem, expandingDirections){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidgetItem *o = (QWidgetItem*) PHP_QT_FETCH();
+		Qt::Orientations obj = (Qt::Orientations) o->expandingDirections();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidgetItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  isEmpty
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidgetItem, isEmpty){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidgetItem *o = (QWidgetItem*) PHP_QT_FETCH();
+		RETURN_BOOL(o->isEmpty());
+	}
+}
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  setGeometry
+ *    flags:    
+ *
+ *    @param   const QRect&
+ *    @param   -
+
+ *    @access   public
+ *    @return   void
+*********************************/
+ZEND_METHOD(QWidgetItem, setGeometry){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		zval* var_0;
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
+		QWidgetItem *o = (QWidgetItem*) PHP_QT_FETCH();
+		o->setGeometry( tmp_var_0);
+		RETURN_NULL();
+	}
+}
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  geometry
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QRect
+*********************************/
+ZEND_METHOD(QWidgetItem, geometry){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidgetItem *o = (QWidgetItem*) PHP_QT_FETCH();
+		QRect obj = (QRect) o->geometry();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWidgetItem_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+	}
+}
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  widget
+ *    flags:    v
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   QWidget *
+*********************************/
+ZEND_METHOD(QWidgetItem, widget){
+// marked as virtual, skipped
+	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
+}
+	}
+}
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  hasHeightForWidth
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   bool
+*********************************/
+ZEND_METHOD(QWidgetItem, hasHeightForWidth){
+	if (ZEND_NUM_ARGS() == 0){
+		QWidgetItem *o = (QWidgetItem*) PHP_QT_FETCH();
+		RETURN_BOOL(o->hasHeightForWidth());
+	}
+}
+
+
+/*********************************
+ *    class     QWidgetItem
+ *    function  heightForWidth
+ *    flags:    c
+ *
+ *    @param   int
+ *    @param   -
+
+ *    @access   public
+ *    @return   int
+*********************************/
+ZEND_METHOD(QWidgetItem, heightForWidth){
+	if (ZEND_NUM_ARGS() == 1){
+	// 
+		long var_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
+			RETURN_FALSE;
+		}
+		QWidgetItem *o = (QWidgetItem*) PHP_QT_FETCH();
+		RETURN_LONG(o->heightForWidth((int) var_0));
+
+	}
+}
+
+
+ZEND_METHOD(QWidgetItem,__construct){
+
+	QWidgetItem *QWidgetItem_ptr = new QWidgetItem();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* w QWidget**/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QWidget* tmp(Z_STRVAL_P(param_0));
+			QWidgetItem_ptr = new QWidgetItem(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QWidgetItem_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QWidgetItem);
+

Added: trunk/playground/qwindowstatechangeevent.cpp
===================================================================
--- trunk/playground/qwindowstatechangeevent.cpp	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/qwindowstatechangeevent.cpp	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,82 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QWindowStateChangeEvent.cpp - QWindowStateChangeEvent PHP implementation.
+ * begin           : Wed Jan  4 01:19:22 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+#include <QWindowStateChangeEvent>
+
+
+
+/*********************************
+ *    class     QWindowStateChangeEvent
+ *    function  oldState
+ *    flags:    c
+ *
+ *    @param   -
+
+ *    @access   public
+ *    @return   Qt::WindowStates
+*********************************/
+ZEND_METHOD(QWindowStateChangeEvent, oldState){
+	if (ZEND_NUM_ARGS() == 0){
+		QWindowStateChangeEvent *o = (QWindowStateChangeEvent*) PHP_QT_FETCH();
+		Qt::WindowStates obj = (Qt::WindowStates) o->oldState();
+		zend_class_entry *ce;                                   
+		    object_init_ex(return_value, QWindowStateChangeEvent_ce_ptr);     
+		    zend_rsrc_list_entry le;                            
+		    le.ptr = &obj;                                       
+		    php_qt_register(return_value,le);                   
+		    return;                                             
+
+	}
+}
+
+
+ZEND_METHOD(QWindowStateChangeEvent,__construct){
+
+	QWindowStateChangeEvent *QWindowStateChangeEvent_ptr = new QWindowStateChangeEvent();
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
+			return;
+		}
+		 /*zval* aOldState Qt::WindowStates*/
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			Qt::WindowStates tmp(Z_STRVAL_P(param_0));
+			QWindowStateChangeEvent_ptr = new QWindowStateChangeEvent(tmp);
+		}
+	}
+
+	PHP_QT_REGISTER(QWindowStateChangeEvent_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QWindowStateChangeEvent);
+

Added: trunk/playground/zend_php_qt.h
===================================================================
--- trunk/playground/zend_php_qt.h	2006-01-03 21:32:58 UTC (rev 151)
+++ trunk/playground/zend_php_qt.h	2006-01-04 00:17:09 UTC (rev 152)
@@ -0,0 +1,1378 @@
+/*
+  +----------------------------------------------------------------------+
+  | PHP Version 5                                                        |
+  +----------------------------------------------------------------------+
+  | Copyright (c) 1997-2004 The PHP Group                                |
+  +----------------------------------------------------------------------+
+  | This source file is subject to version 3.0 of the PHP license,       |
+  | that is bundled with this package in the file LICENSE, and is        |
+  | available through the world-wide-web at the following url:           |
+  | http://www.php.net/license/3_0.txt.                                  |
+  | If you did not receive a copy of the PHP license and are unable to   |
+  | obtain it through the world-wide-web, please send a note to          |
+  | license at php.net so we can mail you a copy immediately.               |
+  +----------------------------------------------------------------------+
+  | Author:                                                              |
+  +----------------------------------------------------------------------+
+*/
+/*
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+*/
+/* $Id: header,v 1.15 2004/01/08 16:46:52 sniper Exp $ */
+
+#ifndef PHP_PHP_QT_H
+#define PHP_PHP_QT_H
+
+extern zend_module_entry php_qt_module_entry;
+#define phpext_php_qt_ptr &php_qt_module_entry
+
+#ifdef ZTS
+#include "TSRM.h"
+#endif
+
+PHP_MINIT_FUNCTION(php_qt);
+PHP_MSHUTDOWN_FUNCTION(php_qt);
+PHP_RINIT_FUNCTION(php_qt);
+PHP_RSHUTDOWN_FUNCTION(php_qt);
+PHP_MINFO_FUNCTION(php_qt);
+
+PHP_FUNCTION(confirm_php_qt_compiled);	/* For testing, remove later. */
+
+/* emulate SIGNAL(), SLOT() macros */
+PHP_FUNCTION(SIGNAL);
+PHP_FUNCTION(SLOT);
+    
+
+
+
+/* QAbstractButton */
+ZEND_METHOD(QAbstractButton, QAbstractButton);
+ZEND_METHOD(QAbstractButton, text);
+ZEND_METHOD(QAbstractButton, icon);
+ZEND_METHOD(QAbstractButton, iconSize);
+ZEND_METHOD(QAbstractButton, shortcut);
+ZEND_METHOD(QAbstractButton, isCheckable);
+ZEND_METHOD(QAbstractButton, isChecked);
+ZEND_METHOD(QAbstractButton, isDown);
+ZEND_METHOD(QAbstractButton, autoRepeat);
+ZEND_METHOD(QAbstractButton, autoExclusive);
+ZEND_METHOD(QAbstractButton, group);
+ZEND_METHOD(QAbstractButton, animateClick);
+ZEND_METHOD(QAbstractButton, click);
+ZEND_METHOD(QAbstractButton, toggle);
+ZEND_METHOD(QAbstractButton, staticMetaObject);
+ZEND_METHOD(QAbstractButton, tr);
+ZEND_METHOD(QAbstractButton, trUtf8);
+
+/* QAbstractSlider */
+ZEND_METHOD(QAbstractSlider, QAbstractSlider);
+ZEND_METHOD(QAbstractSlider, orientation);
+ZEND_METHOD(QAbstractSlider, minimum);
+ZEND_METHOD(QAbstractSlider, maximum);
+ZEND_METHOD(QAbstractSlider, setRange);
+ZEND_METHOD(QAbstractSlider, singleStep);
+ZEND_METHOD(QAbstractSlider, pageStep);
+ZEND_METHOD(QAbstractSlider, hasTracking);
+ZEND_METHOD(QAbstractSlider, isSliderDown);
+ZEND_METHOD(QAbstractSlider, sliderPosition);
+ZEND_METHOD(QAbstractSlider, invertedAppearance);
+ZEND_METHOD(QAbstractSlider, invertedControls);
+ZEND_METHOD(QAbstractSlider, value);
+ZEND_METHOD(QAbstractSlider, triggerAction);
+ZEND_METHOD(QAbstractSlider, staticMetaObject);
+ZEND_METHOD(QAbstractSlider, trUtf8);
+ZEND_METHOD(QAbstractSlider, setRepeatAction);
+ZEND_METHOD(QAbstractSlider, repeatAction);
+
+/* QActionEvent */
+ZEND_METHOD(QActionEvent, action);
+ZEND_METHOD(QActionEvent, before);
+
+/* QApplication */
+ZEND_METHOD(QApplication, isSessionRestored);
+ZEND_METHOD(QApplication, sessionId);
+ZEND_METHOD(QApplication, sessionKey);
+ZEND_METHOD(QApplication, setInputContext);
+ZEND_METHOD(QApplication, inputContext);
+ZEND_METHOD(QApplication, notify);
+ZEND_METHOD(QApplication, staticMetaObject);
+ZEND_METHOD(QApplication, trUtf8);
+ZEND_METHOD(QApplication, type);
+ZEND_METHOD(QApplication, style);
+ZEND_METHOD(QApplication, setStyle);
+ZEND_METHOD(QApplication, setStyle);
+ZEND_METHOD(QApplication, colorSpec);
+ZEND_METHOD(QApplication, setColorSpec);
+ZEND_METHOD(QApplication, overrideCursor);
+ZEND_METHOD(QApplication, setOverrideCursor);
+ZEND_METHOD(QApplication, changeOverrideCursor);
+ZEND_METHOD(QApplication, restoreOverrideCursor);
+ZEND_METHOD(QApplication, palette);
+ZEND_METHOD(QApplication, palette);
+ZEND_METHOD(QApplication, palette);
+ZEND_METHOD(QApplication, setPalette);
+ZEND_METHOD(QApplication, font);
+ZEND_METHOD(QApplication, setFont);
+ZEND_METHOD(QApplication, fontMetrics);
+ZEND_METHOD(QApplication, windowIcon);
+ZEND_METHOD(QApplication, allWidgets);
+ZEND_METHOD(QApplication, topLevelWidgets);
+ZEND_METHOD(QApplication, desktop);
+ZEND_METHOD(QApplication, activePopupWidget);
+ZEND_METHOD(QApplication, activeModalWidget);
+ZEND_METHOD(QApplication, clipboard);
+ZEND_METHOD(QApplication, focusWidget);
+ZEND_METHOD(QApplication, activeWindow);
+ZEND_METHOD(QApplication, setActiveWindow);
+ZEND_METHOD(QApplication, widgetAt);
+ZEND_METHOD(QApplication, widgetAt);
+ZEND_METHOD(QApplication, topLevelAt);
+ZEND_METHOD(QApplication, topLevelAt);
+ZEND_METHOD(QApplication, syncX);
+ZEND_METHOD(QApplication, beep);
+ZEND_METHOD(QApplication, keyboardModifiers);
+ZEND_METHOD(QApplication, mouseButtons);
+ZEND_METHOD(QApplication, setDesktopSettingsAware);
+ZEND_METHOD(QApplication, desktopSettingsAware);
+ZEND_METHOD(QApplication, cursorFlashTime);
+ZEND_METHOD(QApplication, setDoubleClickInterval);
+ZEND_METHOD(QApplication, doubleClickInterval);
+ZEND_METHOD(QApplication, keyboardInputInterval);
+ZEND_METHOD(QApplication, setWheelScrollLines);
+ZEND_METHOD(QApplication, wheelScrollLines);
+ZEND_METHOD(QApplication, globalStrut);
+ZEND_METHOD(QApplication, setStartDragTime);
+ZEND_METHOD(QApplication, startDragTime);
+ZEND_METHOD(QApplication, setStartDragDistance);
+ZEND_METHOD(QApplication, startDragDistance);
+ZEND_METHOD(QApplication, layoutDirection);
+ZEND_METHOD(QApplication, isRightToLeft);
+ZEND_METHOD(QApplication, isLeftToRight);
+ZEND_METHOD(QApplication, isEffectEnabled);
+ZEND_METHOD(QApplication, setEffectEnabled);
+ZEND_METHOD(QApplication, exec);
+ZEND_METHOD(QApplication, setQuitOnLastWindowClosed);
+ZEND_METHOD(QApplication, quitOnLastWindowClosed);
+ZEND_METHOD(QApplication, closeAllWindows);
+ZEND_METHOD(QApplication, aboutQt);
+ZEND_METHOD(QApplication, event);
+
+/* QBoxLayout */
+ZEND_METHOD(QBoxLayout, QBoxLayout);
+ZEND_METHOD(QBoxLayout, direction);
+ZEND_METHOD(QBoxLayout, setDirection);
+ZEND_METHOD(QBoxLayout, addSpacing);
+ZEND_METHOD(QBoxLayout, addStretch);
+ZEND_METHOD(QBoxLayout, addWidget);
+ZEND_METHOD(QBoxLayout, addLayout);
+ZEND_METHOD(QBoxLayout, addStrut);
+ZEND_METHOD(QBoxLayout, addItem);
+ZEND_METHOD(QBoxLayout, insertSpacing);
+ZEND_METHOD(QBoxLayout, insertStretch);
+ZEND_METHOD(QBoxLayout, insertWidget);
+ZEND_METHOD(QBoxLayout, insertLayout);
+ZEND_METHOD(QBoxLayout, setStretchFactor);
+ZEND_METHOD(QBoxLayout, setStretchFactor);
+ZEND_METHOD(QBoxLayout, sizeHint);
+ZEND_METHOD(QBoxLayout, minimumSize);
+ZEND_METHOD(QBoxLayout, maximumSize);
+ZEND_METHOD(QBoxLayout, hasHeightForWidth);
+ZEND_METHOD(QBoxLayout, heightForWidth);
+ZEND_METHOD(QBoxLayout, minimumHeightForWidth);
+ZEND_METHOD(QBoxLayout, expandingDirections);
+ZEND_METHOD(QBoxLayout, invalidate);
+ZEND_METHOD(QBoxLayout, itemAt);
+ZEND_METHOD(QBoxLayout, takeAt);
+ZEND_METHOD(QBoxLayout, count);
+ZEND_METHOD(QBoxLayout, setGeometry);
+ZEND_METHOD(QBoxLayout, staticMetaObject);
+ZEND_METHOD(QBoxLayout, tr);
+ZEND_METHOD(QBoxLayout, trUtf8);
+ZEND_METHOD(QBoxLayout, insertItem);
+ZEND_METHOD(QChar, digitValue);
+ZEND_METHOD(QChar, toLower);
+ZEND_METHOD(QChar, toUpper);
+ZEND_METHOD(QChar, category);
+ZEND_METHOD(QChar, direction);
+ZEND_METHOD(QChar, joining);
+ZEND_METHOD(QChar, hasMirrored);
+ZEND_METHOD(QChar, isLower);
+ZEND_METHOD(QChar, isUpper);
+ZEND_METHOD(QChar, mirroredChar);
+ZEND_METHOD(QChar, decomposition);
+ZEND_METHOD(QChar, decompositionTag);
+ZEND_METHOD(QChar, combiningClass);
+ZEND_METHOD(QChar, unicodeVersion);
+ZEND_METHOD(QChar, toAscii);
+ZEND_METHOD(QChar, toLatin1);
+ZEND_METHOD(QChar, unicode);
+ZEND_METHOD(QChar, unicode);
+ZEND_METHOD(QChar, isNull);
+ZEND_METHOD(QChar, isPrint);
+ZEND_METHOD(QChar, isPunct);
+ZEND_METHOD(QChar, isSpace);
+ZEND_METHOD(QChar, isMark);
+ZEND_METHOD(QChar, isLetter);
+ZEND_METHOD(QChar, isNumber);
+ZEND_METHOD(QChar, isLetterOrNumber);
+ZEND_METHOD(QChar, isDigit);
+ZEND_METHOD(QChar, isSymbol);
+ZEND_METHOD(QChar, cell);
+ZEND_METHOD(QChar, row);
+ZEND_METHOD(QChar, setCell);
+ZEND_METHOD(QChar, setRow);
+ZEND_METHOD(QChar, fromAscii);
+ZEND_METHOD(QChar, fromLatin1);
+ZEND_METHOD(QCharRef, isNull);
+ZEND_METHOD(QCharRef, isPrint);
+ZEND_METHOD(QCharRef, isPunct);
+ZEND_METHOD(QCharRef, isSpace);
+ZEND_METHOD(QCharRef, isMark);
+ZEND_METHOD(QCharRef, isLetter);
+ZEND_METHOD(QCharRef, isNumber);
+ZEND_METHOD(QCharRef, isLetterOrNumber);
+ZEND_METHOD(QCharRef, isDigit);
+ZEND_METHOD(QCharRef, digitValue);
+ZEND_METHOD(QCharRef, toLower);
+ZEND_METHOD(QCharRef, toUpper);
+ZEND_METHOD(QCharRef, category);
+ZEND_METHOD(QCharRef, direction);
+ZEND_METHOD(QCharRef, joining);
+ZEND_METHOD(QCharRef, hasMirrored);
+ZEND_METHOD(QCharRef, mirroredChar);
+ZEND_METHOD(QCharRef, decomposition);
+ZEND_METHOD(QCharRef, decompositionTag);
+ZEND_METHOD(QCharRef, combiningClass);
+ZEND_METHOD(QCharRef, unicodeVersion);
+ZEND_METHOD(QCharRef, cell);
+ZEND_METHOD(QCharRef, row);
+ZEND_METHOD(QCharRef, setCell);
+ZEND_METHOD(QCharRef, setRow);
+ZEND_METHOD(QCharRef, toAscii);
+ZEND_METHOD(QCharRef, toLatin1);
+ZEND_METHOD(QCharRef, unicode);
+
+/* QClipboardEvent */
+ZEND_METHOD(QClipboardEvent, data);
+
+/* QCloseEvent */
+
+/* QContextMenuEvent */
+ZEND_METHOD(QContextMenuEvent, x);
+ZEND_METHOD(QContextMenuEvent, y);
+ZEND_METHOD(QContextMenuEvent, globalX);
+ZEND_METHOD(QContextMenuEvent, globalY);
+ZEND_METHOD(QContextMenuEvent, pos);
+ZEND_METHOD(QContextMenuEvent, globalPos);
+ZEND_METHOD(QContextMenuEvent, reason);
+
+/* QCoreApplication */
+ZEND_METHOD(QCoreApplication, QCoreApplication);
+ZEND_METHOD(QCoreApplication, bool);
+ZEND_METHOD(QCoreApplication, setEventFilter);
+ZEND_METHOD(QCoreApplication, staticMetaObject);
+ZEND_METHOD(QCoreApplication, tr);
+ZEND_METHOD(QCoreApplication, trUtf8);
+ZEND_METHOD(QCoreApplication, argc);
+ZEND_METHOD(QCoreApplication, argv);
+ZEND_METHOD(QCoreApplication, organizationDomain);
+ZEND_METHOD(QCoreApplication, organizationName);
+ZEND_METHOD(QCoreApplication, applicationName);
+ZEND_METHOD(QCoreApplication, instance);
+ZEND_METHOD(QCoreApplication, exec);
+ZEND_METHOD(QCoreApplication, processEvents);
+ZEND_METHOD(QCoreApplication, processEvents);
+ZEND_METHOD(QCoreApplication, exit);
+ZEND_METHOD(QCoreApplication, sendPostedEvents);
+ZEND_METHOD(QCoreApplication, sendPostedEvents);
+ZEND_METHOD(QCoreApplication, removePostedEvents);
+ZEND_METHOD(QCoreApplication, hasPendingEvents);
+ZEND_METHOD(QCoreApplication, startingUp);
+ZEND_METHOD(QCoreApplication, closingDown);
+ZEND_METHOD(QCoreApplication, applicationDirPath);
+ZEND_METHOD(QCoreApplication, applicationFilePath);
+ZEND_METHOD(QCoreApplication, setLibraryPaths);
+ZEND_METHOD(QCoreApplication, libraryPaths);
+ZEND_METHOD(QCoreApplication, addLibraryPath);
+ZEND_METHOD(QCoreApplication, removeLibraryPath);
+ZEND_METHOD(QCoreApplication, installTranslator);
+ZEND_METHOD(QCoreApplication, removeTranslator);
+ZEND_METHOD(QCoreApplication, translate);
+ZEND_METHOD(QCoreApplication, flush);
+ZEND_METHOD(QCoreApplication, watchUnixSignal);
+ZEND_METHOD(QCoreApplication, quit);
+ZEND_METHOD(QCoreApplication, event);
+ZEND_METHOD(QDate, isNull);
+ZEND_METHOD(QDate, isValid);
+ZEND_METHOD(QDate, year);
+ZEND_METHOD(QDate, month);
+ZEND_METHOD(QDate, day);
+ZEND_METHOD(QDate, dayOfWeek);
+ZEND_METHOD(QDate, dayOfYear);
+ZEND_METHOD(QDate, daysInMonth);
+ZEND_METHOD(QDate, daysInYear);
+ZEND_METHOD(QDate, weekNumber);
+ZEND_METHOD(QDate, toString);
+ZEND_METHOD(QDate, toString);
+ZEND_METHOD(QDate, setYMD);
+ZEND_METHOD(QDate, addDays);
+ZEND_METHOD(QDate, addMonths);
+ZEND_METHOD(QDate, addYears);
+ZEND_METHOD(QDate, daysTo);
+ZEND_METHOD(QDate, toJulianDay);
+ZEND_METHOD(QDate, shortMonthName);
+ZEND_METHOD(QDate, shortDayName);
+ZEND_METHOD(QDate, longMonthName);
+ZEND_METHOD(QDate, longDayName);
+ZEND_METHOD(QDate, currentDate);
+ZEND_METHOD(QDate, fromString);
+ZEND_METHOD(QDate, fromString);
+ZEND_METHOD(QDate, isValid);
+ZEND_METHOD(QDate, isLeapYear);
+ZEND_METHOD(QDate, gregorianToJulian);
+ZEND_METHOD(QDate, julianToGregorian);
+ZEND_METHOD(QDate, fromJulianDay);
+ZEND_METHOD(QDateTime, QDateTime);
+ZEND_METHOD(QDateTime, isNull);
+ZEND_METHOD(QDateTime, isValid);
+ZEND_METHOD(QDateTime, date);
+ZEND_METHOD(QDateTime, time);
+ZEND_METHOD(QDateTime, timeSpec);
+ZEND_METHOD(QDateTime, toTime_t);
+ZEND_METHOD(QDateTime, setDate);
+ZEND_METHOD(QDateTime, setTime);
+ZEND_METHOD(QDateTime, setTimeSpec);
+ZEND_METHOD(QDateTime, setTime_t);
+ZEND_METHOD(QDateTime, toString);
+ZEND_METHOD(QDateTime, toString);
+ZEND_METHOD(QDateTime, addDays);
+ZEND_METHOD(QDateTime, addMonths);
+ZEND_METHOD(QDateTime, addYears);
+ZEND_METHOD(QDateTime, addSecs);
+ZEND_METHOD(QDateTime, toTimeSpec);
+ZEND_METHOD(QDateTime, toLocalTime);
+ZEND_METHOD(QDateTime, toUTC);
+ZEND_METHOD(QDateTime, daysTo);
+ZEND_METHOD(QDateTime, secsTo);
+ZEND_METHOD(QDateTime, currentDateTime);
+ZEND_METHOD(QDateTime, fromString);
+ZEND_METHOD(QDateTime, fromString);
+
+/* QDragEnterEvent */
+
+/* QDragLeaveEvent */
+
+/* QDragMoveEvent */
+ZEND_METHOD(QDragMoveEvent, answerRect);
+ZEND_METHOD(QDragMoveEvent, accept);
+ZEND_METHOD(QDragMoveEvent, ignore);
+ZEND_METHOD(QDragMoveEvent, accept);
+ZEND_METHOD(QDragMoveEvent, ignore);
+
+/* QDragResponseEvent */
+ZEND_METHOD(QDragResponseEvent, dragAccepted);
+
+/* QDropEvent */
+ZEND_METHOD(QDropEvent, pos);
+ZEND_METHOD(QDropEvent, mouseButtons);
+ZEND_METHOD(QDropEvent, keyboardModifiers);
+ZEND_METHOD(QDropEvent, possibleActions);
+ZEND_METHOD(QDropEvent, proposedAction);
+ZEND_METHOD(QDropEvent, acceptProposedAction);
+ZEND_METHOD(QDropEvent, dropAction);
+ZEND_METHOD(QDropEvent, setDropAction);
+ZEND_METHOD(QDropEvent, source);
+ZEND_METHOD(QDropEvent, mimeData);
+ZEND_METHOD(QDropEvent, format);
+ZEND_METHOD(QDropEvent, encodedData);
+ZEND_METHOD(QDropEvent, provides);
+
+/* QFileOpenEvent */
+ZEND_METHOD(QFileOpenEvent, file);
+
+/* QFocusEvent */
+ZEND_METHOD(QFocusEvent, gotFocus);
+ZEND_METHOD(QFocusEvent, lostFocus);
+ZEND_METHOD(QFocusEvent, reason);
+ZEND_METHOD(QFont, QFont);
+ZEND_METHOD(QFont, family);
+ZEND_METHOD(QFont, setFamily);
+ZEND_METHOD(QFont, pointSize);
+ZEND_METHOD(QFont, setPointSize);
+ZEND_METHOD(QFont, pointSizeF);
+ZEND_METHOD(QFont, setPointSizeF);
+ZEND_METHOD(QFont, pixelSize);
+ZEND_METHOD(QFont, setPixelSize);
+ZEND_METHOD(QFont, weight);
+ZEND_METHOD(QFont, setWeight);
+ZEND_METHOD(QFont, bold);
+ZEND_METHOD(QFont, setBold);
+ZEND_METHOD(QFont, setStyle);
+ZEND_METHOD(QFont, style);
+ZEND_METHOD(QFont, italic);
+ZEND_METHOD(QFont, setItalic);
+ZEND_METHOD(QFont, underline);
+ZEND_METHOD(QFont, setUnderline);
+ZEND_METHOD(QFont, overline);
+ZEND_METHOD(QFont, setOverline);
+ZEND_METHOD(QFont, strikeOut);
+ZEND_METHOD(QFont, setStrikeOut);
+ZEND_METHOD(QFont, fixedPitch);
+ZEND_METHOD(QFont, setFixedPitch);
+ZEND_METHOD(QFont, kerning);
+ZEND_METHOD(QFont, setKerning);
+ZEND_METHOD(QFont, styleHint);
+ZEND_METHOD(QFont, styleStrategy);
+ZEND_METHOD(QFont, setStyleHint);
+ZEND_METHOD(QFont, setStyleStrategy);
+ZEND_METHOD(QFont, stretch);
+ZEND_METHOD(QFont, setStretch);
+ZEND_METHOD(QFont, rawMode);
+ZEND_METHOD(QFont, setRawMode);
+ZEND_METHOD(QFont, exactMatch);
+ZEND_METHOD(QFont, isCopyOf);
+ZEND_METHOD(QFont, handle);
+ZEND_METHOD(QFont, setRawName);
+ZEND_METHOD(QFont, rawName);
+ZEND_METHOD(QFont, key);
+ZEND_METHOD(QFont, toString);
+ZEND_METHOD(QFont, fromString);
+ZEND_METHOD(QFont, defaultFamily);
+ZEND_METHOD(QFont, lastResortFamily);
+ZEND_METHOD(QFont, lastResortFont);
+ZEND_METHOD(QFont, resolve);
+ZEND_METHOD(QFont, resolve);
+ZEND_METHOD(QFont, resolve);
+ZEND_METHOD(QFont, substitute);
+ZEND_METHOD(QFont, substitutes);
+ZEND_METHOD(QFont, substitutions);
+ZEND_METHOD(QFont, insertSubstitution);
+ZEND_METHOD(QFont, insertSubstitutions);
+ZEND_METHOD(QFont, removeSubstitution);
+ZEND_METHOD(QFont, initialize);
+ZEND_METHOD(QFont, cleanup);
+ZEND_METHOD(QFont, cacheStatistics);
+
+/* QFrame */
+ZEND_METHOD(QFrame, QFrame);
+ZEND_METHOD(QFrame, frameStyle);
+ZEND_METHOD(QFrame, setFrameStyle);
+ZEND_METHOD(QFrame, frameWidth);
+ZEND_METHOD(QFrame, sizeHint);
+ZEND_METHOD(QFrame, frameShape);
+ZEND_METHOD(QFrame, frameShadow);
+ZEND_METHOD(QFrame, lineWidth);
+ZEND_METHOD(QFrame, midLineWidth);
+ZEND_METHOD(QFrame, frameRect);
+ZEND_METHOD(QFrame, staticMetaObject);
+ZEND_METHOD(QFrame, tr);
+ZEND_METHOD(QFrame, trUtf8);
+ZEND_METHOD(QFrame, drawFrame);
+
+/* QGridLayout */
+ZEND_METHOD(QGridLayout, QGridLayout);
+ZEND_METHOD(QGridLayout, sizeHint);
+ZEND_METHOD(QGridLayout, minimumSize);
+ZEND_METHOD(QGridLayout, maximumSize);
+ZEND_METHOD(QGridLayout, setRowStretch);
+ZEND_METHOD(QGridLayout, setColumnStretch);
+ZEND_METHOD(QGridLayout, rowStretch);
+ZEND_METHOD(QGridLayout, columnStretch);
+ZEND_METHOD(QGridLayout, setRowMinimumHeight);
+ZEND_METHOD(QGridLayout, setColumnMinimumWidth);
+ZEND_METHOD(QGridLayout, rowMinimumHeight);
+ZEND_METHOD(QGridLayout, columnMinimumWidth);
+ZEND_METHOD(QGridLayout, columnCount);
+ZEND_METHOD(QGridLayout, rowCount);
+ZEND_METHOD(QGridLayout, cellRect);
+ZEND_METHOD(QGridLayout, hasHeightForWidth);
+ZEND_METHOD(QGridLayout, heightForWidth);
+ZEND_METHOD(QGridLayout, minimumHeightForWidth);
+ZEND_METHOD(QGridLayout, expandingDirections);
+ZEND_METHOD(QGridLayout, invalidate);
+ZEND_METHOD(QGridLayout, addWidget);
+ZEND_METHOD(QGridLayout, addWidget);
+ZEND_METHOD(QGridLayout, addWidget);
+ZEND_METHOD(QGridLayout, addLayout);
+ZEND_METHOD(QGridLayout, addLayout);
+ZEND_METHOD(QGridLayout, setOriginCorner);
+ZEND_METHOD(QGridLayout, originCorner);
+ZEND_METHOD(QGridLayout, itemAt);
+ZEND_METHOD(QGridLayout, takeAt);
+ZEND_METHOD(QGridLayout, count);
+ZEND_METHOD(QGridLayout, setGeometry);
+ZEND_METHOD(QGridLayout, addItem);
+ZEND_METHOD(QGridLayout, setDefaultPositioning);
+ZEND_METHOD(QGridLayout, getItemPosition);
+ZEND_METHOD(QGridLayout, staticMetaObject);
+ZEND_METHOD(QGridLayout, tr);
+ZEND_METHOD(QGridLayout, trUtf8);
+ZEND_METHOD(QGridLayout, addItem);
+
+/* QHBoxLayout */
+ZEND_METHOD(QHBoxLayout, QHBoxLayout);
+ZEND_METHOD(QHBoxLayout, staticMetaObject);
+ZEND_METHOD(QHBoxLayout, tr);
+ZEND_METHOD(QHBoxLayout, trUtf8);
+
+/* QHelpEvent */
+ZEND_METHOD(QHelpEvent, x);
+ZEND_METHOD(QHelpEvent, y);
+ZEND_METHOD(QHelpEvent, globalX);
+ZEND_METHOD(QHelpEvent, globalY);
+ZEND_METHOD(QHelpEvent, pos);
+ZEND_METHOD(QHelpEvent, globalPos);
+
+/* QHideEvent */
+
+/* QHoverEvent */
+ZEND_METHOD(QHoverEvent, pos);
+ZEND_METHOD(QHoverEvent, oldPos);
+
+/* QIconDragEvent */
+
+/* QInputEvent */
+ZEND_METHOD(QInputEvent, modifiers);
+
+/* QInputMethodEvent */
+ZEND_METHOD(QInputMethodEvent, setCommitString);
+ZEND_METHOD(QInputMethodEvent, preeditString);
+ZEND_METHOD(QInputMethodEvent, commitString);
+ZEND_METHOD(QInputMethodEvent, replacementStart);
+ZEND_METHOD(QInputMethodEvent, replacementLength);
+
+/* QKeyEvent */
+ZEND_METHOD(QKeyEvent, key);
+ZEND_METHOD(QKeyEvent, modifiers);
+ZEND_METHOD(QKeyEvent, text);
+ZEND_METHOD(QKeyEvent, isAutoRepeat);
+ZEND_METHOD(QKeyEvent, count);
+
+/* QLCDNumber */
+ZEND_METHOD(QLCDNumber, QLCDNumber);
+ZEND_METHOD(QLCDNumber, smallDecimalPoint);
+ZEND_METHOD(QLCDNumber, numDigits);
+ZEND_METHOD(QLCDNumber, checkOverflow);
+ZEND_METHOD(QLCDNumber, checkOverflow);
+ZEND_METHOD(QLCDNumber, mode);
+ZEND_METHOD(QLCDNumber, segmentStyle);
+ZEND_METHOD(QLCDNumber, value);
+ZEND_METHOD(QLCDNumber, intValue);
+ZEND_METHOD(QLCDNumber, sizeHint);
+ZEND_METHOD(QLCDNumber, setHexMode);
+ZEND_METHOD(QLCDNumber, setDecMode);
+ZEND_METHOD(QLCDNumber, setOctMode);
+ZEND_METHOD(QLCDNumber, setBinMode);
+ZEND_METHOD(QLCDNumber, staticMetaObject);
+ZEND_METHOD(QLCDNumber, tr);
+ZEND_METHOD(QLCDNumber, trUtf8);
+
+/* QLabel */
+ZEND_METHOD(QLabel, QLabel);
+ZEND_METHOD(QLabel, text);
+ZEND_METHOD(QLabel, pixmap);
+ZEND_METHOD(QLabel, picture);
+ZEND_METHOD(QLabel, movie);
+ZEND_METHOD(QLabel, textFormat);
+ZEND_METHOD(QLabel, alignment);
+ZEND_METHOD(QLabel, wordWrap);
+ZEND_METHOD(QLabel, indent);
+ZEND_METHOD(QLabel, margin);
+ZEND_METHOD(QLabel, hasScaledContents);
+ZEND_METHOD(QLabel, sizeHint);
+ZEND_METHOD(QLabel, minimumSizeHint);
+ZEND_METHOD(QLabel, setBuddy);
+ZEND_METHOD(QLabel, buddy);
+ZEND_METHOD(QLabel, heightForWidth);
+ZEND_METHOD(QLabel, setPicture);
+ZEND_METHOD(QLabel, setMovie);
+ZEND_METHOD(QLabel, setNum);
+ZEND_METHOD(QLabel, setNum);
+ZEND_METHOD(QLabel, clear);
+ZEND_METHOD(QLabel, staticMetaObject);
+ZEND_METHOD(QLabel, tr);
+ZEND_METHOD(QLabel, trUtf8);
+ZEND_METHOD(QLabel, event);
+ZEND_METHOD(QLatin1Char, toLatin1);
+ZEND_METHOD(QLatin1Char, unicode);
+ZEND_METHOD(QLatin1String, latin1);
+
+/* QLayout */
+ZEND_METHOD(QLayout, QLayout);
+ZEND_METHOD(QLayout, margin);
+ZEND_METHOD(QLayout, spacing);
+ZEND_METHOD(QLayout, setAlignment);
+ZEND_METHOD(QLayout, setAlignment);
+ZEND_METHOD(QLayout, setAlignment);
+ZEND_METHOD(QLayout, sizeConstraint);
+ZEND_METHOD(QLayout, setMenuBar);
+ZEND_METHOD(QLayout, menuBar);
+ZEND_METHOD(QLayout, parentWidget);
+ZEND_METHOD(QLayout, invalidate);
+ZEND_METHOD(QLayout, geometry);
+ZEND_METHOD(QLayout, activate);
+ZEND_METHOD(QLayout, update);
+ZEND_METHOD(QLayout, addWidget);
+ZEND_METHOD(QLayout, removeWidget);
+ZEND_METHOD(QLayout, removeItem);
+ZEND_METHOD(QLayout, expandingDirections);
+ZEND_METHOD(QLayout, minimumSize);
+ZEND_METHOD(QLayout, maximumSize);
+ZEND_METHOD(QLayout, setGeometry);
+ZEND_METHOD(QLayout, isEmpty);
+ZEND_METHOD(QLayout, totalHeightForWidth);
+ZEND_METHOD(QLayout, totalMinimumSize);
+ZEND_METHOD(QLayout, totalMaximumSize);
+ZEND_METHOD(QLayout, totalSizeHint);
+ZEND_METHOD(QLayout, layout);
+ZEND_METHOD(QLayout, setEnabled);
+ZEND_METHOD(QLayout, isEnabled);
+ZEND_METHOD(QLayout, staticMetaObject);
+ZEND_METHOD(QLayout, trUtf8);
+ZEND_METHOD(QLayout, closestAcceptableSize);
+ZEND_METHOD(QLayoutItem, alignment);
+ZEND_METHOD(QLayoutItem, setAlignment);
+
+/* QLineEdit */
+ZEND_METHOD(QLineEdit, QLineEdit);
+ZEND_METHOD(QLineEdit, text);
+ZEND_METHOD(QLineEdit, displayText);
+ZEND_METHOD(QLineEdit, maxLength);
+ZEND_METHOD(QLineEdit, hasFrame);
+ZEND_METHOD(QLineEdit, echoMode);
+ZEND_METHOD(QLineEdit, isReadOnly);
+ZEND_METHOD(QLineEdit, setValidator);
+ZEND_METHOD(QLineEdit, validator);
+ZEND_METHOD(QLineEdit, sizeHint);
+ZEND_METHOD(QLineEdit, minimumSizeHint);
+ZEND_METHOD(QLineEdit, cursorPosition);
+ZEND_METHOD(QLineEdit, cursorPositionAt);
+ZEND_METHOD(QLineEdit, alignment);
+ZEND_METHOD(QLineEdit, cursorForward);
+ZEND_METHOD(QLineEdit, cursorBackward);
+ZEND_METHOD(QLineEdit, cursorWordForward);
+ZEND_METHOD(QLineEdit, cursorWordBackward);
+ZEND_METHOD(QLineEdit, backspace);
+ZEND_METHOD(QLineEdit, del);
+ZEND_METHOD(QLineEdit, home);
+ZEND_METHOD(QLineEdit, end);
+ZEND_METHOD(QLineEdit, isModified);
+ZEND_METHOD(QLineEdit, setSelection);
+ZEND_METHOD(QLineEdit, hasSelectedText);
+ZEND_METHOD(QLineEdit, selectedText);
+ZEND_METHOD(QLineEdit, selectionStart);
+ZEND_METHOD(QLineEdit, isUndoAvailable);
+ZEND_METHOD(QLineEdit, isRedoAvailable);
+ZEND_METHOD(QLineEdit, dragEnabled);
+ZEND_METHOD(QLineEdit, inputMask);
+ZEND_METHOD(QLineEdit, hasAcceptableInput);
+ZEND_METHOD(QLineEdit, deselect);
+ZEND_METHOD(QLineEdit, insert);
+ZEND_METHOD(QLineEdit, createStandardContextMenu);
+ZEND_METHOD(QLineEdit, inputMethodQuery);
+ZEND_METHOD(QLineEdit, event);
+ZEND_METHOD(QLineEdit, clear);
+ZEND_METHOD(QLineEdit, selectAll);
+ZEND_METHOD(QLineEdit, undo);
+ZEND_METHOD(QLineEdit, redo);
+ZEND_METHOD(QLineEdit, cut);
+ZEND_METHOD(QLineEdit, copy);
+ZEND_METHOD(QLineEdit, paste);
+ZEND_METHOD(QLineEdit, staticMetaObject);
+ZEND_METHOD(QLineEdit, tr);
+ZEND_METHOD(QLineEdit, trUtf8);
+
+/* QMouseEvent */
+ZEND_METHOD(QMouseEvent, pos);
+ZEND_METHOD(QMouseEvent, globalPos);
+ZEND_METHOD(QMouseEvent, x);
+ZEND_METHOD(QMouseEvent, y);
+ZEND_METHOD(QMouseEvent, globalX);
+ZEND_METHOD(QMouseEvent, globalY);
+ZEND_METHOD(QMouseEvent, button);
+ZEND_METHOD(QMouseEvent, buttons);
+
+/* QMoveEvent */
+ZEND_METHOD(QMoveEvent, pos);
+ZEND_METHOD(QMoveEvent, oldPos);
+ZEND_METHOD(QObject, objectName);
+ZEND_METHOD(QObject, isWidgetType);
+ZEND_METHOD(QObject, signalsBlocked);
+ZEND_METHOD(QObject, blockSignals);
+ZEND_METHOD(QObject, thread);
+ZEND_METHOD(QObject, moveToThread);
+ZEND_METHOD(QObject, startTimer);
+ZEND_METHOD(QObject, killTimer);
+ZEND_METHOD(QObject, children);
+ZEND_METHOD(QObject, setParent);
+ZEND_METHOD(QObject, installEventFilter);
+ZEND_METHOD(QObject, removeEventFilter);
+ZEND_METHOD(QObject, connect);
+ZEND_METHOD(QObject, disconnect);
+ZEND_METHOD(QObject, disconnect);
+ZEND_METHOD(QObject, dumpObjectTree);
+ZEND_METHOD(QObject, dumpObjectInfo);
+ZEND_METHOD(QObject, setProperty);
+ZEND_METHOD(QObject, property);
+ZEND_METHOD(QObject, setUserData);
+ZEND_METHOD(QObject, userData);
+ZEND_METHOD(QObject, parent);
+ZEND_METHOD(QObject, inherits);
+ZEND_METHOD(QObject, deleteLater);
+ZEND_METHOD(QObject, staticMetaObject);
+ZEND_METHOD(QObject, tr);
+ZEND_METHOD(QObject, trUtf8);
+ZEND_METHOD(QObject, tr);
+ZEND_METHOD(QObject, trUtf8);
+ZEND_METHOD(QObject, tr);
+ZEND_METHOD(QObject, trUtf8);
+ZEND_METHOD(QObject, connect);
+ZEND_METHOD(QObject, disconnect);
+ZEND_METHOD(QObject, registerUserData);
+ZEND_METHOD(QObject, sender);
+ZEND_METHOD(QObject, receivers);
+
+/* QPaintEvent */
+ZEND_METHOD(QPaintEvent, rect);
+ZEND_METHOD(QPaintEvent, region);
+ZEND_METHOD(QPainter, QPainter);
+ZEND_METHOD(QPainter, device);
+ZEND_METHOD(QPainter, begin);
+ZEND_METHOD(QPainter, end);
+ZEND_METHOD(QPainter, isActive);
+ZEND_METHOD(QPainter, initFrom);
+ZEND_METHOD(QPainter, setCompositionMode);
+ZEND_METHOD(QPainter, compositionMode);
+ZEND_METHOD(QPainter, font);
+ZEND_METHOD(QPainter, setFont);
+ZEND_METHOD(QPainter, fontMetrics);
+ZEND_METHOD(QPainter, fontInfo);
+ZEND_METHOD(QPainter, setPen);
+ZEND_METHOD(QPainter, setPen);
+ZEND_METHOD(QPainter, setPen);
+ZEND_METHOD(QPainter, pen);
+ZEND_METHOD(QPainter, setBrush);
+ZEND_METHOD(QPainter, setBrush);
+ZEND_METHOD(QPainter, brush);
+ZEND_METHOD(QPainter, setBackgroundMode);
+ZEND_METHOD(QPainter, backgroundMode);
+ZEND_METHOD(QPainter, brushOrigin);
+ZEND_METHOD(QPainter, setBrushOrigin);
+ZEND_METHOD(QPainter, setBrushOrigin);
+ZEND_METHOD(QPainter, setBrushOrigin);
+ZEND_METHOD(QPainter, setBackground);
+ZEND_METHOD(QPainter, background);
+ZEND_METHOD(QPainter, clipRegion);
+ZEND_METHOD(QPainter, clipPath);
+ZEND_METHOD(QPainter, setClipRect);
+ZEND_METHOD(QPainter, setClipRect);
+ZEND_METHOD(QPainter, setClipRegion);
+ZEND_METHOD(QPainter, setClipPath);
+ZEND_METHOD(QPainter, setClipping);
+ZEND_METHOD(QPainter, hasClipping);
+ZEND_METHOD(QPainter, save);
+ZEND_METHOD(QPainter, restore);
+ZEND_METHOD(QPainter, setMatrix);
+ZEND_METHOD(QPainter, matrix);
+ZEND_METHOD(QPainter, deviceMatrix);
+ZEND_METHOD(QPainter, resetMatrix);
+ZEND_METHOD(QPainter, setMatrixEnabled);
+ZEND_METHOD(QPainter, matrixEnabled);
+ZEND_METHOD(QPainter, scale);
+ZEND_METHOD(QPainter, shear);
+ZEND_METHOD(QPainter, rotate);
+ZEND_METHOD(QPainter, translate);
+ZEND_METHOD(QPainter, translate);
+ZEND_METHOD(QPainter, translate);
+ZEND_METHOD(QPainter, window);
+ZEND_METHOD(QPainter, setWindow);
+ZEND_METHOD(QPainter, setWindow);
+ZEND_METHOD(QPainter, viewport);
+ZEND_METHOD(QPainter, setViewport);
+ZEND_METHOD(QPainter, setViewport);
+ZEND_METHOD(QPainter, setViewTransformEnabled);
+ZEND_METHOD(QPainter, viewTransformEnabled);
+ZEND_METHOD(QPainter, strokePath);
+ZEND_METHOD(QPainter, fillPath);
+ZEND_METHOD(QPainter, drawPath);
+ZEND_METHOD(QPainter, drawPoint);
+ZEND_METHOD(QPainter, drawPoint);
+ZEND_METHOD(QPainter, drawPoint);
+ZEND_METHOD(QPainter, drawPoints);
+ZEND_METHOD(QPainter, drawPoints);
+ZEND_METHOD(QPainter, drawPoints);
+ZEND_METHOD(QPainter, drawPoints);
+ZEND_METHOD(QPainter, drawLine);
+ZEND_METHOD(QPainter, drawLine);
+ZEND_METHOD(QPainter, drawLine);
+ZEND_METHOD(QPainter, drawLine);
+ZEND_METHOD(QPainter, drawLines);
+ZEND_METHOD(QPainter, drawLines);
+ZEND_METHOD(QPainter, drawLines);
+ZEND_METHOD(QPainter, drawLines);
+ZEND_METHOD(QPainter, drawRect);
+ZEND_METHOD(QPainter, drawRect);
+ZEND_METHOD(QPainter, drawRect);
+ZEND_METHOD(QPainter, drawRects);
+ZEND_METHOD(QPainter, drawEllipse);
+ZEND_METHOD(QPainter, drawEllipse);
+ZEND_METHOD(QPainter, drawPolyline);
+ZEND_METHOD(QPainter, drawPolyline);
+ZEND_METHOD(QPainter, drawPolyline);
+ZEND_METHOD(QPainter, drawPolyline);
+ZEND_METHOD(QPainter, drawPolygon);
+ZEND_METHOD(QPainter, drawPolygon);
+ZEND_METHOD(QPainter, drawPolygon);
+ZEND_METHOD(QPainter, drawPolygon);
+ZEND_METHOD(QPainter, drawConvexPolygon);
+ZEND_METHOD(QPainter, drawConvexPolygon);
+ZEND_METHOD(QPainter, drawConvexPolygon);
+ZEND_METHOD(QPainter, drawConvexPolygon);
+ZEND_METHOD(QPainter, drawArc);
+ZEND_METHOD(QPainter, drawArc);
+ZEND_METHOD(QPainter, drawArc);
+ZEND_METHOD(QPainter, drawPie);
+ZEND_METHOD(QPainter, drawPie);
+ZEND_METHOD(QPainter, drawPie);
+ZEND_METHOD(QPainter, drawChord);
+ZEND_METHOD(QPainter, drawChord);
+ZEND_METHOD(QPainter, drawChord);
+ZEND_METHOD(QPainter, drawRoundRect);
+ZEND_METHOD(QPainter, drawRoundRect);
+ZEND_METHOD(QPainter, drawRoundRect);
+ZEND_METHOD(QPainter, drawTiledPixmap);
+ZEND_METHOD(QPainter, drawTiledPixmap);
+ZEND_METHOD(QPainter, drawTiledPixmap);
+ZEND_METHOD(QPainter, drawPicture);
+ZEND_METHOD(QPainter, drawPicture);
+ZEND_METHOD(QPainter, drawPicture);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawImage);
+ZEND_METHOD(QPainter, drawImage);
+ZEND_METHOD(QPainter, drawImage);
+ZEND_METHOD(QPainter, drawImage);
+ZEND_METHOD(QPainter, drawImage);
+ZEND_METHOD(QPainter, drawImage);
+ZEND_METHOD(QPainter, drawImage);
+ZEND_METHOD(QPainter, setLayoutDirection);
+ZEND_METHOD(QPainter, layoutDirection);
+ZEND_METHOD(QPainter, drawText);
+ZEND_METHOD(QPainter, drawText);
+ZEND_METHOD(QPainter, drawText);
+ZEND_METHOD(QPainter, drawText);
+ZEND_METHOD(QPainter, drawText);
+ZEND_METHOD(QPainter, drawText);
+ZEND_METHOD(QPainter, boundingRect);
+ZEND_METHOD(QPainter, boundingRect);
+ZEND_METHOD(QPainter, boundingRect);
+ZEND_METHOD(QPainter, boundingRect);
+ZEND_METHOD(QPainter, drawTextItem);
+ZEND_METHOD(QPainter, drawTextItem);
+ZEND_METHOD(QPainter, drawTextItem);
+ZEND_METHOD(QPainter, fillRect);
+ZEND_METHOD(QPainter, fillRect);
+ZEND_METHOD(QPainter, fillRect);
+ZEND_METHOD(QPainter, eraseRect);
+ZEND_METHOD(QPainter, eraseRect);
+ZEND_METHOD(QPainter, eraseRect);
+ZEND_METHOD(QPainter, setRenderHint);
+ZEND_METHOD(QPainter, renderHints);
+ZEND_METHOD(QPainter, paintEngine);
+ZEND_METHOD(QPainter, setRedirected);
+ZEND_METHOD(QPainter, redirected);
+ZEND_METHOD(QPainter, restoreRedirected);
+
+/* QPushButton */
+ZEND_METHOD(QPushButton, QPushButton);
+ZEND_METHOD(QPushButton, sizeHint);
+ZEND_METHOD(QPushButton, autoDefault);
+ZEND_METHOD(QPushButton, isDefault);
+ZEND_METHOD(QPushButton, setMenu);
+ZEND_METHOD(QPushButton, menu);
+ZEND_METHOD(QPushButton, isFlat);
+ZEND_METHOD(QPushButton, showMenu);
+ZEND_METHOD(QPushButton, staticMetaObject);
+ZEND_METHOD(QPushButton, tr);
+ZEND_METHOD(QPushButton, trUtf8);
+
+/* QResizeEvent */
+ZEND_METHOD(QResizeEvent, size);
+ZEND_METHOD(QResizeEvent, oldSize);
+
+/* QShortcutEvent */
+ZEND_METHOD(QShortcutEvent, key);
+ZEND_METHOD(QShortcutEvent, shortcutId);
+ZEND_METHOD(QShortcutEvent, isAmbiguous);
+
+/* QShowEvent */
+
+/* QSlider */
+ZEND_METHOD(QSlider, QSlider);
+ZEND_METHOD(QSlider, sizeHint);
+ZEND_METHOD(QSlider, minimumSizeHint);
+ZEND_METHOD(QSlider, tickPosition);
+ZEND_METHOD(QSlider, tickInterval);
+ZEND_METHOD(QSlider, event);
+ZEND_METHOD(QSlider, staticMetaObject);
+ZEND_METHOD(QSlider, tr);
+ZEND_METHOD(QSlider, trUtf8);
+
+/* QSpacerItem */
+ZEND_METHOD(QSpacerItem, changeSize);
+ZEND_METHOD(QSpacerItem, sizeHint);
+ZEND_METHOD(QSpacerItem, minimumSize);
+ZEND_METHOD(QSpacerItem, maximumSize);
+ZEND_METHOD(QSpacerItem, expandingDirections);
+ZEND_METHOD(QSpacerItem, isEmpty);
+ZEND_METHOD(QSpacerItem, setGeometry);
+ZEND_METHOD(QSpacerItem, geometry);
+ZEND_METHOD(QSpacerItem, spacerItem);
+
+/* QStatusTipEvent */
+ZEND_METHOD(QStatusTipEvent, tip);
+ZEND_METHOD(QString, QString);
+ZEND_METHOD(QString, size);
+ZEND_METHOD(QString, count);
+ZEND_METHOD(QString, length);
+ZEND_METHOD(QString, isEmpty);
+ZEND_METHOD(QString, resize);
+ZEND_METHOD(QString, fill);
+ZEND_METHOD(QString, truncate);
+ZEND_METHOD(QString, chop);
+ZEND_METHOD(QString, capacity);
+ZEND_METHOD(QString, reserve);
+ZEND_METHOD(QString, squeeze);
+ZEND_METHOD(QString, unicode);
+ZEND_METHOD(QString, data);
+ZEND_METHOD(QString, constData);
+ZEND_METHOD(QString, detach);
+ZEND_METHOD(QString, isDetached);
+ZEND_METHOD(QString, clear);
+ZEND_METHOD(QString, at);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, vsprintf);
+ZEND_METHOD(QString, indexOf);
+ZEND_METHOD(QString, indexOf);
+ZEND_METHOD(QString, lastIndexOf);
+ZEND_METHOD(QString, lastIndexOf);
+ZEND_METHOD(QString, contains);
+ZEND_METHOD(QString, contains);
+ZEND_METHOD(QString, count);
+ZEND_METHOD(QString, count);
+ZEND_METHOD(QString, indexOf);
+ZEND_METHOD(QString, lastIndexOf);
+ZEND_METHOD(QString, contains);
+ZEND_METHOD(QString, count);
+ZEND_METHOD(QString, section);
+ZEND_METHOD(QString, section);
+ZEND_METHOD(QString, section);
+ZEND_METHOD(QString, left);
+ZEND_METHOD(QString, right);
+ZEND_METHOD(QString, mid);
+ZEND_METHOD(QString, startsWith);
+ZEND_METHOD(QString, startsWith);
+ZEND_METHOD(QString, endsWith);
+ZEND_METHOD(QString, endsWith);
+ZEND_METHOD(QString, leftJustified);
+ZEND_METHOD(QString, rightJustified);
+ZEND_METHOD(QString, toLower);
+ZEND_METHOD(QString, toUpper);
+ZEND_METHOD(QString, trimmed);
+ZEND_METHOD(QString, simplified);
+ZEND_METHOD(QString, insert);
+ZEND_METHOD(QString, insert);
+ZEND_METHOD(QString, insert);
+ZEND_METHOD(QString, append);
+ZEND_METHOD(QString, append);
+ZEND_METHOD(QString, prepend);
+ZEND_METHOD(QString, prepend);
+ZEND_METHOD(QString, remove);
+ZEND_METHOD(QString, remove);
+ZEND_METHOD(QString, remove);
+ZEND_METHOD(QString, replace);
+ZEND_METHOD(QString, replace);
+ZEND_METHOD(QString, replace);
+ZEND_METHOD(QString, replace);
+ZEND_METHOD(QString, replace);
+ZEND_METHOD(QString, replace);
+ZEND_METHOD(QString, replace);
+ZEND_METHOD(QString, remove);
+ZEND_METHOD(QString, split);
+ZEND_METHOD(QString, split);
+ZEND_METHOD(QString, normalized);
+ZEND_METHOD(QString, normalized);
+ZEND_METHOD(QString, utf16);
+ZEND_METHOD(QString, toAscii);
+ZEND_METHOD(QString, toLatin1);
+ZEND_METHOD(QString, toUtf8);
+ZEND_METHOD(QString, toLocal8Bit);
+ZEND_METHOD(QString, setUnicode);
+ZEND_METHOD(QString, setUtf16);
+ZEND_METHOD(QString, compare);
+ZEND_METHOD(QString, localeAwareCompare);
+ZEND_METHOD(QString, toShort);
+ZEND_METHOD(QString, toUShort);
+ZEND_METHOD(QString, toInt);
+ZEND_METHOD(QString, toUInt);
+ZEND_METHOD(QString, toLong);
+ZEND_METHOD(QString, toULong);
+ZEND_METHOD(QString, toLongLong);
+ZEND_METHOD(QString, toULongLong);
+ZEND_METHOD(QString, toFloat);
+ZEND_METHOD(QString, toDouble);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, prepend);
+ZEND_METHOD(QString, prepend);
+ZEND_METHOD(QString, append);
+ZEND_METHOD(QString, append);
+ZEND_METHOD(QString, begin);
+ZEND_METHOD(QString, constBegin);
+ZEND_METHOD(QString, end);
+ZEND_METHOD(QString, constEnd);
+ZEND_METHOD(QString, push_back);
+ZEND_METHOD(QString, push_back);
+ZEND_METHOD(QString, push_front);
+ZEND_METHOD(QString, push_front);
+ZEND_METHOD(QString, isNull);
+ZEND_METHOD(QString, isSimpleText);
+ZEND_METHOD(QString, isRightToLeft);
+ZEND_METHOD(QString, fromAscii);
+ZEND_METHOD(QString, fromLatin1);
+ZEND_METHOD(QString, fromUtf8);
+ZEND_METHOD(QString, fromLocal8Bit);
+ZEND_METHOD(QString, fromUtf16);
+ZEND_METHOD(QString, fromRawData);
+ZEND_METHOD(QString, compare);
+ZEND_METHOD(QString, localeAwareCompare);
+ZEND_METHOD(QString, number);
+ZEND_METHOD(QString, number);
+ZEND_METHOD(QString, number);
+ZEND_METHOD(QString, number);
+ZEND_METHOD(QString, number);
+
+/* QTabletEvent */
+ZEND_METHOD(QTabletEvent, pos);
+ZEND_METHOD(QTabletEvent, globalPos);
+ZEND_METHOD(QTabletEvent, hiResGlobalPos);
+ZEND_METHOD(QTabletEvent, x);
+ZEND_METHOD(QTabletEvent, y);
+ZEND_METHOD(QTabletEvent, globalX);
+ZEND_METHOD(QTabletEvent, globalY);
+ZEND_METHOD(QTabletEvent, hiResGlobalX);
+ZEND_METHOD(QTabletEvent, hiResGlobalY);
+ZEND_METHOD(QTabletEvent, device);
+ZEND_METHOD(QTabletEvent, pointerType);
+ZEND_METHOD(QTabletEvent, uniqueId);
+ZEND_METHOD(QTabletEvent, pressure);
+ZEND_METHOD(QTabletEvent, z);
+ZEND_METHOD(QTabletEvent, tangentialPressure);
+ZEND_METHOD(QTabletEvent, rotation);
+ZEND_METHOD(QTabletEvent, xTilt);
+ZEND_METHOD(QTabletEvent, yTilt);
+ZEND_METHOD(QTime, isNull);
+ZEND_METHOD(QTime, isValid);
+ZEND_METHOD(QTime, hour);
+ZEND_METHOD(QTime, minute);
+ZEND_METHOD(QTime, second);
+ZEND_METHOD(QTime, msec);
+ZEND_METHOD(QTime, toString);
+ZEND_METHOD(QTime, toString);
+ZEND_METHOD(QTime, setHMS);
+ZEND_METHOD(QTime, addSecs);
+ZEND_METHOD(QTime, secsTo);
+ZEND_METHOD(QTime, addMSecs);
+ZEND_METHOD(QTime, msecsTo);
+ZEND_METHOD(QTime, start);
+ZEND_METHOD(QTime, restart);
+ZEND_METHOD(QTime, elapsed);
+ZEND_METHOD(QTime, currentTime);
+ZEND_METHOD(QTime, fromString);
+ZEND_METHOD(QTime, fromString);
+ZEND_METHOD(QTime, isValid);
+
+/* QTimer */
+ZEND_METHOD(QTimer, QTimer);
+ZEND_METHOD(QTimer, isActive);
+ZEND_METHOD(QTimer, timerId);
+ZEND_METHOD(QTimer, interval);
+ZEND_METHOD(QTimer, isSingleShot);
+ZEND_METHOD(QTimer, start);
+ZEND_METHOD(QTimer, start);
+ZEND_METHOD(QTimer, stop);
+ZEND_METHOD(QTimer, staticMetaObject);
+ZEND_METHOD(QTimer, tr);
+ZEND_METHOD(QTimer, trUtf8);
+ZEND_METHOD(QTimer, singleShot);
+
+/* QToolBarChangeEvent */
+ZEND_METHOD(QToolBarChangeEvent, toggle);
+
+/* QVBoxLayout */
+ZEND_METHOD(QVBoxLayout, QVBoxLayout);
+ZEND_METHOD(QVBoxLayout, staticMetaObject);
+ZEND_METHOD(QVBoxLayout, tr);
+ZEND_METHOD(QVBoxLayout, trUtf8);
+
+/* QWhatsThisClickedEvent */
+ZEND_METHOD(QWhatsThisClickedEvent, href);
+
+/* QWheelEvent */
+ZEND_METHOD(QWheelEvent, delta);
+ZEND_METHOD(QWheelEvent, pos);
+ZEND_METHOD(QWheelEvent, globalPos);
+ZEND_METHOD(QWheelEvent, x);
+ZEND_METHOD(QWheelEvent, y);
+ZEND_METHOD(QWheelEvent, globalX);
+ZEND_METHOD(QWheelEvent, globalY);
+ZEND_METHOD(QWheelEvent, buttons);
+ZEND_METHOD(QWheelEvent, orientation);
+
+/* QWidget */
+ZEND_METHOD(QWidget, QWidget);
+ZEND_METHOD(QWidget, devType);
+ZEND_METHOD(QWidget, winId);
+ZEND_METHOD(QWidget, style);
+ZEND_METHOD(QWidget, setStyle);
+ZEND_METHOD(QWidget, isTopLevel);
+ZEND_METHOD(QWidget, isWindow);
+ZEND_METHOD(QWidget, isModal);
+ZEND_METHOD(QWidget, isEnabled);
+ZEND_METHOD(QWidget, isEnabledTo);
+ZEND_METHOD(QWidget, isEnabledToTLW);
+ZEND_METHOD(QWidget, frameGeometry);
+ZEND_METHOD(QWidget, geometry);
+ZEND_METHOD(QWidget, normalGeometry);
+ZEND_METHOD(QWidget, pos);
+ZEND_METHOD(QWidget, frameSize);
+ZEND_METHOD(QWidget, width);
+ZEND_METHOD(QWidget, height);
+ZEND_METHOD(QWidget, childrenRect);
+ZEND_METHOD(QWidget, childrenRegion);
+ZEND_METHOD(QWidget, minimumSize);
+ZEND_METHOD(QWidget, maximumSize);
+ZEND_METHOD(QWidget, minimumWidth);
+ZEND_METHOD(QWidget, minimumHeight);
+ZEND_METHOD(QWidget, maximumWidth);
+ZEND_METHOD(QWidget, maximumHeight);
+ZEND_METHOD(QWidget, sizeIncrement);
+ZEND_METHOD(QWidget, baseSize);
+ZEND_METHOD(QWidget, setFixedSize);
+ZEND_METHOD(QWidget, setFixedSize);
+ZEND_METHOD(QWidget, setFixedWidth);
+ZEND_METHOD(QWidget, setFixedHeight);
+ZEND_METHOD(QWidget, mapToGlobal);
+ZEND_METHOD(QWidget, mapFromGlobal);
+ZEND_METHOD(QWidget, mapToParent);
+ZEND_METHOD(QWidget, mapFromParent);
+ZEND_METHOD(QWidget, mapTo);
+ZEND_METHOD(QWidget, mapFrom);
+ZEND_METHOD(QWidget, window);
+ZEND_METHOD(QWidget, topLevelWidget);
+ZEND_METHOD(QWidget, palette);
+ZEND_METHOD(QWidget, setBackgroundRole);
+ZEND_METHOD(QWidget, backgroundRole);
+ZEND_METHOD(QWidget, setForegroundRole);
+ZEND_METHOD(QWidget, foregroundRole);
+ZEND_METHOD(QWidget, font);
+ZEND_METHOD(QWidget, fontMetrics);
+ZEND_METHOD(QWidget, fontInfo);
+ZEND_METHOD(QWidget, cursor);
+ZEND_METHOD(QWidget, unsetCursor);
+ZEND_METHOD(QWidget, hasMouseTracking);
+ZEND_METHOD(QWidget, underMouse);
+ZEND_METHOD(QWidget, setMask);
+ZEND_METHOD(QWidget, mask);
+ZEND_METHOD(QWidget, clearMask);
+ZEND_METHOD(QWidget, windowTitle);
+ZEND_METHOD(QWidget, windowIcon);
+ZEND_METHOD(QWidget, windowIconText);
+ZEND_METHOD(QWidget, setWindowRole);
+ZEND_METHOD(QWidget, windowRole);
+ZEND_METHOD(QWidget, windowOpacity);
+ZEND_METHOD(QWidget, isWindowModified);
+ZEND_METHOD(QWidget, toolTip);
+ZEND_METHOD(QWidget, statusTip);
+ZEND_METHOD(QWidget, whatsThis);
+ZEND_METHOD(QWidget, accessibleName);
+ZEND_METHOD(QWidget, accessibleDescription);
+ZEND_METHOD(QWidget, layoutDirection);
+ZEND_METHOD(QWidget, unsetLayoutDirection);
+ZEND_METHOD(QWidget, isRightToLeft);
+ZEND_METHOD(QWidget, isLeftToRight);
+ZEND_METHOD(QWidget, isActiveWindow);
+ZEND_METHOD(QWidget, activateWindow);
+ZEND_METHOD(QWidget, clearFocus);
+ZEND_METHOD(QWidget, focusPolicy);
+ZEND_METHOD(QWidget, hasFocus);
+ZEND_METHOD(QWidget, setFocusProxy);
+ZEND_METHOD(QWidget, focusProxy);
+ZEND_METHOD(QWidget, contextMenuPolicy);
+ZEND_METHOD(QWidget, grabMouse);
+ZEND_METHOD(QWidget, grabMouse);
+ZEND_METHOD(QWidget, releaseMouse);
+ZEND_METHOD(QWidget, grabKeyboard);
+ZEND_METHOD(QWidget, releaseKeyboard);
+ZEND_METHOD(QWidget, grabShortcut);
+ZEND_METHOD(QWidget, releaseShortcut);
+ZEND_METHOD(QWidget, setShortcutEnabled);
+ZEND_METHOD(QWidget, updatesEnabled);
+ZEND_METHOD(QWidget, update);
+ZEND_METHOD(QWidget, update);
+ZEND_METHOD(QWidget, repaint);
+ZEND_METHOD(QWidget, repaint);
+ZEND_METHOD(QWidget, stackUnder);
+ZEND_METHOD(QWidget, adjustSize);
+ZEND_METHOD(QWidget, isVisible);
+ZEND_METHOD(QWidget, isVisibleTo);
+ZEND_METHOD(QWidget, isHidden);
+ZEND_METHOD(QWidget, isMinimized);
+ZEND_METHOD(QWidget, isMaximized);
+ZEND_METHOD(QWidget, isFullScreen);
+ZEND_METHOD(QWidget, windowState);
+ZEND_METHOD(QWidget, setWindowState);
+ZEND_METHOD(QWidget, overrideWindowState);
+ZEND_METHOD(QWidget, sizePolicy);
+ZEND_METHOD(QWidget, visibleRegion);
+ZEND_METHOD(QWidget, setContentsMargins);
+ZEND_METHOD(QWidget, getContentsMargins);
+ZEND_METHOD(QWidget, contentsRect);
+ZEND_METHOD(QWidget, layout);
+ZEND_METHOD(QWidget, updateGeometry);
+ZEND_METHOD(QWidget, setParent);
+ZEND_METHOD(QWidget, setParent);
+ZEND_METHOD(QWidget, scroll);
+ZEND_METHOD(QWidget, scroll);
+ZEND_METHOD(QWidget, focusWidget);
+ZEND_METHOD(QWidget, nextInFocusChain);
+ZEND_METHOD(QWidget, acceptDrops);
+ZEND_METHOD(QWidget, addAction);
+ZEND_METHOD(QWidget, insertAction);
+ZEND_METHOD(QWidget, removeAction);
+ZEND_METHOD(QWidget, parentWidget);
+ZEND_METHOD(QWidget, setWindowFlags);
+ZEND_METHOD(QWidget, windowFlags);
+ZEND_METHOD(QWidget, overrideWindowFlags);
+ZEND_METHOD(QWidget, windowType);
+ZEND_METHOD(QWidget, childAt);
+ZEND_METHOD(QWidget, childAt);
+ZEND_METHOD(QWidget, handle);
+ZEND_METHOD(QWidget, setAttribute);
+ZEND_METHOD(QWidget, testAttribute);
+ZEND_METHOD(QWidget, paintEngine);
+ZEND_METHOD(QWidget, ensurePolished);
+ZEND_METHOD(QWidget, inputContext);
+ZEND_METHOD(QWidget, setInputContext);
+ZEND_METHOD(QWidget, isAncestorOf);
+ZEND_METHOD(QWidget, setDisabled);
+ZEND_METHOD(QWidget, update);
+ZEND_METHOD(QWidget, repaint);
+ZEND_METHOD(QWidget, setHidden);
+ZEND_METHOD(QWidget, show);
+ZEND_METHOD(QWidget, hide);
+ZEND_METHOD(QWidget, setShown);
+ZEND_METHOD(QWidget, showMinimized);
+ZEND_METHOD(QWidget, showMaximized);
+ZEND_METHOD(QWidget, showFullScreen);
+ZEND_METHOD(QWidget, showNormal);
+ZEND_METHOD(QWidget, close);
+ZEND_METHOD(QWidget, raise);
+ZEND_METHOD(QWidget, lower);
+ZEND_METHOD(QWidget, staticMetaObject);
+ZEND_METHOD(QWidget, trUtf8);
+ZEND_METHOD(QWidget, setTabOrder);
+ZEND_METHOD(QWidget, mouseGrabber);
+ZEND_METHOD(QWidget, keyboardGrabber);
+ZEND_METHOD(QWidget, find);
+ZEND_METHOD(QWidget, event);
+ZEND_METHOD(QWidget, metric);
+ZEND_METHOD(QWidget, resetInputContext);
+ZEND_METHOD(QWidget, updateMicroFocus);
+ZEND_METHOD(QWidget, create);
+ZEND_METHOD(QWidget, destroy);
+ZEND_METHOD(QWidget, focusNextChild);
+ZEND_METHOD(QWidget, focusPreviousChild);
+
+/* QWidgetItem */
+ZEND_METHOD(QWidgetItem, sizeHint);
+ZEND_METHOD(QWidgetItem, minimumSize);
+ZEND_METHOD(QWidgetItem, maximumSize);
+ZEND_METHOD(QWidgetItem, expandingDirections);
+ZEND_METHOD(QWidgetItem, isEmpty);
+ZEND_METHOD(QWidgetItem, setGeometry);
+ZEND_METHOD(QWidgetItem, geometry);
+ZEND_METHOD(QWidgetItem, hasHeightForWidth);
+ZEND_METHOD(QWidgetItem, heightForWidth);
+
+/* QWindowStateChangeEvent */
+ZEND_METHOD(QWindowStateChangeEvent, oldState);
+/*
+  	Declare any global variables you may need between the BEGIN
+	and END macros here:
+
+ZEND_BEGIN_MODULE_GLOBALS(php_qt)
+	long  global_value;
+	char *global_string;
+ZEND_END_MODULE_GLOBALS(php_qt)
+*/
+
+/* In every utility function you add that needs to use variables
+   in php_php_qt_globals, call TSRMLS_FETCH(); after declaring other
+   variables used by that function, or better yet, pass in TSRMLS_CC
+   after the last function argument and declare your utility function
+   with TSRMLS_DC after the last declared argument.  Always refer to
+   the globals in your function as PHP_QT_G(variable).  You are
+   encouraged to rename these macros something shorter, see
+   examples in any other php module directory.
+*/
+
+#ifdef ZTS
+#define PHP_QT_G(v) TSRMG(php_qt_globals_id, zend_php_qt_globals *, v)
+#else
+#define PHP_QT_G(v) (php_qt_globals.v)
+#endif
+
+#endif	/* PHP_PHP_QT_H */
+
+
+/*
+ * Local variables:
+ * tab-width: 4
+ * c-basic-offset: 4
+ * End:
+ * vim600: noet sw=4 ts=4 fdm=marker
+ * vim<600: noet sw=4 ts=4
+ */
+
+    
\ No newline at end of file



From tm243 at berlios.de  Wed Jan  4 23:25:08 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Wed, 4 Jan 2006 23:25:08 +0100
Subject: [Php-qt-svn] r153 - trunk/tools
Message-ID: <200601042225.k04MP8wo002996@sheep.berlios.de>

Author: tm243
Date: 2006-01-04 23:25:08 +0100 (Wed, 04 Jan 2006)
New Revision: 153

Modified:
   trunk/tools/kalyptusCxxToPHP.pm
Log:
marshal: object and data type handling finished.

Modified: trunk/tools/kalyptusCxxToPHP.pm
===================================================================
--- trunk/tools/kalyptusCxxToPHP.pm	2006-01-04 00:17:09 UTC (rev 152)
+++ trunk/tools/kalyptusCxxToPHP.pm	2006-01-04 22:25:08 UTC (rev 153)
@@ -41,9 +41,9 @@
 
 BEGIN
 {
-	@clist = ();
+    @clist = ();
 
-	# Page footer
+    # Page footer
 
 	$who = kdocUtil::userName();
 	$host = kdocUtil::hostName();
@@ -1402,6 +1402,7 @@
         $skip = 0;
 # add method name
         $tmp{ $paramstring }->AddProp("methodname",$method->{astNodeName});
+        $tmp{ $paramstring }->AddProp("ReturnType",$method->{ReturnType});
 
     }
 
@@ -1421,9 +1422,8 @@
         $return .= "\n\tif (ZEND_NUM_ARGS() == ".$count."){\n";
     }
 
-
     my $c = 0;                  # helping variable
-    my $tmp_count = 0;          # helping
+    my $run = 0;
 
 # node is the method
     foreach my $key (keys %args){
@@ -1433,6 +1433,8 @@
 #            $return .= " */\n";
 #        }
 
+# handle arguments at first
+
         # initialize vars and agruments for zend_parse_parameters
         my $d = 0;                  # helping variable
         my $paratype;               # for zend
@@ -1441,10 +1443,11 @@
         my @objects;                # object stack
         my $method = $args{$key};   # helping
         my $object_selection = "";
+        my $tmp_count = 0;          # helping
 
 # identical strings grouped
-        $return .= "\t/* ".$key." */\n";
-
+        $return .= "\t\t/* ".$key." */\n";
+        $run = $key."_";
 # first parameters are static, the others coincides with this
 # exception: objects
         my $params = @{$method->{params}}[0];
@@ -1460,83 +1463,99 @@
             # the types
 # char
             if ( $first_param->{ArgType} =~ /char/ ) {
-                $return .= "\t\tchar* var_".$c.";   // default: ".$first_param->{DefaultValue}."\n";
-                $return .= "\t\tint* len_".$c.";\n\n";
+                $return .= "\t\tchar* var_".$run.$c.";   // default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tint* len_".$run.$c.";\n\n";
 
                 $paratype .= ", &var_".$c.", &len_".$c;
                 $param_zend_function .= " var_".$c;
                 $shortstring .= "s";
 # int
             } elsif ( $first_param->{ArgType} =~ /int/ ) {
-                $return .= "\t\tlong var_".$c.";    // default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tlong var_".$run.$c.";    // default: ".$first_param->{DefaultValue}."\n";
 
-                $paratype .= ", &var_".$c;
-                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$c;
+                $paratype .= ", &var_".$run.$c;
+                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c;
                 $shortstring .= "l";
 # bool
             } elsif ( $first_param->{ArgType} =~ /bool/ ) {
-                $return .= "\t\tbool* var_".$c.";   // _default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tbool* var_".$run.$c.";   // _default: ".$first_param->{DefaultValue}."\n";
 
-                $paratype .= ", &var_".$c;
-                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$c;
+                $paratype .= ", &var_".$run.$c;
+                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c;
                 $shortstring .= "b";
 # objects
             } else {
 # while overloading, only one object will be created, query for name
 
-                $return .= "\t\tzval* var_".$c.";   // default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tzval* var_".$run.$c.";   // default: ".$first_param->{DefaultValue}."\n";
 
-                $paratype .= ", &var_".$c;
-                $param_zend_function .= " var_".$c;
+                $paratype .= ", &var_".$run.$c;
+                $param_zend_function .= "() var_o_".$c; # deprecated
                 $shortstring .= "o";
-                push @objects, "var_".$c;   # ?
+                push @objects, "var_o_".$c;   # ?
                 # name query
-                $object_selection .= "\n\t\t\tQString tmp_".$tmp_count."(o->metaObject()->className());\n\n";
-#                $object_selection .= "\t\t\tif(tmp_".$tmp_count." == \"".$first_param->{ArgType}."\"){
-#                RETURN_BOOL(obj->".$method->{methodname}."((".$first_param->{ArgType}.")o, stretch)) \n\t\t\t}";
+                $object_selection .= "\t\t\tQString tmp_".$tmp_count++."(var_o_".$c."->metaObject()->className());\n";
             }
             if(exists $first_param->{DefaultValue} != ""){
                 $shortstring .= "|";
             }
-        $c++;
-        $d++;
+            $c++;
+            $d++;
         }
+        $return .= "\n";
+# add additional objects
+        
+        foreach my $params (@{$method->{params}}){
+            
+            my $skip_first = 1;
+            $tmp_count = 0;
+            $c = 0;
 
-        my $skip_first = 1;
-        foreach my $params (@{$method->{params}}){
 # skip first, this was already created
-            if($skip_first == 1){
-                $skip_first = 0;
-                $object_selection .= "\t\t\t";
-#                next;
-            } else {
-                $object_selection .= " else ";
-            }
-
+            my $object_test;
+            my $object_call;
+            my $obj_first = 1;
 # parse the rest
             foreach my $param ( @{$params->{ParamList}} ) {
+
+                if($skip_first == 1){
+                    $object_selection .= "\t\t\t";
+                    $skip_first = 0;
+                } else {
+                    $object_call .= ", ";
+                }
 # skip all excepting objects
                 if ( $param->{ArgType} =~ /char/ ) {
+                    $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
                 } elsif ( $param->{ArgType} =~ /int/ ) {
+                    $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
                 } elsif ( $param->{ArgType} =~ /bool/ ) {
+                    $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
                 } else {
 #print_r($method);
-                    $object_selection .= "if(tmp_".$tmp_count." == \"".$param->{ArgType}."\") {
-                    RETURN_BOOL(obj->".$method->{methodname}."((".$param->{ArgType}.")o, ".$param_zend_function.")) \n\t\t\t}";
-                    $return .= "\t\n";
+                    if($obj_first == 1){
+                        $obj_first = 0;
+                    } else {
+                        $object_test .= " && ";
+                    }
+                    $object_test .= "tmp_".$tmp_count++." == \"".$param->{ArgType}."\"";
+                    $object_call .= "(".$param->{ArgType}.") ".$objects[$c++];
                 }
-            } # foreach
-        }
+            } # foreach param
 
+            if(!$obj_first){
+                $object_selection .= "\n\t\t\tif(".$object_test.") {\n";
+                $object_selection .= "\t\t\t\tRETURN_BOOL(obj->".$method->{methodname}."(".$object_call.")); \n\t\t\t}";
+            }
+        } # foreach params
+
         $shortstring .= "\"";
-#        $object_selection .= "\n";
 
-# return value
         my $returntype = $method->{ReturnType};
         my $zend_return_type = cplusplusToZEND($returntype);
 
 # write zend_parse_parameters method
-        $return .= "\t\tif(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,".$shortstring.", ".$param_zend_function.") == SUCCESS) {\n";
+        $return .= "\t\tif(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,".$shortstring.$paratype.") == SUCCESS) {\n";
         $return .= "\t\t\t".$classname." *obj = (".$classname."*) PHP_QT_FETCH();\n";
 
 # objects as return type
@@ -1545,36 +1564,40 @@
             $return .= "\t\t\tQObject* ".$obj." = (QObject*) php_qt_fetch(".$obj.");\n";
 #            $paraf =~ s/$obj/tmp_$obj/;
         }
-
+# add object handling
         my $not_empty = %args;
         if($not_empty){
-            $return .= $object_selection;
+            $return .= "\n".$object_selection;
             undef $object_selection;
             $return .= "\n";
+# $c counts objects, if there is no object the return mechanism has to be created
+            if($c>0){
+                $return .= "\t\t}\n";
+                next;
+            }
         }
 
-#        $return .= "\t\t$classname *o = ($classname*) PHP_QT_FETCH();\n";
-
+# handle return value here
 # if no return type specified
         if ( $zend_return_type eq "NULL" ) {
-            $return .=  "\t\to->".$method->{methodname}."(".$param_zend_function.");\n";
-            $return .=  "\t\tRETURN_NULL();\n";
+            $return .=  "\t\t\tobj->".$method->{methodname}."(".$param_zend_function.");\n";
+            $return .=  "\t\t\tRETURN_NULL();\n";
 # if return type is an object
         } elsif ( $zend_return_type =~ /zval/ ) {
         # TODO: consider 'const',
         # and non-pointer types, pointer types
-            $return .=  "\t\t".$returntype." obj = (".$returntype.") o->".$method->{methodname}."(".$param_zend_function.");\n";
-            $return .=  "\t\tzend_class_entry *ce;                                   \n";
-            $return .=  "\t\t    object_init_ex(return_value, ".$classname."_ce_ptr);     \n";
-            $return .=  "\t\t    zend_rsrc_list_entry le;                            \n";
-            $return .=  "\t\t    le.ptr = &obj;                                       \n";
-            $return .=  "\t\t    php_qt_register(return_value,le);                   \n";
-            $return .=  "\t\t    return;                                             \n";
+            $return .=  "\t\t\t".$returntype." obj = (".$returntype.") o->".$method->{methodname}."(".$param_zend_function.");\n";
+            $return .=  "\t\t\tzend_class_entry *ce;                                   \n";
+            $return .=  "\t\t\tobject_init_ex(return_value, ".$classname."_ce_ptr);     \n";
+            $return .=  "\t\t\tzend_rsrc_list_entry le;                            \n";
+            $return .=  "\t\t\tle.ptr = &obj;                                       \n";
+            $return .=  "\t\t\tphp_qt_register(return_value,le);                   \n";
+            $return .=  "\t\t\treturn;                                             \n";
         } else {
-            $return .=  "\t\tRETURN_".uc($zend_return_type)."(o->".$method->{methodname}."(".$param_zend_function."));\n" if defined $zend_return_type;
+            $return .=  "\t\t\tRETURN_".uc($zend_return_type)."(o->".$method->{methodname}."(".$param_zend_function."));\n" if defined $zend_return_type;
         }
         $return .= "\t\t}\n";
-        $tmp_count++;
+        $tmp_count=0;
     } # foreach args
 
     my $not_empty = %args;



From tm243 at berlios.de  Thu Jan  5 23:41:34 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Thu, 5 Jan 2006 23:41:34 +0100
Subject: [Php-qt-svn] r154 - trunk/tools
Message-ID: <200601052241.k05MfYDr024753@sheep.berlios.de>

Author: tm243
Date: 2006-01-05 23:41:34 +0100 (Thu, 05 Jan 2006)
New Revision: 154

Modified:
   trunk/tools/kalyptusCxxToPHP.pm
Log:
handling of return values finished.

Modified: trunk/tools/kalyptusCxxToPHP.pm
===================================================================
--- trunk/tools/kalyptusCxxToPHP.pm	2006-01-04 22:25:08 UTC (rev 153)
+++ trunk/tools/kalyptusCxxToPHP.pm	2006-01-05 22:41:34 UTC (rev 154)
@@ -920,6 +920,7 @@
                 }
 # copy
                 if($count == 0){
+                    print CLASS createReturn($node->{astNodeName}, $n_,"");
                 } elsif($count == 1){
                     push @one, $n_;
                 } elsif($count == 2){
@@ -950,18 +951,16 @@
             my %five_ = mergeEquals($node->{astNodeName},5, at five);
             print CLASS marshal($node->{astNodeName},5,%five_);
 
-            print CLASS "}\n"; # ZEND_METHOD
+#            print CLASS "}\n"; # ZEND_METHOD
 
         }
+        print CLASS "}\n";
     }
 
     print CLASS "\n";
 
 # creating the constructor
     my $function = $node->{astNodeName};
-# brace comes from previous method
-    print CLASS "\t}\n";
-    print CLASS "}\n";
 
     print CLASS "\n\nZEND_METHOD(",$function, ",__construct){\n";
     print CLASS "\n\t",$function, " *",$function,"_ptr = new ",$function,"();\n";
@@ -1261,7 +1260,7 @@
 # prepare arguments
                 mergeNumbers($class,$m);
 # deprecated
-                cplusplusToMacro($class,$m);
+#                cplusplusToMacro($class,$m);
    		    }
 	    }
 	}
@@ -1445,6 +1444,8 @@
         my $object_selection = "";
         my $tmp_count = 0;          # helping
 
+# informations about return type
+
 # identical strings grouped
         $return .= "\t\t/* ".$key." */\n";
         $run = $key."_";
@@ -1545,15 +1546,13 @@
 
             if(!$obj_first){
                 $object_selection .= "\n\t\t\tif(".$object_test.") {\n";
-                $object_selection .= "\t\t\t\tRETURN_BOOL(obj->".$method->{methodname}."(".$object_call.")); \n\t\t\t}";
+                $object_selection .= "\t".createReturn($classname, $method, $object_call);
+                $object_selection .=  "\t\t\t}";
             }
         } # foreach params
 
         $shortstring .= "\"";
 
-        my $returntype = $method->{ReturnType};
-        my $zend_return_type = cplusplusToZEND($returntype);
-
 # write zend_parse_parameters method
         $return .= "\t\tif(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,".$shortstring.$paratype.") == SUCCESS) {\n";
         $return .= "\t\t\t".$classname." *obj = (".$classname."*) PHP_QT_FETCH();\n";
@@ -1562,8 +1561,8 @@
         my $obj;
         foreach $obj ( @objects ) {
             $return .= "\t\t\tQObject* ".$obj." = (QObject*) php_qt_fetch(".$obj.");\n";
-#            $paraf =~ s/$obj/tmp_$obj/;
         }
+
 # add object handling
         my $not_empty = %args;
         if($not_empty){
@@ -1573,39 +1572,67 @@
 # $c counts objects, if there is no object the return mechanism has to be created
             if($c>0){
                 $return .= "\t\t}\n";
+# break run if there are objects
                 next;
             }
         }
 
+# return handling
+        $return .= createReturn($classname, $method, $param_zend_function);
+
+        $return .= "\t\t}\n";
+        $tmp_count=0;
+    } # foreach args
+
+    my $not_empty = %args;
+    if($not_empty){
+        $return .= "\t}\n";
+    }
+
+    return $return;
+}
+
+sub createReturn {
+
+    my ($classname, $method, $param_zend_function) = @_;
+    my $return;
+
+# no arguments, no object created
+    if($param_zend_function == ""){
+        $return .= "\t\t\t".$classname." *obj = (".$classname.") PHP_QT_FETCH();\n";
+    }
+
+    my $methodname;
+    if (defined $method->{methodname}) {
+        $methodname = $method->{methodname}
+    } else {
+        $methodname = $method->{astNodeName} if defined $method->{astNodeName};
+    }
+
+    my $returntype = $method->{ReturnType};
+    my $zend_return_type = cplusplusToZEND($returntype);
+
 # handle return value here
 # if no return type specified
         if ( $zend_return_type eq "NULL" ) {
-            $return .=  "\t\t\tobj->".$method->{methodname}."(".$param_zend_function.");\n";
+            $return .=  "\t\t\tobj->".$methodname."(".$param_zend_function.");\n";
             $return .=  "\t\t\tRETURN_NULL();\n";
 # if return type is an object
         } elsif ( $zend_return_type =~ /zval/ ) {
         # TODO: consider 'const',
         # and non-pointer types, pointer types
-            $return .=  "\t\t\t".$returntype." obj = (".$returntype.") o->".$method->{methodname}."(".$param_zend_function.");\n";
+            $return .=  "\t\t\t".$returntype." return_object = (".$returntype.") obj->".$methodname."(".$param_zend_function.");\n";
             $return .=  "\t\t\tzend_class_entry *ce;                                   \n";
             $return .=  "\t\t\tobject_init_ex(return_value, ".$classname."_ce_ptr);     \n";
             $return .=  "\t\t\tzend_rsrc_list_entry le;                            \n";
-            $return .=  "\t\t\tle.ptr = &obj;                                       \n";
+            $return .=  "\t\t\tle.ptr = &return_object;                                       \n";
             $return .=  "\t\t\tphp_qt_register(return_value,le);                   \n";
             $return .=  "\t\t\treturn;                                             \n";
+# simple types
         } else {
-            $return .=  "\t\t\tRETURN_".uc($zend_return_type)."(o->".$method->{methodname}."(".$param_zend_function."));\n" if defined $zend_return_type;
+            $return .=  "\t\t\tRETURN_".uc($zend_return_type)."(obj->".$methodname."(".$param_zend_function."));\n" if defined $zend_return_type;
         }
-        $return .= "\t\t}\n";
-        $tmp_count=0;
-    } # foreach args
 
-    my $not_empty = %args;
-    if($not_empty){
-        $return .= "\t}\n";
-    }
-
-
     return $return;
 
 }



From tm at ippfp.org  Fri Jan  6 00:03:19 2006
From: tm at ippfp.org (Thomas Moenicke)
Date: Fri, 6 Jan 2006 00:03:19 +0100
Subject: [Php-qt-svn] r155 - trunk/playground
Message-ID: <200601060003.19164.tm@ippfp.org>

Author: tm243
Date: 2006-01-05 23:56:08 +0100 (Thu, 05 Jan 2006)
New Revision: 155

Modified:
   trunk/playground/QLayoutItemInterface.cpp
   trunk/playground/qabstractbutton.cpp
   trunk/playground/qabstractslider.cpp
   trunk/playground/qactionevent.cpp
   trunk/playground/qapplication.cpp
   trunk/playground/qboxlayout.cpp
   trunk/playground/qchar.cpp
   trunk/playground/qcharref.cpp
   trunk/playground/qclipboardevent.cpp
   trunk/playground/qcloseevent.cpp
   trunk/playground/qcontextmenuevent.cpp
   trunk/playground/qcoreapplication.cpp
   trunk/playground/qdate.cpp
   trunk/playground/qdatetime.cpp
   trunk/playground/qdragenterevent.cpp
   trunk/playground/qdragleaveevent.cpp
   trunk/playground/qdragmoveevent.cpp
   trunk/playground/qdragresponseevent.cpp
   trunk/playground/qdropevent.cpp
   trunk/playground/qfileopenevent.cpp
   trunk/playground/qfocusevent.cpp
   trunk/playground/qfont.cpp
   trunk/playground/qframe.cpp
   trunk/playground/qgridlayout.cpp
   trunk/playground/qhboxlayout.cpp
   trunk/playground/qhelpevent.cpp
   trunk/playground/qhideevent.cpp
   trunk/playground/qhoverevent.cpp
   trunk/playground/qicondragevent.cpp
   trunk/playground/qinputevent.cpp
   trunk/playground/qinputmethodevent.cpp
   trunk/playground/qinputmethodevent__attribute.cpp
   trunk/playground/qkeyevent.cpp
   trunk/playground/qlabel.cpp
   trunk/playground/qlatin1char.cpp
   trunk/playground/qlatin1string.cpp
   trunk/playground/qlayout.cpp
   trunk/playground/qlayoutitem.cpp
   trunk/playground/qlcdnumber.cpp
   trunk/playground/qlineedit.cpp
   trunk/playground/qmouseevent.cpp
   trunk/playground/qmoveevent.cpp
   trunk/playground/qobject.cpp
   trunk/playground/qobjectdata.cpp
   trunk/playground/qobjectuserdata.cpp
   trunk/playground/qpainter.cpp
   trunk/playground/qpaintevent.cpp
   trunk/playground/qpushbutton.cpp
   trunk/playground/qresizeevent.cpp
   trunk/playground/qshortcutevent.cpp
   trunk/playground/qshowevent.cpp
   trunk/playground/qslider.cpp
   trunk/playground/qspaceritem.cpp
   trunk/playground/qstatustipevent.cpp
   trunk/playground/qstring.cpp
   trunk/playground/qtabletevent.cpp
   trunk/playground/qtime.cpp
   trunk/playground/qtimer.cpp
   trunk/playground/qtoolbarchangeevent.cpp
   trunk/playground/qvboxlayout.cpp
   trunk/playground/qwhatsthisclickedevent.cpp
   trunk/playground/qwheelevent.cpp
   trunk/playground/qwidget.cpp
   trunk/playground/qwidgetdata.cpp
   trunk/playground/qwidgetitem.cpp
   trunk/playground/qwindowstatechangeevent.cpp
Log:
update classes since return- and argument handling was updated.

Modified: trunk/playground/QLayoutItemInterface.cpp
===================================================================
--- trunk/playground/QLayoutItemInterface.cpp	2006-01-05 22:41:34 UTC (rev 
154)
+++ trunk/playground/QLayoutItemInterface.cpp	2006-01-05 22:56:08 UTC (rev 
155)
@@ -1,4 +1,4 @@
-/* QLayoutItemInterface.cpp - QLayoutItemInterface PHP implementation. * 
begin           : Wed Jan  4 01:19:22 2006
+// QLayoutItemInterface.cpp - QLayoutItemInterface PHP implementation. * 
begin           : Fri Jan  6 00:06:34 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/qabstractbutton.cpp
===================================================================
--- trunk/playground/qabstractbutton.cpp	2006-01-05 22:41:34 UTC (rev 154)
+++ trunk/playground/qabstractbutton.cpp	2006-01-05 22:56:08 UTC (rev 155)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QAbstractButton.cpp - QAbstractButton PHP implementation.
- * begin           : Wed Jan  4 01:19:22 2006
+ * begin           : Fri Jan  6 00:06:34 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -32,727 +32,663 @@
 #include <QAbstractButton>
 
 
-
 /*********************************
- *    class     QAbstractButton
- *    function  metaObject
- *    flags:    cv
- *
- *    @param   -
+ *    class     QAbstractButton */
+/*
+ *    function  tr
+ *    flags:    s
+ */
+ZEND_METHOD(QAbstractButton, tr){
 
- *    @access   public
- *
-- 
Thomas


From tm243 at berlios.de  Fri Jan  6 19:35:30 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Fri, 6 Jan 2006 19:35:30 +0100
Subject: [Php-qt-svn] r156 - trunk
Message-ID: <200601061835.k06IZUKC018799@sheep.berlios.de>

Author: tm243
Date: 2006-01-06 19:35:28 +0100 (Fri, 06 Jan 2006)
New Revision: 156

Modified:
   trunk/README
   trunk/config.m4
Log:
--with-prefix configure option removed. URL's updated.

Modified: trunk/README
===================================================================
--- trunk/README	2006-01-05 22:56:08 UTC (rev 155)
+++ trunk/README	2006-01-06 18:35:28 UTC (rev 156)
@@ -17,7 +17,7 @@
 Compiling and installation
 ==========================
 
-After unpacking or checking out from SVN copy the php_qt directory into the 
+After unpacking or checking out from SVN copy the unpacked php_qt directory into the 
 php-5.1xxx/ext/ directory.
 
 We prefer to build PHP-Qt as module!
@@ -31,7 +31,7 @@
 
 If you have two or more php installations you can specify the path with
 
---with-prefix=/path/to/php5
+--prefix=/path/to/php5
 
 To remove old objectfiles run 
 
@@ -57,9 +57,9 @@
 -----------------
 users mailing list
 
-address:        php-qt-users at lists.berlios.de.
-Subscription:   https://lists.berlios.de/mailman/listinfo/php-qt-users
-Archive:        https://lists.berlios.de/pipermail/php-qt-users/
+address:        php-qt-users at lists.sourceforge.net
+Subscription:   https://lists.sourceforge.net/lists/listinfo/php-qt-users
+Archive:        http://sourceforge.net/mailarchive/forum.php?forum=php-qt-users
 
 Subversion commits
 --------------------

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-05 22:56:08 UTC (rev 155)
+++ trunk/config.m4	2006-01-06 18:35:28 UTC (rev 156)
@@ -2,15 +2,6 @@
 dnl config.m4 for extension php_qt
 
 
-PHP_ARG_WITH(prefix,,
-[  --with-prefix=DIR    php prefix])
-
-if test "$PHP_PREFIX" != "no"; then
- if test "$PHP_PREFIX" != "yes"; then
-    $prefix=$PHP_PREFIX
- fi
-fi
-
 dnl runtime
 PHP_ARG_WITH(qtlib,Qt runtime library,
 [  --with-qtlib=DIR         Qt library binaries])



From tm243 at berlios.de  Sat Jan  7 00:50:49 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 7 Jan 2006 00:50:49 +0100
Subject: [Php-qt-svn] r157 - trunk/tools
Message-ID: <200601062350.k06NongQ000343@sheep.berlios.de>

Author: tm243
Date: 2006-01-07 00:50:37 +0100 (Sat, 07 Jan 2006)
New Revision: 157

Modified:
   trunk/tools/kalyptusCxxToPHP.pm
Log:
prepared code snippets to include it easier into php_qt.

Modified: trunk/tools/kalyptusCxxToPHP.pm
===================================================================
--- trunk/tools/kalyptusCxxToPHP.pm	2006-01-06 18:35:28 UTC (rev 156)
+++ trunk/tools/kalyptusCxxToPHP.pm	2006-01-06 23:50:37 UTC (rev 157)
@@ -18,7 +18,7 @@
 #   - support for all types in method calls
 #   - fit cplusplusToZEND, cplusplusToInvoke, cplusplusToMacro
 #   - setter methods support only one php property (adequate, I believe)
-#   - marshalling method arguments
+#   - snippets for the config.m4 file and the QDate_ce_ptr pointer
 
 package kalyptusCxxToPHP;
 
@@ -37,7 +37,7 @@
 
 use vars qw/ @clist $host $who $now $gentext %functionId $docTop
 	$lib $rootnode $outputdir $opt $debug $typeprefix $eventHandlerCount
-	$pastaccess $pastname $pastreturn $pastparams $nullctor $ctorCount @properties @functions @constructors %methods *CLASS *ZEND_PHP_QT *HEADER *QTCTYPES *KDETYPES /;
+	$pastaccess $pastname $pastreturn $pastparams $nullctor $ctorCount @properties @functions @constructors %methods *CLASS *ZEND_PHP_QT *HEADER *AG_ZEND_CLASS_ENTRY *AG_EXTERN_ZEND_CLASS_ENTRY *AG_VOID_REGISTER *AG_ZEND_PHP_QT *AG_CONFIGM4 *AG_QT_MINIT *AG_PHP_QT_CPP *QTCTYPES *KDETYPES /;
 
 BEGIN
 {
@@ -584,11 +584,14 @@
     }
 
     print ZEND_PHP_QT "\nZEND_METHOD(",$class->{astNodeName},", ",$functionname,");";
+    print AG_ZEND_PHP_QT "\nZEND_METHOD(",$class->{astNodeName},", ",$functionname,");";
+
 # code snippets for php_qt.cpp here
     $access = uc($access);
     $access =~ s/_SLOTS//;
     $access =~ s/_SIGNALS//;
-    print PHP_QT_CPP "\tZEND_ME(",$classname,",",$functionname,",NULL,ZEND_ACC_",$access,")\n";
+#    print PHP_QT_CPP "\tZEND_ME(",$classname,",",$functionname,",NULL,ZEND_ACC_",$access,")\n";
+    print AG_PHP_QT_CPP "\tZEND_ME(",$classname,",",$functionname,",NULL,ZEND_ACC_",$access,")\n";
 
 }
 
@@ -599,12 +602,49 @@
 	$debug = $main::debuggen;
 
 	mkpath( $outputdir ) unless -f $outputdir;
+    mkpath( $outputdir."/generated/" ) unless -f $outputdir."/generated/";
 
+# open files
     # make zend_php_qt.h header file
 	my $file_zend_php_qt = "$outputdir/zend_php_qt.h";
 	open( ZEND_PHP_QT, ">$file_zend_php_qt" ) || die "Couldn't create $file_zend_php_qt\n";
 	$file_zend_php_qt =~ s/\.h/.h/;
 
+    # AG_ZEND_CLASS_ENTRY
+    my $file_ag_zend_class_entry = "$outputdir/ag_zend_class_entry.h";
+    open( AG_ZEND_CLASS_ENTRY, ">$file_ag_zend_class_entry" ) || die "Couldn't create $file_ag_zend_class_entry\n";
+    $file_ag_zend_class_entry =~ s/\.h/.h/;
+
+    # AG_EXTERN_ZEND_CLASS_ENTRY
+    my $file_ag_extern_zend_class_entry = "$outputdir/ag_extern_zend_class_entry.h";
+    open( AG_EXTERN_ZEND_CLASS_ENTRY, ">$file_ag_extern_zend_class_entry" ) || die "Couldn't create $file_ag_extern_zend_class_entry\n";
+    $file_ag_extern_zend_class_entry =~ s/\.h/.h/;
+
+#     # AG_VOID_REGISTER
+#     my $file_ag_void_register = "$outputdir/ag_void_register.h";
+#     open( AG_VOID_REGISTER, ">$file_ag_void_register" ) || die "Couldn't create $file_ag_void_register\n";
+#     $file_ag_void_register =~ s/\.h/.h/;
+
+    # AG_ZEND_PHP_QT
+    my $file_ag_zend_php_qt = "$outputdir/ag_zend_php_qt.h";
+    open( AG_ZEND_PHP_QT, ">$file_ag_zend_php_qt" ) || die "Couldn't create $file_ag_zend_php_qt\n";
+    $file_ag_zend_php_qt =~ s/\.h/.h/;
+
+    # AG_CONFIGM4
+    my $file_ag_configm4 = "$outputdir/ag_configm4.h";
+    open( AG_CONFIGM4, ">$file_ag_configm4" ) || die "Couldn't create $file_ag_configm4\n";
+    $file_ag_configm4 =~ s/\.h/.h/;
+
+    # AG_QT_MINIT
+    my $file_ag_qt_minit = "$outputdir/ag_qt_minit.h";
+    open( AG_QT_MINIT, ">$file_ag_qt_minit" ) || die "Couldn't create $file_ag_qt_minit\n";
+    $file_ag_qt_minit =~ s/\.h/.h/;
+
+    # AG_PHP_QT_CPP
+    my $file_ag_php_qt_cpp = "$outputdir/ag_php_qt_cpp.h";
+    open( AG_PHP_QT_CPP, ">$file_ag_php_qt_cpp" ) || die "Couldn't create $file_ag_php_qt_cpp\n";
+    $file_ag_php_qt_cpp =~ s/\.h/.h/;
+
     print ZEND_PHP_QT "/*
   +----------------------------------------------------------------------+
   | PHP Version 5                                                        |
@@ -653,19 +693,21 @@
 PHP_FUNCTION(SLOT);
     \n\n";
 
+# deprecated
     # make zend_php.cpp snippets file
-	my $file_php_qt_cpp = "$outputdir/php_qt.snippets.cpp";
-	open( PHP_QT_CPP, ">$file_php_qt_cpp" ) || die "Couldn't create $file_php_qt_cpp\n";
-	$file_php_qt_cpp =~ s/\.h/.h/;
+# 	my $file_php_qt_cpp = "$outputdir/php_qt.snippets.cpp";
+# 	open( PHP_QT_CPP, ">$file_php_qt_cpp" ) || die "Couldn't create $file_php_qt_cpp\n";
+# 	$file_php_qt_cpp =~ s/\.h/.h/;
 
-    print PHP_QT_CPP "/**/\n";
+#    print PHP_QT_CPP "/**/\n";
 
+# deprecated
     # make zend_php.cpp second snippets file PHP_MINIT_FUNCTION
 	my $file_php_qt_minit = "$outputdir/php_qt.snippets2.cpp";
 	open( PHP_QT_MINIT, ">$file_php_qt_minit" ) || die "Couldn't create $file_php_qt_minit\n";
 	$file_php_qt_minit =~ s/\.h/.h/;
 
-    print PHP_QT_CPP "\n";
+#    print PHP_QT_CPP "\n";
     print PHP_QT_MINIT "\n";
 
 
@@ -710,11 +752,21 @@
  * vim<600: noet sw=4 ts=4
  */\n
     ";
-    close ZEND_PHP_QT;
 
-    print PHP_QT_CPP "\n";
-    close PHP_QT_CPP;
+# close files
+#    close ZEND_PHP_QT;
 
+#    print PHP_QT_CPP "\n";
+#    close PHP_QT_CPP;
+
+    close AG_ZEND_CLASS_ENTRY;
+    close AG_EXTERN_ZEND_CLASS_ENTRY;
+#    close AG_VOID_REGISTER;
+    close AG_ZEND_PHP_QT;
+    close AG_CONFIGM4;
+    close AG_QT_MINIT;
+    close AG_PHP_QT_CPP;
+
 }
 
 sub writeClassDoc
@@ -745,7 +797,7 @@
 	}
 # make the class file
 	my $file = join("__", kdocAstUtil::heritage($node)).".cpp";
-    $file = "$outputdir/".lc($file);
+    $file = $outputdir."generated/".lc($file);
 	my $docnode = $node->{DocNode};
 	my @list = ();
 	my $version = undef;
@@ -794,9 +846,20 @@
 #include \"../php_qt.h\"\n";
 
 # php_qt.cpp
-    print PHP_QT_CPP "static zend_function_entry ",$node->{astNodeName},"_methods[] = {\n";
+#    print PHP_QT_CPP "static zend_function_entry ",$node->{astNodeName},"_methods[] = {\n";
+    print AG_PHP_QT_CPP "static zend_function_entry ",$node->{astNodeName},"_methods[] = {\n";
+
+
+    print AG_ZEND_CLASS_ENTRY "zend_class_entry *",$node->{astNodeName},"_ce_ptr;\n";
+    print AG_CONFIGM4 "\tqt/generated/",uc($node->{astNodeName}),".cpp \\ \n";
+    print AG_EXTERN_ZEND_CLASS_ENTRY "extern zend_class_entry *",$node->{astNodeName},"_ce_ptr;\n";
+    print AG_EXTERN_ZEND_CLASS_ENTRY "void \t_register_",$node->{astNodeName},"();\n";
+
+
     print PHP_QT_MINIT "\n\t_register_",$node->{astNodeName},"(TSRMLS_C);\n";
+    print AG_QT_MINIT "\n\t_register_",$node->{astNodeName},"(TSRMLS_C);\n";
 
+
 	# ancestors
 	my @ancestors = ();
 	Iter::Ancestors( $node, $rootnode, undef, undef,
@@ -1012,8 +1075,11 @@
 	$nullctor = 0;
 
 # php_qt.cpp
-    print PHP_QT_CPP "
-	{NULL,NULL,NULL}
+#     print PHP_QT_CPP "
+# 	{NULL,NULL,NULL}
+# };\n";
+    print AG_PHP_QT_CPP "
+    {NULL,NULL,NULL}
 };\n";
 
 # inheritance
@@ -1030,7 +1096,14 @@
         }
 	}
 
-    print PHP_QT_CPP "
+#     print PHP_QT_CPP "
+# void _register_",$node->{astNodeName},"(TSRMLS_D)
+# {
+#     zend_class_entry ce;
+#     INIT_CLASS_ENTRY(ce,\"",$node->{astNodeName},"\",",$node->{astNodeName},"_methods);
+#     ",$zend_inherit,"
+# ";
+    print AG_PHP_QT_CPP "
 void _register_",$node->{astNodeName},"(TSRMLS_D)
 {
     zend_class_entry ce;
@@ -1042,17 +1115,25 @@
 		sub { print CLASS "", $_[0], ""; print CLASS "", $_[0], "";  },
 		sub {	my ($node, $kid ) = @_;
             if ($kid->{NodeType} eq "property"){
-                print PHP_QT_CPP
+#                 print PHP_QT_CPP
+# #                    "zend_declare_property_string(",$node->{astNodeName},"_ce_ptr,\"",$kid->{astNodeName},"\",strlen(\"",$kid->{astNodeName},"\"),\"\",ZEND_ACC_PROTECTED TSRMLS_CC);";
+#                      "\tPHP_QT_DECLARE_PROPERTY(\"$kid->{astNodeName}\");\n";
+                print AG_PHP_QT_CPP
 #                    "zend_declare_property_string(",$node->{astNodeName},"_ce_ptr,\"",$kid->{astNodeName},"\",strlen(\"",$kid->{astNodeName},"\"),\"\",ZEND_ACC_PROTECTED TSRMLS_CC);";
                      "\tPHP_QT_DECLARE_PROPERTY(\"$kid->{astNodeName}\");\n";
+
             }
         },
 		sub { print CLASS ""; print JNISOURCE ""; }
 	);
 
-    print PHP_QT_CPP "
+#     print PHP_QT_CPP "
+# }\n";
+    print AG_PHP_QT_CPP "
 }\n";
 
+
+
 	if ( kalyptusDataDict::interfacemap($node->{astNodeName}) ne () ) {
 		close INTERFACE;
     }
@@ -1313,6 +1394,7 @@
 #                $enum =~ s/=//g;
                 my @constant = split(/=/,$enum_);
                 print PHP_QT_MINIT "\t	REGISTER_LONG_CONSTANT(\"",uc($class->{astNodeName}),"_",uc($enum),"_",uc($constant[0]),"\", ",$class->{astNodeName},"::",$constant[0],", CONST_CS | CONST_PERSISTENT);\n";
+                print AG_QT_MINIT "\t  REGISTER_LONG_CONSTANT(\"",uc($class->{astNodeName}),"_",uc($enum),"_",uc($constant[0]),"\", ",$class->{astNodeName},"::",$constant[0],", CONST_CS | CONST_PERSISTENT);\n";
 				$enumCount++;
 
 			}
@@ -1402,6 +1484,8 @@
 # add method name
         $tmp{ $paramstring }->AddProp("methodname",$method->{astNodeName});
         $tmp{ $paramstring }->AddProp("ReturnType",$method->{ReturnType});
+        $tmp{ $paramstring }->AddProp("Access",$method->{Access});
+        $tmp{ $paramstring }->AddProp("Flags",$method->{Flags});
 
     }
 
@@ -1441,6 +1525,7 @@
         my $param_zend_function;    # parameter for zend function
         my @objects;                # object stack
         my $method = $args{$key};   # helping
+        my $access = $method->{Access};
         my $object_selection = "";
         my $tmp_count = 0;          # helping
 
@@ -1582,6 +1667,22 @@
 
         $return .= "\t\t}\n";
         $tmp_count=0;
+
+        # write code snippets
+        if( $method->{Flags} =~ /s/ ){
+            $access .= "|ZEND_ACC_STATIC";
+        }
+    
+#        print ZEND_PHP_QT "\nZEND_METHOD(",$classname,", ",$method->{methodname},");";
+        print AG_ZEND_PHP_QT "\nZEND_METHOD(",$classname,", ",$method->{methodname},");";
+    
+    # code snippets for php_qt.cpp here
+        $access = uc($access);
+        $access =~ s/_SLOTS//;
+        $access =~ s/_SIGNALS//;
+#        print PHP_QT_CPP "\tZEND_ME(",$classname,",",$method->{methodname},",NULL,ZEND_ACC_",$access,")\n";
+        print AG_PHP_QT_CPP "\tZEND_ME(",$classname,",",$method->{methodname},",NULL,ZEND_ACC_",$access,")\n";
+
     } # foreach args
 
     my $not_empty = %args;



From tm243 at berlios.de  Sun Jan  8 02:14:15 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 8 Jan 2006 02:14:15 +0100
Subject: [Php-qt-svn] r158 - in trunk: . qt qt/classes
Message-ID: <200601080114.k081EF8x022613@sheep.berlios.de>

Author: tm243
Date: 2006-01-08 02:14:05 +0100 (Sun, 08 Jan 2006)
New Revision: 158

Added:
   trunk/qt/ag_extern_zend_class_entry.h
   trunk/qt/ag_php_qt_cpp.h
   trunk/qt/ag_qt_minit.h
   trunk/qt/ag_zend_class_entry.h
   trunk/qt/ag_zend_php_qt.h
   trunk/qt/classes/
   trunk/qt/classes/qdate.cpp
   trunk/qt/classes/qdatetime.cpp
   trunk/qt/classes/qtime.cpp
Modified:
   trunk/config.m4
   trunk/qt/php_qt.cpp
   trunk/qt/php_qt.h
   trunk/qt/zend_php_qt.h
Log:
new classes: QTime, QDate, QDateTime.

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/config.m4	2006-01-08 01:14:05 UTC (rev 158)
@@ -104,6 +104,9 @@
   qt/text_related/qlatin1string.cpp \
   qt/text_related/qchar.cpp \
   qt/event/qevent.cpp \
+  qt/classes/qdate.cpp \ 
+  qt/classes/qdatetime.cpp \ 
+  qt/classes/qtime.cpp \ 
   qt/php_qt.cpp,$ext_shared)
 
   PHP_ADD_BUILD_DIR($ext_builddir/qt)

Added: trunk/qt/ag_extern_zend_class_entry.h
===================================================================
--- trunk/qt/ag_extern_zend_class_entry.h	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/ag_extern_zend_class_entry.h	2006-01-08 01:14:05 UTC (rev 158)
@@ -0,0 +1,6 @@
+extern zend_class_entry *QDate_ce_ptr;
+void 	_register_QDate();
+extern zend_class_entry *QDateTime_ce_ptr;
+void 	_register_QDateTime();
+extern zend_class_entry *QTime_ce_ptr;
+void 	_register_QTime();

Added: trunk/qt/ag_php_qt_cpp.h
===================================================================
--- trunk/qt/ag_php_qt_cpp.h	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/ag_php_qt_cpp.h	2006-01-08 01:14:05 UTC (rev 158)
@@ -0,0 +1,59 @@
+static zend_function_entry QDate_methods[] = {
+	ZEND_ME(QDate,longDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,setYMD,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,shortMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,isLeapYear,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,fromJulianDay,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,addDays,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,gregorianToJulian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,longMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,julianToGregorian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,shortDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,weekNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,addMonths,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,addYears,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QDate(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDate",QDate_methods);
+    QDate_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QDateTime_methods[] = {
+	ZEND_ME(QDateTime,setTime_t,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addDays,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addMonths,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addYears,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QDateTime(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDateTime",QDateTime_methods);
+    QDateTime_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QTime_methods[] = {
+	ZEND_ME(QTime,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,addSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,addMSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,setHMS,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QTime(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QTime",QTime_methods);
+    QTime_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}

Added: trunk/qt/ag_qt_minit.h
===================================================================
--- trunk/qt/ag_qt_minit.h	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/ag_qt_minit.h	2006-01-08 01:14:05 UTC (rev 158)
@@ -0,0 +1,6 @@
+
+	_register_QDate(TSRMLS_C);
+
+	_register_QDateTime(TSRMLS_C);
+
+	_register_QTime(TSRMLS_C);

Added: trunk/qt/ag_zend_class_entry.h
===================================================================
--- trunk/qt/ag_zend_class_entry.h	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/ag_zend_class_entry.h	2006-01-08 01:14:05 UTC (rev 158)
@@ -0,0 +1,3 @@
+zend_class_entry *QDate_ce_ptr;
+zend_class_entry *QDateTime_ce_ptr;
+zend_class_entry *QTime_ce_ptr;

Added: trunk/qt/ag_zend_php_qt.h
===================================================================
--- trunk/qt/ag_zend_php_qt.h	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/ag_zend_php_qt.h	2006-01-08 01:14:05 UTC (rev 158)
@@ -0,0 +1,24 @@
+
+ZEND_METHOD(QDate, longDayName);
+ZEND_METHOD(QDate, isValid);
+ZEND_METHOD(QDate, setYMD);
+ZEND_METHOD(QDate, shortMonthName);
+ZEND_METHOD(QDate, isLeapYear);
+ZEND_METHOD(QDate, fromJulianDay);
+ZEND_METHOD(QDate, addDays);
+ZEND_METHOD(QDate, gregorianToJulian);
+ZEND_METHOD(QDate, longMonthName);
+ZEND_METHOD(QDate, julianToGregorian);
+ZEND_METHOD(QDate, shortDayName);
+ZEND_METHOD(QDate, weekNumber);
+ZEND_METHOD(QDate, addMonths);
+ZEND_METHOD(QDate, addYears);
+ZEND_METHOD(QDateTime, setTime_t);
+ZEND_METHOD(QDateTime, addDays);
+ZEND_METHOD(QDateTime, addMonths);
+ZEND_METHOD(QDateTime, addSecs);
+ZEND_METHOD(QDateTime, addYears);
+ZEND_METHOD(QTime, isValid);
+ZEND_METHOD(QTime, addSecs);
+ZEND_METHOD(QTime, addMSecs);
+ZEND_METHOD(QTime, setHMS);

Added: trunk/qt/classes/qdate.cpp
===================================================================
--- trunk/qt/classes/qdate.cpp	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/classes/qdate.cpp	2006-01-08 01:14:05 UTC (rev 158)
@@ -0,0 +1,599 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QDate.cpp - QDate PHP implementation.
+ * begin           : Sun Jan  8 02:08:27 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include <QDate>
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  longDayName
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, longDayName){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  dayOfWeek
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, dayOfWeek){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_LONG(obj->dayOfWeek());
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  daysInMonth
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, daysInMonth){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_LONG(obj->daysInMonth());
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  month
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, month){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_LONG(obj->month());
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  isValid
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, isValid){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isValid());
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* lll */
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: 
+		long var_lll_2;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  setYMD
+ *    flags:    
+ */
+ZEND_METHOD(QDate, setYMD){
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* lll */
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: 
+		long var_lll_2;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  shortMonthName
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, shortMonthName){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  toString
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, toString){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* s */
+		char* var_s_0;   // default: Qt::TextDate
+		int* len_s_0;
+
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s|", &var_s_0, &len_s_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+		/* o */
+		zval* z_var_o_1;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+
+			QString tmp_o_0(var_o_1->metaObject()->className());
+			
+			if(tmp_o_0 == "const QString&") {
+				QString return_object = (QString) obj->toString((const QString&) var_o_1);
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDate_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  isLeapYear
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, isLeapYear){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  fromJulianDay
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, fromJulianDay){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  currentDate
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, currentDate){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			QDate return_object = (QDate) obj->currentDate();
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDate_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  addDays
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, addDays){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  day
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, day){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_LONG(obj->day());
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  gregorianToJulian
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, gregorianToJulian){
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* lll */
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: 
+		long var_lll_2;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  longMonthName
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, longMonthName){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  julianToGregorian
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, julianToGregorian){
+
+	if (ZEND_NUM_ARGS() == 4){
+		/* llll */
+		long var_llll_0;    // default: 
+		long var_llll_1;    // default: 
+		long var_llll_2;    // default: 
+		long var_llll_3;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  shortDayName
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, shortDayName){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  fromString
+ *    flags:    s
+ */
+ZEND_METHOD(QDate, fromString){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* oo */
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			
+			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
+				QDate return_object = (QDate) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDate_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+			}
+		}
+		/* os */
+		zval* z_var_os_2;   // default: 
+		char* var_os_3;   // default: Qt::TextDate
+		int* len_os_3;
+
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|", &z_var_os_2, &var_os_3, &len_os_3) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			QObject* var_os_2 = (QObject*) php_qt_fetch(z_var_os_2);
+
+			QString tmp_os_0(var_os_2->metaObject()->className());
+			
+			if(tmp_os_0 == "const QString&") {
+				QDate return_object = (QDate) obj->fromString((const QString&) var_os_2, (const char*) var_os_3);
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDate_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  dayOfYear
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, dayOfYear){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_LONG(obj->dayOfYear());
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  weekNumber
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, weekNumber){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 0
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  addMonths
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, addMonths){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  toJulianDay
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, toJulianDay){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_LONG(obj->toJulianDay());
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  addYears
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, addYears){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  daysTo
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, daysTo){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o */
+		zval* z_var_o_0;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QDate&") {
+				RETURN_LONG(obj->daysTo((const QDate&) var_o_0));
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  isNull
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, isNull){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isNull());
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  year
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, year){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_LONG(obj->year());
+}
+
+/*********************************
+ *    class     QDate */
+/*
+ *    function  daysInYear
+ *    flags:    c
+ */
+ZEND_METHOD(QDate, daysInYear){
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+			RETURN_LONG(obj->daysInYear());
+}
+
+
+
+ZEND_METHOD(QDate,__construct){
+
+	QDate *QDate_ptr = new QDate();
+
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_0, &param_1, &param_2) == FAILURE) {
+			return;
+		}
+		 /*long y int*/
+/*		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_0));
+			QDate_ptr = new QDate(tmp);
+		}
+*/		 /*long m int*/
+/*		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QDate_ptr = new QDate(tmp);
+		}
+*/		 /*long d int*/
+/*		if(Z_TYPE_P(param_2) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_2));
+			QDate_ptr = new QDate(tmp);
+		}
+*/	}
+
+	PHP_QT_REGISTER(QDate_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QDate);
+

Added: trunk/qt/classes/qdatetime.cpp
===================================================================
--- trunk/qt/classes/qdatetime.cpp	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/classes/qdatetime.cpp	2006-01-08 01:14:05 UTC (rev 158)
@@ -0,0 +1,584 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QDateTime.cpp - QDateTime PHP implementation.
+ * begin           : Sun Jan  8 02:08:27 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include <QDateTime>
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  time
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, time){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QTime return_object = (QTime) obj->time();
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDateTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  date
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, date){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QDate return_object = (QDate) obj->date();
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDateTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  isValid
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, isValid){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isValid());
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  toString
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, toString){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* s */
+		char* var_s_0;   // default: Qt::TextDate
+		int* len_s_0;
+
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s|", &var_s_0, &len_s_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+
+			
+		}
+		/* o */
+		zval* z_var_o_1;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+
+			QString tmp_o_0(var_o_1->metaObject()->className());
+			
+			if(tmp_o_0 == "const QString&") {
+				QString return_object = (QString) obj->toString((const QString&) var_o_1);
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDateTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  toTime_t
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, toTime_t){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			RETURN_LONG(obj->toTime_t());
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  setTime_t
+ *    flags:    
+ */
+ZEND_METHOD(QDateTime, setTime_t){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  addDays
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, addDays){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  secsTo
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, secsTo){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o */
+		zval* z_var_o_0;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QDateTime&") {
+				RETURN_LONG(obj->secsTo((const QDateTime&) var_o_0));
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  toTimeSpec
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, toTimeSpec){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  fromString
+ *    flags:    s
+ */
+ZEND_METHOD(QDateTime, fromString){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* oo */
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			
+			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
+				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDateTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+			}
+		}
+		/* os */
+		zval* z_var_os_2;   // default: 
+		char* var_os_3;   // default: Qt::TextDate
+		int* len_os_3;
+
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|", &z_var_os_2, &var_os_3, &len_os_3) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QObject* var_os_2 = (QObject*) php_qt_fetch(z_var_os_2);
+
+			QString tmp_os_0(var_os_2->metaObject()->className());
+			
+			if(tmp_os_0 == "const QString&") {
+				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_os_2, (const char*) var_os_3);
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDateTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  timeSpec
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, timeSpec){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			Qt::TimeSpec return_object = (Qt::TimeSpec) obj->timeSpec();
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDateTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  setTime
+ *    flags:    
+ */
+ZEND_METHOD(QDateTime, setTime){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o */
+		zval* z_var_o_0;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QTime&") {
+				obj->setTime((const QTime&) var_o_0);
+			RETURN_NULL();
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  addMonths
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, addMonths){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  QDateTime
+ *    flags:    
+ */
+/*ZEND_METHOD(QDateTime, QDateTime){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			RETURN_~(obj->QDateTime());
+}
+*/
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  addSecs
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, addSecs){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  setDate
+ *    flags:    
+ */
+ZEND_METHOD(QDateTime, setDate){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o */
+		zval* z_var_o_0;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QDate&") {
+				obj->setDate((const QDate&) var_o_0);
+			RETURN_NULL();
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  currentDateTime
+ *    flags:    s
+ */
+ZEND_METHOD(QDateTime, currentDateTime){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QDateTime return_object = (QDateTime) obj->currentDateTime();
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDateTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  daysTo
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, daysTo){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o */
+		zval* z_var_o_0;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QDateTime&") {
+				RETURN_LONG(obj->daysTo((const QDateTime&) var_o_0));
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  addYears
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, addYears){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  isNull
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, isNull){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isNull());
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  toUTC
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, toUTC){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QDateTime return_object = (QDateTime) obj->toUTC();
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDateTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  toLocalTime
+ *    flags:    c
+ */
+ZEND_METHOD(QDateTime, toLocalTime){
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QDateTime return_object = (QDateTime) obj->toLocalTime();
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QDateTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+}
+
+/*********************************
+ *    class     QDateTime */
+/*
+ *    function  setTimeSpec
+ *    flags:    
+ */
+ZEND_METHOD(QDateTime, setTimeSpec){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+
+
+ZEND_METHOD(QDateTime,__construct){
+
+	QDateTime *QDateTime_ptr = new QDateTime();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+/*	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_0) == FAILURE) {
+			return;
+		}
+
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QDate& tmp(Z_STRVAL_P(param_0));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 3){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_0, &param_1, &param_2) == FAILURE) {
+			return;
+		}
+
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QDate& tmp(Z_STRVAL_P(param_0));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+
+		if(Z_TYPE_P(param_1) == IS_OBJECT) {
+			QTime& tmp(Z_STRVAL_P(param_1));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+
+		if(Z_TYPE_P(param_2) == IS_OBJECT) {
+			Qt::TimeSpec tmp(Z_STRVAL_P(param_2));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+	}
+
+	if(ZEND_NUM_ARGS() == 1){
+		zval* param_0;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_0) == FAILURE) {
+			return;
+		}
+
+		if(Z_TYPE_P(param_0) == IS_OBJECT) {
+			QDateTime& tmp(Z_STRVAL_P(param_0));
+			QDateTime_ptr = new QDateTime(tmp);
+		}
+	}
+*/
+	PHP_QT_REGISTER(QDateTime_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QDateTime);
+

Added: trunk/qt/classes/qtime.cpp
===================================================================
--- trunk/qt/classes/qtime.cpp	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/classes/qtime.cpp	2006-01-08 01:14:05 UTC (rev 158)
@@ -0,0 +1,422 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QTime.cpp - QTime PHP implementation.
+ * begin           : Sun Jan  8 02:08:27 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include <QTime>
+#include "../php_qt.h"
+
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  hour
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, hour){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			RETURN_LONG(obj->hour());
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  isValid
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, isValid){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isValid());
+
+	if (ZEND_NUM_ARGS() == 4){
+		/* llll */
+		long var_llll_0;    // default: 
+		long var_llll_1;    // default: 
+		long var_llll_2;    // default: 
+		long var_llll_3;    // default: 0
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  elapsed
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, elapsed){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			RETURN_LONG(obj->elapsed());
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  toString
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, toString){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* s */
+		char* var_s_0;   // default: Qt::TextDate
+		int* len_s_0;
+
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s|", &var_s_0, &len_s_0) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+
+			
+		}
+		/* o */
+		zval* z_var_o_1;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+
+			QString tmp_o_0(var_o_1->metaObject()->className());
+			
+			if(tmp_o_0 == "const QString&") {
+				QString return_object = (QString) obj->toString((const QString&) var_o_1);
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  msec
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, msec){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			RETURN_LONG(obj->msec());
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  secsTo
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, secsTo){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o */
+		zval* z_var_o_0;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QTime&") {
+				RETURN_LONG(obj->secsTo((const QTime&) var_o_0));
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  restart
+ *    flags:    
+ */
+ZEND_METHOD(QTime, restart){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			RETURN_LONG(obj->restart());
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  fromString
+ *    flags:    s
+ */
+ZEND_METHOD(QTime, fromString){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* oo */
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			
+			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
+				QTime return_object = (QTime) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+			}
+		}
+		/* os */
+		zval* z_var_os_2;   // default: 
+		char* var_os_3;   // default: Qt::TextDate
+		int* len_os_3;
+
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|", &z_var_os_2, &var_os_3, &len_os_3) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			QObject* var_os_2 = (QObject*) php_qt_fetch(z_var_os_2);
+
+			QString tmp_os_0(var_os_2->metaObject()->className());
+			
+			if(tmp_os_0 == "const QString&") {
+				QTime return_object = (QTime) obj->fromString((const QString&) var_os_2, (const char*) var_os_3);
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  second
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, second){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			RETURN_LONG(obj->second());
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  addSecs
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, addSecs){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  addMSecs
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, addMSecs){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l */
+		long var_l_0;    // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  setHMS
+ *    flags:    
+ */
+ZEND_METHOD(QTime, setHMS){
+
+	if (ZEND_NUM_ARGS() == 4){
+		/* llll */
+		long var_llll_0;    // default: 
+		long var_llll_1;    // default: 
+		long var_llll_2;    // default: 
+		long var_llll_3;    // default: 0
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+
+			
+		}
+	}
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  minute
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, minute){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			RETURN_LONG(obj->minute());
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  currentTime
+ *    flags:    s
+ */
+ZEND_METHOD(QTime, currentTime){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			QTime return_object = (QTime) obj->currentTime();
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QTime_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = &return_object;                                       
+			php_qt_register(return_value,le);                   
+			return;                                             
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  isNull
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, isNull){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isNull());
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  msecsTo
+ *    flags:    c
+ */
+ZEND_METHOD(QTime, msecsTo){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o */
+		zval* z_var_o_0;   // default: 
+
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QTime&") {
+				RETURN_LONG(obj->msecsTo((const QTime&) var_o_0));
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QTime */
+/*
+ *    function  start
+ *    flags:    
+ */
+ZEND_METHOD(QTime, start){
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+			obj->start();
+			RETURN_NULL();
+}
+
+
+
+ZEND_METHOD(QTime,__construct){
+
+	QTime *QTime_ptr = new QTime();
+
+	if(ZEND_NUM_ARGS() == 0){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
+			return;
+		}
+	}
+
+/*	if(ZEND_NUM_ARGS() == 4){
+		zval* param_0;
+		zval* param_1;
+		zval* param_2;
+		zval* param_3;
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
+			return;
+		}
+
+		if(Z_TYPE_P(param_0) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_0));
+			QTime_ptr = new QTime(tmp);
+		}
+
+		if(Z_TYPE_P(param_1) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_1));
+			QTime_ptr = new QTime(tmp);
+		}
+
+		if(Z_TYPE_P(param_2) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_2));
+			QTime_ptr = new QTime(tmp);
+		}
+
+		if(Z_TYPE_P(param_3) == IS_LONG) {
+			int tmp(Z_STRVAL_P(param_3));
+			QTime_ptr = new QTime(tmp);
+		}
+	}
+*/
+	PHP_QT_REGISTER(QTime_ptr);
+	RETURN_NULL();
+}
+
+PHP_QT_DESTRUCT(QTime);
+

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/php_qt.cpp	2006-01-08 01:14:05 UTC (rev 158)
@@ -64,6 +64,8 @@
 zend_class_entry *QFrame_ce_ptr;
 zend_class_entry *QLCDNumber_ce_ptr;
 
+#include "ag_zend_class_entry.h"
+
 /* {{{ php_qt_functions[]
  *
  * Every user visible function must have an entry in php_qt_functions[].
@@ -333,6 +335,8 @@
 
 //    objects_handle = zend_register_list_destructors_ex(NULL,NULL,"Qt Wrapper",module_number);
 
+#include "ag_qt_minit.h"
+
 	return SUCCESS;
 }
 /* }}} */
@@ -1364,6 +1368,8 @@
 
 }
 
+#include "ag_php_qt_cpp.h"
+
 /* }}} */
 /* The previous line is meant for vim and emacs, so it can correctly fold and 
    unfold functions in source code. See the corresponding marks just before 

Modified: trunk/qt/php_qt.h
===================================================================
--- trunk/qt/php_qt.h	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/php_qt.h	2006-01-08 01:14:05 UTC (rev 158)
@@ -380,3 +380,5 @@
 extern zend_class_entry *QLineEdit_ce_ptr;
 extern zend_class_entry *QFrame_ce_ptr;
 extern zend_class_entry *QLCDNumber_ce_ptr;
+
+#include "ag_extern_zend_class_entry.h"

Modified: trunk/qt/zend_php_qt.h
===================================================================
--- trunk/qt/zend_php_qt.h	2006-01-06 23:50:37 UTC (rev 157)
+++ trunk/qt/zend_php_qt.h	2006-01-08 01:14:05 UTC (rev 158)
@@ -570,6 +570,8 @@
 ZEND_METHOD(QLCDNumber, tr);
 ZEND_METHOD(QLCDNumber, trUtf8);
 
+#include "ag_zend_php_qt.h"
+
 /* 
   	Declare any global variables you may need between the BEGIN
 	and END macros here:     



From letux at berlios.de  Sun Jan  8 03:09:32 2006
From: letux at berlios.de (letux at BerliOS)
Date: Sun, 8 Jan 2006 03:09:32 +0100
Subject: [Php-qt-svn] r159 - in trunk/qt: . object_model text_related
Message-ID: <200601080209.k0829WKI007149@sheep.berlios.de>

Author: letux
Date: 2006-01-08 03:09:14 +0100 (Sun, 08 Jan 2006)
New Revision: 159

Modified:
   trunk/qt/object_model/qobject.cpp
   trunk/qt/php_qt.cpp
   trunk/qt/text_related/qstring.cpp
Log:
correct some pointer bugs on SIGNAL/SLOT/QString/QObject

Modified: trunk/qt/object_model/qobject.cpp
===================================================================
--- trunk/qt/object_model/qobject.cpp	2006-01-08 01:14:05 UTC (rev 158)
+++ trunk/qt/object_model/qobject.cpp	2006-01-08 02:09:14 UTC (rev 159)
@@ -259,7 +259,7 @@
 }
 
 ZEND_METHOD(QObject,killTimer){
-    long *id_;
+    long id_;
     if(zend_parse_parameters_ex(0,ZEND_NUM_ARGS() TSRMLS_CC,"l", &id_) == FAILURE) {
         return;
     }
@@ -362,7 +362,7 @@
 }
 
 ZEND_METHOD(QObject,startTimer){    
-    long *interval;
+    long interval;
     if(zend_parse_parameters_ex(0,ZEND_NUM_ARGS() TSRMLS_CC,"l", &interval) == FAILURE) {
         return;
     }

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-08 01:14:05 UTC (rev 158)
+++ trunk/qt/php_qt.cpp	2006-01-08 02:09:14 UTC (rev 159)
@@ -413,7 +413,7 @@
 PHP_FUNCTION(SIGNAL)
 {
     const char* string;
-    int* string_len;
+    int string_len;
     if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s",&string,&string_len)) {
         return;
     }
@@ -433,7 +433,7 @@
 PHP_FUNCTION(SLOT)
 {
     const char* string;
-    int* string_len;
+    int string_len;
     if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s",&string,&string_len)) {
         return;
     }

Modified: trunk/qt/text_related/qstring.cpp
===================================================================
--- trunk/qt/text_related/qstring.cpp	2006-01-08 01:14:05 UTC (rev 158)
+++ trunk/qt/text_related/qstring.cpp	2006-01-08 02:09:14 UTC (rev 159)
@@ -70,7 +70,7 @@
 
 ZEND_METHOD(QString,at){
 
-    int *i;
+    int i;
     QString *QString_ptr = (QString *) PHP_QT_FETCH();
 
     if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &i) != FAILURE) {



From tm243 at berlios.de  Sun Jan  8 11:41:15 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 8 Jan 2006 11:41:15 +0100
Subject: [Php-qt-svn] r160 - trunk/tools
Message-ID: <200601081041.k08AfFhs029335@sheep.berlios.de>

Author: tm243
Date: 2006-01-08 11:41:14 +0100 (Sun, 08 Jan 2006)
New Revision: 160

Modified:
   trunk/tools/kalyptusCxxToPHP.pm
Log:
some bugfixes were done.

Modified: trunk/tools/kalyptusCxxToPHP.pm
===================================================================
--- trunk/tools/kalyptusCxxToPHP.pm	2006-01-08 02:09:14 UTC (rev 159)
+++ trunk/tools/kalyptusCxxToPHP.pm	2006-01-08 10:41:14 UTC (rev 160)
@@ -14,11 +14,15 @@
 # *                                                                         *
 #***************************************************************************/
 
+#   - multiple inherits
+#   - method overloading, marshalling
+#   - return values
+
 # TODO
 #   - support for all types in method calls
 #   - fit cplusplusToZEND, cplusplusToInvoke, cplusplusToMacro
 #   - setter methods support only one php property (adequate, I believe)
-#   - snippets for the config.m4 file and the QDate_ce_ptr pointer
+#   - marshalling in constructor, destructor
 
 package kalyptusCxxToPHP;
 
@@ -37,7 +41,7 @@
 
 use vars qw/ @clist $host $who $now $gentext %functionId $docTop
 	$lib $rootnode $outputdir $opt $debug $typeprefix $eventHandlerCount
-	$pastaccess $pastname $pastreturn $pastparams $nullctor $ctorCount @properties @functions @constructors %methods *CLASS *ZEND_PHP_QT *HEADER *AG_ZEND_CLASS_ENTRY *AG_EXTERN_ZEND_CLASS_ENTRY *AG_VOID_REGISTER *AG_ZEND_PHP_QT *AG_CONFIGM4 *AG_QT_MINIT *AG_PHP_QT_CPP *QTCTYPES *KDETYPES /;
+	$pastaccess $pastname $pastreturn $pastparams $nullctor $ctorCount @properties @functions @constructors %methods *CLASS *HEADER *AG_ZEND_CLASS_ENTRY *AG_EXTERN_ZEND_CLASS_ENTRY *AG_VOID_REGISTER *AG_ZEND_PHP_QT *AG_CONFIGM4 *AG_QT_MINIT *AG_PHP_QT_CPP *QTCTYPES *KDETYPES /;
 
 BEGIN
 {
@@ -390,6 +394,7 @@
 	}
 }
 
+# deprecated
 sub cplusplusToMacro
 {
 	my ( $class, $cnode )  = @_;
@@ -590,7 +595,7 @@
     $access = uc($access);
     $access =~ s/_SLOTS//;
     $access =~ s/_SIGNALS//;
-#    print PHP_QT_CPP "\tZEND_ME(",$classname,",",$functionname,",NULL,ZEND_ACC_",$access,")\n";
+
     print AG_PHP_QT_CPP "\tZEND_ME(",$classname,",",$functionname,",NULL,ZEND_ACC_",$access,")\n";
 
 }
@@ -602,13 +607,9 @@
 	$debug = $main::debuggen;
 
 	mkpath( $outputdir ) unless -f $outputdir;
-    mkpath( $outputdir."/generated/" ) unless -f $outputdir."/generated/";
+    mkpath( $outputdir."/classes/" ) unless -f $outputdir."/classes/";
 
 # open files
-    # make zend_php_qt.h header file
-	my $file_zend_php_qt = "$outputdir/zend_php_qt.h";
-	open( ZEND_PHP_QT, ">$file_zend_php_qt" ) || die "Couldn't create $file_zend_php_qt\n";
-	$file_zend_php_qt =~ s/\.h/.h/;
 
     # AG_ZEND_CLASS_ENTRY
     my $file_ag_zend_class_entry = "$outputdir/ag_zend_class_entry.h";
@@ -620,11 +621,6 @@
     open( AG_EXTERN_ZEND_CLASS_ENTRY, ">$file_ag_extern_zend_class_entry" ) || die "Couldn't create $file_ag_extern_zend_class_entry\n";
     $file_ag_extern_zend_class_entry =~ s/\.h/.h/;
 
-#     # AG_VOID_REGISTER
-#     my $file_ag_void_register = "$outputdir/ag_void_register.h";
-#     open( AG_VOID_REGISTER, ">$file_ag_void_register" ) || die "Couldn't create $file_ag_void_register\n";
-#     $file_ag_void_register =~ s/\.h/.h/;
-
     # AG_ZEND_PHP_QT
     my $file_ag_zend_php_qt = "$outputdir/ag_zend_php_qt.h";
     open( AG_ZEND_PHP_QT, ">$file_ag_zend_php_qt" ) || die "Couldn't create $file_ag_zend_php_qt\n";
@@ -693,24 +689,12 @@
 PHP_FUNCTION(SLOT);
     \n\n";
 
-# deprecated
-    # make zend_php.cpp snippets file
-# 	my $file_php_qt_cpp = "$outputdir/php_qt.snippets.cpp";
-# 	open( PHP_QT_CPP, ">$file_php_qt_cpp" ) || die "Couldn't create $file_php_qt_cpp\n";
-# 	$file_php_qt_cpp =~ s/\.h/.h/;
-
-#    print PHP_QT_CPP "/**/\n";
-
-# deprecated
-    # make zend_php.cpp second snippets file PHP_MINIT_FUNCTION
 	my $file_php_qt_minit = "$outputdir/php_qt.snippets2.cpp";
 	open( PHP_QT_MINIT, ">$file_php_qt_minit" ) || die "Couldn't create $file_php_qt_minit\n";
 	$file_php_qt_minit =~ s/\.h/.h/;
 
-#    print PHP_QT_CPP "\n";
     print PHP_QT_MINIT "\n";
 
-
 	# Document all compound nodes
 	Iter::LocalCompounds( $rootnode, sub { writeClassDoc( shift ); } );
 
@@ -754,14 +738,10 @@
     ";
 
 # close files
-#    close ZEND_PHP_QT;
 
-#    print PHP_QT_CPP "\n";
-#    close PHP_QT_CPP;
-
     close AG_ZEND_CLASS_ENTRY;
     close AG_EXTERN_ZEND_CLASS_ENTRY;
-#    close AG_VOID_REGISTER;
+
     close AG_ZEND_PHP_QT;
     close AG_CONFIGM4;
     close AG_QT_MINIT;
@@ -797,7 +777,7 @@
 	}
 # make the class file
 	my $file = join("__", kdocAstUtil::heritage($node)).".cpp";
-    $file = $outputdir."generated/".lc($file);
+    $file = $outputdir."classes/".lc($file);
 	my $docnode = $node->{DocNode};
 	my @list = ();
 	my $version = undef;
@@ -841,17 +821,16 @@
 
     print CLASS "
 #include <iostream>
-using namespace std;
+using namespace std;\n";
 
-#include \"../php_qt.h\"\n";
+    print CLASS "\n#include <$node->{astNodeName}>\n";
+    print CLASS "#include \"../php_qt.h\"\n\n";
 
-# php_qt.cpp
-#    print PHP_QT_CPP "static zend_function_entry ",$node->{astNodeName},"_methods[] = {\n";
     print AG_PHP_QT_CPP "static zend_function_entry ",$node->{astNodeName},"_methods[] = {\n";
 
 
     print AG_ZEND_CLASS_ENTRY "zend_class_entry *",$node->{astNodeName},"_ce_ptr;\n";
-    print AG_CONFIGM4 "\tqt/generated/",uc($node->{astNodeName}),".cpp \\ \n";
+    print AG_CONFIGM4 "\tqt/classes/",lc($node->{astNodeName}),".cpp \\ \n";
     print AG_EXTERN_ZEND_CLASS_ENTRY "extern zend_class_entry *",$node->{astNodeName},"_ce_ptr;\n";
     print AG_EXTERN_ZEND_CLASS_ENTRY "void \t_register_",$node->{astNodeName},"();\n";
 
@@ -912,11 +891,11 @@
 # CLASS
 	} else {
 
-        print CLASS "\n#include <$node->{astNodeName}>\n\n";
+        print CLASS "\n#include <",$node->{astNodeName},">\n\n";
         print ZEND_PHP_QT "\n\n/* $node->{astNodeName} */";
 
 	}
-# JNISOURCE? seems to be from JNI
+# JNISOURCE?
 	Iter::MembersByType ( $node,
 		sub { print CLASS "", $_[0], ""; print JNISOURCE "", $_[0], "";  },
 		sub {	my ($node, $kid ) = @_;
@@ -965,6 +944,7 @@
         my $first = 1;
 
         foreach my $m_ (@methods_){
+# params
             foreach my $n_ (@{$m_}){
 
             if($first == 1){
@@ -976,7 +956,6 @@
                 print CLASS "ZEND_METHOD(",$node->{astNodeName},", ",$n_->{astNodeName},"){\n";
             }
 
-
                 my $count = 0;
                 foreach $b ( @{$n_->{ParamList}} ) {
                     $count++;
@@ -1074,10 +1053,6 @@
 	close CLASS;
 	$nullctor = 0;
 
-# php_qt.cpp
-#     print PHP_QT_CPP "
-# 	{NULL,NULL,NULL}
-# };\n";
     print AG_PHP_QT_CPP "
     {NULL,NULL,NULL}
 };\n";
@@ -1096,13 +1071,6 @@
         }
 	}
 
-#     print PHP_QT_CPP "
-# void _register_",$node->{astNodeName},"(TSRMLS_D)
-# {
-#     zend_class_entry ce;
-#     INIT_CLASS_ENTRY(ce,\"",$node->{astNodeName},"\",",$node->{astNodeName},"_methods);
-#     ",$zend_inherit,"
-# ";
     print AG_PHP_QT_CPP "
 void _register_",$node->{astNodeName},"(TSRMLS_D)
 {
@@ -1115,9 +1083,6 @@
 		sub { print CLASS "", $_[0], ""; print CLASS "", $_[0], "";  },
 		sub {	my ($node, $kid ) = @_;
             if ($kid->{NodeType} eq "property"){
-#                 print PHP_QT_CPP
-# #                    "zend_declare_property_string(",$node->{astNodeName},"_ce_ptr,\"",$kid->{astNodeName},"\",strlen(\"",$kid->{astNodeName},"\"),\"\",ZEND_ACC_PROTECTED TSRMLS_CC);";
-#                      "\tPHP_QT_DECLARE_PROPERTY(\"$kid->{astNodeName}\");\n";
                 print AG_PHP_QT_CPP
 #                    "zend_declare_property_string(",$node->{astNodeName},"_ce_ptr,\"",$kid->{astNodeName},"\",strlen(\"",$kid->{astNodeName},"\"),\"\",ZEND_ACC_PROTECTED TSRMLS_CC);";
                      "\tPHP_QT_DECLARE_PROPERTY(\"$kid->{astNodeName}\");\n";
@@ -1127,8 +1092,6 @@
 		sub { print CLASS ""; print JNISOURCE ""; }
 	);
 
-#     print PHP_QT_CPP "
-# }\n";
     print AG_PHP_QT_CPP "
 }\n";
 
@@ -1165,8 +1128,6 @@
 		$name = "~".$name;
 	}
 
-#print_r($m);
-
     $function = $name;
 
 	$function =~ s/~//;
@@ -1414,7 +1375,7 @@
     }
 }
 
-# diese Methode gruppiert alle Argumente nach Anzahl
+# groups arguments regarding argument count
 
 sub mergeNumbers
 {
@@ -1452,6 +1413,9 @@
     foreach my $method (@args){
         my $paramstring = "";
         foreach my $param ( @{$method->{ParamList}} ) {
+
+            $param = checkEnum($param);
+
             if ( $param->{ArgType} =~ /char/ ) {
                 $paramstring .= "s";
             } elsif ( $param->{ArgType} =~ /int/ ) {
@@ -1528,6 +1492,7 @@
         my $access = $method->{Access};
         my $object_selection = "";
         my $tmp_count = 0;          # helping
+        my $c__ = $c;                # ugly
 
 # informations about return type
 
@@ -1546,56 +1511,59 @@
                 $param_zend_function .= " ,";
             }
 
+            $first_param = checkEnum($first_param);
+
             # the types
 # char
             if ( $first_param->{ArgType} =~ /char/ ) {
-                $return .= "\t\tchar* var_".$run.$c.";   // default: ".$first_param->{DefaultValue}."\n";
-                $return .= "\t\tint* len_".$run.$c.";\n\n";
+                $return .= "\t\tchar* var_".$run.$c__.";   // default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tint* len_".$run.$c__.";\n\n";
 
-                $paratype .= ", &var_".$c.", &len_".$c;
-                $param_zend_function .= " var_".$c;
+                $paratype .= ", &var_".$run.$c__.", &len_".$run.$c__;
+                $param_zend_function .= " (".$first_param->{ArgType}.") var_".$run.$c__;
                 $shortstring .= "s";
 # int
             } elsif ( $first_param->{ArgType} =~ /int/ ) {
-                $return .= "\t\tlong var_".$run.$c.";    // default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tlong var_".$run.$c__.";    // default: ".$first_param->{DefaultValue}."\n";
 
-                $paratype .= ", &var_".$run.$c;
-                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c;
+                $paratype .= ", &var_".$run.$c__;
+                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c__;
                 $shortstring .= "l";
 # bool
             } elsif ( $first_param->{ArgType} =~ /bool/ ) {
-                $return .= "\t\tbool* var_".$run.$c.";   // _default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tbool* var_".$run.$c__.";   // _default: ".$first_param->{DefaultValue}."\n";
 
-                $paratype .= ", &var_".$run.$c;
-                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c;
+                $paratype .= ", &var_".$run.$c__;
+                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c__;
                 $shortstring .= "b";
 # objects
             } else {
 # while overloading, only one object will be created, query for name
 
-                $return .= "\t\tzval* var_".$run.$c.";   // default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tzval* z_var_".$run.$c__.";   // default: ".$first_param->{DefaultValue}."\n";
 
-                $paratype .= ", &var_".$run.$c;
-                $param_zend_function .= "() var_o_".$c; # deprecated
+                $paratype .= ", &z_var_".$run.$c__;
+                $param_zend_function .= "() var_o_".$c__; # deprecated
                 $shortstring .= "o";
-                push @objects, "var_o_".$c;   # ?
+                push @objects, "var_".$run.$c__;   # ?
                 # name query
-                $object_selection .= "\t\t\tQString tmp_".$tmp_count++."(var_o_".$c."->metaObject()->className());\n";
+                $object_selection .= "\t\t\tQString tmp_".$run.$tmp_count++."(var_".$run.$c__."->metaObject()->className());\n";
             }
             if(exists $first_param->{DefaultValue} != ""){
                 $shortstring .= "|";
             }
-            $c++;
+            $c__++;
             $d++;
         }
         $return .= "\n";
 # add additional objects
-        
+
         foreach my $params (@{$method->{params}}){
-            
+
             my $skip_first = 1;
             $tmp_count = 0;
-            $c = 0;
+#            $c = $c__;
+            my $c_ = 0;
 
 # skip first, this was already created
             my $object_test;
@@ -1604,6 +1572,8 @@
 # parse the rest
             foreach my $param ( @{$params->{ParamList}} ) {
 
+                $param = checkEnum($param);
+
                 if($skip_first == 1){
                     $object_selection .= "\t\t\t";
                     $skip_first = 0;
@@ -1624,9 +1594,16 @@
                     } else {
                         $object_test .= " && ";
                     }
-                    $object_test .= "tmp_".$tmp_count++." == \"".$param->{ArgType}."\"";
-                    $object_call .= "(".$param->{ArgType}.") ".$objects[$c++];
+                    $object_test .= "tmp_".$run.$tmp_count++." == \"".$param->{ArgType}."\"";
+# here: check Qt::anymember
+#                     if($param->{ArgType} =~ /Qt::/){
+#                         $param->{ArgType} = kalyptusDataDict::ctypemap($param->{ArgType});
+#                     }
+
+                    $object_call .= "(".$param->{ArgType}.") ".$objects[$c_++];
+
                 }
+                $c++;
             } # foreach param
 
             if(!$obj_first){
@@ -1645,7 +1622,7 @@
 # objects as return type
         my $obj;
         foreach $obj ( @objects ) {
-            $return .= "\t\t\tQObject* ".$obj." = (QObject*) php_qt_fetch(".$obj.");\n";
+            $return .= "\t\t\tQObject* ".$obj." = (QObject*) php_qt_fetch(z_".$obj.");\n";
         }
 
 # add object handling
@@ -1680,7 +1657,6 @@
         $access = uc($access);
         $access =~ s/_SLOTS//;
         $access =~ s/_SIGNALS//;
-#        print PHP_QT_CPP "\tZEND_ME(",$classname,",",$method->{methodname},",NULL,ZEND_ACC_",$access,")\n";
         print AG_PHP_QT_CPP "\tZEND_ME(",$classname,",",$method->{methodname},",NULL,ZEND_ACC_",$access,")\n";
 
     } # foreach args
@@ -1699,8 +1675,8 @@
     my $return;
 
 # no arguments, no object created
-    if($param_zend_function == ""){
-        $return .= "\t\t\t".$classname." *obj = (".$classname.") PHP_QT_FETCH();\n";
+    if($param_zend_function eq ""){
+        $return .= "\t\t\t".$classname." *obj = (".$classname."*) PHP_QT_FETCH();\n";
     }
 
     my $methodname;
@@ -1738,5 +1714,22 @@
 
 }
 
+sub checkEnum(){
+    my ($param) = @_;
+
+    if($param->{ArgType} =~ /Qt::/){
+
+        my $ArgType = kalyptusDataDict::ctypemap($param->{ArgType});
+
+        if($ArgType eq ""){
+            $ArgType = "int";
+        }
+
+        $param->{ArgType} = $ArgType;
+    }
+
+    return $param;
+}
+
 1;
 



From tm at ippfp.org  Sun Jan  8 12:12:33 2006
From: tm at ippfp.org (Thomas Moenicke)
Date: Sun, 8 Jan 2006 12:12:33 +0100
Subject: [Php-qt-svn] r161 - in trunk/playground: . classes
Message-ID: <200601081212.33676.tm@ippfp.org>

Author: tm243
Date: 2006-01-08 12:05:29 +0100 (Sun, 08 Jan 2006)
New Revision: 161

Added:
   trunk/playground/QLayoutItemInterface.cpp
   trunk/playground/ag_configm4.h
   trunk/playground/ag_extern_zend_class_entry.h
   trunk/playground/ag_php_qt_cpp.h
   trunk/playground/ag_qt_minit.h
   trunk/playground/ag_zend_class_entry.h
   trunk/playground/classes/
   trunk/playground/classes/qabstractbutton.cpp
   trunk/playground/classes/qabstractslider.cpp
   trunk/playground/classes/qactionevent.cpp
   trunk/playground/classes/qapplication.cpp
   trunk/playground/classes/qboxlayout.cpp
   trunk/playground/classes/qchar.cpp
   trunk/playground/classes/qcharref.cpp
   trunk/playground/classes/qclipboardevent.cpp
   trunk/playground/classes/qcloseevent.cpp
   trunk/playground/classes/qcontextmenuevent.cpp
   trunk/playground/classes/qcoreapplication.cpp
   trunk/playground/classes/qdate.cpp
   trunk/playground/classes/qdatetime.cpp
   trunk/playground/classes/qdragenterevent.cpp
   trunk/playground/classes/qdragleaveevent.cpp
   trunk/playground/classes/qdragmoveevent.cpp
   trunk/playground/classes/qdragresponseevent.cpp
   trunk/playground/classes/qdropevent.cpp
   trunk/playground/classes/qfileopenevent.cpp
   trunk/playground/classes/qfocusevent.cpp
   trunk/playground/classes/qfont.cpp
   trunk/playground/classes/qframe.cpp
   trunk/playground/classes/qgridlayout.cpp
   trunk/playground/classes/qhboxlayout.cpp
   trunk/playground/classes/qhelpevent.cpp
   trunk/playground/classes/qhideevent.cpp
   trunk/playground/classes/qhoverevent.cpp
   trunk/playground/classes/qicondragevent.cpp
   trunk/playground/classes/qinputevent.cpp
   trunk/playground/classes/qinputmethodevent.cpp
   trunk/playground/classes/qinputmethodevent__attribute.cpp
   trunk/playground/classes/qkeyevent.cpp
   trunk/playground/classes/qlabel.cpp
   trunk/playground/classes/qlatin1char.cpp
   trunk/playground/classes/qlatin1string.cpp
   trunk/playground/classes/qlayout.cpp
   trunk/playground/classes/qlayoutitem.cpp
   trunk/playground/classes/qlcdnumber.cpp
   trunk/playground/classes/qlineedit.cpp
   trunk/playground/classes/qmouseevent.cpp
   trunk/playground/classes/qmoveevent.cpp
   trunk/playground/classes/qobject.cpp
   trunk/playground/classes/qobjectdata.cpp
   trunk/playground/classes/qobjectuserdata.cpp
   trunk/playground/classes/qpainter.cpp
   trunk/playground/classes/qpaintevent.cpp
   trunk/playground/classes/qpushbutton.cpp
   trunk/playground/classes/qresizeevent.cpp
   trunk/playground/classes/qshortcutevent.cpp
   trunk/playground/classes/qshowevent.cpp
   trunk/playground/classes/qslider.cpp
   trunk/playground/classes/qspaceritem.cpp
   trunk/playground/classes/qstatustipevent.cpp
   trunk/playground/classes/qstring.cpp
   trunk/playground/classes/qtabletevent.cpp
   trunk/playground/classes/qtime.cpp
   trunk/playground/classes/qtimer.cpp
   trunk/playground/classes/qtoolbarchangeevent.cpp
   trunk/playground/classes/qvboxlayout.cpp
   trunk/playground/classes/qwhatsthisclickedevent.cpp
   trunk/playground/classes/qwheelevent.cpp
   trunk/playground/classes/qwidget.cpp
   trunk/playground/classes/qwidgetdata.cpp
   trunk/playground/classes/qwidgetitem.cpp
   trunk/playground/classes/qwindowstatechangeevent.cpp
Removed:
   trunk/playground/QLayoutItemInterface.cpp
   trunk/playground/php_qt.snippets.cpp
   trunk/playground/php_qt.snippets2.cpp
   trunk/playground/qabstractbutton.cpp
   trunk/playground/qabstractslider.cpp
   trunk/playground/qactionevent.cpp
   trunk/playground/qapplication.cpp
   trunk/playground/qboxlayout.cpp
   trunk/playground/qchar.cpp
   trunk/playground/qcharref.cpp
   trunk/playground/qclipboardevent.cpp
   trunk/playground/qcloseevent.cpp
   trunk/playground/qcontextmenuevent.cpp
   trunk/playground/qcoreapplication.cpp
   trunk/playground/qdate.cpp
   trunk/playground/qdatetime.cpp
   trunk/playground/qdragenterevent.cpp
   trunk/playground/qdragleaveevent.cpp
   trunk/playground/qdragmoveevent.cpp
   trunk/playground/qdragresponseevent.cpp
   trunk/playground/qdropevent.cpp
   trunk/playground/qfileopen
-- 
Thomas


From tm243 at berlios.de  Sun Jan  8 15:03:36 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 8 Jan 2006 15:03:36 +0100
Subject: [Php-qt-svn] r162 - trunk/tools
Message-ID: <200601081403.k08E3aCi014494@sheep.berlios.de>

Author: tm243
Date: 2006-01-08 15:03:35 +0100 (Sun, 08 Jan 2006)
New Revision: 162

Modified:
   trunk/tools/kalyptusCxxToPHP.pm
Log:
handling of enum types as method arguments fixed.

Modified: trunk/tools/kalyptusCxxToPHP.pm
===================================================================
--- trunk/tools/kalyptusCxxToPHP.pm	2006-01-08 11:05:29 UTC (rev 161)
+++ trunk/tools/kalyptusCxxToPHP.pm	2006-01-08 14:03:35 UTC (rev 162)
@@ -24,6 +24,8 @@
 #   - setter methods support only one php property (adequate, I believe)
 #   - marshalling in constructor, destructor
 
+#   - enum types support goes wrong
+
 package kalyptusCxxToPHP;
 
 use File::Path;
@@ -689,9 +691,9 @@
 PHP_FUNCTION(SLOT);
     \n\n";
 
-	my $file_php_qt_minit = "$outputdir/php_qt.snippets2.cpp";
-	open( PHP_QT_MINIT, ">$file_php_qt_minit" ) || die "Couldn't create $file_php_qt_minit\n";
-	$file_php_qt_minit =~ s/\.h/.h/;
+#	my $file_php_qt_minit = "$outputdir/php_qt.snippets2.cpp";
+#	open( PHP_QT_MINIT, ">$file_php_qt_minit" ) || die "Couldn't create $file_php_qt_minit\n";
+#	$file_php_qt_minit =~ s/\.h/.h/;
 
     print PHP_QT_MINIT "\n";
 
@@ -1289,7 +1291,7 @@
 # make the cpp file
 # constructor
 		    if ( $name eq $class->{astNodeName} ) {
-                @constructors[$ctorCount++] = [@ctor_params];
+#                @constructors[$ctorCount++] = [@ctor_params];
 # ?
 			    if ($PHPparams eq () ) {
 				    $nullctor = 1;
@@ -1396,7 +1398,6 @@
     $methods{ $functionname } = Ast::New( $functionname );
     $methods{ $functionname }->AddPropList("method",$cnode);
 
-
 }
 
 # finds equal strings and groups them
@@ -1517,9 +1518,9 @@
 # char
             if ( $first_param->{ArgType} =~ /char/ ) {
                 $return .= "\t\tchar* var_".$run.$c__.";   // default: ".$first_param->{DefaultValue}."\n";
-                $return .= "\t\tint* len_".$run.$c__.";\n\n";
+                $return .= "\t\tint len_".$run.$c__.";\n\n";
 
-                $paratype .= ", &var_".$run.$c__.", &len_".$run.$c__;
+                $paratype .= ", &var_".$run.$c__.", len_".$run.$c__;
                 $param_zend_function .= " (".$first_param->{ArgType}.") var_".$run.$c__;
                 $shortstring .= "s";
 # int
@@ -1527,11 +1528,16 @@
                 $return .= "\t\tlong var_".$run.$c__.";    // default: ".$first_param->{DefaultValue}."\n";
 
                 $paratype .= ", &var_".$run.$c__;
-                $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c__;
+# cast if param is an enum
+                if(defined $first_param->{cast}){
+                    $param_zend_function .= "(".$first_param->{cast}.") var_".$run.$c__;
+                } else {
+                    $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c__;
+                }
                 $shortstring .= "l";
 # bool
             } elsif ( $first_param->{ArgType} =~ /bool/ ) {
-                $return .= "\t\tbool* var_".$run.$c__.";   // _default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tlong* var_".$run.$c__.";   // _default: ".$first_param->{DefaultValue}."\n";
 
                 $paratype .= ", &var_".$run.$c__;
                 $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c__;
@@ -1584,21 +1590,22 @@
                 if ( $param->{ArgType} =~ /char/ ) {
                     $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
                 } elsif ( $param->{ArgType} =~ /int/ ) {
-                    $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
+
+                    if(defined $param->{cast}){
+                        $object_call .= "(".$param->{cast}.") var_".$run.$c;
+                    } else {
+                        $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
+                    }
+
                 } elsif ( $param->{ArgType} =~ /bool/ ) {
                     $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
                 } else {
-#print_r($method);
                     if($obj_first == 1){
                         $obj_first = 0;
                     } else {
                         $object_test .= " && ";
                     }
                     $object_test .= "tmp_".$run.$tmp_count++." == \"".$param->{ArgType}."\"";
-# here: check Qt::anymember
-#                     if($param->{ArgType} =~ /Qt::/){
-#                         $param->{ArgType} = kalyptusDataDict::ctypemap($param->{ArgType});
-#                     }
 
                     $object_call .= "(".$param->{ArgType}.") ".$objects[$c_++];
 
@@ -1621,8 +1628,10 @@
 
 # objects as return type
         my $obj;
+        my $objc = 0;
         foreach $obj ( @objects ) {
             $return .= "\t\t\tQObject* ".$obj." = (QObject*) php_qt_fetch(z_".$obj.");\n";
+            $objc++;
         }
 
 # add object handling
@@ -1632,7 +1641,10 @@
             undef $object_selection;
             $return .= "\n";
 # $c counts objects, if there is no object the return mechanism has to be created
-            if($c>0){
+            if($objc == 0){
+                $return .= createReturn($classname, $method, $param_zend_function);
+            }
+            if($c > 0){
                 $return .= "\t\t}\n";
 # break run if there are objects
                 next;
@@ -1640,7 +1652,7 @@
         }
 
 # return handling
-        $return .= createReturn($classname, $method, $param_zend_function);
+#        $return .= createReturn($classname, $method, $param_zend_function);
 
         $return .= "\t\t}\n";
         $tmp_count=0;
@@ -1699,12 +1711,12 @@
         # TODO: consider 'const',
         # and non-pointer types, pointer types
             $return .=  "\t\t\t".$returntype." return_object = (".$returntype.") obj->".$methodname."(".$param_zend_function.");\n";
-            $return .=  "\t\t\tzend_class_entry *ce;                                   \n";
-            $return .=  "\t\t\tobject_init_ex(return_value, ".$classname."_ce_ptr);     \n";
-            $return .=  "\t\t\tzend_rsrc_list_entry le;                            \n";
-            $return .=  "\t\t\tle.ptr = &return_object;                                       \n";
-            $return .=  "\t\t\tphp_qt_register(return_value,le);                   \n";
-            $return .=  "\t\t\treturn;                                             \n";
+            $return .=  "\t\t\t\tzend_class_entry *ce;                                   \n";
+            $return .=  "\t\t\t\tobject_init_ex(return_value, ".$classname."_ce_ptr);     \n";
+            $return .=  "\t\t\t\tzend_rsrc_list_entry le;                            \n";
+            $return .=  "\t\t\t\tle.ptr = &return_object;                                       \n";
+            $return .=  "\t\t\t\tphp_qt_register(return_value,le);                   \n";
+            $return .=  "\t\t\t\treturn;                                             \n";
 # simple types
         } else {
             $return .=  "\t\t\tRETURN_".uc($zend_return_type)."(obj->".$methodname."(".$param_zend_function."));\n" if defined $zend_return_type;
@@ -1725,7 +1737,10 @@
             $ArgType = "int";
         }
 
+# copy the arg type for typecast
+        $param->AddProp("cast",$param->{ArgType});
         $param->{ArgType} = $ArgType;
+
     }
 
     return $param;



From tm243 at berlios.de  Sun Jan  8 22:05:22 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 8 Jan 2006 22:05:22 +0100
Subject: [Php-qt-svn] r163 - trunk/tools
Message-ID: <200601082105.k08L5MKQ029878@sheep.berlios.de>

Author: tm243
Date: 2006-01-08 22:05:22 +0100 (Sun, 08 Jan 2006)
New Revision: 163

Modified:
   trunk/tools/kalyptusCxxToPHP.pm
Log:
bug in argtype bool fixed.

Modified: trunk/tools/kalyptusCxxToPHP.pm
===================================================================
--- trunk/tools/kalyptusCxxToPHP.pm	2006-01-08 14:03:35 UTC (rev 162)
+++ trunk/tools/kalyptusCxxToPHP.pm	2006-01-08 21:05:22 UTC (rev 163)
@@ -1290,14 +1290,17 @@
 
 # make the cpp file
 # constructor
-		    if ( $name eq $class->{astNodeName} ) {
-#                @constructors[$ctorCount++] = [@ctor_params];
-# ?
-			    if ($PHPparams eq () ) {
-				    $nullctor = 1;
-			    }
-# methods
-		    } else {
+            if ( $name eq $class->{astNodeName} ) {
+                $m->{astNodeName} = "__construct";
+            }
+# 		    if ( $name eq $class->{astNodeName} ) {
+# #                @constructors[$ctorCount++] = [@ctor_params];
+# # ?
+# 			    if ($PHPparams eq () ) {
+# 				    $nullctor = 1;
+# 			    }
+# # methods
+#		    } else {
 			    if ( $name =~ /.*Event$/ ) {
 				    return;
 			    }
@@ -1305,7 +1308,7 @@
                 mergeNumbers($class,$m);
 # deprecated
 #                cplusplusToMacro($class,$m);
-   		    }
+   		    #}
 	    }
 	}
 	#Part of the duplicate methods check.
@@ -1537,7 +1540,7 @@
                 $shortstring .= "l";
 # bool
             } elsif ( $first_param->{ArgType} =~ /bool/ ) {
-                $return .= "\t\tlong* var_".$run.$c__.";   // _default: ".$first_param->{DefaultValue}."\n";
+                $return .= "\t\tbool var_".$run.$c__.";   // _default: ".$first_param->{DefaultValue}."\n";
 
                 $paratype .= ", &var_".$run.$c__;
                 $param_zend_function .= "(".$first_param->{ArgType}.") var_".$run.$c__;



From tm at ippfp.org  Sun Jan  8 23:31:45 2006
From: tm at ippfp.org (Thomas Moenicke)
Date: Sun, 8 Jan 2006 23:31:45 +0100
Subject: [Php-qt-svn] r164 - trunk/playground/classes
Message-ID: <200601082331.46133.tm@ippfp.org>

Author: tm243
Date: 2006-01-08 23:22:25 +0100 (Sun, 08 Jan 2006)
New Revision: 164

Modified:
   trunk/playground/classes/qabstractbutton.cpp
   trunk/playground/classes/qabstractslider.cpp
   trunk/playground/classes/qactionevent.cpp
   trunk/playground/classes/qapplication.cpp
   trunk/playground/classes/qboxlayout.cpp
   trunk/playground/classes/qchar.cpp
   trunk/playground/classes/qcharref.cpp
   trunk/playground/classes/qclipboardevent.cpp
   trunk/playground/classes/qcloseevent.cpp
   trunk/playground/classes/qcontextmenuevent.cpp
   trunk/playground/classes/qcoreapplication.cpp
   trunk/playground/classes/qdate.cpp
   trunk/playground/classes/qdatetime.cpp
   trunk/playground/classes/qdragenterevent.cpp
   trunk/playground/classes/qdragleaveevent.cpp
   trunk/playground/classes/qdragmoveevent.cpp
   trunk/playground/classes/qdragresponseevent.cpp
   trunk/playground/classes/qdropevent.cpp
   trunk/playground/classes/qfileopenevent.cpp
   trunk/playground/classes/qfocusevent.cpp
   trunk/playground/classes/qfont.cpp
   trunk/playground/classes/qframe.cpp
   trunk/playground/classes/qgridlayout.cpp
   trunk/playground/classes/qhboxlayout.cpp
   trunk/playground/classes/qhelpevent.cpp
   trunk/playground/classes/qhideevent.cpp
   trunk/playground/classes/qhoverevent.cpp
   trunk/playground/classes/qicondragevent.cpp
   trunk/playground/classes/qinputevent.cpp
   trunk/playground/classes/qinputmethodevent.cpp
   trunk/playground/classes/qinputmethodevent__attribute.cpp
   trunk/playground/classes/qkeyevent.cpp
   trunk/playground/classes/qlabel.cpp
   trunk/playground/classes/qlatin1char.cpp
   trunk/playground/classes/qlatin1string.cpp
   trunk/playground/classes/qlayout.cpp
   trunk/playground/classes/qlayoutitem.cpp
   trunk/playground/classes/qlcdnumber.cpp
   trunk/playground/classes/qlineedit.cpp
   trunk/playground/classes/qmouseevent.cpp
   trunk/playground/classes/qmoveevent.cpp
   trunk/playground/classes/qobject.cpp
   trunk/playground/classes/qobjectdata.cpp
   trunk/playground/classes/qobjectuserdata.cpp
   trunk/playground/classes/qpainter.cpp
   trunk/playground/classes/qpaintevent.cpp
   trunk/playground/classes/qpushbutton.cpp
   trunk/playground/classes/qresizeevent.cpp
   trunk/playground/classes/qshortcutevent.cpp
   trunk/playground/classes/qshowevent.cpp
   trunk/playground/classes/qslider.cpp
   trunk/playground/classes/qspaceritem.cpp
   trunk/playground/classes/qstatustipevent.cpp
   trunk/playground/classes/qstring.cpp
   trunk/playground/classes/qtabletevent.cpp
   trunk/playground/classes/qtime.cpp
   trunk/playground/classes/qtimer.cpp
   trunk/playground/classes/qtoolbarchangeevent.cpp
   trunk/playground/classes/qvboxlayout.cpp
   trunk/playground/classes/qwhatsthisclickedevent.cpp
   trunk/playground/classes/qwheelevent.cpp
   trunk/playground/classes/qwidget.cpp
   trunk/playground/classes/qwidgetdata.cpp
   trunk/playground/classes/qwidgetitem.cpp
   trunk/playground/classes/qwindowstatechangeevent.cpp
Log:
playground updated after bughunting, thanks to Jean-Luc.

Modified: trunk/playground/classes/qabstractbutton.cpp
===================================================================
--- trunk/playground/classes/qabstractbutton.cpp	2006-01-08 21:05:22 UTC (rev 
163)
+++ trunk/playground/classes/qabstractbutton.cpp	2006-01-08 22:22:25 UTC (rev 
164)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QAbstractButton.cpp - QAbstractButton PHP implementation.
- * begin           : Sun Jan  8 12:02:25 2006
+ * begin           : Sun Jan  8 23:20:48 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -31,9 +31,6 @@
 #include "../php_qt.h"
 
 
-#include <QAbstractButton>
-
-
 /*********************************
  *    class     QAbstractButton */
 /*
@@ -55,6 +52,13 @@
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
 			
+			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const 
char*) var_ss_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QAbst
-- 
Thomas


From tm243 at berlios.de  Mon Jan  9 00:38:29 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 9 Jan 2006 00:38:29 +0100
Subject: [Php-qt-svn] r165 - trunk/qt/classes
Message-ID: <200601082338.k08NcTk7029671@sheep.berlios.de>

Author: tm243
Date: 2006-01-09 00:38:27 +0100 (Mon, 09 Jan 2006)
New Revision: 165

Modified:
   trunk/qt/classes/qdate.cpp
   trunk/qt/classes/qdatetime.cpp
   trunk/qt/classes/qtime.cpp
Log:
classes updated: better constructors.

Modified: trunk/qt/classes/qdate.cpp
===================================================================
--- trunk/qt/classes/qdate.cpp	2006-01-08 22:22:25 UTC (rev 164)
+++ trunk/qt/classes/qdate.cpp	2006-01-08 23:38:27 UTC (rev 165)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDate.cpp - QDate PHP implementation.
- * begin           : Sun Jan  8 02:08:27 2006
+ * begin           : Mon Jan  9 00:33:12 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -43,10 +43,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int weekday,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			QString return_object = (QString) obj->longDayName((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -58,8 +66,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, dayOfWeek){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_LONG(obj->dayOfWeek());
+	}
 }
 
 /*********************************
@@ -69,8 +79,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, daysInMonth){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_LONG(obj->daysInMonth());
+	}
 }
 
 /*********************************
@@ -80,8 +92,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, month){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_LONG(obj->month());
+	}
 }
 
 /*********************************
@@ -91,8 +105,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, isValid){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_BOOL(obj->isValid());
+	}
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* lll */
@@ -100,10 +116,12 @@
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
 
+		/* int y, int m, int d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			RETURN_BOOL(obj->isValid((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2));
 		}
 	}
 }
@@ -122,10 +140,12 @@
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
 
+		/* int y, int m, int d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			RETURN_BOOL(obj->setYMD((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2));
 		}
 	}
 }
@@ -142,10 +162,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int month,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			QString return_object = (QString) obj->shortMonthName((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -159,19 +187,26 @@
 ZEND_METHOD(QDate, toString){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: Qt::TextDate
-		int* len_s_0;
+		/* l */
+		long var_l_0;    // default: Qt::TextDate
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s|", &var_s_0, &len_s_0) == SUCCESS) {
+		/* int f,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			QString return_object = (QString) obj->toString((Qt::DateFormat) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QString& format,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -180,12 +215,12 @@
 			
 			if(tmp_o_0 == "const QString&") {
 				QString return_object = (QString) obj->toString((const QString&) var_o_1);
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDate_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 			}
 		}
 	}
@@ -203,10 +238,12 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int year,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			RETURN_BOOL(obj->isLeapYear((int) var_l_0));
 		}
 	}
 }
@@ -223,10 +260,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int jd,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			QDate return_object = (QDate) obj->fromJulianDay((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -238,14 +283,16 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, currentDate){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			QDate return_object = (QDate) obj->currentDate();
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDate_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
 /*********************************
@@ -260,10 +307,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int days,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			QDate return_object = (QDate) obj->addDays((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -275,8 +330,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, day){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_LONG(obj->day());
+	}
 }
 
 /*********************************
@@ -293,10 +350,12 @@
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
 
+		/* int y, int m, int d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			RETURN_LONG(obj->gregorianToJulian((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2));
 		}
 	}
 }
@@ -313,10 +372,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int month,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			QString return_object = (QString) obj->longMonthName((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -336,10 +403,13 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* uint jd, int& y, int& m, int& d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			obj->julianToGregorian((uint) var_llll_0 ,(int&) var_llll_1 ,(int&) var_llll_2 ,(int&) var_llll_3);
+			RETURN_NULL();
 		}
 	}
 }
@@ -347,6 +417,37 @@
 /*********************************
  *    class     QDate */
 /*
+ *    function  QDate
+ *    flags:    
+ */
+ZEND_METHOD(QDate, __construct){
+	if (ZEND_NUM_ARGS() == 0){
+			QDate *QDate_ptr = new QDate();
+			PHP_QT_REGISTER(QDate_ptr);
+			RETURN_NULL();
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* lll */
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: 
+		long var_lll_2;    // default: 
+
+		/* int y, int m, int d,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QDate *obj = (QDate*) PHP_QT_FETCH();
+
+			
+			QDate *QDate_ptr = new QDate((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2);
+			PHP_QT_REGISTER(QDate_ptr);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QDate */
+/*
  *    function  shortDayName
  *    flags:    s
  */
@@ -356,10 +457,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int weekday,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			QString return_object = (QString) obj->shortDayName((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -373,48 +482,48 @@
 ZEND_METHOD(QDate, fromString){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
+		/* ol */
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: Qt::TextDate
 
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		/* const QString& s, int f,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
-				QDate return_object = (QDate) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDate_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+			if(tmp_ol_0 == "const QString&") {
+				QDate return_object = (QDate) obj->fromString((const QString&) var_ol_0, (Qt::DateFormat) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 			}
 		}
-		/* os */
-		zval* z_var_os_2;   // default: 
-		char* var_os_3;   // default: Qt::TextDate
-		int* len_os_3;
+		/* oo */
+		zval* z_var_oo_2;   // default: 
+		zval* z_var_oo_3;   // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|", &z_var_os_2, &var_os_3, &len_os_3) == SUCCESS) {
+		/* const QString& s, const QString& format,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_2, &z_var_oo_3) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
-			QObject* var_os_2 = (QObject*) php_qt_fetch(z_var_os_2);
+			QObject* var_oo_2 = (QObject*) php_qt_fetch(z_var_oo_2);
+			QObject* var_oo_3 = (QObject*) php_qt_fetch(z_var_oo_3);
 
-			QString tmp_os_0(var_os_2->metaObject()->className());
+			QString tmp_oo_0(var_oo_2->metaObject()->className());
+			QString tmp_oo_1(var_oo_3->metaObject()->className());
 			
-			if(tmp_os_0 == "const QString&") {
-				QDate return_object = (QDate) obj->fromString((const QString&) var_os_2, (const char*) var_os_3);
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDate_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
+				QDate return_object = (QDate) obj->fromString((const QString&) var_oo_2, (const QString&) var_oo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 			}
 		}
 	}
@@ -427,8 +536,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, dayOfYear){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_LONG(obj->dayOfYear());
+	}
 }
 
 /*********************************
@@ -443,10 +554,12 @@
 		/* l */
 		long var_l_0;    // default: 0
 
+		/* int* yearNum,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			RETURN_LONG(obj->weekNumber((int*) var_l_0));
 		}
 	}
 }
@@ -463,10 +576,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int months,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			QDate return_object = (QDate) obj->addMonths((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -478,8 +599,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, toJulianDay){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_LONG(obj->toJulianDay());
+	}
 }
 
 /*********************************
@@ -494,10 +617,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int years,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
+			QDate return_object = (QDate) obj->addYears((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDate_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -514,6 +645,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QDate& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -534,8 +666,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, isNull){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_BOOL(obj->isNull());
+	}
 }
 
 /*********************************
@@ -545,8 +679,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, year){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_LONG(obj->year());
+	}
 }
 
 /*********************************
@@ -556,44 +692,12 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, daysInYear){
+	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_LONG(obj->daysInYear());
+	}
 }
 
 
-
-ZEND_METHOD(QDate,__construct){
-
-	QDate *QDate_ptr = new QDate();
-
-
-	if(ZEND_NUM_ARGS() == 3){
-		zval* param_0;
-		zval* param_1;
-		zval* param_2;
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_0, &param_1, &param_2) == FAILURE) {
-			return;
-		}
-		 /*long y int*/
-/*		if(Z_TYPE_P(param_0) == IS_LONG) {
-			int tmp(Z_STRVAL_P(param_0));
-			QDate_ptr = new QDate(tmp);
-		}
-*/		 /*long m int*/
-/*		if(Z_TYPE_P(param_1) == IS_LONG) {
-			int tmp(Z_STRVAL_P(param_1));
-			QDate_ptr = new QDate(tmp);
-		}
-*/		 /*long d int*/
-/*		if(Z_TYPE_P(param_2) == IS_LONG) {
-			int tmp(Z_STRVAL_P(param_2));
-			QDate_ptr = new QDate(tmp);
-		}
-*/	}
-
-	PHP_QT_REGISTER(QDate_ptr);
-	RETURN_NULL();
-}
-
 PHP_QT_DESTRUCT(QDate);
 

Modified: trunk/qt/classes/qdatetime.cpp
===================================================================
--- trunk/qt/classes/qdatetime.cpp	2006-01-08 22:22:25 UTC (rev 164)
+++ trunk/qt/classes/qdatetime.cpp	2006-01-08 23:38:27 UTC (rev 165)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDateTime.cpp - QDateTime PHP implementation.
- * begin           : Sun Jan  8 02:08:27 2006
+ * begin           : Mon Jan  9 00:33:12 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,14 +38,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, time){
+	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QTime return_object = (QTime) obj->time();
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDateTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
 /*********************************
@@ -55,14 +57,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, date){
+	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QDate return_object = (QDate) obj->date();
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDateTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
 /*********************************
@@ -72,8 +76,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, isValid){
+	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			RETURN_BOOL(obj->isValid());
+	}
 }
 
 /*********************************
@@ -85,19 +91,26 @@
 ZEND_METHOD(QDateTime, toString){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: Qt::TextDate
-		int* len_s_0;
+		/* l */
+		long var_l_0;    // default: Qt::TextDate
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s|", &var_s_0, &len_s_0) == SUCCESS) {
+		/* int f,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
 			
+			QString return_object = (QString) obj->toString((Qt::DateFormat) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QString& format,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -106,12 +119,12 @@
 			
 			if(tmp_o_0 == "const QString&") {
 				QString return_object = (QString) obj->toString((const QString&) var_o_1);
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDateTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 			}
 		}
 	}
@@ -124,8 +137,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, toTime_t){
+	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			RETURN_LONG(obj->toTime_t());
+	}
 }
 
 /*********************************
@@ -140,10 +155,13 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* uint secsSince1Jan1970UTC,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
 			
+			obj->setTime_t((uint) var_l_0);
+			RETURN_NULL();
 		}
 	}
 }
@@ -160,10 +178,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int days,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
 			
+			QDateTime return_object = (QDateTime) obj->addDays((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -180,6 +206,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QDateTime& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -205,10 +232,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int spec,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
 			
+			QDateTime return_object = (QDateTime) obj->toTimeSpec((Qt::TimeSpec) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -222,48 +257,48 @@
 ZEND_METHOD(QDateTime, fromString){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
+		/* ol */
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: Qt::TextDate
 
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		/* const QString& s, int f,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
-				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDateTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+			if(tmp_ol_0 == "const QString&") {
+				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_ol_0, (Qt::DateFormat) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 			}
 		}
-		/* os */
-		zval* z_var_os_2;   // default: 
-		char* var_os_3;   // default: Qt::TextDate
-		int* len_os_3;
+		/* oo */
+		zval* z_var_oo_2;   // default: 
+		zval* z_var_oo_3;   // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|", &z_var_os_2, &var_os_3, &len_os_3) == SUCCESS) {
+		/* const QString& s, const QString& format,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_2, &z_var_oo_3) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_os_2 = (QObject*) php_qt_fetch(z_var_os_2);
+			QObject* var_oo_2 = (QObject*) php_qt_fetch(z_var_oo_2);
+			QObject* var_oo_3 = (QObject*) php_qt_fetch(z_var_oo_3);
 
-			QString tmp_os_0(var_os_2->metaObject()->className());
+			QString tmp_oo_0(var_oo_2->metaObject()->className());
+			QString tmp_oo_1(var_oo_3->metaObject()->className());
 			
-			if(tmp_os_0 == "const QString&") {
-				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_os_2, (const char*) var_os_3);
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDateTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
+				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_oo_2, (const QString&) var_oo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 			}
 		}
 	}
@@ -276,14 +311,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, timeSpec){
+	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			Qt::TimeSpec return_object = (Qt::TimeSpec) obj->timeSpec();
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDateTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
 /*********************************
@@ -298,6 +335,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QTime& time,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -324,10 +362,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int months,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
 			
+			QDateTime return_object = (QDateTime) obj->addMonths((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -338,11 +384,61 @@
  *    function  QDateTime
  *    flags:    
  */
-/*ZEND_METHOD(QDateTime, QDateTime){
+ZEND_METHOD(QDateTime, __construct){
+	if (ZEND_NUM_ARGS() == 0){
+			QDateTime *QDateTime_ptr = new QDateTime();
+			PHP_QT_REGISTER(QDateTime_ptr);
+			RETURN_NULL();
+	}
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o */
+		zval* z_var_o_0;   // default: 
+
+		/* const QDate& ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			RETURN_~(obj->QDateTime());
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QDate&") {
+				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) var_o_0);
+			PHP_QT_REGISTER(QDateTime_ptr);
+			RETURN_NULL();
+			}			
+			if(tmp_o_0 == "const QDateTime&") {
+				QDateTime *QDateTime_ptr = new QDateTime((const QDateTime&) var_o_0);
+			PHP_QT_REGISTER(QDateTime_ptr);
+			RETURN_NULL();
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* ool */
+		zval* z_var_ool_0;   // default: 
+		zval* z_var_ool_1;   // default: 
+		long var_ool_2;    // default: Qt::LocalTime
+
+		/* const QDate& , const QTime& , int spec,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
+			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
+			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
+			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
+
+			QString tmp_ool_0(var_ool_0->metaObject()->className());
+			QString tmp_ool_1(var_ool_1->metaObject()->className());
+			
+			if(tmp_ool_0 == "const QDate&" && tmp_ool_1 == "const QTime&") {
+				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) var_ool_0, (const QTime&) var_ool_1, (Qt::TimeSpec) var_ool_2);
+			PHP_QT_REGISTER(QDateTime_ptr);
+			RETURN_NULL();
+			}
+		}
+	}
 }
-*/
+
 /*********************************
  *    class     QDateTime */
 /*
@@ -355,10 +451,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int secs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
 			
+			QDateTime return_object = (QDateTime) obj->addSecs((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -375,6 +479,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QDate& date,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -396,14 +501,16 @@
  *    flags:    s
  */
 ZEND_METHOD(QDateTime, currentDateTime){
+	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QDateTime return_object = (QDateTime) obj->currentDateTime();
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDateTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
 /*********************************
@@ -418,6 +525,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QDateTime& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -443,10 +551,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int years,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
 			
+			QDateTime return_object = (QDateTime) obj->addYears((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -458,8 +574,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, isNull){
+	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			RETURN_BOOL(obj->isNull());
+	}
 }
 
 /*********************************
@@ -469,14 +587,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, toUTC){
+	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QDateTime return_object = (QDateTime) obj->toUTC();
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDateTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
 /*********************************
@@ -486,14 +606,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, toLocalTime){
+	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QDateTime return_object = (QDateTime) obj->toLocalTime();
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QDateTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QDateTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
 /*********************************
@@ -508,77 +630,17 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int spec,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
 			
+			obj->setTimeSpec((Qt::TimeSpec) var_l_0);
+			RETURN_NULL();
 		}
 	}
 }
 
 
-
-ZEND_METHOD(QDateTime,__construct){
-
-	QDateTime *QDateTime_ptr = new QDateTime();
-
-	if(ZEND_NUM_ARGS() == 0){
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
-			return;
-		}
-	}
-
-/*	if(ZEND_NUM_ARGS() == 1){
-		zval* param_0;
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_0) == FAILURE) {
-			return;
-		}
-
-		if(Z_TYPE_P(param_0) == IS_OBJECT) {
-			QDate& tmp(Z_STRVAL_P(param_0));
-			QDateTime_ptr = new QDateTime(tmp);
-		}
-	}
-
-	if(ZEND_NUM_ARGS() == 3){
-		zval* param_0;
-		zval* param_1;
-		zval* param_2;
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_0, &param_1, &param_2) == FAILURE) {
-			return;
-		}
-
-		if(Z_TYPE_P(param_0) == IS_OBJECT) {
-			QDate& tmp(Z_STRVAL_P(param_0));
-			QDateTime_ptr = new QDateTime(tmp);
-		}
-
-		if(Z_TYPE_P(param_1) == IS_OBJECT) {
-			QTime& tmp(Z_STRVAL_P(param_1));
-			QDateTime_ptr = new QDateTime(tmp);
-		}
-
-		if(Z_TYPE_P(param_2) == IS_OBJECT) {
-			Qt::TimeSpec tmp(Z_STRVAL_P(param_2));
-			QDateTime_ptr = new QDateTime(tmp);
-		}
-	}
-
-	if(ZEND_NUM_ARGS() == 1){
-		zval* param_0;
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_0) == FAILURE) {
-			return;
-		}
-
-		if(Z_TYPE_P(param_0) == IS_OBJECT) {
-			QDateTime& tmp(Z_STRVAL_P(param_0));
-			QDateTime_ptr = new QDateTime(tmp);
-		}
-	}
-*/
-	PHP_QT_REGISTER(QDateTime_ptr);
-	RETURN_NULL();
-}
-
 PHP_QT_DESTRUCT(QDateTime);
 

Modified: trunk/qt/classes/qtime.cpp
===================================================================
--- trunk/qt/classes/qtime.cpp	2006-01-08 22:22:25 UTC (rev 164)
+++ trunk/qt/classes/qtime.cpp	2006-01-08 23:38:27 UTC (rev 165)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTime.cpp - QTime PHP implementation.
- * begin           : Sun Jan  8 02:08:27 2006
+ * begin           : Mon Jan  9 00:33:12 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,8 +38,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, hour){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			RETURN_LONG(obj->hour());
+	}
 }
 
 /*********************************
@@ -49,8 +51,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, isValid){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			RETURN_BOOL(obj->isValid());
+	}
 
 	if (ZEND_NUM_ARGS() == 4){
 		/* llll */
@@ -59,10 +63,12 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 0
 
+		/* int h, int m, int s, int ms,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
 			
+			RETURN_BOOL(obj->isValid((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3));
 		}
 	}
 }
@@ -74,8 +80,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, elapsed){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			RETURN_LONG(obj->elapsed());
+	}
 }
 
 /*********************************
@@ -87,19 +95,26 @@
 ZEND_METHOD(QTime, toString){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: Qt::TextDate
-		int* len_s_0;
+		/* l */
+		long var_l_0;    // default: Qt::TextDate
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s|", &var_s_0, &len_s_0) == SUCCESS) {
+		/* int f,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
 			
+			QString return_object = (QString) obj->toString((Qt::DateFormat) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QString& format,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -108,12 +123,12 @@
 			
 			if(tmp_o_0 == "const QString&") {
 				QString return_object = (QString) obj->toString((const QString&) var_o_1);
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 			}
 		}
 	}
@@ -126,8 +141,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, msec){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			RETURN_LONG(obj->msec());
+	}
 }
 
 /*********************************
@@ -142,6 +159,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QTime& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -162,8 +180,10 @@
  *    flags:    
  */
 ZEND_METHOD(QTime, restart){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			RETURN_LONG(obj->restart());
+	}
 }
 
 /*********************************
@@ -175,48 +195,48 @@
 ZEND_METHOD(QTime, fromString){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
+		/* ol */
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: Qt::TextDate
 
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		/* const QString& s, int f,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
-				QTime return_object = (QTime) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+			if(tmp_ol_0 == "const QString&") {
+				QTime return_object = (QTime) obj->fromString((const QString&) var_ol_0, (Qt::DateFormat) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 			}
 		}
-		/* os */
-		zval* z_var_os_2;   // default: 
-		char* var_os_3;   // default: Qt::TextDate
-		int* len_os_3;
+		/* oo */
+		zval* z_var_oo_2;   // default: 
+		zval* z_var_oo_3;   // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|", &z_var_os_2, &var_os_3, &len_os_3) == SUCCESS) {
+		/* const QString& s, const QString& format,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_2, &z_var_oo_3) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QObject* var_os_2 = (QObject*) php_qt_fetch(z_var_os_2);
+			QObject* var_oo_2 = (QObject*) php_qt_fetch(z_var_oo_2);
+			QObject* var_oo_3 = (QObject*) php_qt_fetch(z_var_oo_3);
 
-			QString tmp_os_0(var_os_2->metaObject()->className());
+			QString tmp_oo_0(var_oo_2->metaObject()->className());
+			QString tmp_oo_1(var_oo_3->metaObject()->className());
 			
-			if(tmp_os_0 == "const QString&") {
-				QTime return_object = (QTime) obj->fromString((const QString&) var_os_2, (const char*) var_os_3);
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
+				QTime return_object = (QTime) obj->fromString((const QString&) var_oo_2, (const QString&) var_oo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 			}
 		}
 	}
@@ -229,13 +249,47 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, second){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			RETURN_LONG(obj->second());
+	}
 }
 
 /*********************************
  *    class     QTime */
 /*
+ *    function  QTime
+ *    flags:    
+ */
+ZEND_METHOD(QTime, __construct){
+	if (ZEND_NUM_ARGS() == 0){
+			QTime *QTime_ptr = new QTime();
+			PHP_QT_REGISTER(QTime_ptr);
+			RETURN_NULL();
+	}
+
+	if (ZEND_NUM_ARGS() == 4){
+		/* llll */
+		long var_llll_0;    // default: 
+		long var_llll_1;    // default: 
+		long var_llll_2;    // default: 0
+		long var_llll_3;    // default: 0
+
+		/* int h, int m, int s, int ms,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|l|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+			QTime *obj = (QTime*) PHP_QT_FETCH();
+
+			
+			QTime *QTime_ptr = new QTime((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
+			PHP_QT_REGISTER(QTime_ptr);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QTime */
+/*
  *    function  addSecs
  *    flags:    c
  */
@@ -245,10 +299,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int secs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
 			
+			QTime return_object = (QTime) obj->addSecs((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -265,10 +327,18 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ms,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
 			
+			QTime return_object = (QTime) obj->addMSecs((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 		}
 	}
 }
@@ -276,23 +346,19 @@
 /*********************************
  *    class     QTime */
 /*
- *    function  setHMS
- *    flags:    
+ *    function  currentTime
+ *    flags:    s
  */
-ZEND_METHOD(QTime, setHMS){
-
-	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 0
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+ZEND_METHOD(QTime, currentTime){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-
-			
-		}
+			QTime return_object = (QTime) obj->currentTime();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QTime_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 
@@ -303,25 +369,35 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, minute){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			RETURN_LONG(obj->minute());
+	}
 }
 
 /*********************************
  *    class     QTime */
 /*
- *    function  currentTime
- *    flags:    s
+ *    function  setHMS
+ *    flags:    
  */
-ZEND_METHOD(QTime, currentTime){
+ZEND_METHOD(QTime, setHMS){
+
+	if (ZEND_NUM_ARGS() == 4){
+		/* llll */
+		long var_llll_0;    // default: 
+		long var_llll_1;    // default: 
+		long var_llll_2;    // default: 
+		long var_llll_3;    // default: 0
+
+		/* int h, int m, int s, int ms,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QTime return_object = (QTime) obj->currentTime();
-			zend_class_entry *ce;                                   
-			object_init_ex(return_value, QTime_ce_ptr);     
-			zend_rsrc_list_entry le;                            
-			le.ptr = &return_object;                                       
-			php_qt_register(return_value,le);                   
-			return;                                             
+
+			
+			RETURN_BOOL(obj->setHMS((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3));
+		}
+	}
 }
 
 /*********************************
@@ -331,8 +407,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, isNull){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			RETURN_BOOL(obj->isNull());
+	}
 }
 
 /*********************************
@@ -347,6 +425,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QTime& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -367,56 +446,13 @@
  *    flags:    
  */
 ZEND_METHOD(QTime, start){
+	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			obj->start();
 			RETURN_NULL();
+	}
 }
 
 
-
-ZEND_METHOD(QTime,__construct){
-
-	QTime *QTime_ptr = new QTime();
-
-	if(ZEND_NUM_ARGS() == 0){
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
-			return;
-		}
-	}
-
-/*	if(ZEND_NUM_ARGS() == 4){
-		zval* param_0;
-		zval* param_1;
-		zval* param_2;
-		zval* param_3;
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
-			return;
-		}
-
-		if(Z_TYPE_P(param_0) == IS_LONG) {
-			int tmp(Z_STRVAL_P(param_0));
-			QTime_ptr = new QTime(tmp);
-		}
-
-		if(Z_TYPE_P(param_1) == IS_LONG) {
-			int tmp(Z_STRVAL_P(param_1));
-			QTime_ptr = new QTime(tmp);
-		}
-
-		if(Z_TYPE_P(param_2) == IS_LONG) {
-			int tmp(Z_STRVAL_P(param_2));
-			QTime_ptr = new QTime(tmp);
-		}
-
-		if(Z_TYPE_P(param_3) == IS_LONG) {
-			int tmp(Z_STRVAL_P(param_3));
-			QTime_ptr = new QTime(tmp);
-		}
-	}
-*/
-	PHP_QT_REGISTER(QTime_ptr);
-	RETURN_NULL();
-}
-
 PHP_QT_DESTRUCT(QTime);
 



From tm243 at berlios.de  Mon Jan  9 00:40:34 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 9 Jan 2006 00:40:34 +0100
Subject: [Php-qt-svn] r166 - trunk/playground/classes
Message-ID: <200601082340.k08NeYaA032594@sheep.berlios.de>

Author: tm243
Date: 2006-01-09 00:40:22 +0100 (Mon, 09 Jan 2006)
New Revision: 166

Modified:
   trunk/playground/classes/qabstractbutton.cpp
   trunk/playground/classes/qabstractslider.cpp
   trunk/playground/classes/qactionevent.cpp
   trunk/playground/classes/qapplication.cpp
   trunk/playground/classes/qboxlayout.cpp
   trunk/playground/classes/qchar.cpp
   trunk/playground/classes/qcharref.cpp
   trunk/playground/classes/qclipboardevent.cpp
   trunk/playground/classes/qcloseevent.cpp
   trunk/playground/classes/qcontextmenuevent.cpp
   trunk/playground/classes/qcoreapplication.cpp
   trunk/playground/classes/qdate.cpp
   trunk/playground/classes/qdatetime.cpp
   trunk/playground/classes/qdragenterevent.cpp
   trunk/playground/classes/qdragleaveevent.cpp
   trunk/playground/classes/qdragmoveevent.cpp
   trunk/playground/classes/qdragresponseevent.cpp
   trunk/playground/classes/qdropevent.cpp
   trunk/playground/classes/qfileopenevent.cpp
   trunk/playground/classes/qfocusevent.cpp
   trunk/playground/classes/qfont.cpp
   trunk/playground/classes/qframe.cpp
   trunk/playground/classes/qgridlayout.cpp
   trunk/playground/classes/qhboxlayout.cpp
   trunk/playground/classes/qhelpevent.cpp
   trunk/playground/classes/qhideevent.cpp
   trunk/playground/classes/qhoverevent.cpp
   trunk/playground/classes/qicondragevent.cpp
   trunk/playground/classes/qinputevent.cpp
   trunk/playground/classes/qinputmethodevent.cpp
   trunk/playground/classes/qinputmethodevent__attribute.cpp
   trunk/playground/classes/qkeyevent.cpp
   trunk/playground/classes/qlabel.cpp
   trunk/playground/classes/qlatin1char.cpp
   trunk/playground/classes/qlatin1string.cpp
   trunk/playground/classes/qlayout.cpp
   trunk/playground/classes/qlayoutitem.cpp
   trunk/playground/classes/qlcdnumber.cpp
   trunk/playground/classes/qlineedit.cpp
   trunk/playground/classes/qmouseevent.cpp
   trunk/playground/classes/qmoveevent.cpp
   trunk/playground/classes/qobject.cpp
   trunk/playground/classes/qobjectdata.cpp
   trunk/playground/classes/qobjectuserdata.cpp
   trunk/playground/classes/qpainter.cpp
   trunk/playground/classes/qpaintevent.cpp
   trunk/playground/classes/qpushbutton.cpp
   trunk/playground/classes/qresizeevent.cpp
   trunk/playground/classes/qshortcutevent.cpp
   trunk/playground/classes/qshowevent.cpp
   trunk/playground/classes/qslider.cpp
   trunk/playground/classes/qspaceritem.cpp
   trunk/playground/classes/qstatustipevent.cpp
   trunk/playground/classes/qstring.cpp
   trunk/playground/classes/qtabletevent.cpp
   trunk/playground/classes/qtime.cpp
   trunk/playground/classes/qtimer.cpp
   trunk/playground/classes/qtoolbarchangeevent.cpp
   trunk/playground/classes/qvboxlayout.cpp
   trunk/playground/classes/qwhatsthisclickedevent.cpp
   trunk/playground/classes/qwheelevent.cpp
   trunk/playground/classes/qwidget.cpp
   trunk/playground/classes/qwidgetdata.cpp
   trunk/playground/classes/qwidgetitem.cpp
   trunk/playground/classes/qwindowstatechangeevent.cpp
Log:
playground updated: better constructors.

Modified: trunk/playground/classes/qabstractbutton.cpp
===================================================================
--- trunk/playground/classes/qabstractbutton.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qabstractbutton.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QAbstractButton.cpp - QAbstractButton PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -48,6 +48,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
@@ -75,6 +76,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
@@ -111,6 +113,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -136,6 +139,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
@@ -158,6 +162,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QSize& size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -186,6 +191,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
@@ -227,6 +233,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QIcon& icon,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -254,6 +261,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -325,6 +333,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
@@ -347,6 +356,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
@@ -402,6 +412,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
@@ -424,6 +435,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QKeySequence& key,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -450,6 +462,7 @@
 		/* l */
 		long var_l_0;    // default: 100
 
+		/* int msec,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
@@ -542,6 +555,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& text,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -609,14 +623,6 @@
 
 /*********************************
  *    class     QAbstractButton */
-/*
- *    function  QAbstractButton
- *    flags:    
- */
-ZEND_METHOD(QAbstractButton, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-		QAbstractButton *QAbstractButton_ptr = new QAbstractButton();
-	}
 }
 
 /*********************************
@@ -660,6 +666,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -690,6 +697,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qabstractslider.cpp
===================================================================
--- trunk/playground/classes/qabstractslider.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qabstractslider.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QAbstractSlider.cpp - QAbstractSlider PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -68,6 +68,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -95,6 +96,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -118,6 +120,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -143,6 +146,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -165,6 +169,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* SliderChange change,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -193,6 +198,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -247,6 +253,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -269,6 +276,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* SliderAction action,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -296,6 +304,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -322,6 +331,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int min, int max,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -390,6 +400,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool enable,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -407,15 +418,12 @@
  *    flags:    t
  */
 ZEND_METHOD(QAbstractSlider, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
-			RETURN_~(obj->QAbstractSlider());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 0
 
+		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -423,7 +431,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget*") {
-				obj->QAbstractSlider((QWidget*) var_o_0);
+				QAbstractSlider *QAbstractSlider_ptr = new QAbstractSlider((QWidget*) var_o_0);
+			PHP_QT_REGISTER(QAbstractSlider_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -434,6 +443,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 0
 
+		/* QAbstractSliderPrivate& dd, QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -443,7 +453,8 @@
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
 			if(tmp_oo_0 == "QAbstractSliderPrivate&" && tmp_oo_1 == "QWidget*") {
-				obj->QAbstractSlider((QAbstractSliderPrivate&) var_oo_0, (QWidget*) var_oo_1);
+				QAbstractSlider *QAbstractSlider_ptr = new QAbstractSlider((QAbstractSliderPrivate&) var_oo_0, (QWidget*) var_oo_1);
+			PHP_QT_REGISTER(QAbstractSlider_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -475,6 +486,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -510,6 +522,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -532,6 +545,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -593,6 +607,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -655,6 +670,7 @@
 		long var_oll_1;    // default: 500
 		long var_oll_2;    // default: 50
 
+		/* SliderAction action, int thresholdTime, int repeatTime,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
@@ -694,6 +710,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -729,6 +746,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -777,6 +795,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -804,6 +823,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 
@@ -833,6 +853,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

Modified: trunk/playground/classes/qactionevent.cpp
===================================================================
--- trunk/playground/classes/qactionevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qactionevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QActionEvent.cpp - QActionEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qapplication.cpp
===================================================================
--- trunk/playground/classes/qapplication.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qapplication.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QApplication.cpp - QApplication PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -81,6 +81,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -128,6 +129,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -153,6 +155,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QSessionManager& sm,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -224,6 +227,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -246,6 +250,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int l,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -270,6 +275,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -292,6 +298,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int direction,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -365,6 +372,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -387,6 +395,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -410,6 +419,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -436,6 +446,7 @@
 		long var_lb_0;    // default: 
 		bool var_lb_1;   // _default: true
 
+		/* int , bool enable,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb|", &var_lb_0, &var_lb_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -477,6 +488,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QStyle* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -530,6 +542,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -583,6 +596,7 @@
 		int len_s_0;
 
 
+		/* const char* className,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -598,6 +612,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -790,57 +805,53 @@
  *    flags:    
  */
 ZEND_METHOD(QApplication, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QApplication *obj = (QApplication*) PHP_QT_FETCH();
-			RETURN_~(obj->QApplication());
-	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ls */
-		long var_ls_0;    // default: 
-		char* var_ls_1;   // default: 
-		int len_ls_1;
+		/* ll */
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ls", &var_ls_0, &var_ls_1, len_ls_1) == SUCCESS) {
+		/* int& argc, char* * argv,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
 			
-			obj->QApplication((int&) var_ls_0 , (char* *) var_ls_1);
+			QApplication *QApplication_ptr = new QApplication((int&) var_ll_0 ,(char* *) var_ll_1);
+			PHP_QT_REGISTER(QApplication_ptr);
 			RETURN_NULL();
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* lsb */
-		long var_lsb_0;    // default: 
-		char* var_lsb_1;   // default: 
-		int len_lsb_1;
+		/* llb */
+		long var_llb_0;    // default: 
+		long var_llb_1;    // default: 
+		bool var_llb_2;   // _default: 
 
-		bool var_lsb_2;   // _default: 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lsb", &var_lsb_0, &var_lsb_1, len_lsb_1, &var_lsb_2) == SUCCESS) {
+		/* int& argc, char* * argv, bool GUIenabled,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llb", &var_llb_0, &var_llb_1, &var_llb_2) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
 			
-			obj->QApplication((int&) var_lsb_0 , (char* *) var_lsb_1 ,(bool) var_lsb_2);
+			QApplication *QApplication_ptr = new QApplication((int&) var_llb_0 ,(char* *) var_llb_1 ,(bool) var_llb_2);
+			PHP_QT_REGISTER(QApplication_ptr);
 			RETURN_NULL();
 		}
-		/* lso */
-		long var_lso_3;    // default: 
-		char* var_lso_4;   // default: 
-		int len_lso_4;
+		/* llo */
+		long var_llo_3;    // default: 
+		long var_llo_4;    // default: 
+		zval* z_var_llo_5;   // default: 
 
-		zval* z_var_lso_5;   // default: 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lso", &var_lso_3, &var_lso_4, len_lso_4, &z_var_lso_5) == SUCCESS) {
+		/* int& argc, char* * argv, Type ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_3, &var_llo_4, &z_var_llo_5) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
-			QObject* var_lso_5 = (QObject*) php_qt_fetch(z_var_lso_5);
+			QObject* var_llo_5 = (QObject*) php_qt_fetch(z_var_llo_5);
 
-			QString tmp_lso_0(var_lso_5->metaObject()->className());
+			QString tmp_llo_0(var_llo_5->metaObject()->className());
 			
-			if(tmp_lso_0 == "Type") {
-				obj->QApplication((int&) var_lso_3, (char* *) var_lso_4, (Type) var_lso_5);
+			if(tmp_llo_0 == "Type") {
+				QApplication *QApplication_ptr = new QApplication((int&) var_llo_3, (char* *) var_llo_4, (Type) var_llo_5);
+			PHP_QT_REGISTER(QApplication_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -944,6 +955,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -982,6 +994,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -1007,6 +1020,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -1048,6 +1062,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* act,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1074,6 +1089,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& p,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -1093,6 +1109,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int x, int y,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -1120,6 +1137,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -1144,6 +1162,7 @@
 		int len_os_1;
 
 
+		/* const QPalette& , const char* className,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|", &z_var_os_0, &var_os_1, len_os_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_os_0 = (QObject*) php_qt_fetch(z_var_os_0);
@@ -1183,6 +1202,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 0
 
+		/* const QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1233,6 +1253,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QSize& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1272,6 +1293,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QCursor& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1298,6 +1320,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QIcon& icon,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1343,6 +1366,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QEvent* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1441,6 +1465,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QCursor& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1486,6 +1511,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& p,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -1505,6 +1531,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int x, int y,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -1575,6 +1602,7 @@
 		int len_os_1;
 
 
+		/* const QFont& , const char* className,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|", &z_var_os_0, &var_os_1, len_os_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_os_0 = (QObject*) php_qt_fetch(z_var_os_0);
@@ -1602,6 +1630,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* QObject* , QEvent* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -1629,6 +1658,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ms,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -1670,6 +1700,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QInputContext* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1696,6 +1727,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool quit,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -1723,6 +1755,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 
@@ -1750,6 +1783,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QSessionManager& sm,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QApplication *obj = (QApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

Modified: trunk/playground/classes/qboxlayout.cpp
===================================================================
--- trunk/playground/classes/qboxlayout.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qboxlayout.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QBoxLayout.cpp - QBoxLayout PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -58,6 +58,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -86,6 +87,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 0
 
+		/* QLayout* layout, int stretch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -113,6 +115,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -139,6 +142,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* QWidget* w, int stretch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -167,6 +171,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* Direction ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -193,6 +198,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QLayoutItem* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -220,6 +226,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int index, int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -244,6 +251,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -312,6 +320,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -339,6 +348,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -385,6 +395,7 @@
 		long var_oll_1;    // default: 0
 		long var_oll_2;    // default: 0
 
+		/* QWidget* , int stretch, int alignment,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
@@ -411,6 +422,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -433,6 +445,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -479,6 +492,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -576,6 +590,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -597,6 +612,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -619,6 +635,7 @@
 		/* l */
 		long var_l_0;    // default: 0
 
+		/* int stretch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -649,16 +666,13 @@
  *    flags:    t
  */
 ZEND_METHOD(QBoxLayout, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
-			RETURN_~(obj->QBoxLayout());
-	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* oo */
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 0
 
+		/* Direction , QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -668,7 +682,8 @@
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
 			if(tmp_oo_0 == "Direction" && tmp_oo_1 == "QWidget*") {
-				obj->QBoxLayout((Direction) var_oo_0, (QWidget*) var_oo_1);
+				QBoxLayout *QBoxLayout_ptr = new QBoxLayout((Direction) var_oo_0, (QWidget*) var_oo_1);
+			PHP_QT_REGISTER(QBoxLayout_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -688,6 +703,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 0
 
+		/* int index, int stretch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -713,6 +729,7 @@
 		long var_loll_2;    // default: 0
 		long var_loll_3;    // default: 0
 
+		/* int index, QWidget* widget, int stretch, int alignment,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol|l|", &var_loll_0, &z_var_loll_1, &var_loll_2, &var_loll_3) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_loll_1 = (QObject*) php_qt_fetch(z_var_loll_1);
@@ -741,6 +758,7 @@
 		zval* z_var_lol_1;   // default: 
 		long var_lol_2;    // default: 0
 
+		/* int index, QLayout* layout, int stretch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol|", &var_lol_0, &z_var_lol_1, &var_lol_2) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_lol_1 = (QObject*) php_qt_fetch(z_var_lol_1);
@@ -772,6 +790,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -801,6 +820,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -845,6 +865,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 
@@ -867,6 +888,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int index, QLayoutItem* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

Modified: trunk/playground/classes/qchar.cpp
===================================================================
--- trunk/playground/classes/qchar.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qchar.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QChar.cpp - QChar PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -228,35 +228,28 @@
  */
 ZEND_METHOD(QChar, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-		QChar *QChar_ptr = new QChar();
+			QChar *QChar_ptr = new QChar();
+			PHP_QT_REGISTER(QChar_ptr);
+			RETURN_NULL();
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l */
 		long var_l_0;    // default: 
 
+		/* char c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
-			
-			obj->QChar((uint) var_l_0);
+						
+			QChar *QChar_ptr = new QChar((char) var_l_0);
+			PHP_QT_REGISTER(QChar_ptr);
 			RETURN_NULL();
 		}
-		/* s */
-		char* var_s_1;   // default: 
-		int len_s_1;
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_1, len_s_1) == SUCCESS) {
-			QChar *obj = (QChar*) PHP_QT_FETCH();
-
-			
-			obj->QChar( (char) var_s_1);
-			RETURN_NULL();
-		}
 		/* o */
 		zval* z_var_o_2;   // default: 
 
+		/* QLatin1Char ch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_2) == SUCCESS) {
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 			QObject* var_o_2 = (QObject*) php_qt_fetch(z_var_o_2);
@@ -264,38 +257,40 @@
 			QString tmp_o_0(var_o_2->metaObject()->className());
 			
 			if(tmp_o_0 == "QLatin1Char") {
-				obj->QChar((QLatin1Char) var_o_2);
+				QChar *QChar_ptr = new QChar((QLatin1Char) var_o_2);
+			PHP_QT_REGISTER(QChar_ptr);
 			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "ushort") {
-				obj->QChar((ushort) var_o_2);
+				QChar *QChar_ptr = new QChar((ushort) var_o_2);
+			PHP_QT_REGISTER(QChar_ptr);
 			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "short") {
-				obj->QChar((short) var_o_2);
+				QChar *QChar_ptr = new QChar((short) var_o_2);
+			PHP_QT_REGISTER(QChar_ptr);
 			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "SpecialCharacter") {
-				obj->QChar((SpecialCharacter) var_o_2);
+				QChar *QChar_ptr = new QChar((SpecialCharacter) var_o_2);
+			PHP_QT_REGISTER(QChar_ptr);
 			RETURN_NULL();
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
-		char* var_ss_0;   // default: 
-		int len_ss_0;
+		/* ll */
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
 
-		char* var_ss_1;   // default: 
-		int len_ss_1;
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+		/* uchar c, uchar r,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
 			
-			obj->QChar( (uchar) var_ss_0 , (uchar) var_ss_1);
+			QChar *QChar_ptr = new QChar((uchar) var_ll_0 ,(uchar) var_ll_1);
+			PHP_QT_REGISTER(QChar_ptr);
 			RETURN_NULL();
 		}
 	}
@@ -377,16 +372,15 @@
 ZEND_METHOD(QChar, fromLatin1){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		/* l */
+		long var_l_0;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+		/* char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
 			
-			obj->fromLatin1( (char) var_s_0);
+			obj->fromLatin1((char) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -401,16 +395,15 @@
 ZEND_METHOD(QChar, fromAscii){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		/* l */
+		long var_l_0;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+		/* char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
 			
-			obj->fromAscii( (char) var_s_0);
+			obj->fromAscii((char) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -615,16 +608,15 @@
 ZEND_METHOD(QChar, setRow){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		/* l */
+		long var_l_0;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+		/* uchar row,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
 			
-			obj->setRow( (uchar) var_s_0);
+			obj->setRow((uchar) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -678,16 +670,15 @@
 ZEND_METHOD(QChar, setCell){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		/* l */
+		long var_l_0;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+		/* uchar cell,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
 			
-			obj->setCell( (uchar) var_s_0);
+			obj->setCell((uchar) var_l_0);
 			RETURN_NULL();
 		}
 	}

Modified: trunk/playground/classes/qcharref.cpp
===================================================================
--- trunk/playground/classes/qcharref.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qcharref.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QCharRef.cpp - QCharRef PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -159,16 +159,15 @@
 ZEND_METHOD(QCharRef, setRow){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		/* l */
+		long var_l_0;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+		/* uchar row,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
 
 			
-			obj->setRow( (uchar) var_s_0);
+			obj->setRow((uchar) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -275,16 +274,15 @@
 ZEND_METHOD(QCharRef, setCell){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		/* l */
+		long var_l_0;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+		/* uchar cell,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
 
 			
-			obj->setCell( (uchar) var_s_0);
+			obj->setCell((uchar) var_l_0);
 			RETURN_NULL();
 		}
 	}

Modified: trunk/playground/classes/qclipboardevent.cpp
===================================================================
--- trunk/playground/classes/qclipboardevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qclipboardevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QClipboardEvent.cpp - QClipboardEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qcloseevent.cpp
===================================================================
--- trunk/playground/classes/qcloseevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qcloseevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QCloseEvent.cpp - QCloseEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qcontextmenuevent.cpp
===================================================================
--- trunk/playground/classes/qcontextmenuevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qcontextmenuevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QContextMenuEvent.cpp - QContextMenuEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qcoreapplication.cpp
===================================================================
--- trunk/playground/classes/qcoreapplication.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qcoreapplication.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QCoreApplication.cpp - QCoreApplication PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -49,6 +49,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QTranslator* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -80,6 +81,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 
@@ -107,6 +109,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QTranslator* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -146,6 +149,7 @@
 		/* l */
 		long var_l_0;    // default: 0
 
+		/* int retcode,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 
@@ -169,6 +173,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -194,6 +199,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -220,6 +226,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& orgDomain,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -267,6 +274,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 
@@ -340,6 +348,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QStringList& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -367,6 +376,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* * EventFilter)(void* message, long* result,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -394,6 +404,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -439,6 +450,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& orgName,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -465,6 +477,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QEvent* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -529,6 +542,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -573,6 +587,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* QObject* receiver, int event_type,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -651,6 +666,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: QEventLoop::AllEvents
 
+		/* QEventLoop::ProcessEventsFlags flags,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -669,6 +685,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* QEventLoop::ProcessEventsFlags flags, int maxtime,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -704,6 +721,7 @@
 
 		zval* z_var_ssso_3;   // default: DefaultCodec
 
+		/* const char* context, const char* key, const char* comment, Encoding encoding,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sss|o|", &var_ssso_0, len_ssso_0, &var_ssso_1, len_ssso_1, &var_ssso_2, len_ssso_2, &z_var_ssso_3) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_ssso_3 = (QObject*) php_qt_fetch(z_var_ssso_3);
@@ -754,6 +772,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* EventFilter filter,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -818,6 +837,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* QObject* , QEvent* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -867,15 +887,12 @@
  *    flags:    
  */
 ZEND_METHOD(QCoreApplication, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
-			RETURN_~(obj->QCoreApplication());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QCoreApplicationPrivate& p,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -883,24 +900,25 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QCoreApplicationPrivate&") {
-				obj->QCoreApplication((QCoreApplicationPrivate&) var_o_0);
+				QCoreApplication *QCoreApplication_ptr = new QCoreApplication((QCoreApplicationPrivate&) var_o_0);
+			PHP_QT_REGISTER(QCoreApplication_ptr);
 			RETURN_NULL();
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ls */
-		long var_ls_0;    // default: 
-		char* var_ls_1;   // default: 
-		int len_ls_1;
+		/* ll */
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ls", &var_ls_0, &var_ls_1, len_ls_1) == SUCCESS) {
+		/* int& argc, char* * argv,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 
 			
-			obj->QCoreApplication((int&) var_ls_0 , (char* *) var_ls_1);
+			QCoreApplication *QCoreApplication_ptr = new QCoreApplication((int&) var_ll_0 ,(char* *) var_ll_1);
+			PHP_QT_REGISTER(QCoreApplication_ptr);
 			RETURN_NULL();
 		}
 	}
@@ -919,6 +937,7 @@
 		long var_lb_0;    // default: 
 		bool var_lb_1;   // _default: 
 
+		/* int signal, bool watch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb", &var_lb_0, &var_lb_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 
@@ -941,6 +960,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QObject* receiver,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -986,6 +1006,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& application,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1017,6 +1038,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 
@@ -1046,6 +1068,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

Modified: trunk/playground/classes/qdate.cpp
===================================================================
--- trunk/playground/classes/qdate.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qdate.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDate.cpp - QDate PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -43,6 +43,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int weekday,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -115,6 +116,7 @@
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
 
+		/* int y, int m, int d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -138,6 +140,7 @@
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
 
+		/* int y, int m, int d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -159,6 +162,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int month,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -186,6 +190,7 @@
 		/* l */
 		long var_l_0;    // default: Qt::TextDate
 
+		/* int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -201,6 +206,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QString& format,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -232,6 +238,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int year,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -253,6 +260,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int jd,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -299,6 +307,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int days,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -341,6 +350,7 @@
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
 
+		/* int y, int m, int d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -362,6 +372,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int month,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -392,6 +403,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* uint jd, int& y, int& m, int& d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -410,7 +422,9 @@
  */
 ZEND_METHOD(QDate, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-		QDate *QDate_ptr = new QDate();
+			QDate *QDate_ptr = new QDate();
+			PHP_QT_REGISTER(QDate_ptr);
+			RETURN_NULL();
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
@@ -419,11 +433,13 @@
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
 
+		/* int y, int m, int d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
-			obj->QDate((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2);
+			QDate *QDate_ptr = new QDate((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2);
+			PHP_QT_REGISTER(QDate_ptr);
 			RETURN_NULL();
 		}
 	}
@@ -441,6 +457,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int weekday,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -469,6 +486,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::TextDate
 
+		/* const QString& s, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -489,6 +507,7 @@
 		zval* z_var_oo_2;   // default: 
 		zval* z_var_oo_3;   // default: 
 
+		/* const QString& s, const QString& format,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_2, &z_var_oo_3) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			QObject* var_oo_2 = (QObject*) php_qt_fetch(z_var_oo_2);
@@ -535,6 +554,7 @@
 		/* l */
 		long var_l_0;    // default: 0
 
+		/* int* yearNum,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -556,6 +576,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int months,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -596,6 +617,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int years,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -623,6 +645,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QDate& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

Modified: trunk/playground/classes/qdatetime.cpp
===================================================================
--- trunk/playground/classes/qdatetime.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qdatetime.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDateTime.cpp - QDateTime PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -94,6 +94,7 @@
 		/* l */
 		long var_l_0;    // default: Qt::TextDate
 
+		/* int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
@@ -109,6 +110,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QString& format,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -153,6 +155,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* uint secsSince1Jan1970UTC,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
@@ -175,6 +178,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int days,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
@@ -202,6 +206,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QDateTime& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -227,6 +232,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int spec,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
@@ -255,6 +261,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::TextDate
 
+		/* const QString& s, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -275,6 +282,7 @@
 		zval* z_var_oo_2;   // default: 
 		zval* z_var_oo_3;   // default: 
 
+		/* const QString& s, const QString& format,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_2, &z_var_oo_3) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_oo_2 = (QObject*) php_qt_fetch(z_var_oo_2);
@@ -327,6 +335,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QTime& time,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -353,6 +362,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int months,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
@@ -376,17 +386,16 @@
  */
 ZEND_METHOD(QDateTime, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-		QDateTime *QDateTime_ptr = new QDateTime();
+			QDateTime *QDateTime_ptr = new QDateTime();
+			PHP_QT_REGISTER(QDateTime_ptr);
+			RETURN_NULL();
 	}
-	if (ZEND_NUM_ARGS() == 0){
-			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			RETURN_~(obj->QDateTime());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QDate& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -394,11 +403,13 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "const QDate&") {
-				obj->QDateTime((const QDate&) var_o_0);
+				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) var_o_0);
+			PHP_QT_REGISTER(QDateTime_ptr);
 			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "const QDateTime&") {
-				obj->QDateTime((const QDateTime&) var_o_0);
+				QDateTime *QDateTime_ptr = new QDateTime((const QDateTime&) var_o_0);
+			PHP_QT_REGISTER(QDateTime_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -410,6 +421,7 @@
 		zval* z_var_ool_1;   // default: 
 		long var_ool_2;    // default: Qt::LocalTime
 
+		/* const QDate& , const QTime& , int spec,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
@@ -419,7 +431,8 @@
 			QString tmp_ool_1(var_ool_1->metaObject()->className());
 			
 			if(tmp_ool_0 == "const QDate&" && tmp_ool_1 == "const QTime&") {
-				obj->QDateTime((const QDate&) var_ool_0, (const QTime&) var_ool_1, (Qt::TimeSpec) var_ool_2);
+				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) var_ool_0, (const QTime&) var_ool_1, (Qt::TimeSpec) var_ool_2);
+			PHP_QT_REGISTER(QDateTime_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -438,6 +451,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int secs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
@@ -465,6 +479,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QDate& date,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -510,6 +525,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QDateTime& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -535,6 +551,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int years,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
@@ -613,6 +630,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int spec,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qdragenterevent.cpp
===================================================================
--- trunk/playground/classes/qdragenterevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qdragenterevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragEnterEvent.cpp - QDragEnterEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qdragleaveevent.cpp
===================================================================
--- trunk/playground/classes/qdragleaveevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qdragleaveevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragLeaveEvent.cpp - QDragLeaveEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qdragmoveevent.cpp
===================================================================
--- trunk/playground/classes/qdragmoveevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qdragmoveevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragMoveEvent.cpp - QDragMoveEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -48,6 +48,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& r,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDragMoveEvent *obj = (QDragMoveEvent*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -98,6 +99,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& r,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDragMoveEvent *obj = (QDragMoveEvent*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

Modified: trunk/playground/classes/qdragresponseevent.cpp
===================================================================
--- trunk/playground/classes/qdragresponseevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qdragresponseevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragResponseEvent.cpp - QDragResponseEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qdropevent.cpp
===================================================================
--- trunk/playground/classes/qdropevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qdropevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDropEvent.cpp - QDropEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -45,6 +45,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 
@@ -104,6 +105,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int action,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 
@@ -180,6 +182,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 
@@ -201,6 +204,7 @@
 		/* l */
 		long var_l_0;    // default: 0
 
+		/* int n,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qfileopenevent.cpp
===================================================================
--- trunk/playground/classes/qfileopenevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qfileopenevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFileOpenEvent.cpp - QFileOpenEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qfocusevent.cpp
===================================================================
--- trunk/playground/classes/qfocusevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qfocusevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFocusEvent.cpp - QFocusEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qfont.cpp
===================================================================
--- trunk/playground/classes/qfont.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qfont.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFont.cpp - QFont PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -100,6 +100,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -123,6 +124,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QString& , const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -177,6 +179,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -212,6 +215,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -238,6 +242,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -269,6 +274,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -295,6 +301,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* uint mask,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -305,6 +312,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QFont& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -376,6 +384,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QString& , const QStringList& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -423,6 +432,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -485,6 +495,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -523,6 +534,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -577,6 +589,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* Style style,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -622,6 +635,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -663,6 +677,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QFont& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -701,6 +716,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -732,6 +748,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -806,6 +823,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -842,6 +860,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: PreferDefault
 
+		/* StyleHint , StyleStrategy ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -887,6 +906,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -909,17 +929,16 @@
  */
 ZEND_METHOD(QFont, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-		QFont *QFont_ptr = new QFont();
+			QFont *QFont_ptr = new QFont();
+			PHP_QT_REGISTER(QFont_ptr);
+			RETURN_NULL();
 	}
-	if (ZEND_NUM_ARGS() == 0){
-			QFont *obj = (QFont*) PHP_QT_FETCH();
-			RETURN_~(obj->QFont());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QFont& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -927,7 +946,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "const QFont&") {
-				obj->QFont((const QFont&) var_o_0);
+				QFont *QFont_ptr = new QFont((const QFont&) var_o_0);
+			PHP_QT_REGISTER(QFont_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -938,6 +958,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* const QFont& , QPaintDevice* pd,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -945,7 +966,8 @@
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
 			if(tmp_ol_0 == "const QFont&") {
-				obj->QFont((const QFont&) var_ol_0, (QPaintDevice*) var_ol_1);
+				QFont *QFont_ptr = new QFont((const QFont&) var_ol_0, (QPaintDevice*) var_ol_1);
+			PHP_QT_REGISTER(QFont_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -958,6 +980,7 @@
 		long var_ollb_2;    // default: -1
 		bool var_ollb_3;   // _default: false
 
+		/* const QString& family, int pointSize, int weight, bool italic,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|b|", &z_var_ollb_0, &var_ollb_1, &var_ollb_2, &var_ollb_3) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_ollb_0 = (QObject*) php_qt_fetch(z_var_ollb_0);
@@ -965,7 +988,8 @@
 			QString tmp_ollb_0(var_ollb_0->metaObject()->className());
 			
 			if(tmp_ollb_0 == "const QString&") {
-				obj->QFont((const QString&) var_ollb_0, (int) var_ollb_1, (int) var_ollb_2, (bool) var_ollb_3);
+				QFont *QFont_ptr = new QFont((const QString&) var_ollb_0, (int) var_ollb_1, (int) var_ollb_2, (bool) var_ollb_3);
+			PHP_QT_REGISTER(QFont_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -1011,6 +1035,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -1033,6 +1058,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1059,6 +1085,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* StyleStrategy s,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1099,6 +1126,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -1121,6 +1149,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -1143,6 +1172,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool b,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -1243,6 +1273,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* qreal ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

Modified: trunk/playground/classes/qframe.cpp
===================================================================
--- trunk/playground/classes/qframe.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qframe.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFrame.cpp - QFrame PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -72,6 +72,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 
@@ -99,6 +100,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 
@@ -135,6 +137,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -174,16 +177,13 @@
  *    flags:    t
  */
 ZEND_METHOD(QFrame, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QFrame *obj = (QFrame*) PHP_QT_FETCH();
-			RETURN_~(obj->QFrame());
-	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol */
 		zval* z_var_ol_0;   // default: 0
 		long var_ol_1;    // default: 0
 
+		/* QWidget* parent, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|l|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -191,7 +191,8 @@
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
 			if(tmp_ol_0 == "QWidget*") {
-				obj->QFrame((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
+				QFrame *QFrame_ptr = new QFrame((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
+			PHP_QT_REGISTER(QFrame_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -203,6 +204,7 @@
 		zval* z_var_ool_1;   // default: 0
 		long var_ool_2;    // default: 0
 
+		/* QFramePrivate& dd, QWidget* parent, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|l|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
@@ -212,7 +214,8 @@
 			QString tmp_ool_1(var_ool_1->metaObject()->className());
 			
 			if(tmp_ool_0 == "QFramePrivate&" && tmp_ool_1 == "QWidget*") {
-				obj->QFrame((QFramePrivate&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
+				QFrame *QFrame_ptr = new QFrame((QFramePrivate&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
+			PHP_QT_REGISTER(QFrame_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -291,6 +294,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* Shape ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -338,6 +342,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 
@@ -360,6 +365,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -405,6 +411,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 
@@ -440,6 +447,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* QPainter* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 
@@ -463,6 +471,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -507,6 +516,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 
@@ -529,6 +539,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* Shadow ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -560,6 +571,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 
@@ -589,6 +601,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QFrame *obj = (QFrame*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

Modified: trunk/playground/classes/qgridlayout.cpp
===================================================================
--- trunk/playground/classes/qgridlayout.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qgridlayout.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QGridLayout.cpp - QGridLayout PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -48,6 +48,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -78,6 +79,7 @@
 		long var_olll_2;    // default: 
 		long var_olll_3;    // default: 0
 
+		/* QLayout* , int row, int column, int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olll|", &z_var_olll_0, &var_olll_1, &var_olll_2, &var_olll_3) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_olll_0 = (QObject*) php_qt_fetch(z_var_olll_0);
@@ -104,15 +106,12 @@
 			obj->QGridLayout();
 			RETURN_NULL();
 	}
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			RETURN_~(obj->QGridLayout());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -120,7 +119,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget*") {
-				obj->QGridLayout((QWidget*) var_o_0);
+				QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget*) var_o_0);
+			PHP_QT_REGISTER(QGridLayout_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -140,6 +140,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -165,6 +166,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QLayoutItem* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -191,6 +193,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int row,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -212,6 +215,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -236,6 +240,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -323,6 +328,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -350,6 +356,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -376,6 +383,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int row, int stretch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -402,6 +410,7 @@
 		long var_lllll_3;    // default: 
 		long var_lllll_4;    // default: 
 
+		/* int idx, int* row, int* column, int* rowSpan, int* columnSpan,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll", &var_lllll_0, &var_lllll_1, &var_lllll_2, &var_lllll_3, &var_lllll_4) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -425,6 +434,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int n, int orient,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -466,6 +476,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int column,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -487,6 +498,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* w,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -507,6 +519,7 @@
 		long var_olll_2;    // default: 
 		long var_olll_3;    // default: 0
 
+		/* QWidget* , int row, int column, int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olll|", &z_var_olll_0, &var_olll_1, &var_olll_2, &var_olll_3) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_olll_0 = (QObject*) php_qt_fetch(z_var_olll_0);
@@ -533,6 +546,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -579,6 +593,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -664,6 +679,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int column, int minSize,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -686,6 +702,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -721,6 +738,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int column, int stretch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -756,6 +774,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int column,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -778,6 +797,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int row, int column,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -819,6 +839,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int row, int minSize,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -846,6 +867,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -894,6 +916,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -919,6 +942,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
@@ -959,6 +983,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int row,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qhboxlayout.cpp
===================================================================
--- trunk/playground/classes/qhboxlayout.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qhboxlayout.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHBoxLayout.cpp - QHBoxLayout PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -67,6 +67,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QHBoxLayout *obj = (QHBoxLayout*) PHP_QT_FETCH();
 
@@ -95,6 +96,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QHBoxLayout *obj = (QHBoxLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -140,6 +142,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QHBoxLayout *obj = (QHBoxLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -199,17 +202,16 @@
  */
 ZEND_METHOD(QHBoxLayout, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-		QHBoxLayout *QHBoxLayout_ptr = new QHBoxLayout();
+			QHBoxLayout *QHBoxLayout_ptr = new QHBoxLayout();
+			PHP_QT_REGISTER(QHBoxLayout_ptr);
+			RETURN_NULL();
 	}
-	if (ZEND_NUM_ARGS() == 0){
-			QHBoxLayout *obj = (QHBoxLayout*) PHP_QT_FETCH();
-			RETURN_~(obj->QHBoxLayout());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QHBoxLayout *obj = (QHBoxLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -217,7 +219,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget*") {
-				obj->QHBoxLayout((QWidget*) var_o_0);
+				QHBoxLayout *QHBoxLayout_ptr = new QHBoxLayout((QWidget*) var_o_0);
+			PHP_QT_REGISTER(QHBoxLayout_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -241,6 +244,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QHBoxLayout *obj = (QHBoxLayout*) PHP_QT_FETCH();
 
@@ -270,6 +274,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QHBoxLayout *obj = (QHBoxLayout*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -297,6 +302,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QHBoxLayout *obj = (QHBoxLayout*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qhelpevent.cpp
===================================================================
--- trunk/playground/classes/qhelpevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qhelpevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHelpEvent.cpp - QHelpEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qhideevent.cpp
===================================================================
--- trunk/playground/classes/qhideevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qhideevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHideEvent.cpp - QHideEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qhoverevent.cpp
===================================================================
--- trunk/playground/classes/qhoverevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qhoverevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHoverEvent.cpp - QHoverEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qicondragevent.cpp
===================================================================
--- trunk/playground/classes/qicondragevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qicondragevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QIconDragEvent.cpp - QIconDragEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qinputevent.cpp
===================================================================
--- trunk/playground/classes/qinputevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qinputevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QInputEvent.cpp - QInputEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qinputmethodevent.cpp
===================================================================
--- trunk/playground/classes/qinputmethodevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qinputmethodevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QInputMethodEvent.cpp - QInputMethodEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -85,6 +85,7 @@
 		long var_oll_1;    // default: 0
 		long var_oll_2;    // default: 0
 
+		/* const QString& commitString, int replaceFrom, int replaceLength,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
 			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

Modified: trunk/playground/classes/qinputmethodevent__attribute.cpp
===================================================================
--- trunk/playground/classes/qinputmethodevent__attribute.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qinputmethodevent__attribute.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * Attribute.cpp - Attribute PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -46,6 +46,7 @@
 		long var_ollo_2;    // default: 
 		zval* z_var_ollo_3;   // default: 
 
+		/* AttributeType t, int s, int l, QVariant val,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &z_var_ollo_0, &var_ollo_1, &var_ollo_2, &z_var_ollo_3) == SUCCESS) {
 			Attribute *obj = (Attribute*) PHP_QT_FETCH();
 			QObject* var_ollo_0 = (QObject*) php_qt_fetch(z_var_ollo_0);
@@ -55,7 +56,8 @@
 			QString tmp_ollo_1(var_ollo_3->metaObject()->className());
 			
 			if(tmp_ollo_0 == "AttributeType" && tmp_ollo_1 == "QVariant") {
-				obj->Attribute((AttributeType) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (QVariant) var_ollo_3);
+				Attribute *Attribute_ptr = new Attribute((AttributeType) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (QVariant) var_ollo_3);
+			PHP_QT_REGISTER(Attribute_ptr);
 			RETURN_NULL();
 			}
 		}

Modified: trunk/playground/classes/qkeyevent.cpp
===================================================================
--- trunk/playground/classes/qkeyevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qkeyevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QKeyEvent.cpp - QKeyEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qlabel.cpp
===================================================================
--- trunk/playground/classes/qlabel.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qlabel.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLabel.cpp - QLabel PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -48,6 +48,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -75,6 +76,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -112,6 +114,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -137,6 +140,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -197,6 +201,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -238,6 +243,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -260,6 +266,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QEvent* e,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -299,6 +306,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -343,6 +351,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -422,6 +431,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QMovie* movie,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -448,6 +458,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QPicture& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -474,6 +485,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -484,6 +496,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* double ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -542,6 +555,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -583,6 +597,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -685,6 +700,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -706,6 +722,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QPixmap& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -751,6 +768,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool on,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -778,6 +796,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
@@ -807,6 +826,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -827,16 +847,13 @@
  *    flags:    t
  */
 ZEND_METHOD(QLabel, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			RETURN_~(obj->QLabel());
-	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol */
 		zval* z_var_ol_0;   // default: 0
 		long var_ol_1;    // default: 0
 
+		/* QWidget* parent, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|l|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -844,7 +861,8 @@
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
 			if(tmp_ol_0 == "QWidget*") {
-				obj->QLabel((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
+				QLabel *QLabel_ptr = new QLabel((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
+			PHP_QT_REGISTER(QLabel_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -856,6 +874,7 @@
 		zval* z_var_ool_1;   // default: 0
 		long var_ool_2;    // default: 0
 
+		/* const QString& text, QWidget* parent, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|l|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
@@ -865,7 +884,8 @@
 			QString tmp_ool_1(var_ool_1->metaObject()->className());
 			
 			if(tmp_ool_0 == "const QString&" && tmp_ool_1 == "QWidget*") {
-				obj->QLabel((const QString&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
+				QLabel *QLabel_ptr = new QLabel((const QString&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
+			PHP_QT_REGISTER(QLabel_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -884,6 +904,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qlatin1char.cpp
===================================================================
--- trunk/playground/classes/qlatin1char.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qlatin1char.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLatin1Char.cpp - QLatin1Char PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -54,16 +54,16 @@
 ZEND_METHOD(QLatin1Char, __construct){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		/* l */
+		long var_l_0;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+		/* char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLatin1Char *obj = (QLatin1Char*) PHP_QT_FETCH();
 
 			
-			obj->QLatin1Char( (char) var_s_0);
+			QLatin1Char *QLatin1Char_ptr = new QLatin1Char((char) var_l_0);
+			PHP_QT_REGISTER(QLatin1Char_ptr);
 			RETURN_NULL();
 		}
 	}

Modified: trunk/playground/classes/qlatin1string.cpp
===================================================================
--- trunk/playground/classes/qlatin1string.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qlatin1string.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLatin1String.cpp - QLatin1String PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -45,11 +45,13 @@
 		int len_s_0;
 
 
+		/* const char* s,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QLatin1String *obj = (QLatin1String*) PHP_QT_FETCH();
 
 			
-			obj->QLatin1String( (const char*) var_s_0);
+			QLatin1String *QLatin1String_ptr = new QLatin1String( (const char*) var_s_0);
+			PHP_QT_REGISTER(QLatin1String_ptr);
 			RETURN_NULL();
 		}
 	}

Modified: trunk/playground/classes/qlayout.cpp
===================================================================
--- trunk/playground/classes/qlayout.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qlayout.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLayout.cpp - QLayout PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -53,6 +53,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int w,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -79,6 +80,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -119,6 +121,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -142,6 +145,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -167,6 +171,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QLayoutItem* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -206,6 +211,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* w,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -305,6 +311,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -373,6 +380,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -400,6 +408,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -425,6 +434,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int alignment,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -439,6 +449,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* QWidget* w, int alignment,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -486,6 +497,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* w,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -512,6 +524,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -534,6 +547,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* w,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -560,6 +574,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QLayoutItem* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -586,6 +601,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int index,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -632,6 +648,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int index,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -706,14 +723,6 @@
 
 /*********************************
  *    class     QLayout */
-/*
- *    function  QLayout
- *    flags:    
- */
-ZEND_METHOD(QLayout, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-		QLayout *QLayout_ptr = new QLayout();
-	}
 }
 
 /*********************************
@@ -728,6 +737,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -763,6 +773,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* SizeConstraint ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -824,6 +835,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QWidget* w, const QSize& s,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -881,6 +893,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 
@@ -910,6 +923,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -986,6 +1000,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLayout *obj = (QLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

Modified: trunk/playground/classes/qlayoutitem.cpp
===================================================================
--- trunk/playground/classes/qlayoutitem.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qlayoutitem.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLayoutItem.cpp - QLayoutItem PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -151,6 +151,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayoutItem *obj = (QLayoutItem*) PHP_QT_FETCH();
 
@@ -194,14 +195,6 @@
 
 /*********************************
  *    class     QLayoutItem */
-/*
- *    function  QLayoutItem
- *    flags:    v
- */
-ZEND_METHOD(QLayoutItem, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-		QLayoutItem *QLayoutItem_ptr = new QLayoutItem();
-	}
 }
 
 /*********************************
@@ -230,6 +223,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLayoutItem *obj = (QLayoutItem*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -256,6 +250,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int a,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayoutItem *obj = (QLayoutItem*) PHP_QT_FETCH();
 
@@ -297,6 +292,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLayoutItem *obj = (QLayoutItem*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qlcdnumber.cpp
===================================================================
--- trunk/playground/classes/qlcdnumber.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qlcdnumber.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLCDNumber.cpp - QLCDNumber PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -63,6 +63,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
@@ -116,6 +117,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int num,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
@@ -125,6 +127,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* double num,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -151,6 +154,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -209,6 +213,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int num,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
@@ -219,6 +224,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QString& str,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -249,6 +255,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* SegmentStyle ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -308,6 +315,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
@@ -351,6 +359,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
@@ -420,6 +429,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -472,15 +482,12 @@
  *    flags:    t
  */
 ZEND_METHOD(QLCDNumber, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			RETURN_~(obj->QLCDNumber());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 0
 
+		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -488,7 +495,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget*") {
-				obj->QLCDNumber((QWidget*) var_o_0);
+				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((QWidget*) var_o_0);
+			PHP_QT_REGISTER(QLCDNumber_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -499,6 +507,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 0
 
+		/* uint numDigits, QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -506,7 +515,8 @@
 			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
 			if(tmp_lo_0 == "QWidget*") {
-				obj->QLCDNumber((uint) var_lo_0, (QWidget*) var_lo_1);
+				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((uint) var_lo_0, (QWidget*) var_lo_1);
+			PHP_QT_REGISTER(QLCDNumber_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -525,6 +535,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int nDigits,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
@@ -560,6 +571,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* Mode ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -591,6 +603,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
@@ -620,6 +633,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

Modified: trunk/playground/classes/qlineedit.cpp
===================================================================
--- trunk/playground/classes/qlineedit.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qlineedit.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLineEdit.cpp - QLineEdit PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -55,6 +55,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -101,6 +102,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -167,6 +169,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -190,6 +193,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -215,6 +219,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -237,6 +242,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -261,6 +267,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -283,6 +290,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -305,6 +313,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* EchoMode ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -351,6 +360,7 @@
 		bool var_bl_0;   // _default: 
 		long var_bl_1;    // default: 1
 
+		/* bool mark, int steps,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -373,6 +383,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool mark,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -396,6 +407,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -421,6 +433,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int flag,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -457,15 +470,12 @@
  *    flags:    t
  */
 ZEND_METHOD(QLineEdit, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			RETURN_~(obj->QLineEdit());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 0
 
+		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -473,7 +483,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget*") {
-				obj->QLineEdit((QWidget*) var_o_0);
+				QLineEdit *QLineEdit_ptr = new QLineEdit((QWidget*) var_o_0);
+			PHP_QT_REGISTER(QLineEdit_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -484,6 +495,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 0
 
+		/* const QString& , QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -493,7 +505,8 @@
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
 			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "QWidget*") {
-				obj->QLineEdit((const QString&) var_oo_0, (QWidget*) var_oo_1);
+				QLineEdit *QLineEdit_ptr = new QLineEdit((const QString&) var_oo_0, (QWidget*) var_oo_1);
+			PHP_QT_REGISTER(QLineEdit_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -550,6 +563,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -615,6 +629,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool mark,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -652,6 +667,7 @@
 		bool var_bl_0;   // _default: 
 		long var_bl_1;    // default: 1
 
+		/* bool mark, int steps,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -674,6 +690,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool b,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -698,6 +715,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -736,6 +754,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QValidator* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -863,6 +882,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool mark,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -885,6 +905,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QEvent* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -929,6 +950,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool mark,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -964,6 +986,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& pos,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -1000,6 +1023,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int , int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -1067,6 +1091,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& inputMask,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1120,6 +1145,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1184,6 +1210,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
@@ -1284,6 +1311,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qmouseevent.cpp
===================================================================
--- trunk/playground/classes/qmouseevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qmouseevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QMouseEvent.cpp - QMouseEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qmoveevent.cpp
===================================================================
--- trunk/playground/classes/qmoveevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qmoveevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QMoveEvent.cpp - QMoveEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qobject.cpp
===================================================================
--- trunk/playground/classes/qobject.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qobject.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QObject.cpp - QObject PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -43,6 +43,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -71,6 +72,7 @@
 		int len_s_0;
 
 
+		/* const char* signal,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -98,6 +100,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -128,6 +131,7 @@
 		int len_os_1;
 
 
+		/* const QObject* receiver, const char* member,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|", &z_var_os_0, &var_os_1, len_os_1) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_os_0 = (QObject*) php_qt_fetch(z_var_os_0);
@@ -150,6 +154,7 @@
 		int len_sos_2;
 
 
+		/* const char* signal, const QObject* receiver, const char* member,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s|o|s|", &var_sos_0, len_sos_0, &z_var_sos_1, &var_sos_2, len_sos_2) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_sos_1 = (QObject*) php_qt_fetch(z_var_sos_1);
@@ -173,6 +178,7 @@
 		int len_osos_3;
 
 
+		/* const QObject* sender, const char* signal, const QObject* receiver, const char* member,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osos", &z_var_osos_0, &var_osos_1, len_osos_1, &z_var_osos_2, &var_osos_3, len_osos_3) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_osos_0 = (QObject*) php_qt_fetch(z_var_osos_0);
@@ -220,6 +226,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -259,6 +266,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -287,6 +295,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -312,6 +321,7 @@
 
 		zval* z_var_so_1;   // default: 
 
+		/* const char* name, const QVariant& value,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_so_0, len_so_0, &z_var_so_1) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_so_1 = (QObject*) php_qt_fetch(z_var_so_1);
@@ -339,6 +349,7 @@
 		int len_s_0;
 
 
+		/* const char* signal,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -363,6 +374,7 @@
 		int len_s_0;
 
 
+		/* const char* name,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -467,6 +479,7 @@
 		int len_s_0;
 
 
+		/* const char* signal,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -489,6 +502,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -514,6 +528,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QEvent* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -642,6 +657,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* uint id, QObjectUserData* data,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -668,6 +684,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* uint id,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -714,6 +731,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& name,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -740,6 +758,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int id,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -762,6 +781,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -788,6 +808,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QThread* thread,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -821,6 +842,7 @@
 
 		long var_ossl_3;    // default: Qt::AutoConnection
 
+		/* const QObject* sender, const char* signal, const char* member, int type,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ossl|", &z_var_ossl_0, &var_ossl_1, len_ossl_1, &var_ossl_2, len_ossl_2, &var_ossl_3) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_ossl_0 = (QObject*) php_qt_fetch(z_var_ossl_0);
@@ -845,6 +867,7 @@
 
 		long var_ososl_4;    // default: Qt::AutoConnection
 
+		/* const QObject* sender, const char* signal, const QObject* receiver, const char* member, int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ososl|", &z_var_ososl_0, &var_ososl_1, len_ososl_1, &z_var_ososl_2, &var_ososl_3, len_ososl_3, &var_ososl_4) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_ososl_0 = (QObject*) php_qt_fetch(z_var_ososl_0);
@@ -872,6 +895,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool b,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -907,15 +931,12 @@
  *    flags:    t
  */
 ZEND_METHOD(QObject, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QObject *obj = (QObject*) PHP_QT_FETCH();
-			RETURN_~(obj->QObject());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 0
 
+		/* QObject* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -923,7 +944,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QObject*") {
-				obj->QObject((QObject*) var_o_0);
+				QObject *QObject_ptr = new QObject((QObject*) var_o_0);
+			PHP_QT_REGISTER(QObject_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -934,6 +956,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 0
 
+		/* QObjectPrivate& dd, QObject* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -943,7 +966,8 @@
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
 			if(tmp_oo_0 == "QObjectPrivate&" && tmp_oo_1 == "QObject*") {
-				obj->QObject((QObjectPrivate&) var_oo_0, (QObject*) var_oo_1);
+				QObject *QObject_ptr = new QObject((QObjectPrivate&) var_oo_0, (QObject*) var_oo_1);
+			PHP_QT_REGISTER(QObject_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -976,6 +1000,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int interval,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -999,6 +1024,7 @@
 		int len_s_0;
 
 
+		/* const char* classname,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -1021,6 +1047,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* QObject* , QEvent* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -1053,6 +1080,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 
@@ -1082,6 +1110,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QObject *obj = (QObject*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

Modified: trunk/playground/classes/qobjectdata.cpp
===================================================================
--- trunk/playground/classes/qobjectdata.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qobjectdata.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QObjectData.cpp - QObjectData PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -33,14 +33,6 @@
 
 /*********************************
  *    class     QObjectData */
-/*
- *    function  QObjectData
- *    flags:    pv
- */
-ZEND_METHOD(QObjectData, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-		QObjectData *QObjectData_ptr = new QObjectData();
-	}
 }
 
 

Modified: trunk/playground/classes/qobjectuserdata.cpp
===================================================================
--- trunk/playground/classes/qobjectuserdata.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qobjectuserdata.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QObjectUserData.cpp - QObjectUserData PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -33,14 +33,6 @@
 
 /*********************************
  *    class     QObjectUserData */
-/*
- *    function  QObjectUserData
- *    flags:    v
- */
-ZEND_METHOD(QObjectUserData, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-		QObjectUserData *QObjectUserData_ptr = new QObjectUserData();
-	}
 }
 
 

Modified: trunk/playground/classes/qpainter.cpp
===================================================================
--- trunk/playground/classes/qpainter.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qpainter.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QPainter.cpp - QPainter PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -66,6 +66,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRectF& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -90,6 +91,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int x, int y, int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -113,6 +115,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: Qt::ReplaceClip
 
+		/* const QPainterPath& path, int op,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -149,6 +152,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* qreal sh, qreal sv,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -205,6 +209,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QWidget* widget,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -250,6 +255,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int direction,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -272,6 +278,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -286,6 +293,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int x, int y,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -328,6 +336,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* const QRectF* rects, int rectCount,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -354,6 +363,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPainterPath& path,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -377,6 +387,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* const QPainterPath& path, const QBrush& brush,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -403,6 +414,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* qreal a,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -431,6 +443,7 @@
 		long var_oll_1;    // default: 
 		long var_oll_2;    // default: 
 
+		/* const QRectF& rect, int a, int alen,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
@@ -461,6 +474,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPointF& offset,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -475,6 +489,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* qreal dx, qreal dy,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -503,6 +518,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* CompositionMode mode,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -529,6 +545,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& window,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -549,6 +566,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int x, int y, int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -591,6 +609,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QRect& r, const QPixmap& pm,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -608,6 +627,7 @@
 		long var_lo_2;    // default: 
 		zval* z_var_lo_3;   // default: 
 
+		/* const QPointF& p, const QPixmap& pm,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &z_var_lo_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_lo_3 = (QObject*) php_qt_fetch(z_var_lo_3);
@@ -631,6 +651,7 @@
 		zval* z_var_loo_1;   // default: 
 		zval* z_var_loo_2;   // default: 
 
+		/* const QPointF& p, const QPixmap& pm, const QRectF& sr,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"loo", &var_loo_0, &z_var_loo_1, &z_var_loo_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_loo_1 = (QObject*) php_qt_fetch(z_var_loo_1);
@@ -653,6 +674,7 @@
 		zval* z_var_ooo_7;   // default: 
 		zval* z_var_ooo_8;   // default: 
 
+		/* const QRectF& targetRect, const QPixmap& pixmap, const QRectF& sourceRect,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_6, &z_var_ooo_7, &z_var_ooo_8) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ooo_6 = (QObject*) php_qt_fetch(z_var_ooo_6);
@@ -673,6 +695,7 @@
 		long var_llo_10;    // default: 
 		zval* z_var_llo_11;   // default: 
 
+		/* int x, int y, const QPixmap& pm,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_9, &var_llo_10, &z_var_llo_11) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_llo_11 = (QObject*) php_qt_fetch(z_var_llo_11);
@@ -694,6 +717,7 @@
 		long var_llllo_3;    // default: 
 		zval* z_var_llllo_4;   // default: 
 
+		/* int x, int y, int w, int h, const QPixmap& pm,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &z_var_llllo_4) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_llllo_4 = (QObject*) php_qt_fetch(z_var_llllo_4);
@@ -720,6 +744,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QPolygonF& polyline,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -742,6 +767,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* const QPointF* points, int pointCount,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -783,6 +809,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QLineF& line,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -801,6 +828,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* const QPoint& p1, const QPoint& p2,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -817,6 +845,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int x1, int y1, int x2, int y2,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -840,6 +869,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QRectF& , const QBrush& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -867,6 +897,7 @@
 		long var_llllo_3;    // default: 
 		zval* z_var_llllo_4;   // default: 
 
+		/* int x, int y, int w, int h, const QBrush& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &z_var_llllo_4) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_llllo_4 = (QObject*) php_qt_fetch(z_var_llllo_4);
@@ -895,6 +926,7 @@
 		zval* z_var_ooo_1;   // default: 
 		zval* z_var_ooo_2;   // default: QTextOption()
 
+		/* const QRectF& rect, const QString& text, const QTextOption& o,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
@@ -915,6 +947,7 @@
 		long var_olo_4;    // default: 
 		zval* z_var_olo_5;   // default: 
 
+		/* const QRectF& rect, int flags, const QString& text,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &z_var_olo_3, &var_olo_4, &z_var_olo_5) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_olo_3 = (QObject*) php_qt_fetch(z_var_olo_3);
@@ -958,6 +991,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::ReplaceClip
 
+		/* const QRectF& , int op,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -979,6 +1013,7 @@
 		long var_lllll_3;    // default: 
 		long var_lllll_4;    // default: Qt::ReplaceClip
 
+		/* int x, int y, int w, int h, int op,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll|", &var_lllll_0, &var_lllll_1, &var_lllll_2, &var_lllll_3, &var_lllll_4) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1002,6 +1037,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QRectF& r, const QImage& image,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -1019,6 +1055,7 @@
 		long var_lo_2;    // default: 
 		zval* z_var_lo_3;   // default: 
 
+		/* const QPointF& p, const QImage& image,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &z_var_lo_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_lo_3 = (QObject*) php_qt_fetch(z_var_lo_3);
@@ -1043,6 +1080,7 @@
 		zval* z_var_oool_2;   // default: 
 		long var_oool_3;    // default: Qt::AutoColor
 
+		/* const QRectF& targetRect, const QImage& image, const QRectF& sourceRect, int flags,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oool|", &z_var_oool_0, &z_var_oool_1, &z_var_oool_2, &var_oool_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oool_0 = (QObject*) php_qt_fetch(z_var_oool_0);
@@ -1064,6 +1102,7 @@
 		zval* z_var_lool_6;   // default: 
 		long var_lool_7;    // default: Qt::AutoColor
 
+		/* const QPointF& p, const QImage& image, const QRectF& sr, int flags,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lool|", &var_lool_4, &z_var_lool_5, &z_var_lool_6, &var_lool_7) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_lool_5 = (QObject*) php_qt_fetch(z_var_lool_5);
@@ -1098,6 +1137,7 @@
 		zval* z_var_ool_1;   // default: 
 		long var_ool_2;    // default: QPointF()
 
+		/* const QRectF& rect, const QPixmap& pm, const QPointF& offset,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
@@ -1169,6 +1209,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::OddEvenFill
 
+		/* const QPolygonF& polygon, int fillRule,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -1192,6 +1233,7 @@
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: Qt::OddEvenFill
 
+		/* const QPointF* points, int pointCount, int fillRule,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1234,6 +1276,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::ReplaceClip
 
+		/* const QRegion& , int op,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -1260,6 +1303,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPaintDevice* device,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1282,6 +1326,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool enabled,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1304,6 +1349,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QPolygonF& points,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1326,6 +1372,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* const QPointF* points, int pointCount,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1350,6 +1397,7 @@
 		long var_oll_1;    // default: 25
 		long var_oll_2;    // default: 25
 
+		/* const QRectF& r, int xround, int yround,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
@@ -1380,6 +1428,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QPolygonF& polygon,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1402,6 +1451,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* const QPointF* points, int pointCount,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1425,6 +1475,7 @@
 		zval* z_var_ob_0;   // default: 
 		bool var_ob_1;   // _default: false
 
+		/* const QMatrix& matrix, bool combine,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob|", &z_var_ob_0, &var_ob_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ob_0 = (QObject*) php_qt_fetch(z_var_ob_0);
@@ -1452,6 +1503,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* const QPointF& p, const QPicture& picture,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -1475,6 +1527,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int x, int y, const QPicture& picture,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -1586,6 +1639,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* const QPointF& p, const QString& s,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -1609,6 +1663,7 @@
 		zval* z_var_ooo_1;   // default: 
 		zval* z_var_ooo_2;   // default: QTextOption()
 
+		/* const QRectF& r, const QString& text, const QTextOption& o,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
@@ -1629,6 +1684,7 @@
 		long var_llo_4;    // default: 
 		zval* z_var_llo_5;   // default: 
 
+		/* int x, int y, const QString& s,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_3, &var_llo_4, &z_var_llo_5) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_llo_5 = (QObject*) php_qt_fetch(z_var_llo_5);
@@ -1649,6 +1705,7 @@
 		zval* z_var_oloo_2;   // default: 
 		zval* z_var_oloo_3;   // default: 0
 
+		/* const QRectF& r, int flags, const QString& text, QRectF* br,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oloo|", &z_var_oloo_0, &var_oloo_1, &z_var_oloo_2, &z_var_oloo_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oloo_0 = (QObject*) php_qt_fetch(z_var_oloo_0);
@@ -1681,6 +1738,7 @@
 		long var_oll_1;    // default: 
 		long var_oll_2;    // default: 
 
+		/* const QRectF& rect, int a, int alen,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
@@ -1756,6 +1814,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool enable,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1779,6 +1838,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* qreal sx, qreal sy,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -1807,6 +1867,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int style,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1817,6 +1878,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QColor& color,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -1847,6 +1909,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int mode,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1908,6 +1971,7 @@
 		long var_lb_0;    // default: 
 		bool var_lb_1;   // _default: true
 
+		/* RenderHint hint, bool on,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb|", &var_lb_0, &var_lb_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1950,6 +2014,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* const QPainterPath& path, const QPen& pen,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -1976,6 +2041,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int style,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -1986,6 +2052,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QBrush& brush,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -2012,6 +2079,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPointF& pt,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2026,6 +2094,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int x, int y,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2044,22 +2113,22 @@
  */
 ZEND_METHOD(QPainter, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-		QPainter *QPainter_ptr = new QPainter();
+			QPainter *QPainter_ptr = new QPainter();
+			PHP_QT_REGISTER(QPainter_ptr);
+			RETURN_NULL();
 	}
-	if (ZEND_NUM_ARGS() == 0){
-			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			RETURN_~(obj->QPainter());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l */
 		long var_l_0;    // default: 
 
+		/* QPaintDevice* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
 			
-			obj->QPainter((QPaintDevice*) var_l_0);
+			QPainter *QPainter_ptr = new QPainter((QPaintDevice*) var_l_0);
+			PHP_QT_REGISTER(QPainter_ptr);
 			RETURN_NULL();
 		}
 	}
@@ -2079,6 +2148,7 @@
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: QPoint()
 
+		/* const QPaintDevice* device, QPaintDevice* replacement, const QPoint& offset,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2115,6 +2185,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QFont& f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2141,6 +2212,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* QPaintDevice* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2162,6 +2234,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& viewport,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2182,6 +2255,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int x, int y, int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2204,6 +2278,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRectF& r,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2224,6 +2299,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int x, int y, int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2248,6 +2324,7 @@
 		long var_oll_1;    // default: 
 		long var_oll_2;    // default: 
 
+		/* const QRectF& rect, int a, int alen,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
@@ -2278,6 +2355,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QBrush& bg,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2317,6 +2395,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRectF& rect,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2341,6 +2420,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int x1, int y1, int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2364,6 +2444,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* const QLineF* lines, int lineCount,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -2383,6 +2464,7 @@
 		long var_ll_4;    // default: 
 		long var_ll_5;    // default: 
 
+		/* const QPointF* pointPairs, int lineCount,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_4, &var_ll_5) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2439,6 +2521,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 0
 
+		/* const QPaintDevice* device, QPoint* offset,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2480,6 +2563,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* const QPointF& p, const QTextItem& ti,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -2503,6 +2587,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int x, int y, const QTextItem& ti,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -2529,6 +2614,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool enable,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qpaintevent.cpp
===================================================================
--- trunk/playground/classes/qpaintevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qpaintevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QPaintEvent.cpp - QPaintEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qpushbutton.cpp
===================================================================
--- trunk/playground/classes/qpushbutton.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qpushbutton.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QPushButton.cpp - QPushButton PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -48,6 +48,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
@@ -89,6 +90,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
@@ -112,6 +114,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -188,6 +191,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
@@ -231,6 +235,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
@@ -291,6 +296,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
@@ -314,6 +320,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -334,15 +341,12 @@
  *    flags:    t
  */
 ZEND_METHOD(QPushButton, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			RETURN_~(obj->QPushButton());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 0
 
+		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -350,7 +354,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget*") {
-				obj->QPushButton((QWidget*) var_o_0);
+				QPushButton *QPushButton_ptr = new QPushButton((QWidget*) var_o_0);
+			PHP_QT_REGISTER(QPushButton_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -361,6 +366,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 0
 
+		/* const QString& text, QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -370,7 +376,8 @@
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
 			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "QWidget*") {
-				obj->QPushButton((const QString&) var_oo_0, (QWidget*) var_oo_1);
+				QPushButton *QPushButton_ptr = new QPushButton((const QString&) var_oo_0, (QWidget*) var_oo_1);
+			PHP_QT_REGISTER(QPushButton_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -382,6 +389,7 @@
 		zval* z_var_ooo_1;   // default: 
 		zval* z_var_ooo_2;   // default: 0
 
+		/* const QIcon& icon, const QString& text, QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
@@ -393,7 +401,8 @@
 			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
 			
 			if(tmp_ooo_0 == "const QIcon&" && tmp_ooo_1 == "const QString&" && tmp_ooo_2 == "QWidget*") {
-				obj->QPushButton((const QIcon&) var_ooo_0, (const QString&) var_ooo_1, (QWidget*) var_ooo_2);
+				QPushButton *QPushButton_ptr = new QPushButton((const QIcon&) var_ooo_0, (const QString&) var_ooo_1, (QWidget*) var_ooo_2);
+			PHP_QT_REGISTER(QPushButton_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -449,6 +458,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
@@ -491,6 +501,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -516,6 +527,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QMenu* menu,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

Modified: trunk/playground/classes/qresizeevent.cpp
===================================================================
--- trunk/playground/classes/qresizeevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qresizeevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QResizeEvent.cpp - QResizeEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qshortcutevent.cpp
===================================================================
--- trunk/playground/classes/qshortcutevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qshortcutevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QShortcutEvent.cpp - QShortcutEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qshowevent.cpp
===================================================================
--- trunk/playground/classes/qshowevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qshowevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QShowEvent.cpp - QShowEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qslider.cpp
===================================================================
--- trunk/playground/classes/qslider.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qslider.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QSlider.cpp - QSlider PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -58,6 +58,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 
@@ -86,6 +87,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -144,15 +146,12 @@
  *    flags:    t
  */
 ZEND_METHOD(QSlider, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QSlider *obj = (QSlider*) PHP_QT_FETCH();
-			RETURN_~(obj->QSlider());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 0
 
+		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -160,7 +159,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget*") {
-				obj->QSlider((QWidget*) var_o_0);
+				QSlider *QSlider_ptr = new QSlider((QWidget*) var_o_0);
+			PHP_QT_REGISTER(QSlider_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -171,6 +171,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 0
 
+		/* int orientation, QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -178,7 +179,8 @@
 			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
 			if(tmp_lo_0 == "QWidget*") {
-				obj->QSlider((Qt::Orientation) var_lo_0, (QWidget*) var_lo_1);
+				QSlider *QSlider_ptr = new QSlider((Qt::Orientation) var_lo_0, (QWidget*) var_lo_1);
+			PHP_QT_REGISTER(QSlider_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -237,6 +239,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 
@@ -291,6 +294,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ti,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 
@@ -328,6 +332,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -353,6 +358,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QEvent* event,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -397,6 +403,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* TickPosition position,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -428,6 +435,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 
@@ -457,6 +465,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QSlider *obj = (QSlider*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

Modified: trunk/playground/classes/qspaceritem.cpp
===================================================================
--- trunk/playground/classes/qspaceritem.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qspaceritem.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QSpacerItem.cpp - QSpacerItem PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -46,6 +46,7 @@
 		zval* z_var_lloo_2;   // default: QSizePolicy::Minimum
 		zval* z_var_lloo_3;   // default: QSizePolicy::Minimum
 
+		/* int w, int h, QSizePolicy::Policy hData, QSizePolicy::Policy vData,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo|o|", &var_lloo_0, &var_lloo_1, &z_var_lloo_2, &z_var_lloo_3) == SUCCESS) {
 			QSpacerItem *obj = (QSpacerItem*) PHP_QT_FETCH();
 			QObject* var_lloo_2 = (QObject*) php_qt_fetch(z_var_lloo_2);
@@ -87,6 +88,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QSpacerItem *obj = (QSpacerItem*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -230,6 +232,7 @@
 		zval* z_var_lloo_2;   // default: QSizePolicy::Minimum
 		zval* z_var_lloo_3;   // default: QSizePolicy::Minimum
 
+		/* int w, int h, QSizePolicy::Policy hData, QSizePolicy::Policy vData,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo|o|", &var_lloo_0, &var_lloo_1, &z_var_lloo_2, &z_var_lloo_3) == SUCCESS) {
 			QSpacerItem *obj = (QSpacerItem*) PHP_QT_FETCH();
 			QObject* var_lloo_2 = (QObject*) php_qt_fetch(z_var_lloo_2);
@@ -239,7 +242,8 @@
 			QString tmp_lloo_1(var_lloo_3->metaObject()->className());
 			
 			if(tmp_lloo_0 == "QSizePolicy::Policy" && tmp_lloo_1 == "QSizePolicy::Policy") {
-				obj->QSpacerItem((int) var_lloo_0, (int) var_lloo_1, (QSizePolicy::Policy) var_lloo_2, (QSizePolicy::Policy) var_lloo_3);
+				QSpacerItem *QSpacerItem_ptr = new QSpacerItem((int) var_lloo_0, (int) var_lloo_1, (QSizePolicy::Policy) var_lloo_2, (QSizePolicy::Policy) var_lloo_3);
+			PHP_QT_REGISTER(QSpacerItem_ptr);
 			RETURN_NULL();
 			}
 		}

Modified: trunk/playground/classes/qstatustipevent.cpp
===================================================================
--- trunk/playground/classes/qstatustipevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qstatustipevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QStatusTipEvent.cpp - QStatusTipEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qstring.cpp
===================================================================
--- trunk/playground/classes/qstring.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qstring.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QString.cpp - QString PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -66,6 +66,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& s,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -83,6 +84,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QString& s1, const QString& s2,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -149,6 +151,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int i, QChar c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -182,6 +185,7 @@
 		zval* z_var_lol_1;   // default: 
 		long var_lol_2;    // default: 
 
+		/* int i, const QChar* uc, int len,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_lol_0, &z_var_lol_1, &var_lol_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_lol_1 = (QObject*) php_qt_fetch(z_var_lol_1);
@@ -228,6 +232,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* const ushort* utf16, int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -261,6 +266,7 @@
 		int len_s_0;
 
 
+		/* const char* s,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -276,6 +282,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* QChar c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -344,6 +351,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int n,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -368,6 +376,7 @@
 		zval* z_var_lob_1;   // default: QLatin1Char(' ')
 		bool var_lob_2;   // _default: false
 
+		/* int width, QChar fill, bool trunc,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|b|", &var_lob_0, &z_var_lob_1, &var_lob_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_lob_1 = (QObject*) php_qt_fetch(z_var_lob_1);
@@ -417,6 +426,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRegExp& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -434,6 +444,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::CaseSensitive
 
+		/* QChar c, int cs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -465,6 +476,7 @@
 
 		long var_sl_1;    // default: -1
 
+		/* const char* , int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -493,6 +505,7 @@
 		bool var_bl_0;   // _default: 0
 		long var_bl_1;    // default: 10
 
+		/* bool* ok, int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -530,12 +543,10 @@
  */
 ZEND_METHOD(QString, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-		QString *QString_ptr = new QString();
+			QString *QString_ptr = new QString();
+			PHP_QT_REGISTER(QString_ptr);
+			RETURN_NULL();
 	}
-	if (ZEND_NUM_ARGS() == 0){
-			QString *obj = (QString*) PHP_QT_FETCH();
-			RETURN_~(obj->QString());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* s */
@@ -543,16 +554,19 @@
 		int len_s_0;
 
 
+		/* const char* ch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
 			
-			obj->QString( (const char*) var_s_0);
+			QString *QString_ptr = new QString( (const char*) var_s_0);
+			PHP_QT_REGISTER(QString_ptr);
 			RETURN_NULL();
 		}
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* QChar c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -560,23 +574,28 @@
 			QString tmp_o_0(var_o_1->metaObject()->className());
 			
 			if(tmp_o_0 == "QChar") {
-				obj->QString((QChar) var_o_1);
+				QString *QString_ptr = new QString((QChar) var_o_1);
+			PHP_QT_REGISTER(QString_ptr);
 			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "const QLatin1String&") {
-				obj->QString((const QLatin1String&) var_o_1);
+				QString *QString_ptr = new QString((const QLatin1String&) var_o_1);
+			PHP_QT_REGISTER(QString_ptr);
 			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "const QString&") {
-				obj->QString((const QString&) var_o_1);
+				QString *QString_ptr = new QString((const QString&) var_o_1);
+			PHP_QT_REGISTER(QString_ptr);
 			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "const QByteArray&") {
-				obj->QString((const QByteArray&) var_o_1);
+				QString *QString_ptr = new QString((const QByteArray&) var_o_1);
+			PHP_QT_REGISTER(QString_ptr);
 			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "const Null&") {
-				obj->QString((const Null&) var_o_1);
+				QString *QString_ptr = new QString((const Null&) var_o_1);
+			PHP_QT_REGISTER(QString_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -587,6 +606,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* const QChar* unicode, int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -594,7 +614,8 @@
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
 			if(tmp_ol_0 == "const QChar*") {
-				obj->QString((const QChar*) var_ol_0, (int) var_ol_1);
+				QString *QString_ptr = new QString((const QChar*) var_ol_0, (int) var_ol_1);
+			PHP_QT_REGISTER(QString_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -602,6 +623,7 @@
 		long var_lo_2;    // default: 
 		zval* z_var_lo_3;   // default: 
 
+		/* int size, QChar c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &z_var_lo_3) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_lo_3 = (QObject*) php_qt_fetch(z_var_lo_3);
@@ -609,7 +631,8 @@
 			QString tmp_lo_0(var_lo_3->metaObject()->className());
 			
 			if(tmp_lo_0 == "QChar") {
-				obj->QString((int) var_lo_2, (QChar) var_lo_3);
+				QString *QString_ptr = new QString((int) var_lo_2, (QChar) var_lo_3);
+			PHP_QT_REGISTER(QString_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -628,6 +651,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* NormalizationForm mode,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -651,6 +675,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* NormalizationForm mode, QChar::UnicodeVersion version,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -685,6 +710,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: -1
 
+		/* const ushort* , int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -730,6 +756,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 10
 
+		/* short , int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -786,6 +813,7 @@
 		long var_ll_10;    // default: 
 		long var_ll_11;    // default: 10
 
+		/* int , int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_10, &var_ll_11) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -801,21 +829,20 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* osl */
-		zval* z_var_osl_0;   // default: 
-		char* var_osl_1;   // default: 'g'
-		int len_osl_1;
+		/* oll */
+		zval* z_var_oll_0;   // default: 
+		long var_oll_1;    // default: 'g'
+		long var_oll_2;    // default: 6
 
-		long var_osl_2;    // default: 6
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|l|", &z_var_osl_0, &var_osl_1, len_osl_1, &var_osl_2) == SUCCESS) {
+		/* float , char f, int prec,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_osl_0 = (QObject*) php_qt_fetch(z_var_osl_0);
+			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
 
-			QString tmp_osl_0(var_osl_0->metaObject()->className());
+			QString tmp_oll_0(var_oll_0->metaObject()->className());
 			
-			if(tmp_osl_0 == "float") {
-				QString & return_object = (QString &) obj->setNum((float) var_osl_0, (char) var_osl_1, (int) var_osl_2);
+			if(tmp_oll_0 == "float") {
+				QString & return_object = (QString &) obj->setNum((float) var_oll_0, (char) var_oll_1, (int) var_oll_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -823,8 +850,8 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}			
-			if(tmp_osl_0 == "double") {
-				QString & return_object = (QString &) obj->setNum((double) var_osl_0, (char) var_osl_4, (int) var_osl_5);
+			if(tmp_oll_0 == "double") {
+				QString & return_object = (QString &) obj->setNum((double) var_oll_0, (char) var_oll_4, (int) var_oll_5);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -849,6 +876,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::CaseSensitive
 
+		/* const QString& s, int cs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -878,6 +906,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 10
 
+		/* ulong , int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -916,6 +945,7 @@
 		long var_ll_6;    // default: 
 		long var_ll_7;    // default: 10
 
+		/* int , int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_6, &var_ll_7) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -931,21 +961,20 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* osl */
-		zval* z_var_osl_0;   // default: 
-		char* var_osl_1;   // default: 'g'
-		int len_osl_1;
+		/* oll */
+		zval* z_var_oll_0;   // default: 
+		long var_oll_1;    // default: 'g'
+		long var_oll_2;    // default: 6
 
-		long var_osl_2;    // default: 6
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|l|", &z_var_osl_0, &var_osl_1, len_osl_1, &var_osl_2) == SUCCESS) {
+		/* double , char f, int prec,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_osl_0 = (QObject*) php_qt_fetch(z_var_osl_0);
+			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
 
-			QString tmp_osl_0(var_osl_0->metaObject()->className());
+			QString tmp_oll_0(var_oll_0->metaObject()->className());
 			
-			if(tmp_osl_0 == "double") {
-				QString return_object = (QString) obj->number((double) var_osl_0, (char) var_osl_1, (int) var_osl_2);
+			if(tmp_oll_0 == "double") {
+				QString return_object = (QString) obj->number((double) var_oll_0, (char) var_oll_1, (int) var_oll_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -969,6 +998,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& s,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -986,6 +1016,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QString& s1, const QString& s2,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -1016,6 +1047,7 @@
 		long var_ollo_2;    // default: -1
 		zval* z_var_ollo_3;   // default: SectionDefault
 
+		/* QChar sep, int start, int end, SectionFlags flags,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll|o|", &z_var_ollo_0, &var_ollo_1, &var_ollo_2, &z_var_ollo_3) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ollo_0 = (QObject*) php_qt_fetch(z_var_ollo_0);
@@ -1113,6 +1145,7 @@
 		bool var_bl_0;   // _default: 0
 		long var_bl_1;    // default: 10
 
+		/* bool* ok, int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1135,6 +1168,7 @@
 		bool var_bl_0;   // _default: 0
 		long var_bl_1;    // default: 10
 
+		/* bool* ok, int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1156,6 +1190,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int pos,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1204,6 +1239,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int len,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1231,6 +1267,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QChar c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1275,6 +1312,7 @@
 		bool var_bl_0;   // _default: 0
 		long var_bl_1;    // default: 10
 
+		/* bool* ok, int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1298,6 +1336,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 0
 
+		/* const QRegExp& , int from,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -1316,6 +1355,7 @@
 		long var_oll_1;    // default: 0
 		long var_oll_2;    // default: Qt::CaseSensitive
 
+		/* QChar c, int from, int cs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
@@ -1345,6 +1385,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* const QChar* , int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -1390,6 +1431,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int len,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1420,6 +1462,7 @@
 
 		long var_sl_1;    // default: -1
 
+		/* const char* , int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1448,6 +1491,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::CaseSensitive
 
+		/* const QString& s, int cs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -1476,6 +1520,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRegExp& rx,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1499,6 +1544,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::CaseSensitive
 
+		/* QChar c, int cs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -1528,6 +1574,7 @@
 		long var_ll_4;    // default: 
 		long var_ll_5;    // default: 
 
+		/* int i, int len,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_4, &var_ll_5) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1569,6 +1616,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QString& a1, const QString& a2,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -1590,46 +1638,24 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* slo */
-		char* var_slo_0;   // default: 
-		int len_slo_0;
-
-		long var_slo_1;    // default: 0
-		zval* z_var_slo_2;   // default: QLatin1Char(' ')
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|o|", &var_slo_0, len_slo_0, &var_slo_1, &z_var_slo_2) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_slo_2 = (QObject*) php_qt_fetch(z_var_slo_2);
-
-			QString tmp_slo_0(var_slo_2->metaObject()->className());
-			
-			if(tmp_slo_0 == "const QChar&") {
-				QString return_object = (QString) obj->arg((char) var_slo_0, (int) var_slo_1, (const QChar&) var_slo_2);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
 		/* ooo */
-		zval* z_var_ooo_3;   // default: 
-		zval* z_var_ooo_4;   // default: 
-		zval* z_var_ooo_5;   // default: 
+		zval* z_var_ooo_0;   // default: 
+		zval* z_var_ooo_1;   // default: 
+		zval* z_var_ooo_2;   // default: 
 
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_3, &z_var_ooo_4, &z_var_ooo_5) == SUCCESS) {
+		/* const QString& a1, const QString& a2, const QString& a3,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ooo_3 = (QObject*) php_qt_fetch(z_var_ooo_3);
-			QObject* var_ooo_4 = (QObject*) php_qt_fetch(z_var_ooo_4);
-			QObject* var_ooo_5 = (QObject*) php_qt_fetch(z_var_ooo_5);
+			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
+			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
+			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);
 
-			QString tmp_ooo_0(var_ooo_3->metaObject()->className());
-			QString tmp_ooo_1(var_ooo_4->metaObject()->className());
-			QString tmp_ooo_2(var_ooo_5->metaObject()->className());
+			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
+			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
+			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
 			
 			if(tmp_ooo_0 == "const QString&" && tmp_ooo_1 == "const QString&" && tmp_ooo_2 == "const QString&") {
-				QString return_object = (QString) obj->arg((const QString&) var_ooo_3, (const QString&) var_ooo_4, (const QString&) var_ooo_5);
+				QString return_object = (QString) obj->arg((const QString&) var_ooo_0, (const QString&) var_ooo_1, (const QString&) var_ooo_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1639,20 +1665,21 @@
 			}
 		}
 		/* olo */
-		zval* z_var_olo_6;   // default: 
-		long var_olo_7;    // default: 0
-		zval* z_var_olo_8;   // default: QLatin1Char(' ')
+		zval* z_var_olo_3;   // default: 
+		long var_olo_4;    // default: 0
+		zval* z_var_olo_5;   // default: QLatin1Char(' ')
 
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|o|", &z_var_olo_6, &var_olo_7, &z_var_olo_8) == SUCCESS) {
+		/* QChar a, int fieldWidth, const QChar& fillChar,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|o|", &z_var_olo_3, &var_olo_4, &z_var_olo_5) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_olo_6 = (QObject*) php_qt_fetch(z_var_olo_6);
-			QObject* var_olo_8 = (QObject*) php_qt_fetch(z_var_olo_8);
+			QObject* var_olo_3 = (QObject*) php_qt_fetch(z_var_olo_3);
+			QObject* var_olo_5 = (QObject*) php_qt_fetch(z_var_olo_5);
 
-			QString tmp_olo_0(var_olo_6->metaObject()->className());
-			QString tmp_olo_1(var_olo_8->metaObject()->className());
+			QString tmp_olo_0(var_olo_3->metaObject()->className());
+			QString tmp_olo_1(var_olo_5->metaObject()->className());
 			
 			if(tmp_olo_0 == "QChar" && tmp_olo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((QChar) var_olo_6, (int) var_olo_7, (const QChar&) var_olo_8);
+				QString return_object = (QString) obj->arg((QChar) var_olo_3, (int) var_olo_4, (const QChar&) var_olo_5);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1661,7 +1688,7 @@
 				return;                                             
 			}			
 			if(tmp_olo_0 == "const QString&" && tmp_olo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((const QString&) var_olo_6, (int) var_olo_10, (const QChar&) var_olo_8);
+				QString return_object = (QString) obj->arg((const QString&) var_olo_3, (int) var_olo_7, (const QChar&) var_olo_5);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1670,6 +1697,28 @@
 				return;                                             
 			}
 		}
+		/* llo */
+		long var_llo_9;    // default: 
+		long var_llo_10;    // default: 0
+		zval* z_var_llo_11;   // default: QLatin1Char(' ')
+
+		/* char a, int fieldWidth, const QChar& fillChar,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|o|", &var_llo_9, &var_llo_10, &z_var_llo_11) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_llo_11 = (QObject*) php_qt_fetch(z_var_llo_11);
+
+			QString tmp_llo_0(var_llo_11->metaObject()->className());
+			
+			if(tmp_llo_0 == "const QChar&") {
+				QString return_object = (QString) obj->arg((char) var_llo_9, (int) var_llo_10, (const QChar&) var_llo_11);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
@@ -1679,6 +1728,7 @@
 		long var_lllo_2;    // default: 10
 		zval* z_var_lllo_3;   // default: QLatin1Char(' ')
 
+		/* int a, int fieldWidth, int base, const QChar& fillChar,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|o|", &var_lllo_0, &var_lllo_1, &var_lllo_2, &z_var_lllo_3) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_lllo_3 = (QObject*) php_qt_fetch(z_var_lllo_3);
@@ -1701,6 +1751,7 @@
 		long var_ollo_6;    // default: 10
 		zval* z_var_ollo_7;   // default: QLatin1Char(' ')
 
+		/* qlonglong a, int fieldwidth, int base, const QChar& fillChar,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|o|", &z_var_ollo_4, &var_ollo_5, &var_ollo_6, &z_var_ollo_7) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ollo_4 = (QObject*) php_qt_fetch(z_var_ollo_4);
@@ -1770,6 +1821,7 @@
 		zval* z_var_oooo_30;   // default: 
 		zval* z_var_oooo_31;   // default: 
 
+		/* const QString& a1, const QString& a2, const QString& a3, const QString& a4,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &z_var_oooo_28, &z_var_oooo_29, &z_var_oooo_30, &z_var_oooo_31) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_oooo_28 = (QObject*) php_qt_fetch(z_var_oooo_28);
@@ -1795,25 +1847,24 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 5){
-		/* olslo */
-		zval* z_var_olslo_0;   // default: 
-		long var_olslo_1;    // default: 0
-		char* var_olslo_2;   // default: 'g'
-		int len_olslo_2;
+		/* olllo */
+		zval* z_var_olllo_0;   // default: 
+		long var_olllo_1;    // default: 0
+		long var_olllo_2;    // default: 'g'
+		long var_olllo_3;    // default: -1
+		zval* z_var_olllo_4;   // default: QLatin1Char(' ')
 
-		long var_olslo_3;    // default: -1
-		zval* z_var_olslo_4;   // default: QLatin1Char(' ')
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|s|l|o|", &z_var_olslo_0, &var_olslo_1, &var_olslo_2, len_olslo_2, &var_olslo_3, &z_var_olslo_4) == SUCCESS) {
+		/* double a, int fieldWidth, char fmt, int prec, const QChar& fillChar,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|l|o|", &z_var_olllo_0, &var_olllo_1, &var_olllo_2, &var_olllo_3, &z_var_olllo_4) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_olslo_0 = (QObject*) php_qt_fetch(z_var_olslo_0);
-			QObject* var_olslo_4 = (QObject*) php_qt_fetch(z_var_olslo_4);
+			QObject* var_olllo_0 = (QObject*) php_qt_fetch(z_var_olllo_0);
+			QObject* var_olllo_4 = (QObject*) php_qt_fetch(z_var_olllo_4);
 
-			QString tmp_olslo_0(var_olslo_0->metaObject()->className());
-			QString tmp_olslo_1(var_olslo_4->metaObject()->className());
+			QString tmp_olllo_0(var_olllo_0->metaObject()->className());
+			QString tmp_olllo_1(var_olllo_4->metaObject()->className());
 			
-			if(tmp_olslo_0 == "double" && tmp_olslo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((double) var_olslo_0, (int) var_olslo_1, (char) var_olslo_2, (int) var_olslo_3, (const QChar&) var_olslo_4);
+			if(tmp_olllo_0 == "double" && tmp_olllo_1 == "const QChar&") {
+				QString return_object = (QString) obj->arg((double) var_olllo_0, (int) var_olllo_1, (char) var_olllo_2, (int) var_olllo_3, (const QChar&) var_olllo_4);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1840,6 +1891,7 @@
 
 		zval* z_var_so_1;   // default: 
 
+		/* const char* format, va_list ap,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_so_0, len_so_0, &z_var_so_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_so_1 = (QObject*) php_qt_fetch(z_var_so_1);
@@ -1871,6 +1923,7 @@
 		/* b */
 		bool var_b_0;   // _default: 0
 
+		/* bool* ok,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|", &var_b_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1905,6 +1958,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1928,6 +1982,7 @@
 		bool var_bl_0;   // _default: 0
 		long var_bl_1;    // default: 10
 
+		/* bool* ok, int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1950,6 +2005,7 @@
 		bool var_bl_0;   // _default: 0
 		long var_bl_1;    // default: 10
 
+		/* bool* ok, int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -1972,6 +2028,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: KeepEmptyParts
 
+		/* const QRegExp& sep, SplitBehavior behavior,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -1998,6 +2055,7 @@
 		zval* z_var_ool_1;   // default: KeepEmptyParts
 		long var_ool_2;    // default: Qt::CaseSensitive
 
+		/* const QString& sep, SplitBehavior behavior, int cs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|l|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
@@ -2032,6 +2090,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* const QChar* unicode, int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -2066,6 +2125,7 @@
 
 		long var_sl_1;    // default: -1
 
+		/* const char* , int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -2138,6 +2198,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRegExp& rx,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2156,6 +2217,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::CaseSensitive
 
+		/* QChar c, int cs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -2186,6 +2248,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -2209,6 +2272,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* const QRegExp& rx, const QString& after,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -2235,6 +2299,7 @@
 		zval* z_var_ool_1;   // default: 
 		long var_ool_2;    // default: Qt::CaseSensitive
 
+		/* QChar before, QChar after, int cs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
@@ -2276,6 +2341,7 @@
 		long var_llo_10;    // default: 
 		zval* z_var_llo_11;   // default: 
 
+		/* int i, int len, QChar after,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_9, &var_llo_10, &z_var_llo_11) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_llo_11 = (QObject*) php_qt_fetch(z_var_llo_11);
@@ -2310,6 +2376,7 @@
 		zval* z_var_llol_2;   // default: 
 		long var_llol_3;    // default: 
 
+		/* int i, int len, const QChar* s, int slen,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol", &var_llol_0, &var_llol_1, &z_var_llol_2, &var_llol_3) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_llol_2 = (QObject*) php_qt_fetch(z_var_llol_2);
@@ -2344,6 +2411,7 @@
 
 		long var_sl_1;    // default: -1
 
+		/* const char* , int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -2372,6 +2440,7 @@
 		bool var_bl_0;   // _default: 0
 		long var_bl_1;    // default: 10
 
+		/* bool* ok, int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -2409,6 +2478,7 @@
 		int len_s_0;
 
 
+		/* const char* s,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -2424,6 +2494,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* QChar c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -2474,6 +2545,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: -1
 
+		/* int i, int len,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -2501,6 +2573,7 @@
 		/* b */
 		bool var_b_0;   // _default: 0
 
+		/* bool* ok,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|", &var_b_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -2523,6 +2596,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: -1
 
+		/* QChar c, int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -2556,6 +2630,7 @@
 		zval* z_var_lob_1;   // default: QLatin1Char(' ')
 		bool var_lob_2;   // _default: false
 
+		/* int width, QChar fill, bool trunc,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|b|", &var_lob_0, &z_var_lob_1, &var_lob_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_lob_1 = (QObject*) php_qt_fetch(z_var_lob_1);
@@ -2607,6 +2682,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: -1
 
+		/* const QRegExp& , int from,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -2625,6 +2701,7 @@
 		long var_oll_1;    // default: -1
 		long var_oll_2;    // default: Qt::CaseSensitive
 
+		/* QChar c, int from, int cs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
@@ -2672,6 +2749,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int i,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 
@@ -2707,6 +2785,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QChar c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2778,6 +2857,7 @@
 		bool var_bl_0;   // _default: 0
 		long var_bl_1;    // default: 10
 
+		/* bool* ok, int base,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
 			QString *obj = (QString*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qtabletevent.cpp
===================================================================
--- trunk/playground/classes/qtabletevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qtabletevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTabletEvent.cpp - QTabletEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qtime.cpp
===================================================================
--- trunk/playground/classes/qtime.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qtime.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTime.cpp - QTime PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -63,6 +63,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 0
 
+		/* int h, int m, int s, int ms,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
@@ -97,6 +98,7 @@
 		/* l */
 		long var_l_0;    // default: Qt::TextDate
 
+		/* int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
@@ -112,6 +114,7 @@
 		/* o */
 		zval* z_var_o_1;   // default: 
 
+		/* const QString& format,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
@@ -156,6 +159,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QTime& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -195,6 +199,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::TextDate
 
+		/* const QString& s, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -215,6 +220,7 @@
 		zval* z_var_oo_2;   // default: 
 		zval* z_var_oo_3;   // default: 
 
+		/* const QString& s, const QString& format,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_2, &z_var_oo_3) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			QObject* var_oo_2 = (QObject*) php_qt_fetch(z_var_oo_2);
@@ -257,7 +263,9 @@
  */
 ZEND_METHOD(QTime, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-		QTime *QTime_ptr = new QTime();
+			QTime *QTime_ptr = new QTime();
+			PHP_QT_REGISTER(QTime_ptr);
+			RETURN_NULL();
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
@@ -267,11 +275,13 @@
 		long var_llll_2;    // default: 0
 		long var_llll_3;    // default: 0
 
+		/* int h, int m, int s, int ms,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|l|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
 			
-			obj->QTime((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
+			QTime *QTime_ptr = new QTime((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
+			PHP_QT_REGISTER(QTime_ptr);
 			RETURN_NULL();
 		}
 	}
@@ -289,6 +299,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int secs,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
@@ -316,6 +327,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ms,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
@@ -378,6 +390,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 0
 
+		/* int h, int m, int s, int ms,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
@@ -412,6 +425,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QTime& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

Modified: trunk/playground/classes/qtimer.cpp
===================================================================
--- trunk/playground/classes/qtimer.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qtimer.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTimer.cpp - QTimer PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -48,6 +48,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
@@ -76,6 +77,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -120,6 +122,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int msec,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
@@ -178,6 +181,7 @@
 		int len_los_2;
 
 
+		/* int msec, QObject* receiver, const char* member,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"los", &var_los_0, &z_var_los_1, &var_los_2, len_los_2) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 			QObject* var_los_1 = (QObject*) php_qt_fetch(z_var_los_1);
@@ -206,6 +210,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
@@ -269,15 +274,12 @@
  *    flags:    t
  */
 ZEND_METHOD(QTimer, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-			RETURN_~(obj->QTimer());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 0
 
+		/* QObject* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -285,7 +287,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QObject*") {
-				obj->QTimer((QObject*) var_o_0);
+				QTimer *QTimer_ptr = new QTimer((QObject*) var_o_0);
+			PHP_QT_REGISTER(QTimer_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -305,6 +308,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -343,6 +347,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool singleShot,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
@@ -389,6 +394,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
@@ -418,6 +424,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -461,6 +468,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int msec,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qtoolbarchangeevent.cpp
===================================================================
--- trunk/playground/classes/qtoolbarchangeevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qtoolbarchangeevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QToolBarChangeEvent.cpp - QToolBarChangeEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qvboxlayout.cpp
===================================================================
--- trunk/playground/classes/qvboxlayout.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qvboxlayout.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QVBoxLayout.cpp - QVBoxLayout PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -67,6 +67,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QVBoxLayout *obj = (QVBoxLayout*) PHP_QT_FETCH();
 
@@ -95,6 +96,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QVBoxLayout *obj = (QVBoxLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -140,6 +142,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QVBoxLayout *obj = (QVBoxLayout*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -208,6 +211,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QVBoxLayout *obj = (QVBoxLayout*) PHP_QT_FETCH();
 
@@ -237,6 +241,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QVBoxLayout *obj = (QVBoxLayout*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -258,17 +263,16 @@
  */
 ZEND_METHOD(QVBoxLayout, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-		QVBoxLayout *QVBoxLayout_ptr = new QVBoxLayout();
+			QVBoxLayout *QVBoxLayout_ptr = new QVBoxLayout();
+			PHP_QT_REGISTER(QVBoxLayout_ptr);
+			RETURN_NULL();
 	}
-	if (ZEND_NUM_ARGS() == 0){
-			QVBoxLayout *obj = (QVBoxLayout*) PHP_QT_FETCH();
-			RETURN_~(obj->QVBoxLayout());
-	}
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QVBoxLayout *obj = (QVBoxLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -276,7 +280,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget*") {
-				obj->QVBoxLayout((QWidget*) var_o_0);
+				QVBoxLayout *QVBoxLayout_ptr = new QVBoxLayout((QWidget*) var_o_0);
+			PHP_QT_REGISTER(QVBoxLayout_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -297,6 +302,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QVBoxLayout *obj = (QVBoxLayout*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qwhatsthisclickedevent.cpp
===================================================================
--- trunk/playground/classes/qwhatsthisclickedevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qwhatsthisclickedevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWhatsThisClickedEvent.cpp - QWhatsThisClickedEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qwheelevent.cpp
===================================================================
--- trunk/playground/classes/qwheelevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qwheelevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWheelEvent.cpp - QWheelEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qwidget.cpp
===================================================================
--- trunk/playground/classes/qwidget.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qwidget.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWidget.cpp - QWidget PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -67,6 +67,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -188,6 +189,7 @@
 		int len_s_0;
 
 
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -210,6 +212,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QStyle& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -236,6 +239,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int maxw,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -296,6 +300,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int policy,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -375,6 +380,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -415,6 +421,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* QWidget* , QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -443,6 +450,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -470,6 +478,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -514,6 +523,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -554,6 +564,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int type,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -591,6 +602,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* QWidget* , const QPoint& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -635,6 +647,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QStyle* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -674,6 +687,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -696,6 +710,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QPalette::ColorRole ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -722,6 +737,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QSize& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -740,6 +756,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -813,6 +830,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -840,6 +858,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -860,6 +879,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int x, int y, int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -901,6 +921,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -947,6 +968,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::WindowShortcut
 
+		/* const QKeySequence& key, int context,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -986,6 +1008,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& description,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1044,6 +1067,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* qreal level,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1102,6 +1126,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QFont& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1141,6 +1166,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1185,6 +1211,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QWidget* child,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1282,6 +1309,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QBitmap& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1308,6 +1336,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QPalette::ColorRole ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1339,6 +1368,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1359,6 +1389,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int x, int y, int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1414,6 +1445,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QCursor& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1440,6 +1472,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int minw,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1475,6 +1508,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1501,6 +1535,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QPalette& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1554,6 +1589,7 @@
 		long var_lb_0;    // default: 
 		bool var_lb_1;   // _default: true
 
+		/* int id, bool enable,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb|", &var_lb_0, &var_lb_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1595,6 +1631,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool next,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1616,6 +1653,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1638,6 +1676,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool shown,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1679,6 +1718,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QSize& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -1697,6 +1737,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int maxw, int maxh,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1722,6 +1763,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int left, int top, int right, int bottom,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1763,6 +1805,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1799,6 +1842,7 @@
 		long var_lb_0;    // default: 
 		bool var_lb_1;   // _default: true
 
+		/* int , bool on,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb|", &var_lb_0, &var_lb_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1892,6 +1936,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1947,6 +1992,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* PaintDeviceMetric ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -1968,6 +2014,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QPalette& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2020,6 +2067,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& p,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2039,6 +2087,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int x, int y,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2066,6 +2115,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int w,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2107,6 +2157,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QFont& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2160,16 +2211,13 @@
  *    flags:    t
  */
 ZEND_METHOD(QWidget, __construct){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_~(obj->QWidget());
-	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol */
 		zval* z_var_ol_0;   // default: 0
 		long var_ol_1;    // default: 0
 
+		/* QWidget* parent, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|l|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -2177,7 +2225,8 @@
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
 			if(tmp_ol_0 == "QWidget*") {
-				obj->QWidget((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
+				QWidget *QWidget_ptr = new QWidget((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
+			PHP_QT_REGISTER(QWidget_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -2189,6 +2238,7 @@
 		zval* z_var_ool_1;   // default: 
 		long var_ool_2;    // default: 
 
+		/* QWidgetPrivate& d, QWidget* parent, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
@@ -2198,7 +2248,8 @@
 			QString tmp_ool_1(var_ool_1->metaObject()->className());
 			
 			if(tmp_ool_0 == "QWidgetPrivate&" && tmp_ool_1 == "QWidget*") {
-				obj->QWidget((QWidgetPrivate&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
+				QWidget *QWidget_ptr = new QWidget((QWidgetPrivate&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
+			PHP_QT_REGISTER(QWidget_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -2217,6 +2268,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QInputContext* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2276,6 +2328,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool visible,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2322,6 +2375,7 @@
 		int len_ss_1;
 
 
+		/* const char* , const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2376,6 +2430,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2397,6 +2452,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2411,6 +2467,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int x, int y,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2433,6 +2490,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* const QPoint& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2455,6 +2513,7 @@
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
+		/* int , QUObject* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
@@ -2480,6 +2539,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool enable,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2502,6 +2562,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QSize& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2520,6 +2581,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2547,6 +2609,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QCursor& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2593,6 +2656,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* QWidget* , const QPoint& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -2664,6 +2728,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int direction,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2751,6 +2816,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2777,6 +2843,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int state,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2800,6 +2867,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int dx, int dy,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2815,6 +2883,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int dx, int dy, const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -2873,6 +2942,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool hidden,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -2895,6 +2965,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* WId ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -2978,6 +3049,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3004,6 +3076,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3031,6 +3104,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3049,6 +3123,7 @@
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
+		/* QWidget* parent, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
@@ -3088,6 +3163,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3128,6 +3204,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3177,6 +3254,7 @@
 		bool var_obb_1;   // _default: true
 		bool var_obb_2;   // _default: true
 
+		/* WId , bool initializeWindow, bool destroyOldWindow,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|b|b|", &z_var_obb_0, &var_obb_1, &var_obb_2) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_obb_0 = (QObject*) php_qt_fetch(z_var_obb_0);
@@ -3203,6 +3281,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int policy,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3228,6 +3307,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int* left, int* top, int* right, int* bottom,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3326,6 +3406,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& name,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3352,6 +3433,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool on,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3374,6 +3456,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QSizePolicy ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3392,6 +3475,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -3434,6 +3518,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QAction* action,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3489,6 +3574,7 @@
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
 
+		/* int , int , QVariant* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
@@ -3514,6 +3600,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool enable,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3596,6 +3683,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3622,6 +3710,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QSize& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3640,6 +3729,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int minw, int minh,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3662,6 +3752,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3684,6 +3775,7 @@
 		/* b */
 		bool var_b_0;   // _default: 
 
+		/* bool ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3733,6 +3825,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QIcon& icon,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3787,6 +3880,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QEvent* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3812,6 +3906,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3838,6 +3933,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3858,6 +3954,7 @@
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
+		/* int x, int y, int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3899,6 +3996,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QSize& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -3917,6 +4015,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int w, int h,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3952,6 +4051,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int type,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -3993,6 +4093,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QLayout* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -4019,6 +4120,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int maxh,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -4056,6 +4158,7 @@
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
+		/* QAction* before, QAction* action,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
@@ -4148,6 +4251,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int id,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -4170,6 +4274,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -4196,6 +4301,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QSize& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -4214,6 +4320,7 @@
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
+		/* int basew, int baseh,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -4255,6 +4362,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QAction* action,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -4324,6 +4432,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int reason,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -4347,6 +4456,7 @@
 		bool var_bb_0;   // _default: true
 		bool var_bb_1;   // _default: true
 
+		/* bool destroyWindow, bool destroySubWindows,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|b|", &var_bb_0, &var_bb_1) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -4446,6 +4556,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int state,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 
@@ -4468,6 +4579,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int minh,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidget *obj = (QWidget*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qwidgetdata.cpp
===================================================================
--- trunk/playground/classes/qwidgetdata.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qwidgetdata.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWidgetData.cpp - QWidgetData PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/playground/classes/qwidgetitem.cpp
===================================================================
--- trunk/playground/classes/qwidgetitem.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qwidgetitem.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWidgetItem.cpp - QWidgetItem PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -69,6 +69,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* const QRect& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -95,6 +96,7 @@
 		/* o */
 		zval* z_var_o_0;   // default: 
 
+		/* QWidget* w,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -102,7 +104,8 @@
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget*") {
-				obj->QWidgetItem((QWidget*) var_o_0);
+				QWidgetItem *QWidgetItem_ptr = new QWidgetItem((QWidget*) var_o_0);
+			PHP_QT_REGISTER(QWidgetItem_ptr);
 			RETURN_NULL();
 			}
 		}
@@ -178,6 +181,7 @@
 		/* l */
 		long var_l_0;    // default: 
 
+		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
 

Modified: trunk/playground/classes/qwindowstatechangeevent.cpp
===================================================================
--- trunk/playground/classes/qwindowstatechangeevent.cpp	2006-01-08 23:38:27 UTC (rev 165)
+++ trunk/playground/classes/qwindowstatechangeevent.cpp	2006-01-08 23:40:22 UTC (rev 166)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWindowStateChangeEvent.cpp - QWindowStateChangeEvent PHP implementation.
- * begin           : Sun Jan  8 23:20:48 2006
+ * begin           : Mon Jan  9 00:39:35 2006
  * generated by    : moni using kalyptus 0.9.
  */
 



From tm243 at berlios.de  Mon Jan  9 01:41:29 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 9 Jan 2006 01:41:29 +0100
Subject: [Php-qt-svn] r167 - in trunk: . qt
Message-ID: <200601090041.k090fTJd025281@sheep.berlios.de>

Author: tm243
Date: 2006-01-09 01:41:19 +0100 (Mon, 09 Jan 2006)
New Revision: 167

Modified:
   trunk/config.m4
   trunk/qt/ag_php_qt_cpp.h
   trunk/qt/ag_qt_minit.h
   trunk/qt/ag_zend_php_qt.h
   trunk/qt/php_qt.cpp
   trunk/qt/php_qt.h
   trunk/qt/zend_php_qt.h
Log:
qt, qinternal added, most global enums available.

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-08 23:40:22 UTC (rev 166)
+++ trunk/config.m4	2006-01-09 00:41:19 UTC (rev 167)
@@ -100,6 +100,8 @@
   qt/layout_management/qhboxlayout.cpp \
   qt/layout_management/qvboxlayout.cpp \
   qt/object_model/qobject.cpp \
+  qt/qobject_model/qinternal.cpp \ 
+  qt/qobject_model/qt.cpp \ 
   qt/text_related/qstring.cpp \
   qt/text_related/qlatin1string.cpp \
   qt/text_related/qchar.cpp \
@@ -107,6 +109,7 @@
   qt/classes/qdate.cpp \ 
   qt/classes/qdatetime.cpp \ 
   qt/classes/qtime.cpp \ 
+
   qt/php_qt.cpp,$ext_shared)
 
   PHP_ADD_BUILD_DIR($ext_builddir/qt)

Modified: trunk/qt/ag_php_qt_cpp.h
===================================================================
--- trunk/qt/ag_php_qt_cpp.h	2006-01-08 23:40:22 UTC (rev 166)
+++ trunk/qt/ag_php_qt_cpp.h	2006-01-09 00:41:19 UTC (rev 167)
@@ -1,18 +1,4 @@
 static zend_function_entry QDate_methods[] = {
-	ZEND_ME(QDate,longDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,setYMD,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,shortMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,isLeapYear,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,fromJulianDay,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,addDays,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,gregorianToJulian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,longMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,julianToGregorian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,shortDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,weekNumber,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,addMonths,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,addYears,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
 };
@@ -25,11 +11,6 @@
 
 }
 static zend_function_entry QDateTime_methods[] = {
-	ZEND_ME(QDateTime,setTime_t,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,addDays,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,addMonths,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,addSecs,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,addYears,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
 };
@@ -42,10 +23,6 @@
 
 }
 static zend_function_entry QTime_methods[] = {
-	ZEND_ME(QTime,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QTime,addSecs,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime,addMSecs,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime,setHMS,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
 };

Modified: trunk/qt/ag_qt_minit.h
===================================================================
--- trunk/qt/ag_qt_minit.h	2006-01-08 23:40:22 UTC (rev 166)
+++ trunk/qt/ag_qt_minit.h	2006-01-09 00:41:19 UTC (rev 167)
@@ -4,3 +4,4 @@
 	_register_QDateTime(TSRMLS_C);
 
 	_register_QTime(TSRMLS_C);
+

Modified: trunk/qt/ag_zend_php_qt.h
===================================================================
--- trunk/qt/ag_zend_php_qt.h	2006-01-08 23:40:22 UTC (rev 166)
+++ trunk/qt/ag_zend_php_qt.h	2006-01-09 00:41:19 UTC (rev 167)
@@ -3,22 +3,47 @@
 ZEND_METHOD(QDate, isValid);
 ZEND_METHOD(QDate, setYMD);
 ZEND_METHOD(QDate, shortMonthName);
+ZEND_METHOD(QDate, toString);
+ZEND_METHOD(QDate, toString);
 ZEND_METHOD(QDate, isLeapYear);
 ZEND_METHOD(QDate, fromJulianDay);
 ZEND_METHOD(QDate, addDays);
 ZEND_METHOD(QDate, gregorianToJulian);
 ZEND_METHOD(QDate, longMonthName);
 ZEND_METHOD(QDate, julianToGregorian);
+ZEND_METHOD(QDate, QDate);
 ZEND_METHOD(QDate, shortDayName);
+ZEND_METHOD(QDate, fromString);
+ZEND_METHOD(QDate, fromString);
 ZEND_METHOD(QDate, weekNumber);
 ZEND_METHOD(QDate, addMonths);
 ZEND_METHOD(QDate, addYears);
+ZEND_METHOD(QDate, daysTo);
+ZEND_METHOD(QDateTime, toString);
+ZEND_METHOD(QDateTime, toString);
 ZEND_METHOD(QDateTime, setTime_t);
 ZEND_METHOD(QDateTime, addDays);
+ZEND_METHOD(QDateTime, secsTo);
+ZEND_METHOD(QDateTime, toTimeSpec);
+ZEND_METHOD(QDateTime, fromString);
+ZEND_METHOD(QDateTime, fromString);
+ZEND_METHOD(QDateTime, setTime);
 ZEND_METHOD(QDateTime, addMonths);
+ZEND_METHOD(QDateTime, QDateTime);
+ZEND_METHOD(QDateTime, QDateTime);
 ZEND_METHOD(QDateTime, addSecs);
+ZEND_METHOD(QDateTime, setDate);
+ZEND_METHOD(QDateTime, daysTo);
 ZEND_METHOD(QDateTime, addYears);
+ZEND_METHOD(QDateTime, setTimeSpec);
 ZEND_METHOD(QTime, isValid);
+ZEND_METHOD(QTime, toString);
+ZEND_METHOD(QTime, toString);
+ZEND_METHOD(QTime, secsTo);
+ZEND_METHOD(QTime, fromString);
+ZEND_METHOD(QTime, fromString);
+ZEND_METHOD(QTime, QTime);
 ZEND_METHOD(QTime, addSecs);
 ZEND_METHOD(QTime, addMSecs);
 ZEND_METHOD(QTime, setHMS);
+ZEND_METHOD(QTime, msecsTo);
\ No newline at end of file

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-08 23:40:22 UTC (rev 166)
+++ trunk/qt/php_qt.cpp	2006-01-09 00:41:19 UTC (rev 167)
@@ -63,7 +63,10 @@
 zend_class_entry *QLineEdit_ce_ptr;
 zend_class_entry *QFrame_ce_ptr;
 zend_class_entry *QLCDNumber_ce_ptr;
+zend_class_entry *QInternal_ce_ptr;
+zend_class_entry *Qt_ce_ptr;
 
+
 #include "ag_zend_class_entry.h"
 
 /* {{{ php_qt_functions[]
@@ -332,7 +335,715 @@
         REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_FILLED", QLCDNumber::Filled, CONST_CS | CONST_PERSISTENT);
         REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_FLAT", QLCDNumber::Flat, CONST_CS | CONST_PERSISTENT);
 
+// handfixed:
+	_register_QInternal(TSRMLS_C);
+	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_UNKNOWNDEVICE", QInternal::UnknownDevice, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_WIDGET", QInternal::Widget, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_PIXMAP", QInternal::Pixmap, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_IMAGE", QInternal::Image, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_PRINTER", QInternal::Printer, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_PICTURE", QInternal::Picture, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_PBUFFER", QInternal::Pbuffer, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QINTERNAL_RELAYOUTTYPE_RELAYOUTNORMAL", QInternal::RelayoutNormal, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QINTERNAL_RELAYOUTTYPE_RELAYOUTDRAGGING", QInternal::RelayoutDragging, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QINTERNAL_RELAYOUTTYPE_RELAYOUTDROPPED", QInternal::RelayoutDropped, CONST_CS | CONST_PERSISTENT);
 
+	_register_Qt(TSRMLS_C);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_COLOR0", Qt::color0, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_COLOR1", Qt::color1, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_BLACK", Qt::black, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_WHITE", Qt::white, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKGRAY", Qt::darkGray, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_GRAY", Qt::gray, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_LIGHTGRAY", Qt::lightGray, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_RED", Qt::red, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_GREEN", Qt::green, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_BLUE", Qt::blue, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_CYAN", Qt::cyan, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_MAGENTA", Qt::magenta, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_YELLOW", Qt::yellow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKRED", Qt::darkRed, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKGREEN", Qt::darkGreen, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKBLUE", Qt::darkBlue, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKCYAN", Qt::darkCyan, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKMAGENTA", Qt::darkMagenta, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKYELLOW", Qt::darkYellow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_TRANSPARENT", Qt::transparent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_NOMODIFIER", Qt::NoModifier, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_SHIFTMODIFIER", Qt::ShiftModifier, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_CONTROLMODIFIER", Qt::ControlModifier, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_ALTMODIFIER", Qt::AltModifier, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_METAMODIFIER", Qt::MetaModifier, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_KEYPADMODIFIER", Qt::KeypadModifier, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_KEYBOARDMODIFIERMASK", Qt::KeyboardModifierMask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MODIFIER_META", Qt::META, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MODIFIER_SHIFT", Qt::SHIFT, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MODIFIER_CTRL", Qt::CTRL, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MODIFIER_ALT", Qt::ALT, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MODIFIER_MODIFIER_MASK", Qt::MODIFIER_MASK, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MODIFIER_UNICODE_ACCEL", Qt::UNICODE_ACCEL, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_NOBUTTON", Qt::NoButton, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_LEFTBUTTON", Qt::LeftButton, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_RIGHTBUTTON", Qt::RightButton, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_MIDBUTTON", Qt::MidButton, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_XBUTTON1", Qt::XButton1, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_XBUTTON2", Qt::XButton2, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_MOUSEBUTTONMASK", Qt::MouseButtonMask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ORIENTATION_HORIZONTAL", Qt::Horizontal, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ORIENTATION_VERTICAL", Qt::Vertical, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_NOFOCUS", Qt::NoFocus, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_TABFOCUS", Qt::TabFocus, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_CLICKFOCUS", Qt::ClickFocus, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_STRONGFOCUS", Qt::StrongFocus, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_WHEELFOCUS", Qt::WheelFocus, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_SORTORDER_ASCENDINGORDER", Qt::AscendingOrder, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_SORTORDER_DESCENDINGORDER", Qt::DescendingOrder, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNLEFT", Qt::AlignLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNLEADING", Qt::AlignLeading, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNRIGHT", Qt::AlignRight, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNTRAILING", Qt::AlignTrailing, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNHCENTER", Qt::AlignHCenter, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNJUSTIFY", Qt::AlignJustify, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNABSOLUTE", Qt::AlignAbsolute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNHORIZONTAL_MASK", Qt::AlignHorizontal_Mask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNTOP", Qt::AlignTop, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNBOTTOM", Qt::AlignBottom, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNVCENTER", Qt::AlignVCenter, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNVERTICAL_MASK", Qt::AlignVertical_Mask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNCENTER", Qt::AlignCenter, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTSINGLELINE", Qt::TextSingleLine, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTDONTCLIP", Qt::TextDontClip, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTEXPANDTABS", Qt::TextExpandTabs, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTSHOWMNEMONIC", Qt::TextShowMnemonic, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTWORDWRAP", Qt::TextWordWrap, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTWRAPANYWHERE", Qt::TextWrapAnywhere, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTDONTPRINT", Qt::TextDontPrint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTINCLUDETRAILINGSPACES", Qt::TextIncludeTrailingSpaces, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTHIDEMNEMONIC", Qt::TextHideMnemonic, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTELIDEMODE_ELIDELEFT", Qt::ElideLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTELIDEMODE_ELIDERIGHT", Qt::ElideRight, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTELIDEMODE_ELIDEMIDDLE", Qt::ElideMiddle, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WIDGET", Qt::Widget, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOW", Qt::Window, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_DIALOG", Qt::Dialog, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_SHEET", Qt::Sheet, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_DRAWER", Qt::Drawer, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_POPUP", Qt::Popup, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_TOOL", Qt::Tool, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_TOOLTIP", Qt::ToolTip, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_SPLASHSCREEN", Qt::SplashScreen, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_DESKTOP", Qt::Desktop, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_SUBWINDOW", Qt::SubWindow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWTYPE_MASK", Qt::WindowType_Mask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_MSWINDOWSFIXEDSIZEDIALOGHINT", Qt::MSWindowsFixedSizeDialogHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_MSWINDOWSOWNDC", Qt::MSWindowsOwnDC, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_X11BYPASSWINDOWMANAGERHINT", Qt::X11BypassWindowManagerHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_FRAMELESSWINDOWHINT", Qt::FramelessWindowHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWTITLEHINT", Qt::WindowTitleHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWSYSTEMMENUHINT", Qt::WindowSystemMenuHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWMINIMIZEBUTTONHINT", Qt::WindowMinimizeButtonHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWMAXIMIZEBUTTONHINT", Qt::WindowMaximizeButtonHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWMINMAXBUTTONSHINT", Qt::WindowMinMaxButtonsHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWCONTEXTHELPBUTTONHINT", Qt::WindowContextHelpButtonHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWSHADEBUTTONHINT", Qt::WindowShadeButtonHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWSTAYSONTOPHINT", Qt::WindowStaysOnTopHint, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWNOSTATE", Qt::WindowNoState, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWMINIMIZED", Qt::WindowMinimized, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWMAXIMIZED", Qt::WindowMaximized, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWFULLSCREEN", Qt::WindowFullScreen, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWACTIVE", Qt::WindowActive, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_DISABLED", Qt::WA_Disabled, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_UNDERMOUSE", Qt::WA_UnderMouse, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MOUSETRACKING", Qt::WA_MouseTracking, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_CONTENTSPROPAGATED", Qt::WA_ContentsPropagated, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_OPAQUEPAINTEVENT", Qt::WA_OpaquePaintEvent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOBACKGROUND", Qt::WA_NoBackground, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_STATICCONTENTS", Qt::WA_StaticContents, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_LAIDOUT", Qt::WA_LaidOut, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PAINTONSCREEN", Qt::WA_PaintOnScreen, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOSYSTEMBACKGROUND", Qt::WA_NoSystemBackground, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_UPDATESDISABLED", Qt::WA_UpdatesDisabled, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MAPPED", Qt::WA_Mapped, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MACNOCLICKTHROUGH", Qt::WA_MacNoClickThrough, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PAINTOUTSIDEPAINTEVENT", Qt::WA_PaintOutsidePaintEvent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_INPUTMETHODENABLED", Qt::WA_InputMethodEnabled, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_VISIBLE", Qt::WA_WState_Visible, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_HIDDEN", Qt::WA_WState_Hidden, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_FORCEDISABLED", Qt::WA_ForceDisabled, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_KEYCOMPRESSION", Qt::WA_KeyCompression, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PENDINGMOVEEVENT", Qt::WA_PendingMoveEvent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PENDINGRESIZEEVENT", Qt::WA_PendingResizeEvent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETPALETTE", Qt::WA_SetPalette, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETFONT", Qt::WA_SetFont, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETCURSOR", Qt::WA_SetCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOCHILDEVENTSFROMCHILDREN", Qt::WA_NoChildEventsFromChildren, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WINDOWMODIFIED", Qt::WA_WindowModified, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_RESIZED", Qt::WA_Resized, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MOVED", Qt::WA_Moved, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PENDINGUPDATE", Qt::WA_PendingUpdate, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_INVALIDSIZE", Qt::WA_InvalidSize, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MACMETALSTYLE", Qt::WA_MacMetalStyle, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_CUSTOMWHATSTHIS", Qt::WA_CustomWhatsThis, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_LAYOUTONENTIRERECT", Qt::WA_LayoutOnEntireRect, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_OUTSIDEWSRANGE", Qt::WA_OutsideWSRange, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_GRABBEDSHORTCUT", Qt::WA_GrabbedShortcut, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_TRANSPARENTFORMOUSEEVENTS", Qt::WA_TransparentForMouseEvents, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PAINTUNCLIPPED", Qt::WA_PaintUnclipped, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETWINDOWICON", Qt::WA_SetWindowIcon, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOMOUSEREPLAY", Qt::WA_NoMouseReplay, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_DELETEONCLOSE", Qt::WA_DeleteOnClose, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_RIGHTTOLEFT", Qt::WA_RightToLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETLAYOUTDIRECTION", Qt::WA_SetLayoutDirection, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOCHILDEVENTSFORPARENT", Qt::WA_NoChildEventsForParent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_FORCEUPDATESDISABLED", Qt::WA_ForceUpdatesDisabled, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_CREATED", Qt::WA_WState_Created, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_COMPRESSKEYS", Qt::WA_WState_CompressKeys, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_INPAINTEVENT", Qt::WA_WState_InPaintEvent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_REPARENTED", Qt::WA_WState_Reparented, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_CONFIGPENDING", Qt::WA_WState_ConfigPending, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_POLISHED", Qt::WA_WState_Polished, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_DND", Qt::WA_WState_DND, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_OWNSIZEPOLICY", Qt::WA_WState_OwnSizePolicy, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_EXPLICITSHOWHIDE", Qt::WA_WState_ExplicitShowHide, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SHOWMODAL", Qt::WA_ShowModal, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MOUSENOMASK", Qt::WA_MouseNoMask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_GROUPLEADER", Qt::WA_GroupLeader, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOMOUSEPROPAGATION", Qt::WA_NoMousePropagation, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_HOVER", Qt::WA_Hover, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_INPUTMETHODTRANSPARENT", Qt::WA_InputMethodTransparent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_QUITONCLOSE", Qt::WA_QuitOnClose, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_KEYBOARDFOCUSCHANGE", Qt::WA_KeyboardFocusChange, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_ACCEPTDROPS", Qt::WA_AcceptDrops, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_DROPSITEREGISTERED", Qt::WA_DropSiteRegistered, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_FORCEACCEPTDROPS", Qt::WA_ForceAcceptDrops, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WINDOWPROPAGATION", Qt::WA_WindowPropagation, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOX11EVENTCOMPRESSION", Qt::WA_NoX11EventCompression, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_TINTEDBACKGROUND", Qt::WA_TintedBackground, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_ATTRIBUTECOUNT", Qt::WA_AttributeCount, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_COLORMODE_MASK", Qt::ColorMode_Mask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_AUTOCOLOR", Qt::AutoColor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_COLORONLY", Qt::ColorOnly, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_MONOONLY", Qt::MonoOnly, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_ALPHADITHER_MASK", Qt::AlphaDither_Mask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_THRESHOLDALPHADITHER", Qt::ThresholdAlphaDither, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_ORDEREDALPHADITHER", Qt::OrderedAlphaDither, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_DIFFUSEALPHADITHER", Qt::DiffuseAlphaDither, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_NOALPHA", Qt::NoAlpha, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_DITHER_MASK", Qt::Dither_Mask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_DIFFUSEDITHER", Qt::DiffuseDither, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_ORDEREDDITHER", Qt::OrderedDither, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_THRESHOLDDITHER", Qt::ThresholdDither, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_DITHERMODE_MASK", Qt::DitherMode_Mask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_AUTODITHER", Qt::AutoDither, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_PREFERDITHER", Qt::PreferDither, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_AVOIDDITHER", Qt::AvoidDither, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BGMODE_TRANSPARENTMODE", Qt::TransparentMode, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BGMODE_OPAQUEMODE", Qt::OpaqueMode, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ESCAPE", Qt::Key_Escape, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TAB", Qt::Key_Tab, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BACKTAB", Qt::Key_Backtab, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BACKSPACE", Qt::Key_Backspace, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_RETURN", Qt::Key_Return, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ENTER", Qt::Key_Enter, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_INSERT", Qt::Key_Insert, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DELETE", Qt::Key_Delete, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PAUSE", Qt::Key_Pause, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PRINT", Qt::Key_Print, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SYSREQ", Qt::Key_SysReq, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CLEAR", Qt::Key_Clear, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HOME", Qt::Key_Home, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_END", Qt::Key_End, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LEFT", Qt::Key_Left, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UP", Qt::Key_Up, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_RIGHT", Qt::Key_Right, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DOWN", Qt::Key_Down, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PAGEUP", Qt::Key_PageUp, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PAGEDOWN", Qt::Key_PageDown, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SHIFT", Qt::Key_Shift, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTROL", Qt::Key_Control, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_META", Qt::Key_Meta, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ALT", Qt::Key_Alt, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CAPSLOCK", Qt::Key_CapsLock, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NUMLOCK", Qt::Key_NumLock, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SCROLLLOCK", Qt::Key_ScrollLock, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F1", Qt::Key_F1, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F2", Qt::Key_F2, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F3", Qt::Key_F3, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F4", Qt::Key_F4, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F5", Qt::Key_F5, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F6", Qt::Key_F6, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F7", Qt::Key_F7, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F8", Qt::Key_F8, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F9", Qt::Key_F9, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F10", Qt::Key_F10, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F11", Qt::Key_F11, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F12", Qt::Key_F12, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F13", Qt::Key_F13, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F14", Qt::Key_F14, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F15", Qt::Key_F15, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F16", Qt::Key_F16, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F17", Qt::Key_F17, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F18", Qt::Key_F18, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F19", Qt::Key_F19, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F20", Qt::Key_F20, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F21", Qt::Key_F21, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F22", Qt::Key_F22, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F23", Qt::Key_F23, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F24", Qt::Key_F24, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F25", Qt::Key_F25, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F26", Qt::Key_F26, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F27", Qt::Key_F27, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F28", Qt::Key_F28, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F29", Qt::Key_F29, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F30", Qt::Key_F30, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F31", Qt::Key_F31, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F32", Qt::Key_F32, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F33", Qt::Key_F33, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F34", Qt::Key_F34, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F35", Qt::Key_F35, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SUPER_L", Qt::Key_Super_L, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SUPER_R", Qt::Key_Super_R, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MENU", Qt::Key_Menu, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HYPER_L", Qt::Key_Hyper_L, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HYPER_R", Qt::Key_Hyper_R, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HELP", Qt::Key_Help, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DIRECTION_L", Qt::Key_Direction_L, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DIRECTION_R", Qt::Key_Direction_R, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SPACE", Qt::Key_Space, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ANY", Qt::Key_Any, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EXCLAM", Qt::Key_Exclam, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_QUOTEDBL", Qt::Key_QuoteDbl, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NUMBERSIGN", Qt::Key_NumberSign, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DOLLAR", Qt::Key_Dollar, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PERCENT", Qt::Key_Percent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AMPERSAND", Qt::Key_Ampersand, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_APOSTROPHE", Qt::Key_Apostrophe, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PARENLEFT", Qt::Key_ParenLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PARENRIGHT", Qt::Key_ParenRight, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ASTERISK", Qt::Key_Asterisk, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PLUS", Qt::Key_Plus, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_COMMA", Qt::Key_Comma, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MINUS", Qt::Key_Minus, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PERIOD", Qt::Key_Period, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SLASH", Qt::Key_Slash, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_0", Qt::Key_0, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_1", Qt::Key_1, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_2", Qt::Key_2, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_3", Qt::Key_3, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_4", Qt::Key_4, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_5", Qt::Key_5, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_6", Qt::Key_6, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_7", Qt::Key_7, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_8", Qt::Key_8, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_9", Qt::Key_9, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_COLON", Qt::Key_Colon, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SEMICOLON", Qt::Key_Semicolon, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LESS", Qt::Key_Less, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EQUAL", Qt::Key_Equal, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_GREATER", Qt::Key_Greater, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_QUESTION", Qt::Key_Question, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AT", Qt::Key_At, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_A", Qt::Key_A, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_B", Qt::Key_B, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_C", Qt::Key_C, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_D", Qt::Key_D, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_E", Qt::Key_E, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F", Qt::Key_F, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_G", Qt::Key_G, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_H", Qt::Key_H, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_I", Qt::Key_I, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_J", Qt::Key_J, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_K", Qt::Key_K, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_L", Qt::Key_L, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_M", Qt::Key_M, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_N", Qt::Key_N, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_O", Qt::Key_O, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_P", Qt::Key_P, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_Q", Qt::Key_Q, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_R", Qt::Key_R, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_S", Qt::Key_S, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_T", Qt::Key_T, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_U", Qt::Key_U, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_V", Qt::Key_V, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_W", Qt::Key_W, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_X", Qt::Key_X, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_Y", Qt::Key_Y, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_Z", Qt::Key_Z, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BRACKETLEFT", Qt::Key_BracketLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BACKSLASH", Qt::Key_Backslash, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BRACKETRIGHT", Qt::Key_BracketRight, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ASCIICIRCUM", Qt::Key_AsciiCircum, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UNDERSCORE", Qt::Key_Underscore, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_QUOTELEFT", Qt::Key_QuoteLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BRACELEFT", Qt::Key_BraceLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BAR", Qt::Key_Bar, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BRACERIGHT", Qt::Key_BraceRight, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ASCIITILDE", Qt::Key_AsciiTilde, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NOBREAKSPACE", Qt::Key_nobreakspace, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EXCLAMDOWN", Qt::Key_exclamdown, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CENT", Qt::Key_cent, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_STERLING", Qt::Key_sterling, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CURRENCY", Qt::Key_currency, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_YEN", Qt::Key_yen, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BROKENBAR", Qt::Key_brokenbar, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SECTION", Qt::Key_section, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DIAERESIS", Qt::Key_diaeresis, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_COPYRIGHT", Qt::Key_copyright, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ORDFEMININE", Qt::Key_ordfeminine, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_GUILLEMOTLEFT", Qt::Key_guillemotleft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NOTSIGN", Qt::Key_notsign, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HYPHEN", Qt::Key_hyphen, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_REGISTERED", Qt::Key_registered, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MACRON", Qt::Key_macron, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEGREE", Qt::Key_degree, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PLUSMINUS", Qt::Key_plusminus, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TWOSUPERIOR", Qt::Key_twosuperior, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_THREESUPERIOR", Qt::Key_threesuperior, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ACUTE", Qt::Key_acute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MU", Qt::Key_mu, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PARAGRAPH", Qt::Key_paragraph, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PERIODCENTERED", Qt::Key_periodcentered, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CEDILLA", Qt::Key_cedilla, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ONESUPERIOR", Qt::Key_onesuperior, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MASCULINE", Qt::Key_masculine, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_GUILLEMOTRIGHT", Qt::Key_guillemotright, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ONEQUARTER", Qt::Key_onequarter, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ONEHALF", Qt::Key_onehalf, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_THREEQUARTERS", Qt::Key_threequarters, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_QUESTIONDOWN", Qt::Key_questiondown, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AGRAVE", Qt::Key_Agrave, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AACUTE", Qt::Key_Aacute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ACIRCUMFLEX", Qt::Key_Acircumflex, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ATILDE", Qt::Key_Atilde, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ADIAERESIS", Qt::Key_Adiaeresis, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ARING", Qt::Key_Aring, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AE", Qt::Key_AE, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CCEDILLA", Qt::Key_Ccedilla, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EGRAVE", Qt::Key_Egrave, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EACUTE", Qt::Key_Eacute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ECIRCUMFLEX", Qt::Key_Ecircumflex, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EDIAERESIS", Qt::Key_Ediaeresis, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_IGRAVE", Qt::Key_Igrave, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_IACUTE", Qt::Key_Iacute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ICIRCUMFLEX", Qt::Key_Icircumflex, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_IDIAERESIS", Qt::Key_Idiaeresis, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ETH", Qt::Key_ETH, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NTILDE", Qt::Key_Ntilde, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OGRAVE", Qt::Key_Ograve, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OACUTE", Qt::Key_Oacute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OCIRCUMFLEX", Qt::Key_Ocircumflex, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OTILDE", Qt::Key_Otilde, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ODIAERESIS", Qt::Key_Odiaeresis, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MULTIPLY", Qt::Key_multiply, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OOBLIQUE", Qt::Key_Ooblique, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UGRAVE", Qt::Key_Ugrave, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UACUTE", Qt::Key_Uacute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UCIRCUMFLEX", Qt::Key_Ucircumflex, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UDIAERESIS", Qt::Key_Udiaeresis, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_YACUTE", Qt::Key_Yacute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_THORN", Qt::Key_THORN, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SSHARP", Qt::Key_ssharp, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DIVISION", Qt::Key_division, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_YDIAERESIS", Qt::Key_ydiaeresis, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ALTGR", Qt::Key_AltGr, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MULTI_KEY", Qt::Key_Multi_key, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CODEINPUT", Qt::Key_Codeinput, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SINGLECANDIDATE", Qt::Key_SingleCandidate, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MULTIPLECANDIDATE", Qt::Key_MultipleCandidate, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PREVIOUSCANDIDATE", Qt::Key_PreviousCandidate, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MODE_SWITCH", Qt::Key_Mode_switch, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_KANJI", Qt::Key_Kanji, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MUHENKAN", Qt::Key_Muhenkan, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HENKAN", Qt::Key_Henkan, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ROMAJI", Qt::Key_Romaji, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HIRAGANA", Qt::Key_Hiragana, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_KATAKANA", Qt::Key_Katakana, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HIRAGANA_KATAKANA", Qt::Key_Hiragana_Katakana, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ZENKAKU", Qt::Key_Zenkaku, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANKAKU", Qt::Key_Hankaku, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ZENKAKU_HANKAKU", Qt::Key_Zenkaku_Hankaku, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TOUROKU", Qt::Key_Touroku, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MASSYO", Qt::Key_Massyo, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_KANA_LOCK", Qt::Key_Kana_Lock, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_KANA_SHIFT", Qt::Key_Kana_Shift, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EISU_SHIFT", Qt::Key_Eisu_Shift, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EISU_TOGGLE", Qt::Key_Eisu_toggle, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL", Qt::Key_Hangul, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_START", Qt::Key_Hangul_Start, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_END", Qt::Key_Hangul_End, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_HANJA", Qt::Key_Hangul_Hanja, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_JAMO", Qt::Key_Hangul_Jamo, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_ROMAJA", Qt::Key_Hangul_Romaja, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_JEONJA", Qt::Key_Hangul_Jeonja, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_BANJA", Qt::Key_Hangul_Banja, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_PREHANJA", Qt::Key_Hangul_PreHanja, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_POSTHANJA", Qt::Key_Hangul_PostHanja, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_SPECIAL", Qt::Key_Hangul_Special, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_GRAVE", Qt::Key_Dead_Grave, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_ACUTE", Qt::Key_Dead_Acute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_CIRCUMFLEX", Qt::Key_Dead_Circumflex, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_TILDE", Qt::Key_Dead_Tilde, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_MACRON", Qt::Key_Dead_Macron, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_BREVE", Qt::Key_Dead_Breve, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_ABOVEDOT", Qt::Key_Dead_Abovedot, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_DIAERESIS", Qt::Key_Dead_Diaeresis, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_ABOVERING", Qt::Key_Dead_Abovering, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_DOUBLEACUTE", Qt::Key_Dead_Doubleacute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_CARON", Qt::Key_Dead_Caron, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_CEDILLA", Qt::Key_Dead_Cedilla, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_OGONEK", Qt::Key_Dead_Ogonek, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_IOTA", Qt::Key_Dead_Iota, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_VOICED_SOUND", Qt::Key_Dead_Voiced_Sound, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_SEMIVOICED_SOUND", Qt::Key_Dead_Semivoiced_Sound, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_BELOWDOT", Qt::Key_Dead_Belowdot, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_HOOK", Qt::Key_Dead_Hook, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_HORN", Qt::Key_Dead_Horn, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BACK", Qt::Key_Back, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_FORWARD", Qt::Key_Forward, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_STOP", Qt::Key_Stop, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_REFRESH", Qt::Key_Refresh, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_VOLUMEDOWN", Qt::Key_VolumeDown, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_VOLUMEMUTE", Qt::Key_VolumeMute, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_VOLUMEUP", Qt::Key_VolumeUp, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BASSBOOST", Qt::Key_BassBoost, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BASSUP", Qt::Key_BassUp, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BASSDOWN", Qt::Key_BassDown, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TREBLEUP", Qt::Key_TrebleUp, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TREBLEDOWN", Qt::Key_TrebleDown, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIAPLAY", Qt::Key_MediaPlay, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIASTOP", Qt::Key_MediaStop, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIAPREVIOUS", Qt::Key_MediaPrevious, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIANEXT", Qt::Key_MediaNext, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIARECORD", Qt::Key_MediaRecord, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HOMEPAGE", Qt::Key_HomePage, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_FAVORITES", Qt::Key_Favorites, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SEARCH", Qt::Key_Search, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_STANDBY", Qt::Key_Standby, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OPENURL", Qt::Key_OpenUrl, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHMAIL", Qt::Key_LaunchMail, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHMEDIA", Qt::Key_LaunchMedia, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH0", Qt::Key_Launch0, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH1", Qt::Key_Launch1, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH2", Qt::Key_Launch2, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH3", Qt::Key_Launch3, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH4", Qt::Key_Launch4, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH5", Qt::Key_Launch5, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH6", Qt::Key_Launch6, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH7", Qt::Key_Launch7, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH8", Qt::Key_Launch8, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH9", Qt::Key_Launch9, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHA", Qt::Key_LaunchA, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHB", Qt::Key_LaunchB, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHC", Qt::Key_LaunchC, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHD", Qt::Key_LaunchD, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHE", Qt::Key_LaunchE, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHF", Qt::Key_LaunchF, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIALAST", Qt::Key_MediaLast, CONST_CS | CONST_PERSISTENT);
+/*	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SELECT", Qt::Key_Select, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_YES", Qt::Key_Yes, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NO", Qt::Key_No, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTEXT1", Qt::Key_Context1, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTEXT2", Qt::Key_Context2, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTEXT3", Qt::Key_Context3, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTEXT4", Qt::Key_Context4, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CALL", Qt::Key_Call, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUP", Qt::Key_Hangup, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_FLIP", Qt::Key_Flip, CONST_CS | CONST_PERSISTENT);
+*/	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UNKNOWN", Qt::Key_unknown, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_NOARROW", Qt::NoArrow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_UPARROW", Qt::UpArrow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_DOWNARROW", Qt::DownArrow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_LEFTARROW", Qt::LeftArrow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_RIGHTARROW", Qt::RightArrow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_NOPEN", Qt::NoPen, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_SOLIDLINE", Qt::SolidLine, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_DASHLINE", Qt::DashLine, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_DOTLINE", Qt::DotLine, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_DASHDOTLINE", Qt::DashDotLine, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_DASHDOTDOTLINE", Qt::DashDotDotLine, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_CUSTOMDASHLINE", Qt::CustomDashLine, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_MPENSTYLE", Qt::MPenStyle, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENCAPSTYLE_FLATCAP", Qt::FlatCap, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENCAPSTYLE_SQUARECAP", Qt::SquareCap, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENCAPSTYLE_ROUNDCAP", Qt::RoundCap, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENCAPSTYLE_MPENCAPSTYLE", Qt::MPenCapStyle, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENJOINSTYLE_MITERJOIN", Qt::MiterJoin, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENJOINSTYLE_BEVELJOIN", Qt::BevelJoin, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENJOINSTYLE_ROUNDJOIN", Qt::RoundJoin, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_PENJOINSTYLE_MPENJOINSTYLE", Qt::MPenJoinStyle, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_NOBRUSH", Qt::NoBrush, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_SOLIDPATTERN", Qt::SolidPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE1PATTERN", Qt::Dense1Pattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE2PATTERN", Qt::Dense2Pattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE3PATTERN", Qt::Dense3Pattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE4PATTERN", Qt::Dense4Pattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE5PATTERN", Qt::Dense5Pattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE6PATTERN", Qt::Dense6Pattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE7PATTERN", Qt::Dense7Pattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_HORPATTERN", Qt::HorPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_VERPATTERN", Qt::VerPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_CROSSPATTERN", Qt::CrossPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_BDIAGPATTERN", Qt::BDiagPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_FDIAGPATTERN", Qt::FDiagPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DIAGCROSSPATTERN", Qt::DiagCrossPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_LINEARGRADIENTPATTERN", Qt::LinearGradientPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_RADIALGRADIENTPATTERN", Qt::RadialGradientPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_CONICALGRADIENTPATTERN", Qt::ConicalGradientPattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_TEXTUREPATTERN", Qt::TexturePattern, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_GENERAL", Qt::UI_General, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_ANIMATEMENU", Qt::UI_AnimateMenu, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_FADEMENU", Qt::UI_FadeMenu, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_ANIMATECOMBO", Qt::UI_AnimateCombo, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_ANIMATETOOLTIP", Qt::UI_AnimateTooltip, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_FADETOOLTIP", Qt::UI_FadeTooltip, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_ANIMATETOOLBOX", Qt::UI_AnimateToolBox, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_ARROWCURSOR", Qt::ArrowCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_UPARROWCURSOR", Qt::UpArrowCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_CROSSCURSOR", Qt::CrossCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_WAITCURSOR", Qt::WaitCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_IBEAMCURSOR", Qt::IBeamCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEVERCURSOR", Qt::SizeVerCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEHORCURSOR", Qt::SizeHorCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEBDIAGCURSOR", Qt::SizeBDiagCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEFDIAGCURSOR", Qt::SizeFDiagCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEALLCURSOR", Qt::SizeAllCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_BLANKCURSOR", Qt::BlankCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SPLITVCURSOR", Qt::SplitVCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SPLITHCURSOR", Qt::SplitHCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_POINTINGHANDCURSOR", Qt::PointingHandCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_FORBIDDENCURSOR", Qt::ForbiddenCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_WHATSTHISCURSOR", Qt::WhatsThisCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_BUSYCURSOR", Qt::BusyCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_LASTCURSOR", Qt::LastCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_BITMAPCURSOR", Qt::BitmapCursor, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFORMAT_PLAINTEXT", Qt::PlainText, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFORMAT_RICHTEXT", Qt::RichText, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFORMAT_AUTOTEXT", Qt::AutoText, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TEXTFORMAT_LOGTEXT", Qt::LogText, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ASPECTRATIOMODE_IGNOREASPECTRATIO", Qt::IgnoreAspectRatio, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ASPECTRATIOMODE_KEEPASPECTRATIO", Qt::KeepAspectRatio, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ASPECTRATIOMODE_KEEPASPECTRATIOBYEXPANDING", Qt::KeepAspectRatioByExpanding, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ANCHORATTRIBUTE_ANCHORNAME", Qt::AnchorName, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ANCHORATTRIBUTE_ANCHORHREF", Qt::AnchorHref, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_LEFTDOCKWIDGETAREA", Qt::LeftDockWidgetArea, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_RIGHTDOCKWIDGETAREA", Qt::RightDockWidgetArea, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_TOPDOCKWIDGETAREA", Qt::TopDockWidgetArea, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_BOTTOMDOCKWIDGETAREA", Qt::BottomDockWidgetArea, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_DOCKWIDGETAREA_MASK", Qt::DockWidgetArea_Mask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_ALLDOCKWIDGETAREAS", Qt::AllDockWidgetAreas, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT__NDOCKWIDGETAREAS", Qt::NDockWidgetAreas, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_LEFTTOOLBARAREA", Qt::LeftToolBarArea, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_RIGHTTOOLBARAREA", Qt::RightToolBarArea, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_TOPTOOLBARAREA", Qt::TopToolBarArea, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_BOTTOMTOOLBARAREA", Qt::BottomToolBarArea, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_TOOLBARAREA_MASK", Qt::ToolBarArea_Mask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_ALLTOOLBARAREAS", Qt::AllToolBarAreas, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT__NTOOLBARAREAS", Qt::NToolBarAreas, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DATEFORMAT_TEXTDATE", Qt::TextDate, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DATEFORMAT_ISODATE", Qt::ISODate, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DATEFORMAT_LOCALDATE", Qt::LocalDate, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TIMESPEC_LOCALTIME", Qt::LocalTime, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TIMESPEC_UTC", Qt::UTC, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_MONDAY", Qt::Monday, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_TUESDAY", Qt::Tuesday, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_WEDNESDAY", Qt::Wednesday, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_THURSDAY", Qt::Thursday, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_FRIDAY", Qt::Friday, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_SATURDAY", Qt::Saturday, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_SUNDAY", Qt::Sunday, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_SCROLLBARPOLICY_SCROLLBARASNEEDED", Qt::ScrollBarAsNeeded, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_SCROLLBARPOLICY_SCROLLBARALWAYSOFF", Qt::ScrollBarAlwaysOff, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_SCROLLBARPOLICY_SCROLLBARALWAYSON", Qt::ScrollBarAlwaysOn, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CASESENSITIVITY_CASEINSENSITIVE", Qt::CaseInsensitive, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CASESENSITIVITY_CASESENSITIVE", Qt::CaseSensitive, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CORNER_TOPLEFTCORNER", Qt::TopLeftCorner, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CORNER_TOPRIGHTCORNER", Qt::TopRightCorner, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CORNER_BOTTOMLEFTCORNER", Qt::BottomLeftCorner, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CORNER_BOTTOMRIGHTCORNER", Qt::BottomRightCorner, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CONNECTIONTYPE_AUTOCONNECTION", Qt::AutoConnection, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CONNECTIONTYPE_DIRECTCONNECTION", Qt::DirectConnection, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CONNECTIONTYPE_QUEUEDCONNECTION", Qt::QueuedConnection, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CONNECTIONTYPE_AUTOCOMPATCONNECTION", Qt::AutoCompatConnection, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_SHORTCUTCONTEXT_WIDGETSHORTCUT", Qt::WidgetShortcut, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_SHORTCUTCONTEXT_WINDOWSHORTCUT", Qt::WindowShortcut, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_SHORTCUTCONTEXT_APPLICATIONSHORTCUT", Qt::ApplicationShortcut, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FILLRULE_ODDEVENFILL", Qt::OddEvenFill, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FILLRULE_WINDINGFILL", Qt::WindingFill, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CLIPOPERATION_NOCLIP", Qt::NoClip, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CLIPOPERATION_REPLACECLIP", Qt::ReplaceClip, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CLIPOPERATION_INTERSECTCLIP", Qt::IntersectClip, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CLIPOPERATION_UNITECLIP", Qt::UniteClip, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TRANSFORMATIONMODE_FASTTRANSFORMATION", Qt::FastTransformation, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TRANSFORMATIONMODE_SMOOTHTRANSFORMATION", Qt::SmoothTransformation, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_MOUSEFOCUSREASON", Qt::MouseFocusReason, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_TABFOCUSREASON", Qt::TabFocusReason, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_BACKTABFOCUSREASON", Qt::BacktabFocusReason, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_ACTIVEWINDOWFOCUSREASON", Qt::ActiveWindowFocusReason, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_POPUPFOCUSREASON", Qt::PopupFocusReason, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_SHORTCUTFOCUSREASON", Qt::ShortcutFocusReason, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_MENUBARFOCUSREASON", Qt::MenuBarFocusReason, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_OTHERFOCUSREASON", Qt::OtherFocusReason, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_NOFOCUSREASON", Qt::NoFocusReason, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CONTEXTMENUPOLICY_NOCONTEXTMENU", Qt::NoContextMenu, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CONTEXTMENUPOLICY_DEFAULTCONTEXTMENU", Qt::DefaultContextMenu, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CONTEXTMENUPOLICY_ACTIONSCONTEXTMENU", Qt::ActionsContextMenu, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CONTEXTMENUPOLICY_CUSTOMCONTEXTMENU", Qt::CustomContextMenu, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMMICROFOCUS", Qt::ImMicroFocus, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMFONT", Qt::ImFont, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMCURSORPOSITION", Qt::ImCursorPosition, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMSURROUNDINGTEXT", Qt::ImSurroundingText, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMCURRENTSELECTION", Qt::ImCurrentSelection, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBUTTONSTYLE_TOOLBUTTONICONONLY", Qt::ToolButtonIconOnly, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBUTTONSTYLE_TOOLBUTTONTEXTONLY", Qt::ToolButtonTextOnly, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBUTTONSTYLE_TOOLBUTTONTEXTBESIDEICON", Qt::ToolButtonTextBesideIcon, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_TOOLBUTTONSTYLE_TOOLBUTTONTEXTUNDERICON", Qt::ToolButtonTextUnderIcon, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_LAYOUTDIRECTION_LEFTTORIGHT", Qt::LeftToRight, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_LAYOUTDIRECTION_RIGHTTOLEFT", Qt::RightToLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DROPACTION_COPYACTION", Qt::CopyAction, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DROPACTION_MOVEACTION", Qt::MoveAction, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DROPACTION_LINKACTION", Qt::LinkAction, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DROPACTION_ACTIONMASK", Qt::ActionMask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DROPACTION_TARGETMOVEACTION", Qt::TargetMoveAction, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_DROPACTION_IGNOREACTION", Qt::IgnoreAction, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CHECKSTATE_UNCHECKED", Qt::Unchecked, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CHECKSTATE_PARTIALLYCHECKED", Qt::PartiallyChecked, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_CHECKSTATE_CHECKED", Qt::Checked, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_DISPLAYROLE", Qt::DisplayRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_DECORATIONROLE", Qt::DecorationRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_EDITROLE", Qt::EditRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_TOOLTIPROLE", Qt::ToolTipRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_STATUSTIPROLE", Qt::StatusTipRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_WHATSTHISROLE", Qt::WhatsThisRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_FONTROLE", Qt::FontRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_TEXTALIGNMENTROLE", Qt::TextAlignmentRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_BACKGROUNDCOLORROLE", Qt::BackgroundColorRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_TEXTCOLORROLE", Qt::TextColorRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_CHECKSTATEROLE", Qt::CheckStateRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_ACCESSIBLETEXTROLE", Qt::AccessibleTextRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_ACCESSIBLEDESCRIPTIONROLE", Qt::AccessibleDescriptionRole, CONST_CS | CONST_PERSISTENT);
+//	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_SIZEHINTROLE", Qt::SizeHintRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_USERROLE", Qt::UserRole, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISSELECTABLE", Qt::ItemIsSelectable, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISEDITABLE", Qt::ItemIsEditable, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISDRAGENABLED", Qt::ItemIsDragEnabled, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISDROPENABLED", Qt::ItemIsDropEnabled, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISUSERCHECKABLE", Qt::ItemIsUserCheckable, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISENABLED", Qt::ItemIsEnabled, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISTRISTATE", Qt::ItemIsTristate, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHEXACTLY", Qt::MatchExactly, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHCONTAINS", Qt::MatchContains, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHSTARTSWITH", Qt::MatchStartsWith, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHENDSWITH", Qt::MatchEndsWith, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHREGEXP", Qt::MatchRegExp, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHWILDCARD", Qt::MatchWildcard, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHCASESENSITIVE", Qt::MatchCaseSensitive, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHWRAP", Qt::MatchWrap, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHRECURSIVE", Qt::MatchRecursive, CONST_CS | CONST_PERSISTENT);
+/*	  REGISTER_LONG_CONSTANT("QT_WINDOWMODALITY_NONMODAL", Qt::NonModal, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWMODALITY_WINDOWMODAL", Qt::WindowModal, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QT_WINDOWMODALITY_APPLICATIONMODAL", Qt::ApplicationModal, CONST_CS | CONST_PERSISTENT);
+*/
+
 //    objects_handle = zend_register_list_destructors_ex(NULL,NULL,"Qt Wrapper",module_number);
 
 #include "ag_qt_minit.h"
@@ -413,7 +1124,7 @@
 PHP_FUNCTION(SIGNAL)
 {
     const char* string;
-    int string_len;
+    int* string_len;
     if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s",&string,&string_len)) {
         return;
     }
@@ -433,7 +1144,7 @@
 PHP_FUNCTION(SLOT)
 {
     const char* string;
-    int string_len;
+    int* string_len;
     if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s",&string,&string_len)) {
         return;
     }
@@ -1368,6 +2079,32 @@
 
 }
 
+static zend_function_entry QInternal_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QInternal(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QInternal",QInternal_methods);
+    QInternal_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry Qt_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_Qt(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"Qt",Qt_methods);
+    Qt_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+
+
 #include "ag_php_qt_cpp.h"
 
 /* }}} */

Modified: trunk/qt/php_qt.h
===================================================================
--- trunk/qt/php_qt.h	2006-01-08 23:40:22 UTC (rev 166)
+++ trunk/qt/php_qt.h	2006-01-09 00:41:19 UTC (rev 167)
@@ -381,4 +381,10 @@
 extern zend_class_entry *QFrame_ce_ptr;
 extern zend_class_entry *QLCDNumber_ce_ptr;
 
+extern zend_class_entry *QInternal_ce_ptr;
+void 	_register_QInternal();
+extern zend_class_entry *Qt_ce_ptr;
+void 	_register_Qt();
+
+
 #include "ag_extern_zend_class_entry.h"

Modified: trunk/qt/zend_php_qt.h
===================================================================
--- trunk/qt/zend_php_qt.h	2006-01-08 23:40:22 UTC (rev 166)
+++ trunk/qt/zend_php_qt.h	2006-01-09 00:41:19 UTC (rev 167)
@@ -570,6 +570,14 @@
 ZEND_METHOD(QLCDNumber, tr);
 ZEND_METHOD(QLCDNumber, trUtf8);
 
+/* internals */
+ZEND_METHOD(Qt, tr);
+ZEND_METHOD(Qt, qt_invoke);
+ZEND_METHOD(Qt, qt_emit);
+ZEND_METHOD(Qt, trUtf8);
+ZEND_METHOD(Qt, qt_property);
+ZEND_METHOD(Qt, qt_cast);
+
 #include "ag_zend_php_qt.h"
 
 /* 



From tm243 at berlios.de  Mon Jan  9 01:50:19 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 9 Jan 2006 01:50:19 +0100
Subject: [Php-qt-svn] r168 - trunk/qt
Message-ID: <200601090050.k090oJjf028124@sheep.berlios.de>

Author: tm243
Date: 2006-01-09 01:50:15 +0100 (Mon, 09 Jan 2006)
New Revision: 168

Modified:
   trunk/qt/ag_php_qt_cpp.h
   trunk/qt/php_qt.cpp
Log:
lost zend_me registration, fixed.

Modified: trunk/qt/ag_php_qt_cpp.h
===================================================================
--- trunk/qt/ag_php_qt_cpp.h	2006-01-09 00:41:19 UTC (rev 167)
+++ trunk/qt/ag_php_qt_cpp.h	2006-01-09 00:50:15 UTC (rev 168)
@@ -1,4 +1,24 @@
 static zend_function_entry QDate_methods[] = {
+	ZEND_ME(QDate,longDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,setYMD,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,shortMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,isLeapYear,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,fromJulianDay,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,addDays,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,gregorianToJulian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,longMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,julianToGregorian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,QDate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,shortDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,weekNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,addMonths,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,addYears,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,daysTo,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
 };
@@ -11,6 +31,23 @@
 
 }
 static zend_function_entry QDateTime_methods[] = {
+	ZEND_ME(QDateTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,setTime_t,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addDays,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,secsTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toTimeSpec,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDateTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDateTime,setTime,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addMonths,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,QDateTime,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,QDateTime,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,setDate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,daysTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,addYears,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,setTimeSpec,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
 };
@@ -23,6 +60,17 @@
 
 }
 static zend_function_entry QTime_methods[] = {
+	ZEND_ME(QTime,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,secsTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,QTime,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,addSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,addMSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,setHMS,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,msecsTo,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
 };

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-09 00:41:19 UTC (rev 167)
+++ trunk/qt/php_qt.cpp	2006-01-09 00:50:15 UTC (rev 168)
@@ -2092,6 +2092,12 @@
 
 }
 static zend_function_entry Qt_methods[] = {
+	ZEND_ME(Qt,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(Qt,qt_invoke,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(Qt,qt_emit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(Qt,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(Qt,qt_property,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(Qt,qt_cast,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
 };



From tm243 at berlios.de  Tue Jan 10 15:08:52 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Tue, 10 Jan 2006 15:08:52 +0100
Subject: [Php-qt-svn] r169 - trunk
Message-ID: <200601101408.k0AE8qQV017922@sheep.berlios.de>

Author: tm243
Date: 2006-01-10 15:08:51 +0100 (Tue, 10 Jan 2006)
New Revision: 169

Modified:
   trunk/config.m4
Log:
removed an empty line.

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-09 00:50:15 UTC (rev 168)
+++ trunk/config.m4	2006-01-10 14:08:51 UTC (rev 169)
@@ -109,7 +109,6 @@
   qt/classes/qdate.cpp \ 
   qt/classes/qdatetime.cpp \ 
   qt/classes/qtime.cpp \ 
-
   qt/php_qt.cpp,$ext_shared)
 
   PHP_ADD_BUILD_DIR($ext_builddir/qt)



From tm243 at berlios.de  Wed Jan 11 23:00:48 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Wed, 11 Jan 2006 23:00:48 +0100
Subject: [Php-qt-svn] r170 - in trunk: . qt
Message-ID: <200601112200.k0BM0msF032473@sheep.berlios.de>

Author: tm243
Date: 2006-01-11 23:00:44 +0100 (Wed, 11 Jan 2006)
New Revision: 170

Modified:
   trunk/config.m4
   trunk/qt/ag_php_qt_cpp.h
   trunk/qt/php_qt.cpp
   trunk/qt/php_qt.h
   trunk/qt/zend_php_qt.h
Log:
class Qt removed. Pointer bug fix from revision 159 restored.

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-10 14:08:51 UTC (rev 169)
+++ trunk/config.m4	2006-01-11 22:00:44 UTC (rev 170)
@@ -100,15 +100,13 @@
   qt/layout_management/qhboxlayout.cpp \
   qt/layout_management/qvboxlayout.cpp \
   qt/object_model/qobject.cpp \
-  qt/qobject_model/qinternal.cpp \ 
-  qt/qobject_model/qt.cpp \ 
   qt/text_related/qstring.cpp \
   qt/text_related/qlatin1string.cpp \
   qt/text_related/qchar.cpp \
   qt/event/qevent.cpp \
-  qt/classes/qdate.cpp \ 
-  qt/classes/qdatetime.cpp \ 
-  qt/classes/qtime.cpp \ 
+  qt/classes/qdate.cpp \
+  qt/classes/qdatetime.cpp \
+  qt/classes/qtime.cpp \
   qt/php_qt.cpp,$ext_shared)
 
   PHP_ADD_BUILD_DIR($ext_builddir/qt)

Modified: trunk/qt/ag_php_qt_cpp.h
===================================================================
--- trunk/qt/ag_php_qt_cpp.h	2006-01-10 14:08:51 UTC (rev 169)
+++ trunk/qt/ag_php_qt_cpp.h	2006-01-11 22:00:44 UTC (rev 170)
@@ -11,7 +11,6 @@
 	ZEND_ME(QDate,gregorianToJulian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,longMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,julianToGregorian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,QDate,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,shortDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
@@ -41,8 +40,6 @@
 	ZEND_ME(QDateTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDateTime,setTime,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,addMonths,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,QDateTime,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,QDateTime,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,addSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,setDate,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,daysTo,NULL,ZEND_ACC_PUBLIC)
@@ -66,7 +63,6 @@
 	ZEND_ME(QTime,secsTo,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QTime,QTime,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,addSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,addMSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,setHMS,NULL,ZEND_ACC_PUBLIC)

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-10 14:08:51 UTC (rev 169)
+++ trunk/qt/php_qt.cpp	2006-01-11 22:00:44 UTC (rev 170)
@@ -63,10 +63,7 @@
 zend_class_entry *QLineEdit_ce_ptr;
 zend_class_entry *QFrame_ce_ptr;
 zend_class_entry *QLCDNumber_ce_ptr;
-zend_class_entry *QInternal_ce_ptr;
-zend_class_entry *Qt_ce_ptr;
 
-
 #include "ag_zend_class_entry.h"
 
 /* {{{ php_qt_functions[]
@@ -336,7 +333,6 @@
         REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_FLAT", QLCDNumber::Flat, CONST_CS | CONST_PERSISTENT);
 
 // handfixed:
-	_register_QInternal(TSRMLS_C);
 	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_UNKNOWNDEVICE", QInternal::UnknownDevice, CONST_CS | CONST_PERSISTENT);
 	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_WIDGET", QInternal::Widget, CONST_CS | CONST_PERSISTENT);
 	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_PIXMAP", QInternal::Pixmap, CONST_CS | CONST_PERSISTENT);
@@ -348,7 +344,6 @@
 	  REGISTER_LONG_CONSTANT("QINTERNAL_RELAYOUTTYPE_RELAYOUTDRAGGING", QInternal::RelayoutDragging, CONST_CS | CONST_PERSISTENT);
 	  REGISTER_LONG_CONSTANT("QINTERNAL_RELAYOUTTYPE_RELAYOUTDROPPED", QInternal::RelayoutDropped, CONST_CS | CONST_PERSISTENT);
 
-	_register_Qt(TSRMLS_C);
 	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_COLOR0", Qt::color0, CONST_CS | CONST_PERSISTENT);
 	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_COLOR1", Qt::color1, CONST_CS | CONST_PERSISTENT);
 	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_BLACK", Qt::black, CONST_CS | CONST_PERSISTENT);
@@ -1124,7 +1119,7 @@
 PHP_FUNCTION(SIGNAL)
 {
     const char* string;
-    int* string_len;
+    int string_len;
     if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s",&string,&string_len)) {
         return;
     }
@@ -1144,7 +1139,7 @@
 PHP_FUNCTION(SLOT)
 {
     const char* string;
-    int* string_len;
+    int string_len;
     if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s",&string,&string_len)) {
         return;
     }
@@ -2079,38 +2074,6 @@
 
 }
 
-static zend_function_entry QInternal_methods[] = {
-
-    {NULL,NULL,NULL}
-};
-
-void _register_QInternal(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"QInternal",QInternal_methods);
-    QInternal_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
-
-}
-static zend_function_entry Qt_methods[] = {
-	ZEND_ME(Qt,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(Qt,qt_invoke,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(Qt,qt_emit,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(Qt,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(Qt,qt_property,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(Qt,qt_cast,NULL,ZEND_ACC_PUBLIC)
-
-    {NULL,NULL,NULL}
-};
-
-void _register_Qt(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"Qt",Qt_methods);
-    Qt_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
-
-}
-
-
 #include "ag_php_qt_cpp.h"
 
 /* }}} */

Modified: trunk/qt/php_qt.h
===================================================================
--- trunk/qt/php_qt.h	2006-01-10 14:08:51 UTC (rev 169)
+++ trunk/qt/php_qt.h	2006-01-11 22:00:44 UTC (rev 170)
@@ -381,10 +381,5 @@
 extern zend_class_entry *QFrame_ce_ptr;
 extern zend_class_entry *QLCDNumber_ce_ptr;
 
-extern zend_class_entry *QInternal_ce_ptr;
-void 	_register_QInternal();
-extern zend_class_entry *Qt_ce_ptr;
-void 	_register_Qt();
 
-
 #include "ag_extern_zend_class_entry.h"

Modified: trunk/qt/zend_php_qt.h
===================================================================
--- trunk/qt/zend_php_qt.h	2006-01-10 14:08:51 UTC (rev 169)
+++ trunk/qt/zend_php_qt.h	2006-01-11 22:00:44 UTC (rev 170)
@@ -570,14 +570,6 @@
 ZEND_METHOD(QLCDNumber, tr);
 ZEND_METHOD(QLCDNumber, trUtf8);
 
-/* internals */
-ZEND_METHOD(Qt, tr);
-ZEND_METHOD(Qt, qt_invoke);
-ZEND_METHOD(Qt, qt_emit);
-ZEND_METHOD(Qt, trUtf8);
-ZEND_METHOD(Qt, qt_property);
-ZEND_METHOD(Qt, qt_cast);
-
 #include "ag_zend_php_qt.h"
 
 /* 



From tm243 at berlios.de  Thu Jan 12 21:45:04 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Thu, 12 Jan 2006 21:45:04 +0100
Subject: [Php-qt-svn] r171 - trunk/qt
Message-ID: <200601122045.k0CKj4wO004233@sheep.berlios.de>

Author: tm243
Date: 2006-01-12 21:45:03 +0100 (Thu, 12 Jan 2006)
New Revision: 171

Added:
   trunk/qt/ag_extern_zend_class_entry.inc
   trunk/qt/ag_php_qt_cpp.inc
   trunk/qt/ag_qt_minit.inc
   trunk/qt/ag_zend_class_entry.inc
   trunk/qt/ag_zend_php_qt.inc
Removed:
   trunk/qt/ag_extern_zend_class_entry.h
   trunk/qt/ag_php_qt_cpp.h
   trunk/qt/ag_qt_minit.h
   trunk/qt/ag_zend_class_entry.h
   trunk/qt/ag_zend_php_qt.h
Modified:
   trunk/qt/php_qt.cpp
   trunk/qt/php_qt.h
   trunk/qt/zend_php_qt.h
Log:
autogenerated files renamed from *.h to *.inc.

Deleted: trunk/qt/ag_extern_zend_class_entry.h
===================================================================
--- trunk/qt/ag_extern_zend_class_entry.h	2006-01-11 22:00:44 UTC (rev 170)
+++ trunk/qt/ag_extern_zend_class_entry.h	2006-01-12 20:45:03 UTC (rev 171)
@@ -1,6 +0,0 @@
-extern zend_class_entry *QDate_ce_ptr;
-void 	_register_QDate();
-extern zend_class_entry *QDateTime_ce_ptr;
-void 	_register_QDateTime();
-extern zend_class_entry *QTime_ce_ptr;
-void 	_register_QTime();

Copied: trunk/qt/ag_extern_zend_class_entry.inc (from rev 170, trunk/qt/ag_extern_zend_class_entry.h)

Deleted: trunk/qt/ag_php_qt_cpp.h
===================================================================
--- trunk/qt/ag_php_qt_cpp.h	2006-01-11 22:00:44 UTC (rev 170)
+++ trunk/qt/ag_php_qt_cpp.h	2006-01-12 20:45:03 UTC (rev 171)
@@ -1,80 +0,0 @@
-static zend_function_entry QDate_methods[] = {
-	ZEND_ME(QDate,longDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,setYMD,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,shortMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,toString,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,toString,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,isLeapYear,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,fromJulianDay,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,addDays,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,gregorianToJulian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,longMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,julianToGregorian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,shortDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,weekNumber,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,addMonths,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,addYears,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,daysTo,NULL,ZEND_ACC_PUBLIC)
-
-    {NULL,NULL,NULL}
-};
-
-void _register_QDate(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"QDate",QDate_methods);
-    QDate_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
-
-}
-static zend_function_entry QDateTime_methods[] = {
-	ZEND_ME(QDateTime,toString,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,toString,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,setTime_t,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,addDays,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,secsTo,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,toTimeSpec,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDateTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDateTime,setTime,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,addMonths,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,addSecs,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,setDate,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,daysTo,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,addYears,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,setTimeSpec,NULL,ZEND_ACC_PUBLIC)
-
-    {NULL,NULL,NULL}
-};
-
-void _register_QDateTime(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"QDateTime",QDateTime_methods);
-    QDateTime_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
-
-}
-static zend_function_entry QTime_methods[] = {
-	ZEND_ME(QTime,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QTime,toString,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime,toString,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime,secsTo,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QTime,addSecs,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime,addMSecs,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime,setHMS,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime,msecsTo,NULL,ZEND_ACC_PUBLIC)
-
-    {NULL,NULL,NULL}
-};
-
-void _register_QTime(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"QTime",QTime_methods);
-    QTime_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
-
-}

Copied: trunk/qt/ag_php_qt_cpp.inc (from rev 170, trunk/qt/ag_php_qt_cpp.h)

Deleted: trunk/qt/ag_qt_minit.h
===================================================================
--- trunk/qt/ag_qt_minit.h	2006-01-11 22:00:44 UTC (rev 170)
+++ trunk/qt/ag_qt_minit.h	2006-01-12 20:45:03 UTC (rev 171)
@@ -1,7 +0,0 @@
-
-	_register_QDate(TSRMLS_C);
-
-	_register_QDateTime(TSRMLS_C);
-
-	_register_QTime(TSRMLS_C);
-

Copied: trunk/qt/ag_qt_minit.inc (from rev 170, trunk/qt/ag_qt_minit.h)

Deleted: trunk/qt/ag_zend_class_entry.h
===================================================================
--- trunk/qt/ag_zend_class_entry.h	2006-01-11 22:00:44 UTC (rev 170)
+++ trunk/qt/ag_zend_class_entry.h	2006-01-12 20:45:03 UTC (rev 171)
@@ -1,3 +0,0 @@
-zend_class_entry *QDate_ce_ptr;
-zend_class_entry *QDateTime_ce_ptr;
-zend_class_entry *QTime_ce_ptr;

Copied: trunk/qt/ag_zend_class_entry.inc (from rev 170, trunk/qt/ag_zend_class_entry.h)

Deleted: trunk/qt/ag_zend_php_qt.h
===================================================================
--- trunk/qt/ag_zend_php_qt.h	2006-01-11 22:00:44 UTC (rev 170)
+++ trunk/qt/ag_zend_php_qt.h	2006-01-12 20:45:03 UTC (rev 171)
@@ -1,49 +0,0 @@
-
-ZEND_METHOD(QDate, longDayName);
-ZEND_METHOD(QDate, isValid);
-ZEND_METHOD(QDate, setYMD);
-ZEND_METHOD(QDate, shortMonthName);
-ZEND_METHOD(QDate, toString);
-ZEND_METHOD(QDate, toString);
-ZEND_METHOD(QDate, isLeapYear);
-ZEND_METHOD(QDate, fromJulianDay);
-ZEND_METHOD(QDate, addDays);
-ZEND_METHOD(QDate, gregorianToJulian);
-ZEND_METHOD(QDate, longMonthName);
-ZEND_METHOD(QDate, julianToGregorian);
-ZEND_METHOD(QDate, QDate);
-ZEND_METHOD(QDate, shortDayName);
-ZEND_METHOD(QDate, fromString);
-ZEND_METHOD(QDate, fromString);
-ZEND_METHOD(QDate, weekNumber);
-ZEND_METHOD(QDate, addMonths);
-ZEND_METHOD(QDate, addYears);
-ZEND_METHOD(QDate, daysTo);
-ZEND_METHOD(QDateTime, toString);
-ZEND_METHOD(QDateTime, toString);
-ZEND_METHOD(QDateTime, setTime_t);
-ZEND_METHOD(QDateTime, addDays);
-ZEND_METHOD(QDateTime, secsTo);
-ZEND_METHOD(QDateTime, toTimeSpec);
-ZEND_METHOD(QDateTime, fromString);
-ZEND_METHOD(QDateTime, fromString);
-ZEND_METHOD(QDateTime, setTime);
-ZEND_METHOD(QDateTime, addMonths);
-ZEND_METHOD(QDateTime, QDateTime);
-ZEND_METHOD(QDateTime, QDateTime);
-ZEND_METHOD(QDateTime, addSecs);
-ZEND_METHOD(QDateTime, setDate);
-ZEND_METHOD(QDateTime, daysTo);
-ZEND_METHOD(QDateTime, addYears);
-ZEND_METHOD(QDateTime, setTimeSpec);
-ZEND_METHOD(QTime, isValid);
-ZEND_METHOD(QTime, toString);
-ZEND_METHOD(QTime, toString);
-ZEND_METHOD(QTime, secsTo);
-ZEND_METHOD(QTime, fromString);
-ZEND_METHOD(QTime, fromString);
-ZEND_METHOD(QTime, QTime);
-ZEND_METHOD(QTime, addSecs);
-ZEND_METHOD(QTime, addMSecs);
-ZEND_METHOD(QTime, setHMS);
-ZEND_METHOD(QTime, msecsTo);
\ No newline at end of file

Copied: trunk/qt/ag_zend_php_qt.inc (from rev 170, trunk/qt/ag_zend_php_qt.h)

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-11 22:00:44 UTC (rev 170)
+++ trunk/qt/php_qt.cpp	2006-01-12 20:45:03 UTC (rev 171)
@@ -31,6 +31,7 @@
 #include <QAbstractSlider>
 #include <QSlider>
 #include <QLCDNumber>
+#include <QStringList>
 
 //QOUT();
 
@@ -63,8 +64,9 @@
 zend_class_entry *QLineEdit_ce_ptr;
 zend_class_entry *QFrame_ce_ptr;
 zend_class_entry *QLCDNumber_ce_ptr;
+zend_class_entry *QMimeSource_ce_ptr;
 
-#include "ag_zend_class_entry.h"
+#include "ag_zend_class_entry.inc"
 
 /* {{{ php_qt_functions[]
  *
@@ -1041,7 +1043,7 @@
 
 //    objects_handle = zend_register_list_destructors_ex(NULL,NULL,"Qt Wrapper",module_number);
 
-#include "ag_qt_minit.h"
+#include "ag_qt_minit.inc"
 
 	return SUCCESS;
 }
@@ -2074,7 +2076,7 @@
 
 }
 
-#include "ag_php_qt_cpp.h"
+#include "ag_php_qt_cpp.inc"
 
 /* }}} */
 /* The previous line is meant for vim and emacs, so it can correctly fold and 

Modified: trunk/qt/php_qt.h
===================================================================
--- trunk/qt/php_qt.h	2006-01-11 22:00:44 UTC (rev 170)
+++ trunk/qt/php_qt.h	2006-01-12 20:45:03 UTC (rev 171)
@@ -380,6 +380,9 @@
 extern zend_class_entry *QLineEdit_ce_ptr;
 extern zend_class_entry *QFrame_ce_ptr;
 extern zend_class_entry *QLCDNumber_ce_ptr;
+extern zend_class_entry *QMimeSource_ce_ptr;
 
+#include "ag_extern_zend_class_entry.h"
 
-#include "ag_extern_zend_class_entry.h"
+
+

Modified: trunk/qt/zend_php_qt.h
===================================================================
--- trunk/qt/zend_php_qt.h	2006-01-11 22:00:44 UTC (rev 170)
+++ trunk/qt/zend_php_qt.h	2006-01-12 20:45:03 UTC (rev 171)
@@ -570,7 +570,7 @@
 ZEND_METHOD(QLCDNumber, tr);
 ZEND_METHOD(QLCDNumber, trUtf8);
 
-#include "ag_zend_php_qt.h"
+#include "ag_zend_php_qt.inc"
 
 /* 
   	Declare any global variables you may need between the BEGIN



From tm243 at berlios.de  Thu Jan 12 21:51:30 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Thu, 12 Jan 2006 21:51:30 +0100
Subject: [Php-qt-svn] r172 - in trunk: . qt
Message-ID: <200601122051.k0CKpUp7005122@sheep.berlios.de>

Author: tm243
Date: 2006-01-12 21:51:27 +0100 (Thu, 12 Jan 2006)
New Revision: 172

Modified:
   trunk/config.m4
   trunk/qt/ag_extern_zend_class_entry.inc
   trunk/qt/ag_php_qt_cpp.inc
   trunk/qt/ag_qt_minit.inc
   trunk/qt/ag_zend_class_entry.inc
   trunk/qt/ag_zend_php_qt.inc
   trunk/qt/php_qt.h
Log:
new classes added.

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-12 20:45:03 UTC (rev 171)
+++ trunk/config.m4	2006-01-12 20:51:27 UTC (rev 172)
@@ -104,11 +104,52 @@
   qt/text_related/qlatin1string.cpp \
   qt/text_related/qchar.cpp \
   qt/event/qevent.cpp \
-  qt/classes/qdate.cpp \
-  qt/classes/qdatetime.cpp \
-  qt/classes/qtime.cpp \
+	qt/classes/qactionevent.cpp \ 
+	qt/classes/qcharref.cpp \ 
+	qt/classes/qclipboardevent.cpp \ 
+	qt/classes/qcloseevent.cpp \ 
+	qt/classes/qcontextmenuevent.cpp \ 
+	qt/classes/qdate.cpp \ 
+	qt/classes/qdatetime.cpp \ 
+	qt/classes/qdragenterevent.cpp \ 
+	qt/classes/qdragleaveevent.cpp \ 
+	qt/classes/qdragmoveevent.cpp \ 
+	qt/classes/qdragresponseevent.cpp \ 
+	qt/classes/qdropevent.cpp \ 
+	qt/classes/qfileopenevent.cpp \ 
+	qt/classes/qfocusevent.cpp \ 
+	qt/classes/qfont.cpp \ 
+	qt/classes/qgridlayout.cpp \ 
+	qt/classes/qhelpevent.cpp \ 
+	qt/classes/qhideevent.cpp \ 
+	qt/classes/qhoverevent.cpp \ 
+	qt/classes/qicondragevent.cpp \ 
+	qt/classes/qinputevent.cpp \ 
+	qt/classes/qinputmethodevent.cpp \ 
+	qt/classes/qkeyevent.cpp \ 
+	qt/classes/qlabel.cpp \ 
+	qt/classes/qlatin1char.cpp \ 
+	qt/classes/qmouseevent.cpp \ 
+	qt/classes/qmoveevent.cpp \ 
+	qt/classes/qobjectdata.cpp \ 
+	qt/classes/qobjectuserdata.cpp \ 
+	qt/classes/qpaintevent.cpp \ 
+	qt/classes/qpainter.cpp \  
+	qt/classes/qresizeevent.cpp \ 
+	qt/classes/qshortcutevent.cpp \ 
+	qt/classes/qshowevent.cpp \ 
+	qt/classes/qspaceritem.cpp \ 
+	qt/classes/qstatustipevent.cpp \ 
+	qt/classes/qtabletevent.cpp \ 
+	qt/classes/qtime.cpp \ 
+	qt/classes/qtimer.cpp \ 
+	qt/classes/qtoolbarchangeevent.cpp \ 
+	qt/classes/qwhatsthisclickedevent.cpp \ 
+	qt/classes/qwheelevent.cpp \ 
+	qt/classes/qwidgetdata.cpp \ 
+	qt/classes/qwidgetitem.cpp \ 
+	qt/classes/qwindowstatechangeevent.cpp \ 
   qt/php_qt.cpp,$ext_shared)
-
   PHP_ADD_BUILD_DIR($ext_builddir/qt)
 
 fi

Modified: trunk/qt/ag_extern_zend_class_entry.inc
===================================================================
--- trunk/qt/ag_extern_zend_class_entry.inc	2006-01-12 20:45:03 UTC (rev 171)
+++ trunk/qt/ag_extern_zend_class_entry.inc	2006-01-12 20:51:27 UTC (rev 172)
@@ -1,3 +1,15 @@
+extern zend_class_entry *QActionEvent_ce_ptr;
+void 	_register_QActionEvent();
+extern zend_class_entry *QChar_ce_ptr;
+void 	_register_QChar();
+extern zend_class_entry *QCharRef_ce_ptr;
+void 	_register_QCharRef();
+extern zend_class_entry *QClipboardEvent_ce_ptr;
+void 	_register_QClipboardEvent();
+extern zend_class_entry *QCloseEvent_ce_ptr;
+void 	_register_QCloseEvent();
+extern zend_class_entry *QContextMenuEvent_ce_ptr;
+void 	_register_QContextMenuEvent();
 extern zend_class_entry *QDate_ce_ptr;
 void 	_register_QDate();
 extern zend_class_entry *QDateTime_ce_ptr;
@@ -2,3 +14,77 @@
 void 	_register_QDateTime();
+extern zend_class_entry *QDragEnterEvent_ce_ptr;
+void 	_register_QDragEnterEvent();
+extern zend_class_entry *QDragLeaveEvent_ce_ptr;
+void 	_register_QDragLeaveEvent();
+extern zend_class_entry *QDragMoveEvent_ce_ptr;
+void 	_register_QDragMoveEvent();
+extern zend_class_entry *QDragResponseEvent_ce_ptr;
+void 	_register_QDragResponseEvent();
+extern zend_class_entry *QDropEvent_ce_ptr;
+void 	_register_QDropEvent();
+extern zend_class_entry *QFileOpenEvent_ce_ptr;
+void 	_register_QFileOpenEvent();
+extern zend_class_entry *QFocusEvent_ce_ptr;
+void 	_register_QFocusEvent();
+extern zend_class_entry *QFont_ce_ptr;
+void 	_register_QFont();
+extern zend_class_entry *QGridLayout_ce_ptr;
+void 	_register_QGridLayout();
+extern zend_class_entry *QHelpEvent_ce_ptr;
+void 	_register_QHelpEvent();
+extern zend_class_entry *QHideEvent_ce_ptr;
+void 	_register_QHideEvent();
+extern zend_class_entry *QHoverEvent_ce_ptr;
+void 	_register_QHoverEvent();
+extern zend_class_entry *QIconDragEvent_ce_ptr;
+void 	_register_QIconDragEvent();
+extern zend_class_entry *QInputEvent_ce_ptr;
+void 	_register_QInputEvent();
+extern zend_class_entry *QInputMethodEvent_ce_ptr;
+void 	_register_QInputMethodEvent();
+extern zend_class_entry *Attribute_ce_ptr;
+void 	_register_Attribute();
+extern zend_class_entry *QKeyEvent_ce_ptr;
+void 	_register_QKeyEvent();
+extern zend_class_entry *QLabel_ce_ptr;
+void 	_register_QLabel();
+extern zend_class_entry *QLatin1Char_ce_ptr;
+void 	_register_QLatin1Char();
+extern zend_class_entry *QMouseEvent_ce_ptr;
+void 	_register_QMouseEvent();
+extern zend_class_entry *QMoveEvent_ce_ptr;
+void 	_register_QMoveEvent();
+extern zend_class_entry *QObjectData_ce_ptr;
+void 	_register_QObjectData();
+extern zend_class_entry *QObjectUserData_ce_ptr;
+void 	_register_QObjectUserData();
+extern zend_class_entry *QPaintEvent_ce_ptr;
+void 	_register_QPaintEvent();
+extern zend_class_entry *QPainter_ce_ptr;
+void 	_register_QPainter();
+extern zend_class_entry *QResizeEvent_ce_ptr;
+void 	_register_QResizeEvent();
+extern zend_class_entry *QShortcutEvent_ce_ptr;
+void 	_register_QShortcutEvent();
+extern zend_class_entry *QShowEvent_ce_ptr;
+void 	_register_QShowEvent();
+extern zend_class_entry *QStatusTipEvent_ce_ptr;
+void 	_register_QStatusTipEvent();
+extern zend_class_entry *QTabletEvent_ce_ptr;
+void 	_register_QTabletEvent();
 extern zend_class_entry *QTime_ce_ptr;
 void 	_register_QTime();
+extern zend_class_entry *QTimer_ce_ptr;
+void 	_register_QTimer();
+extern zend_class_entry *QToolBarChangeEvent_ce_ptr;
+void 	_register_QToolBarChangeEvent();
+extern zend_class_entry *QWhatsThisClickedEvent_ce_ptr;
+void 	_register_QWhatsThisClickedEvent();
+extern zend_class_entry *QWheelEvent_ce_ptr;
+void 	_register_QWheelEvent();
+extern zend_class_entry *QWidgetData_ce_ptr;
+void 	_register_QWidgetData();
+extern zend_class_entry *QWidgetItem_ce_ptr;
+void 	_register_QWidgetItem();
+extern zend_class_entry *QWindowStateChangeEvent_ce_ptr;
+void 	_register_QWindowStateChangeEvent();

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-01-12 20:45:03 UTC (rev 171)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-01-12 20:51:27 UTC (rev 172)
@@ -1,23 +1,178 @@
+static zend_function_entry QActionEvent_methods[] = {
+	ZEND_ME(QActionEvent,action,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QActionEvent,before,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QActionEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QActionEvent",QActionEvent_methods);
+    QActionEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QChar_methods[] = {
+	ZEND_ME(QChar,combiningClass,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isUpper,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,joining,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,row,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isSymbol,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,category,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isPrint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,digitValue,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,mirroredChar,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,fromLatin1,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QChar,fromAscii,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QChar,isSpace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,toLatin1,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,toUpper,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,decomposition,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isPunct,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isDigit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,decompositionTag,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isLower,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,direction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,hasMirrored,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,toLower,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,unicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isLetter,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,setRow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isLetterOrNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,cell,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,setCell,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,unicodeVersion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,toAscii,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isMark,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar,isNull,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QChar(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QChar",QChar_methods);
+    QChar_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QCharRef_methods[] = {
+	ZEND_ME(QCharRef,isDigit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,combiningClass,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,decompositionTag,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,joining,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,direction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,hasMirrored,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,toLower,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,unicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,row,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,setRow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,category,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isLetter,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,cell,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,digitValue,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isPrint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isLetterOrNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,mirroredChar,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,setCell,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isNumber,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,unicodeVersion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isSpace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,toLatin1,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,toAscii,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,decomposition,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,toUpper,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isMark,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isPunct,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCharRef,isNull,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QCharRef(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QCharRef",QCharRef_methods);
+    QCharRef_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QClipboardEvent_methods[] = {
+	ZEND_ME(QClipboardEvent,data,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QClipboardEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QClipboardEvent",QClipboardEvent_methods);
+    QClipboardEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QCloseEvent_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QCloseEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QCloseEvent",QCloseEvent_methods);
+    QCloseEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QContextMenuEvent_methods[] = {
+	ZEND_ME(QContextMenuEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,reason,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QContextMenuEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QContextMenuEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QContextMenuEvent",QContextMenuEvent_methods);
+    QContextMenuEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
 static zend_function_entry QDate_methods[] = {
 	ZEND_ME(QDate,longDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,dayOfWeek,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,daysInMonth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,month,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,isValid,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,setYMD,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,shortMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,toString,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDate,toString,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,isLeapYear,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,fromJulianDay,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,currentDate,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,addDays,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,day,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,gregorianToJulian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,longMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,julianToGregorian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,shortDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate,dayOfYear,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,weekNumber,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,addMonths,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,toJulianDay,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,addYears,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,daysTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,isNull,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,year,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDate,daysInYear,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
 };
@@ -30,20 +185,27 @@
 
 }
 static zend_function_entry QDateTime_methods[] = {
+	ZEND_ME(QDateTime,time,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,date,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,isValid,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,toString,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toTime_t,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,setTime_t,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,addDays,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,secsTo,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,toTimeSpec,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDateTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDateTime,timeSpec,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,setTime,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,addMonths,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,addSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,setDate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,currentDateTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDateTime,daysTo,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,addYears,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,isNull,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toUTC,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime,toLocalTime,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,setTimeSpec,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
@@ -56,17 +218,700 @@
     QDateTime_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
 
 }
+static zend_function_entry QDragEnterEvent_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QDragEnterEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDragEnterEvent",QDragEnterEvent_methods);
+    QDragEnterEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QDragMoveEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QDragLeaveEvent_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QDragLeaveEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDragLeaveEvent",QDragLeaveEvent_methods);
+    QDragLeaveEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QDragMoveEvent_methods[] = {
+	ZEND_ME(QDragMoveEvent,accept,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDragMoveEvent,answerRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDragMoveEvent,ignore,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QDragMoveEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDragMoveEvent",QDragMoveEvent_methods);
+    QDragMoveEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QDropEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QDragResponseEvent_methods[] = {
+	ZEND_ME(QDragResponseEvent,dragAccepted,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QDragResponseEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDragResponseEvent",QDragResponseEvent_methods);
+    QDragResponseEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QDropEvent_methods[] = {
+	ZEND_ME(QDropEvent,encodedData,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,source,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,keyboardModifiers,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,setDropAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,acceptProposedAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,dropAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,mimeData,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,provides,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,format,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,mouseButtons,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,proposedAction,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDropEvent,possibleActions,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QDropEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QDropEvent",QDropEvent_methods);
+    QDropEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+	zend_do_inheritance(QDropEvent_ce_ptr, QMimeSource_ce_ptr TSRMLS_CC);
+
+
+}
+static zend_function_entry QFileOpenEvent_methods[] = {
+	ZEND_ME(QFileOpenEvent,file,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QFileOpenEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QFileOpenEvent",QFileOpenEvent_methods);
+    QFileOpenEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QFocusEvent_methods[] = {
+	ZEND_ME(QFocusEvent,lostFocus,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFocusEvent,reason,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFocusEvent,gotFocus,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QFocusEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QFocusEvent",QFocusEvent_methods);
+    QFocusEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QFont_methods[] = {
+	ZEND_ME(QFont,setOverline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,insertSubstitution,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,stretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,styleStrategy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setKerning,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,underline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,removeSubstitution,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,substitute,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,setBold,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,resolve,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,fixedPitch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,italic,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,pixelSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,insertSubstitutions,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,key,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setStrikeOut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,weight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,pointSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,cleanup,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,fromString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,exactMatch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setWeight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,styleHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,handle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setStyle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,rawName,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setUnderline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,family,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,isCopyOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,rawMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,substitutes,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,setStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,initialize,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,defaultFamily,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setRawMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,kerning,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setStyleHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,substitutions,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,setFamily,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,bold,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,style,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setPointSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setRawName,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setStyleStrategy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,cacheStatistics,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QFont,setPixelSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setFixedPitch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setItalic,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,strikeOut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,lastResortFont,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,lastResortFamily,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,overline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,pointSizeF,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont,setPointSizeF,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QFont(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QFont",QFont_methods);
+    QFont_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QGridLayout_methods[] = {
+	ZEND_ME(QGridLayout,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QGridLayout,addLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,qt_invoke,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,addItem,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,rowMinimumHeight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setOriginCorner,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,qt_cast,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,metaObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,count,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,originCorner,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,invalidate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,qt_emit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setRowStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,getItemPosition,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setDefaultPositioning,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,className,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,columnStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,addWidget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,takeAt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QGridLayout,itemAt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,qObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,minimumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setColumnMinimumWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,heightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,hasHeightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setColumnStretch,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,rowCount,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,columnMinimumWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,cellRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,columnCount,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,setRowMinimumHeight,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QGridLayout,maximumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,qt_property,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,minimumHeightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,expandingDirections,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout,rowStretch,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QGridLayout(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QGridLayout",QGridLayout_methods);
+    QGridLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QLayout_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QHelpEvent_methods[] = {
+	ZEND_ME(QHelpEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHelpEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QHelpEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QHelpEvent",QHelpEvent_methods);
+    QHelpEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QHideEvent_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QHideEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QHideEvent",QHideEvent_methods);
+    QHideEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QHoverEvent_methods[] = {
+	ZEND_ME(QHoverEvent,oldPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QHoverEvent,pos,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QHoverEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QHoverEvent",QHoverEvent_methods);
+    QHoverEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QIconDragEvent_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QIconDragEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QIconDragEvent",QIconDragEvent_methods);
+    QIconDragEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QInputEvent_methods[] = {
+	ZEND_ME(QInputEvent,modifiers,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QInputEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QInputEvent",QInputEvent_methods);
+    QInputEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QInputMethodEvent_methods[] = {
+	ZEND_ME(QInputMethodEvent,commitString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QInputMethodEvent,replacementStart,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QInputMethodEvent,setCommitString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QInputMethodEvent,replacementLength,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QInputMethodEvent,preeditString,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QInputMethodEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QInputMethodEvent",QInputMethodEvent_methods);
+    QInputMethodEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry Attribute_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_Attribute(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"Attribute",Attribute_methods);
+    Attribute_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QKeyEvent_methods[] = {
+	ZEND_ME(QKeyEvent,count,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QKeyEvent,text,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QKeyEvent,isAutoRepeat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QKeyEvent,modifiers,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QKeyEvent,key,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QKeyEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QKeyEvent",QKeyEvent_methods);
+    QKeyEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QLabel_methods[] = {
+	ZEND_ME(QLabel,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLabel,setMargin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,clear,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,qt_invoke,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setBuddy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,movie,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,hasScaledContents,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,qt_cast,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,metaObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setScaledContents,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QLabel,indent,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,qt_emit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,pixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setAlignment,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,className,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,buddy,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,textFormat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setMovie,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setPicture,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,wordWrap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLabel,setTextFormat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,qObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,text,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,alignment,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,minimumSizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,heightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,picture,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setWordWrap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLabel,qt_property,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,setIndent,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,margin,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QLabel(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLabel",QLabel_methods);
+    QLabel_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QFrame_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QLatin1Char_methods[] = {
+	ZEND_ME(QLatin1Char,unicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLatin1Char,toLatin1,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QLatin1Char(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLatin1Char",QLatin1Char_methods);
+    QLatin1Char_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QMouseEvent_methods[] = {
+	ZEND_ME(QMouseEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,button,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMouseEvent,buttons,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QMouseEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QMouseEvent",QMouseEvent_methods);
+    QMouseEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QMoveEvent_methods[] = {
+	ZEND_ME(QMoveEvent,oldPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QMoveEvent,pos,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QMoveEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QMoveEvent",QMoveEvent_methods);
+    QMoveEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QObjectData_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QObjectData(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QObjectData",QObjectData_methods);
+    QObjectData_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QObjectUserData_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QObjectUserData(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QObjectUserData",QObjectUserData_methods);
+    QObjectUserData_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QPaintEvent_methods[] = {
+	ZEND_ME(QPaintEvent,rect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPaintEvent,region,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QPaintEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QPaintEvent",QPaintEvent_methods);
+    QPaintEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QPainter_methods[] = {
+	ZEND_ME(QPainter,eraseRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setClipPath,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,matrixEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,shear,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,save,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,resetMatrix,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,initFrom,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fontInfo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setLayoutDirection,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBrushOrigin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,pen,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRects,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPath,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fillPath,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,rotate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPie,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,translate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setCompositionMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setWindow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fontMetrics,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolyline,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,deviceMatrix,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLine,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,fillRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,boundingRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setClipRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawImage,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawTiledPixmap,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,layoutDirection,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,background,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,device,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setClipRegion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,restoreRedirected,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPainter,setMatrixEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPoints,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRoundRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawConvexPolygon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setMatrix,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPicture,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,restore,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,font,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,matrix,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,viewport,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,viewTransformEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawChord,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,clipRegion,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,end,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,brushOrigin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setViewTransformEnabled,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,scale,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setPen,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBackgroundMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,window,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,paintEngine,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setRenderHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,brush,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,strokePath,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBrush,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawPoint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setRedirected,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPainter,compositionMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setFont,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,begin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setViewport,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawEllipse,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawArc,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setBackground,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,isActive,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawRect,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawLines,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,renderHints,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,backgroundMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,redirected,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPainter,hasClipping,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,drawTextItem,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,setClipping,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter,clipPath,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QPainter(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QPainter",QPainter_methods);
+    QPainter_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QResizeEvent_methods[] = {
+	ZEND_ME(QResizeEvent,oldSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QResizeEvent,size,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QResizeEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QResizeEvent",QResizeEvent_methods);
+    QResizeEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QShortcutEvent_methods[] = {
+	ZEND_ME(QShortcutEvent,shortcutId,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QShortcutEvent,isAmbiguous,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QShortcutEvent,key,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QShortcutEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QShortcutEvent",QShortcutEvent_methods);
+    QShortcutEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QShowEvent_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QShowEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QShowEvent",QShowEvent_methods);
+    QShowEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QStatusTipEvent_methods[] = {
+	ZEND_ME(QStatusTipEvent,tip,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QStatusTipEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QStatusTipEvent",QStatusTipEvent_methods);
+    QStatusTipEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QTabletEvent_methods[] = {
+	ZEND_ME(QTabletEvent,hiResGlobalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,pressure,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,hiResGlobalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,tangentialPressure,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,uniqueId,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,hiResGlobalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,xTilt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,rotation,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,pointerType,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,yTilt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,device,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTabletEvent,z,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QTabletEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QTabletEvent",QTabletEvent_methods);
+    QTabletEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
 static zend_function_entry QTime_methods[] = {
-	ZEND_ME(QTime,isValid,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,hour,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,isValid,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,elapsed,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,toString,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime,toString,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,msec,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,secsTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,restart,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,second,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,addSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,addMSecs,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,currentTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTime,minute,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,setHMS,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,isNull,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,msecsTo,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime,start,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
 };
@@ -78,3 +923,134 @@
     QTime_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
 
 }
+static zend_function_entry QTimer_methods[] = {
+	ZEND_ME(QTimer,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTimer,qt_invoke,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTimer,setInterval,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,qObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,timerId,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,singleShot,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTimer,qt_cast,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,metaObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,stop,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,isActive,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,qt_emit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,interval,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,setSingleShot,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,className,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QTimer,qt_property,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,isSingleShot,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer,start,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QTimer(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QTimer",QTimer_methods);
+    QTimer_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QObject_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QToolBarChangeEvent_methods[] = {
+	ZEND_ME(QToolBarChangeEvent,toggle,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QToolBarChangeEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QToolBarChangeEvent",QToolBarChangeEvent_methods);
+    QToolBarChangeEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QWhatsThisClickedEvent_methods[] = {
+	ZEND_ME(QWhatsThisClickedEvent,href,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QWhatsThisClickedEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWhatsThisClickedEvent",QWhatsThisClickedEvent_methods);
+    QWhatsThisClickedEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QWheelEvent_methods[] = {
+	ZEND_ME(QWheelEvent,orientation,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,x,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,globalX,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,globalPos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,y,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,delta,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,globalY,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,pos,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWheelEvent,buttons,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QWheelEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWheelEvent",QWheelEvent_methods);
+    QWheelEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QInputEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QWidgetData_methods[] = {
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QWidgetData(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWidgetData",QWidgetData_methods);
+    QWidgetData_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QWidgetItem_methods[] = {
+	ZEND_ME(QWidgetItem,hasHeightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,isEmpty,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,setGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,minimumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,maximumSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,heightForWidth,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,widget,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,expandingDirections,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem,geometry,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QWidgetItem(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWidgetItem",QWidgetItem_methods);
+    QWidgetItem_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QLayoutItem_ce_ptr,NULL TSRMLS_CC);
+
+
+}
+static zend_function_entry QWindowStateChangeEvent_methods[] = {
+	ZEND_ME(QWindowStateChangeEvent,oldState,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QWindowStateChangeEvent(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QWindowStateChangeEvent",QWindowStateChangeEvent_methods);
+    QWindowStateChangeEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
+
+
+}

Modified: trunk/qt/ag_qt_minit.inc
===================================================================
--- trunk/qt/ag_qt_minit.inc	2006-01-12 20:45:03 UTC (rev 171)
+++ trunk/qt/ag_qt_minit.inc	2006-01-12 20:51:27 UTC (rev 172)
@@ -1,7 +1,235 @@
 
+	_register_QActionEvent(TSRMLS_C);
+
+	_register_QChar(TSRMLS_C);
+	  REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_NULL", QChar::Null, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_NBSP", QChar::Nbsp, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_REPLACEMENTCHARACTER", QChar::ReplacementCharacter, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_OBJECTREPLACEMENTCHARACTER", QChar::ObjectReplacementCharacter, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_BYTEORDERMARK", QChar::ByteOrderMark, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_BYTEORDERSWAPPED", QChar::ByteOrderSwapped, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_PARAGRAPHSEPARATOR", QChar::ParagraphSeparator, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_SPECIALCHARACTER_LINESEPARATOR", QChar::LineSeparator, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_NOCATEGORY", QChar::NoCategory, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_MARK_NONSPACING", QChar::Mark_NonSpacing, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_MARK_SPACINGCOMBINING", QChar::Mark_SpacingCombining, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_MARK_ENCLOSING", QChar::Mark_Enclosing, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_NUMBER_DECIMALDIGIT", QChar::Number_DecimalDigit, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_NUMBER_LETTER", QChar::Number_Letter, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_NUMBER_OTHER", QChar::Number_Other, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SEPARATOR_SPACE", QChar::Separator_Space, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SEPARATOR_LINE", QChar::Separator_Line, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SEPARATOR_PARAGRAPH", QChar::Separator_Paragraph, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_CONTROL", QChar::Other_Control, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_FORMAT", QChar::Other_Format, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_SURROGATE", QChar::Other_Surrogate, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_PRIVATEUSE", QChar::Other_PrivateUse, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_OTHER_NOTASSIGNED", QChar::Other_NotAssigned, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_UPPERCASE", QChar::Letter_Uppercase, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_LOWERCASE", QChar::Letter_Lowercase, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_TITLECASE", QChar::Letter_Titlecase, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_MODIFIER", QChar::Letter_Modifier, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_LETTER_OTHER", QChar::Letter_Other, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_CONNECTOR", QChar::Punctuation_Connector, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_DASH", QChar::Punctuation_Dash, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_OPEN", QChar::Punctuation_Open, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_CLOSE", QChar::Punctuation_Close, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_INITIALQUOTE", QChar::Punctuation_InitialQuote, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_FINALQUOTE", QChar::Punctuation_FinalQuote, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_OTHER", QChar::Punctuation_Other, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SYMBOL_MATH", QChar::Symbol_Math, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SYMBOL_CURRENCY", QChar::Symbol_Currency, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SYMBOL_MODIFIER", QChar::Symbol_Modifier, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_SYMBOL_OTHER", QChar::Symbol_Other, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_CATEGORY_PUNCTUATION_DASK", QChar::Punctuation_Dask, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRL", QChar::DirL, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRR", QChar::DirR, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIREN", QChar::DirEN, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRES", QChar::DirES, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRET", QChar::DirET, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRAN", QChar::DirAN, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRCS", QChar::DirCS, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRB", QChar::DirB, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRS", QChar::DirS, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRWS", QChar::DirWS, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRON", QChar::DirON, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRLRE", QChar::DirLRE, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRLRO", QChar::DirLRO, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRAL", QChar::DirAL, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRRLE", QChar::DirRLE, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRRLO", QChar::DirRLO, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRPDF", QChar::DirPDF, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRNSM", QChar::DirNSM, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DIRECTION_DIRBN", QChar::DirBN, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_NODECOMPOSITION", QChar::NoDecomposition, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_CANONICAL", QChar::Canonical, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_FONT", QChar::Font, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_NOBREAK", QChar::NoBreak, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_INITIAL", QChar::Initial, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_MEDIAL", QChar::Medial, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_FINAL", QChar::Final, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_ISOLATED", QChar::Isolated, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_CIRCLE", QChar::Circle, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_SUPER", QChar::Super, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_SUB", QChar::Sub, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_VERTICAL", QChar::Vertical, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_WIDE", QChar::Wide, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_NARROW", QChar::Narrow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_SMALL", QChar::Small, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_SQUARE", QChar::Square, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_COMPAT", QChar::Compat, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_DECOMPOSITION_FRACTION", QChar::Fraction, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_JOINING_OTHERJOINING", QChar::OtherJoining, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_JOINING_DUAL", QChar::Dual, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_JOINING_RIGHT", QChar::Right, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_JOINING_CENTER", QChar::Center, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWLEFTATTACHED", QChar::Combining_BelowLeftAttached, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWATTACHED", QChar::Combining_BelowAttached, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWRIGHTATTACHED", QChar::Combining_BelowRightAttached, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_LEFTATTACHED", QChar::Combining_LeftAttached, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_RIGHTATTACHED", QChar::Combining_RightAttached, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVELEFTATTACHED", QChar::Combining_AboveLeftAttached, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVEATTACHED", QChar::Combining_AboveAttached, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVERIGHTATTACHED", QChar::Combining_AboveRightAttached, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWLEFT", QChar::Combining_BelowLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOW", QChar::Combining_Below, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_BELOWRIGHT", QChar::Combining_BelowRight, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_LEFT", QChar::Combining_Left, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_RIGHT", QChar::Combining_Right, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVELEFT", QChar::Combining_AboveLeft, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVE", QChar::Combining_Above, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_ABOVERIGHT", QChar::Combining_AboveRight, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_DOUBLEBELOW", QChar::Combining_DoubleBelow, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_DOUBLEABOVE", QChar::Combining_DoubleAbove, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_COMBININGCLASS_COMBINING_IOTASUBSCRIPT", QChar::Combining_IotaSubscript, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_UNASSIGNED", QChar::Unicode_Unassigned, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_1_1", QChar::Unicode_1_1, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_2_0", QChar::Unicode_2_0, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_2_1_2", QChar::Unicode_2_1_2, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_3_0", QChar::Unicode_3_0, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_3_1", QChar::Unicode_3_1, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_3_2", QChar::Unicode_3_2, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCHAR_UNICODEVERSION_UNICODE_4_0", QChar::Unicode_4_0, CONST_CS | CONST_PERSISTENT);
+
+	_register_QCharRef(TSRMLS_C);
+
+	_register_QClipboardEvent(TSRMLS_C);
+
+	_register_QCloseEvent(TSRMLS_C);
+
+	_register_QContextMenuEvent(TSRMLS_C);
+
 	_register_QDate(TSRMLS_C);
 
 	_register_QDateTime(TSRMLS_C);
 
+	_register_QDragEnterEvent(TSRMLS_C);
+
+	_register_QDragLeaveEvent(TSRMLS_C);
+
+	_register_QDragMoveEvent(TSRMLS_C);
+
+	_register_QDragResponseEvent(TSRMLS_C);
+
+	_register_QDropEvent(TSRMLS_C);
+
+	_register_QFileOpenEvent(TSRMLS_C);
+
+	_register_QFocusEvent(TSRMLS_C);
+
+	_register_QFont(TSRMLS_C);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_HELVETICA", QFont::Helvetica, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_SANSSERIF", QFont::SansSerif, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_TIMES", QFont::Times, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_SERIF", QFont::Serif, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_COURIER", QFont::Courier, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_TYPEWRITER", QFont::TypeWriter, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_OLDENGLISH", QFont::OldEnglish, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_DECORATIVE", QFont::Decorative, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_SYSTEM", QFont::System, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLEHINT_ANYSTYLE", QFont::AnyStyle, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERDEFAULT", QFont::PreferDefault, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERBITMAP", QFont::PreferBitmap, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERDEVICE", QFont::PreferDevice, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFEROUTLINE", QFont::PreferOutline, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_FORCEOUTLINE", QFont::ForceOutline, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERMATCH", QFont::PreferMatch, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERQUALITY", QFont::PreferQuality, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_PREFERANTIALIAS", QFont::PreferAntialias, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_NOANTIALIAS", QFont::NoAntialias, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLESTRATEGY_OPENGLCOMPATIBLE", QFont::OpenGLCompatible, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_WEIGHT_LIGHT", QFont::Light, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_WEIGHT_NORMAL", QFont::Normal, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_WEIGHT_DEMIBOLD", QFont::DemiBold, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_WEIGHT_BOLD", QFont::Bold, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_WEIGHT_BLACK", QFont::Black, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLE_STYLENORMAL", QFont::StyleNormal, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLE_STYLEITALIC", QFont::StyleItalic, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STYLE_STYLEOBLIQUE", QFont::StyleOblique, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STRETCH_ULTRACONDENSED", QFont::UltraCondensed, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STRETCH_EXTRACONDENSED", QFont::ExtraCondensed, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STRETCH_CONDENSED", QFont::Condensed, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STRETCH_SEMICONDENSED", QFont::SemiCondensed, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STRETCH_UNSTRETCHED", QFont::Unstretched, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STRETCH_SEMIEXPANDED", QFont::SemiExpanded, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STRETCH_EXPANDED", QFont::Expanded, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STRETCH_EXTRAEXPANDED", QFont::ExtraExpanded, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QFONT_STRETCH_ULTRAEXPANDED", QFont::UltraExpanded, CONST_CS | CONST_PERSISTENT);
+
+	_register_QGridLayout(TSRMLS_C);
+
+	_register_QHelpEvent(TSRMLS_C);
+
+	_register_QHideEvent(TSRMLS_C);
+
+	_register_QHoverEvent(TSRMLS_C);
+
+	_register_QIconDragEvent(TSRMLS_C);
+
+	_register_QInputEvent(TSRMLS_C);
+
+	_register_QInputMethodEvent(TSRMLS_C);
+
+	_register_QKeyEvent(TSRMLS_C);
+
+	_register_QLabel(TSRMLS_C);
+
+	_register_QLatin1Char(TSRMLS_C);
+
+	_register_QMouseEvent(TSRMLS_C);
+
+	_register_QMoveEvent(TSRMLS_C);
+
+	_register_QObjectData(TSRMLS_C);
+
+	_register_QObjectUserData(TSRMLS_C);
+
+	_register_QPaintEvent(TSRMLS_C);
+
+	_register_QPainter(TSRMLS_C);
+
+	_register_QResizeEvent(TSRMLS_C);
+
+	_register_QShortcutEvent(TSRMLS_C);
+
+	_register_QShowEvent(TSRMLS_C);
+
+	_register_QStatusTipEvent(TSRMLS_C);
+
+	_register_QTabletEvent(TSRMLS_C);
+
 	_register_QTime(TSRMLS_C);
 
+	_register_QTimer(TSRMLS_C);
+
+	_register_QToolBarChangeEvent(TSRMLS_C);
+
+	_register_QWhatsThisClickedEvent(TSRMLS_C);
+
+	_register_QWheelEvent(TSRMLS_C);
+
+	_register_QWidgetData(TSRMLS_C);
+
+	_register_QWidgetItem(TSRMLS_C);
+
+	_register_QWindowStateChangeEvent(TSRMLS_C);

Modified: trunk/qt/ag_zend_class_entry.inc
===================================================================
--- trunk/qt/ag_zend_class_entry.inc	2006-01-12 20:45:03 UTC (rev 171)
+++ trunk/qt/ag_zend_class_entry.inc	2006-01-12 20:51:27 UTC (rev 172)
@@ -1,3 +1,46 @@
+zend_class_entry *QActionEvent_ce_ptr;
+zend_class_entry *QChar_ce_ptr;
+zend_class_entry *QCharRef_ce_ptr;
+zend_class_entry *QClipboardEvent_ce_ptr;
+zend_class_entry *QCloseEvent_ce_ptr;
+zend_class_entry *QContextMenuEvent_ce_ptr;
 zend_class_entry *QDate_ce_ptr;
 zend_class_entry *QDateTime_ce_ptr;
+zend_class_entry *QDragEnterEvent_ce_ptr;
+zend_class_entry *QDragLeaveEvent_ce_ptr;
+zend_class_entry *QDragMoveEvent_ce_ptr;
+zend_class_entry *QDragResponseEvent_ce_ptr;
+zend_class_entry *QDropEvent_ce_ptr;
+zend_class_entry *QFileOpenEvent_ce_ptr;
+zend_class_entry *QFocusEvent_ce_ptr;
+zend_class_entry *QFont_ce_ptr;
+zend_class_entry *QGridLayout_ce_ptr;
+zend_class_entry *QHelpEvent_ce_ptr;
+zend_class_entry *QHideEvent_ce_ptr;
+zend_class_entry *QHoverEvent_ce_ptr;
+zend_class_entry *QIconDragEvent_ce_ptr;
+zend_class_entry *QInputEvent_ce_ptr;
+zend_class_entry *QInputMethodEvent_ce_ptr;
+zend_class_entry *Attribute_ce_ptr;
+zend_class_entry *QKeyEvent_ce_ptr;
+zend_class_entry *QLabel_ce_ptr;
+zend_class_entry *QLatin1Char_ce_ptr;
+zend_class_entry *QMouseEvent_ce_ptr;
+zend_class_entry *QMoveEvent_ce_ptr;
+zend_class_entry *QObjectData_ce_ptr;
+zend_class_entry *QObjectUserData_ce_ptr;
+zend_class_entry *QPaintEvent_ce_ptr;
+zend_class_entry *QPainter_ce_ptr;
+zend_class_entry *QResizeEvent_ce_ptr;
+zend_class_entry *QShortcutEvent_ce_ptr;
+zend_class_entry *QShowEvent_ce_ptr;
+zend_class_entry *QStatusTipEvent_ce_ptr;
+zend_class_entry *QTabletEvent_ce_ptr;
 zend_class_entry *QTime_ce_ptr;
+zend_class_entry *QTimer_ce_ptr;
+zend_class_entry *QToolBarChangeEvent_ce_ptr;
+zend_class_entry *QWhatsThisClickedEvent_ce_ptr;
+zend_class_entry *QWheelEvent_ce_ptr;
+zend_class_entry *QWidgetData_ce_ptr;
+zend_class_entry *QWidgetItem_ce_ptr;
+zend_class_entry *QWindowStateChangeEvent_ce_ptr;

Modified: trunk/qt/ag_zend_php_qt.inc
===================================================================
--- trunk/qt/ag_zend_php_qt.inc	2006-01-12 20:45:03 UTC (rev 171)
+++ trunk/qt/ag_zend_php_qt.inc	2006-01-12 20:51:27 UTC (rev 172)
@@ -1,49 +1,482 @@
 
+ZEND_METHOD(QActionEvent, action);
+ZEND_METHOD(QActionEvent, before);
+ZEND_METHOD(QChar, combiningClass);
+ZEND_METHOD(QChar, isUpper);
+ZEND_METHOD(QChar, joining);
+ZEND_METHOD(QChar, row);
+ZEND_METHOD(QChar, __construct);
+ZEND_METHOD(QChar, isSymbol);
+ZEND_METHOD(QChar, category);
+ZEND_METHOD(QChar, isPrint);
+ZEND_METHOD(QChar, digitValue);
+ZEND_METHOD(QChar, mirroredChar);
+ZEND_METHOD(QChar, fromLatin1);
+ZEND_METHOD(QChar, fromAscii);
+ZEND_METHOD(QChar, isSpace);
+ZEND_METHOD(QChar, toLatin1);
+ZEND_METHOD(QChar, toUpper);
+ZEND_METHOD(QChar, decomposition);
+ZEND_METHOD(QChar, isPunct);
+ZEND_METHOD(QChar, isDigit);
+ZEND_METHOD(QChar, decompositionTag);
+ZEND_METHOD(QChar, isLower);
+ZEND_METHOD(QChar, direction);
+ZEND_METHOD(QChar, hasMirrored);
+ZEND_METHOD(QChar, toLower);
+ZEND_METHOD(QChar, unicode);
+ZEND_METHOD(QChar, isLetter);
+ZEND_METHOD(QChar, setRow);
+ZEND_METHOD(QChar, isLetterOrNumber);
+ZEND_METHOD(QChar, cell);
+ZEND_METHOD(QChar, isNumber);
+ZEND_METHOD(QChar, setCell);
+ZEND_METHOD(QChar, unicodeVersion);
+ZEND_METHOD(QChar, toAscii);
+ZEND_METHOD(QChar, isMark);
+ZEND_METHOD(QChar, isNull);
+ZEND_METHOD(QCharRef, isDigit);
+ZEND_METHOD(QCharRef, combiningClass);
+ZEND_METHOD(QCharRef, decompositionTag);
+ZEND_METHOD(QCharRef, joining);
+ZEND_METHOD(QCharRef, direction);
+ZEND_METHOD(QCharRef, hasMirrored);
+ZEND_METHOD(QCharRef, toLower);
+ZEND_METHOD(QCharRef, unicode);
+ZEND_METHOD(QCharRef, row);
+ZEND_METHOD(QCharRef, setRow);
+ZEND_METHOD(QCharRef, category);
+ZEND_METHOD(QCharRef, isLetter);
+ZEND_METHOD(QCharRef, cell);
+ZEND_METHOD(QCharRef, digitValue);
+ZEND_METHOD(QCharRef, isPrint);
+ZEND_METHOD(QCharRef, isLetterOrNumber);
+ZEND_METHOD(QCharRef, mirroredChar);
+ZEND_METHOD(QCharRef, setCell);
+ZEND_METHOD(QCharRef, isNumber);
+ZEND_METHOD(QCharRef, unicodeVersion);
+ZEND_METHOD(QCharRef, isSpace);
+ZEND_METHOD(QCharRef, toLatin1);
+ZEND_METHOD(QCharRef, toAscii);
+ZEND_METHOD(QCharRef, decomposition);
+ZEND_METHOD(QCharRef, toUpper);
+ZEND_METHOD(QCharRef, isMark);
+ZEND_METHOD(QCharRef, isPunct);
+ZEND_METHOD(QCharRef, isNull);
+ZEND_METHOD(QClipboardEvent, data);
+ZEND_METHOD(QContextMenuEvent, y);
+ZEND_METHOD(QContextMenuEvent, reason);
+ZEND_METHOD(QContextMenuEvent, globalY);
+ZEND_METHOD(QContextMenuEvent, pos);
+ZEND_METHOD(QContextMenuEvent, x);
+ZEND_METHOD(QContextMenuEvent, globalPos);
+ZEND_METHOD(QContextMenuEvent, globalX);
 ZEND_METHOD(QDate, longDayName);
+ZEND_METHOD(QDate, dayOfWeek);
+ZEND_METHOD(QDate, daysInMonth);
+ZEND_METHOD(QDate, month);
 ZEND_METHOD(QDate, isValid);
 ZEND_METHOD(QDate, setYMD);
 ZEND_METHOD(QDate, shortMonthName);
 ZEND_METHOD(QDate, toString);
-ZEND_METHOD(QDate, toString);
 ZEND_METHOD(QDate, isLeapYear);
 ZEND_METHOD(QDate, fromJulianDay);
+ZEND_METHOD(QDate, currentDate);
 ZEND_METHOD(QDate, addDays);
+ZEND_METHOD(QDate, day);
 ZEND_METHOD(QDate, gregorianToJulian);
 ZEND_METHOD(QDate, longMonthName);
 ZEND_METHOD(QDate, julianToGregorian);
-ZEND_METHOD(QDate, QDate);
+ZEND_METHOD(QDate, __construct);
 ZEND_METHOD(QDate, shortDayName);
 ZEND_METHOD(QDate, fromString);
-ZEND_METHOD(QDate, fromString);
+ZEND_METHOD(QDate, dayOfYear);
 ZEND_METHOD(QDate, weekNumber);
 ZEND_METHOD(QDate, addMonths);
+ZEND_METHOD(QDate, toJulianDay);
 ZEND_METHOD(QDate, addYears);
 ZEND_METHOD(QDate, daysTo);
+ZEND_METHOD(QDate, isNull);
+ZEND_METHOD(QDate, year);
+ZEND_METHOD(QDate, daysInYear);
+ZEND_METHOD(QDateTime, time);
+ZEND_METHOD(QDateTime, date);
+ZEND_METHOD(QDateTime, isValid);
 ZEND_METHOD(QDateTime, toString);
-ZEND_METHOD(QDateTime, toString);
+ZEND_METHOD(QDateTime, toTime_t);
 ZEND_METHOD(QDateTime, setTime_t);
 ZEND_METHOD(QDateTime, addDays);
 ZEND_METHOD(QDateTime, secsTo);
 ZEND_METHOD(QDateTime, toTimeSpec);
 ZEND_METHOD(QDateTime, fromString);
-ZEND_METHOD(QDateTime, fromString);
+ZEND_METHOD(QDateTime, timeSpec);
 ZEND_METHOD(QDateTime, setTime);
 ZEND_METHOD(QDateTime, addMonths);
-ZEND_METHOD(QDateTime, QDateTime);
-ZEND_METHOD(QDateTime, QDateTime);
+ZEND_METHOD(QDateTime, __construct);
 ZEND_METHOD(QDateTime, addSecs);
 ZEND_METHOD(QDateTime, setDate);
+ZEND_METHOD(QDateTime, currentDateTime);
 ZEND_METHOD(QDateTime, daysTo);
 ZEND_METHOD(QDateTime, addYears);
+ZEND_METHOD(QDateTime, isNull);
+ZEND_METHOD(QDateTime, toUTC);
+ZEND_METHOD(QDateTime, toLocalTime);
 ZEND_METHOD(QDateTime, setTimeSpec);
+ZEND_METHOD(QDragMoveEvent, accept);
+ZEND_METHOD(QDragMoveEvent, answerRect);
+ZEND_METHOD(QDragMoveEvent, ignore);
+ZEND_METHOD(QDragResponseEvent, dragAccepted);
+ZEND_METHOD(QDropEvent, encodedData);
+ZEND_METHOD(QDropEvent, source);
+ZEND_METHOD(QDropEvent, keyboardModifiers);
+ZEND_METHOD(QDropEvent, setDropAction);
+ZEND_METHOD(QDropEvent, acceptProposedAction);
+ZEND_METHOD(QDropEvent, dropAction);
+ZEND_METHOD(QDropEvent, mimeData);
+ZEND_METHOD(QDropEvent, provides);
+ZEND_METHOD(QDropEvent, format);
+ZEND_METHOD(QDropEvent, mouseButtons);
+ZEND_METHOD(QDropEvent, proposedAction);
+ZEND_METHOD(QDropEvent, pos);
+ZEND_METHOD(QDropEvent, possibleActions);
+ZEND_METHOD(QFileOpenEvent, file);
+ZEND_METHOD(QFocusEvent, lostFocus);
+ZEND_METHOD(QFocusEvent, reason);
+ZEND_METHOD(QFocusEvent, gotFocus);
+ZEND_METHOD(QFont, setOverline);
+ZEND_METHOD(QFont, insertSubstitution);
+ZEND_METHOD(QFont, stretch);
+ZEND_METHOD(QFont, styleStrategy);
+ZEND_METHOD(QFont, setKerning);
+ZEND_METHOD(QFont, underline);
+ZEND_METHOD(QFont, removeSubstitution);
+ZEND_METHOD(QFont, substitute);
+ZEND_METHOD(QFont, setBold);
+ZEND_METHOD(QFont, resolve);
+ZEND_METHOD(QFont, fixedPitch);
+ZEND_METHOD(QFont, italic);
+ZEND_METHOD(QFont, pixelSize);
+ZEND_METHOD(QFont, insertSubstitutions);
+ZEND_METHOD(QFont, key);
+ZEND_METHOD(QFont, setStrikeOut);
+ZEND_METHOD(QFont, weight);
+ZEND_METHOD(QFont, pointSize);
+ZEND_METHOD(QFont, cleanup);
+ZEND_METHOD(QFont, fromString);
+ZEND_METHOD(QFont, exactMatch);
+ZEND_METHOD(QFont, setWeight);
+ZEND_METHOD(QFont, styleHint);
+ZEND_METHOD(QFont, handle);
+ZEND_METHOD(QFont, setStyle);
+ZEND_METHOD(QFont, rawName);
+ZEND_METHOD(QFont, setUnderline);
+ZEND_METHOD(QFont, family);
+ZEND_METHOD(QFont, isCopyOf);
+ZEND_METHOD(QFont, rawMode);
+ZEND_METHOD(QFont, substitutes);
+ZEND_METHOD(QFont, setStretch);
+ZEND_METHOD(QFont, initialize);
+ZEND_METHOD(QFont, toString);
+ZEND_METHOD(QFont, defaultFamily);
+ZEND_METHOD(QFont, setRawMode);
+ZEND_METHOD(QFont, kerning);
+ZEND_METHOD(QFont, setStyleHint);
+ZEND_METHOD(QFont, substitutions);
+ZEND_METHOD(QFont, setFamily);
+ZEND_METHOD(QFont, __construct);
+ZEND_METHOD(QFont, bold);
+ZEND_METHOD(QFont, style);
+ZEND_METHOD(QFont, setPointSize);
+ZEND_METHOD(QFont, setRawName);
+ZEND_METHOD(QFont, setStyleStrategy);
+ZEND_METHOD(QFont, cacheStatistics);
+ZEND_METHOD(QFont, setPixelSize);
+ZEND_METHOD(QFont, setFixedPitch);
+ZEND_METHOD(QFont, setItalic);
+ZEND_METHOD(QFont, strikeOut);
+ZEND_METHOD(QFont, lastResortFont);
+ZEND_METHOD(QFont, lastResortFamily);
+ZEND_METHOD(QFont, overline);
+ZEND_METHOD(QFont, pointSizeF);
+ZEND_METHOD(QFont, setPointSizeF);
+ZEND_METHOD(QGridLayout, tr);
+ZEND_METHOD(QGridLayout, addLayout);
+ZEND_METHOD(QGridLayout, __construct);
+ZEND_METHOD(QGridLayout, qt_invoke);
+ZEND_METHOD(QGridLayout, addItem);
+ZEND_METHOD(QGridLayout, rowMinimumHeight);
+ZEND_METHOD(QGridLayout, setOriginCorner);
+ZEND_METHOD(QGridLayout, qt_cast);
+ZEND_METHOD(QGridLayout, metaObject);
+ZEND_METHOD(QGridLayout, count);
+ZEND_METHOD(QGridLayout, originCorner);
+ZEND_METHOD(QGridLayout, invalidate);
+ZEND_METHOD(QGridLayout, setGeometry);
+ZEND_METHOD(QGridLayout, qt_emit);
+ZEND_METHOD(QGridLayout, setRowStretch);
+ZEND_METHOD(QGridLayout, getItemPosition);
+ZEND_METHOD(QGridLayout, setDefaultPositioning);
+ZEND_METHOD(QGridLayout, className);
+ZEND_METHOD(QGridLayout, columnStretch);
+ZEND_METHOD(QGridLayout, addWidget);
+ZEND_METHOD(QGridLayout, takeAt);
+ZEND_METHOD(QGridLayout, staticMetaObject);
+ZEND_METHOD(QGridLayout, itemAt);
+ZEND_METHOD(QGridLayout, qObject);
+ZEND_METHOD(QGridLayout, minimumSize);
+ZEND_METHOD(QGridLayout, sizeHint);
+ZEND_METHOD(QGridLayout, setColumnMinimumWidth);
+ZEND_METHOD(QGridLayout, heightForWidth);
+ZEND_METHOD(QGridLayout, hasHeightForWidth);
+ZEND_METHOD(QGridLayout, setColumnStretch);
+ZEND_METHOD(QGridLayout, rowCount);
+ZEND_METHOD(QGridLayout, columnMinimumWidth);
+ZEND_METHOD(QGridLayout, cellRect);
+ZEND_METHOD(QGridLayout, columnCount);
+ZEND_METHOD(QGridLayout, setRowMinimumHeight);
+ZEND_METHOD(QGridLayout, trUtf8);
+ZEND_METHOD(QGridLayout, maximumSize);
+ZEND_METHOD(QGridLayout, qt_property);
+ZEND_METHOD(QGridLayout, minimumHeightForWidth);
+ZEND_METHOD(QGridLayout, expandingDirections);
+ZEND_METHOD(QGridLayout, rowStretch);
+ZEND_METHOD(QHelpEvent, y);
+ZEND_METHOD(QHelpEvent, globalY);
+ZEND_METHOD(QHelpEvent, pos);
+ZEND_METHOD(QHelpEvent, x);
+ZEND_METHOD(QHelpEvent, globalPos);
+ZEND_METHOD(QHelpEvent, globalX);
+ZEND_METHOD(QHoverEvent, oldPos);
+ZEND_METHOD(QHoverEvent, pos);
+ZEND_METHOD(QInputEvent, modifiers);
+ZEND_METHOD(QInputMethodEvent, commitString);
+ZEND_METHOD(QInputMethodEvent, replacementStart);
+ZEND_METHOD(QInputMethodEvent, setCommitString);
+ZEND_METHOD(QInputMethodEvent, replacementLength);
+ZEND_METHOD(QInputMethodEvent, preeditString);
+ZEND_METHOD(Attribute, __construct);
+ZEND_METHOD(QKeyEvent, count);
+ZEND_METHOD(QKeyEvent, text);
+ZEND_METHOD(QKeyEvent, isAutoRepeat);
+ZEND_METHOD(QKeyEvent, modifiers);
+ZEND_METHOD(QKeyEvent, key);
+ZEND_METHOD(QLabel, tr);
+ZEND_METHOD(QLabel, setMargin);
+ZEND_METHOD(QLabel, clear);
+ZEND_METHOD(QLabel, qt_invoke);
+ZEND_METHOD(QLabel, setBuddy);
+ZEND_METHOD(QLabel, movie);
+ZEND_METHOD(QLabel, hasScaledContents);
+ZEND_METHOD(QLabel, qt_cast);
+ZEND_METHOD(QLabel, metaObject);
+ZEND_METHOD(QLabel, setScaledContents);
+ZEND_METHOD(QLabel, event);
+ZEND_METHOD(QLabel, indent);
+ZEND_METHOD(QLabel, qt_emit);
+ZEND_METHOD(QLabel, pixmap);
+ZEND_METHOD(QLabel, setAlignment);
+ZEND_METHOD(QLabel, className);
+ZEND_METHOD(QLabel, buddy);
+ZEND_METHOD(QLabel, textFormat);
+ZEND_METHOD(QLabel, setMovie);
+ZEND_METHOD(QLabel, setPicture);
+ZEND_METHOD(QLabel, setNum);
+ZEND_METHOD(QLabel, wordWrap);
+ZEND_METHOD(QLabel, staticMetaObject);
+ZEND_METHOD(QLabel, setTextFormat);
+ZEND_METHOD(QLabel, qObject);
+ZEND_METHOD(QLabel, setText);
+ZEND_METHOD(QLabel, text);
+ZEND_METHOD(QLabel, alignment);
+ZEND_METHOD(QLabel, sizeHint);
+ZEND_METHOD(QLabel, minimumSizeHint);
+ZEND_METHOD(QLabel, heightForWidth);
+ZEND_METHOD(QLabel, setPixmap);
+ZEND_METHOD(QLabel, picture);
+ZEND_METHOD(QLabel, setWordWrap);
+ZEND_METHOD(QLabel, trUtf8);
+ZEND_METHOD(QLabel, qt_property);
+ZEND_METHOD(QLabel, __construct);
+ZEND_METHOD(QLabel, setIndent);
+ZEND_METHOD(QLabel, margin);
+ZEND_METHOD(QLatin1Char, unicode);
+ZEND_METHOD(QLatin1Char, __construct);
+ZEND_METHOD(QLatin1Char, toLatin1);
+ZEND_METHOD(QMouseEvent, x);
+ZEND_METHOD(QMouseEvent, globalX);
+ZEND_METHOD(QMouseEvent, globalPos);
+ZEND_METHOD(QMouseEvent, y);
+ZEND_METHOD(QMouseEvent, globalY);
+ZEND_METHOD(QMouseEvent, pos);
+ZEND_METHOD(QMouseEvent, button);
+ZEND_METHOD(QMouseEvent, buttons);
+ZEND_METHOD(QMoveEvent, oldPos);
+ZEND_METHOD(QMoveEvent, pos);
+ZEND_METHOD(QPaintEvent, rect);
+ZEND_METHOD(QPaintEvent, region);
+ZEND_METHOD(QPainter, eraseRect);
+ZEND_METHOD(QPainter, setClipPath);
+ZEND_METHOD(QPainter, matrixEnabled);
+ZEND_METHOD(QPainter, shear);
+ZEND_METHOD(QPainter, save);
+ZEND_METHOD(QPainter, resetMatrix);
+ZEND_METHOD(QPainter, initFrom);
+ZEND_METHOD(QPainter, fontInfo);
+ZEND_METHOD(QPainter, setLayoutDirection);
+ZEND_METHOD(QPainter, setBrushOrigin);
+ZEND_METHOD(QPainter, pen);
+ZEND_METHOD(QPainter, drawRects);
+ZEND_METHOD(QPainter, drawPath);
+ZEND_METHOD(QPainter, fillPath);
+ZEND_METHOD(QPainter, rotate);
+ZEND_METHOD(QPainter, drawPie);
+ZEND_METHOD(QPainter, translate);
+ZEND_METHOD(QPainter, setCompositionMode);
+ZEND_METHOD(QPainter, setWindow);
+ZEND_METHOD(QPainter, fontMetrics);
+ZEND_METHOD(QPainter, drawPixmap);
+ZEND_METHOD(QPainter, drawPolyline);
+ZEND_METHOD(QPainter, deviceMatrix);
+ZEND_METHOD(QPainter, drawLine);
+ZEND_METHOD(QPainter, fillRect);
+ZEND_METHOD(QPainter, boundingRect);
+ZEND_METHOD(QPainter, setClipRect);
+ZEND_METHOD(QPainter, drawImage);
+ZEND_METHOD(QPainter, drawTiledPixmap);
+ZEND_METHOD(QPainter, layoutDirection);
+ZEND_METHOD(QPainter, background);
+ZEND_METHOD(QPainter, drawPolygon);
+ZEND_METHOD(QPainter, device);
+ZEND_METHOD(QPainter, setClipRegion);
+ZEND_METHOD(QPainter, restoreRedirected);
+ZEND_METHOD(QPainter, setMatrixEnabled);
+ZEND_METHOD(QPainter, drawPoints);
+ZEND_METHOD(QPainter, drawRoundRect);
+ZEND_METHOD(QPainter, drawConvexPolygon);
+ZEND_METHOD(QPainter, setMatrix);
+ZEND_METHOD(QPainter, drawPicture);
+ZEND_METHOD(QPainter, restore);
+ZEND_METHOD(QPainter, font);
+ZEND_METHOD(QPainter, matrix);
+ZEND_METHOD(QPainter, viewport);
+ZEND_METHOD(QPainter, viewTransformEnabled);
+ZEND_METHOD(QPainter, drawText);
+ZEND_METHOD(QPainter, drawChord);
+ZEND_METHOD(QPainter, clipRegion);
+ZEND_METHOD(QPainter, end);
+ZEND_METHOD(QPainter, brushOrigin);
+ZEND_METHOD(QPainter, setViewTransformEnabled);
+ZEND_METHOD(QPainter, scale);
+ZEND_METHOD(QPainter, setPen);
+ZEND_METHOD(QPainter, setBackgroundMode);
+ZEND_METHOD(QPainter, window);
+ZEND_METHOD(QPainter, paintEngine);
+ZEND_METHOD(QPainter, setRenderHint);
+ZEND_METHOD(QPainter, brush);
+ZEND_METHOD(QPainter, strokePath);
+ZEND_METHOD(QPainter, setBrush);
+ZEND_METHOD(QPainter, drawPoint);
+ZEND_METHOD(QPainter, __construct);
+ZEND_METHOD(QPainter, setRedirected);
+ZEND_METHOD(QPainter, compositionMode);
+ZEND_METHOD(QPainter, setFont);
+ZEND_METHOD(QPainter, begin);
+ZEND_METHOD(QPainter, setViewport);
+ZEND_METHOD(QPainter, drawEllipse);
+ZEND_METHOD(QPainter, drawArc);
+ZEND_METHOD(QPainter, setBackground);
+ZEND_METHOD(QPainter, isActive);
+ZEND_METHOD(QPainter, drawRect);
+ZEND_METHOD(QPainter, drawLines);
+ZEND_METHOD(QPainter, renderHints);
+ZEND_METHOD(QPainter, backgroundMode);
+ZEND_METHOD(QPainter, redirected);
+ZEND_METHOD(QPainter, hasClipping);
+ZEND_METHOD(QPainter, drawTextItem);
+ZEND_METHOD(QPainter, setClipping);
+ZEND_METHOD(QPainter, clipPath);
+ZEND_METHOD(QResizeEvent, oldSize);
+ZEND_METHOD(QResizeEvent, size);
+ZEND_METHOD(QShortcutEvent, shortcutId);
+ZEND_METHOD(QShortcutEvent, isAmbiguous);
+ZEND_METHOD(QShortcutEvent, key);
+ZEND_METHOD(QStatusTipEvent, tip);
+ZEND_METHOD(QTabletEvent, hiResGlobalX);
+ZEND_METHOD(QTabletEvent, pressure);
+ZEND_METHOD(QTabletEvent, hiResGlobalPos);
+ZEND_METHOD(QTabletEvent, tangentialPressure);
+ZEND_METHOD(QTabletEvent, x);
+ZEND_METHOD(QTabletEvent, globalX);
+ZEND_METHOD(QTabletEvent, globalPos);
+ZEND_METHOD(QTabletEvent, y);
+ZEND_METHOD(QTabletEvent, uniqueId);
+ZEND_METHOD(QTabletEvent, hiResGlobalY);
+ZEND_METHOD(QTabletEvent, pos);
+ZEND_METHOD(QTabletEvent, xTilt);
+ZEND_METHOD(QTabletEvent, rotation);
+ZEND_METHOD(QTabletEvent, pointerType);
+ZEND_METHOD(QTabletEvent, yTilt);
+ZEND_METHOD(QTabletEvent, device);
+ZEND_METHOD(QTabletEvent, globalY);
+ZEND_METHOD(QTabletEvent, z);
+ZEND_METHOD(QTime, hour);
 ZEND_METHOD(QTime, isValid);
+ZEND_METHOD(QTime, elapsed);
 ZEND_METHOD(QTime, toString);
-ZEND_METHOD(QTime, toString);
+ZEND_METHOD(QTime, msec);
 ZEND_METHOD(QTime, secsTo);
+ZEND_METHOD(QTime, restart);
 ZEND_METHOD(QTime, fromString);
-ZEND_METHOD(QTime, fromString);
-ZEND_METHOD(QTime, QTime);
+ZEND_METHOD(QTime, second);
+ZEND_METHOD(QTime, __construct);
 ZEND_METHOD(QTime, addSecs);
 ZEND_METHOD(QTime, addMSecs);
+ZEND_METHOD(QTime, currentTime);
+ZEND_METHOD(QTime, minute);
 ZEND_METHOD(QTime, setHMS);
-ZEND_METHOD(QTime, msecsTo);
\ No newline at end of file
+ZEND_METHOD(QTime, isNull);
+ZEND_METHOD(QTime, msecsTo);
+ZEND_METHOD(QTime, start);
+ZEND_METHOD(QTimer, tr);
+ZEND_METHOD(QTimer, qt_invoke);
+ZEND_METHOD(QTimer, staticMetaObject);
+ZEND_METHOD(QTimer, setInterval);
+ZEND_METHOD(QTimer, qObject);
+ZEND_METHOD(QTimer, timerId);
+ZEND_METHOD(QTimer, singleShot);
+ZEND_METHOD(QTimer, qt_cast);
+ZEND_METHOD(QTimer, metaObject);
+ZEND_METHOD(QTimer, stop);
+ZEND_METHOD(QTimer, isActive);
+ZEND_METHOD(QTimer, __construct);
+ZEND_METHOD(QTimer, qt_emit);
+ZEND_METHOD(QTimer, interval);
+ZEND_METHOD(QTimer, setSingleShot);
+ZEND_METHOD(QTimer, className);
+ZEND_METHOD(QTimer, trUtf8);
+ZEND_METHOD(QTimer, qt_property);
+ZEND_METHOD(QTimer, isSingleShot);
+ZEND_METHOD(QTimer, start);
+ZEND_METHOD(QToolBarChangeEvent, toggle);
+ZEND_METHOD(QWhatsThisClickedEvent, href);
+ZEND_METHOD(QWheelEvent, orientation);
+ZEND_METHOD(QWheelEvent, x);
+ZEND_METHOD(QWheelEvent, globalX);
+ZEND_METHOD(QWheelEvent, globalPos);
+ZEND_METHOD(QWheelEvent, y);
+ZEND_METHOD(QWheelEvent, delta);
+ZEND_METHOD(QWheelEvent, globalY);
+ZEND_METHOD(QWheelEvent, pos);
+ZEND_METHOD(QWheelEvent, buttons);
+ZEND_METHOD(QWidgetItem, hasHeightForWidth);
+ZEND_METHOD(QWidgetItem, isEmpty);
+ZEND_METHOD(QWidgetItem, setGeometry);
+ZEND_METHOD(QWidgetItem, __construct);
+ZEND_METHOD(QWidgetItem, minimumSize);
+ZEND_METHOD(QWidgetItem, sizeHint);
+ZEND_METHOD(QWidgetItem, maximumSize);
+ZEND_METHOD(QWidgetItem, heightForWidth);
+ZEND_METHOD(QWidgetItem, widget);
+ZEND_METHOD(QWidgetItem, expandingDirections);
+ZEND_METHOD(QWidgetItem, geometry);
+ZEND_METHOD(QWindowStateChangeEvent, oldState);

Modified: trunk/qt/php_qt.h
===================================================================
--- trunk/qt/php_qt.h	2006-01-12 20:45:03 UTC (rev 171)
+++ trunk/qt/php_qt.h	2006-01-12 20:51:27 UTC (rev 172)
@@ -382,7 +382,7 @@
 extern zend_class_entry *QLCDNumber_ce_ptr;
 extern zend_class_entry *QMimeSource_ce_ptr;
 
-#include "ag_extern_zend_class_entry.h"
+#include "ag_extern_zend_class_entry.inc"
 
 
 



From tm at ippfp.org  Thu Jan 12 21:57:32 2006
From: tm at ippfp.org (Thomas Moenicke)
Date: Thu, 12 Jan 2006 21:57:32 +0100
Subject: [Php-qt-svn] r173 - trunk/qt/classes
Message-ID: <200601122157.32531.tm@ippfp.org>

Author: tm243
Date: 2006-01-12 21:52:02 +0100 (Thu, 12 Jan 2006)
New Revision: 173

Added:
   trunk/qt/classes/qabstractbutton.cpp
   trunk/qt/classes/qabstractslider.cpp
   trunk/qt/classes/qactionevent.cpp
   trunk/qt/classes/qactionevent.lo
   trunk/qt/classes/qapplication.cpp
   trunk/qt/classes/qboxlayout.cpp
   trunk/qt/classes/qchar.cpp
   trunk/qt/classes/qcharref.cpp
   trunk/qt/classes/qcharref.lo
   trunk/qt/classes/qclipboardevent.cpp
   trunk/qt/classes/qclipboardevent.lo
   trunk/qt/classes/qcloseevent.cpp
   trunk/qt/classes/qcloseevent.lo
   trunk/qt/classes/qcontextmenuevent.cpp
   trunk/qt/classes/qcontextmenuevent.lo
   trunk/qt/classes/qcoreapplication.cpp
   trunk/qt/classes/qdate.lo
   trunk/qt/classes/qdatetime.lo
   trunk/qt/classes/qdragenterevent.cpp
   trunk/qt/classes/qdragenterevent.lo
   trunk/qt/classes/qdragleaveevent.cpp
   trunk/qt/classes/qdragleaveevent.lo
   trunk/qt/classes/qdragmoveevent.cpp
   trunk/qt/classes/qdragmoveevent.lo
   trunk/qt/classes/qdragresponseevent.cpp
   trunk/qt/classes/qdragresponseevent.lo
   trunk/qt/classes/qdropevent.cpp
   trunk/qt/classes/qdropevent.lo
   trunk/qt/classes/qfileopenevent.cpp
   trunk/qt/classes/qfileopenevent.lo
   trunk/qt/classes/qfocusevent.cpp
   trunk/qt/classes/qfocusevent.lo
   trunk/qt/classes/qfont.cpp
   trunk/qt/classes/qfont.lo
   trunk/qt/classes/qframe.cpp
   trunk/qt/classes/qgridlayout.cpp
   trunk/qt/classes/qgridlayout.lo
   trunk/qt/classes/qhboxlayout.cpp
   trunk/qt/classes/qhelpevent.cpp
   trunk/qt/classes/qhelpevent.lo
   trunk/qt/classes/qhideevent.cpp
   trunk/qt/classes/qhideevent.lo
   trunk/qt/classes/qhoverevent.cpp
   trunk/qt/classes/qhoverevent.lo
   trunk/qt/classes/qicondragevent.cpp
   trunk/qt/classes/qicondragevent.lo
   trunk/qt/classes/qinputevent.cpp
   trunk/qt/classes/qinputevent.lo
   trunk/qt/classes/qinputmethodevent.cpp
   trunk/qt/classes/qinputmethodevent.lo
   trunk/qt/classes/qinputmethodevent__attribute.cpp
   trunk/qt/classes/qinternal.cpp
   trunk/qt/classes/qkeyevent.cpp
   trunk/qt/classes/qkeyevent.lo
   trunk/qt/classes/qlabel.cpp
   trunk/qt/classes/qlabel.lo
   trunk/qt/classes/qlatin1char.cpp
   trunk/qt/classes/qlatin1char.lo
   trunk/qt/classes/qlatin1string.cpp
   trunk/qt/classes/qlayout.cpp
   trunk/qt/classes/qlayoutitem.cpp
   trunk/qt/classes/qlcdnumber.cpp
   trunk/qt/classes/qlineedit.cpp
   trunk/qt/classes/qmouseevent.cpp
   trunk/qt/classes/qmouseevent.lo
   trunk/qt/classes/qmoveevent.cpp
   trunk/qt/classes/qmoveevent.lo
   trunk/qt/classes/qobject.cpp
   trunk/qt/classes/qobjectdata.cpp
   trunk/qt/classes/qobjectdata.lo
   trunk/qt/classes/qobjectuserdata.cpp
   trunk/qt/classes/qobjectuserdata.lo
   trunk/qt/classes/qpainter.cpp
   trunk/qt/classes/qpainter.lo
   trunk/qt/classes/qpaintevent.cpp
   trunk/qt/classes/qpaintevent.lo
   trunk/qt/classes/qpushbutton.cpp
   trunk/qt/classes/qresizeevent.cpp
   trunk/qt/classes/qresizeevent.lo
   trunk/qt/classes/qshortcutevent.cpp
   trunk/qt/classes/qshortcutevent.lo
   trunk/qt/classes/qshowevent.cpp
   trunk/qt/classes/qshowevent.lo
   trunk/qt/classes/qslider.cpp
   trunk/qt/classes/qspaceritem.cpp
   trunk/qt/classes/qspaceritem.lo
   trunk/qt/classes/qstatustipevent.cpp
   trunk/qt/classes/qstatustipevent.lo
   trunk/qt/classes/qstring.cpp
   trunk/qt/classes/qt.cpp
   trunk/qt/classes/qtabletevent.cpp
   trunk/qt/classes/qtabletevent.lo
   trunk/qt/classes/qtime.lo
   trunk/qt/classes/qtimer.cpp
   trunk/qt/classes/qtimer.lo
   trunk/qt/classes/qtoolbarchangeevent.cpp
   trunk/qt/classes/qtoolbarchangeevent.lo
   trunk/qt/classes/qvboxlayout.cpp
   trunk/qt/classes/qwhatsthisclickedevent.cpp
   trunk/qt/classes/qwhatsthisclickedevent.lo
   trunk/qt/classes/qwheelevent.cpp
   trunk/qt/classes/qwheelevent.lo
   trunk/qt/classes/qwidget.cpp
   trunk/qt/classes/qwidgetdata.cpp
   trunk/qt/classes/qwidgetdata.lo
   trunk/qt/classes/qwidgetitem.cpp
   trunk/qt/classes/qwidgetitem.lo
   trunk/qt/classes/qwindowstatechangeevent.cpp
   trunk/qt/classes/qwindowstatechangeevent.lo
Log:
new classes added.

Added: trunk/qt/
...
-- 
Thomas


From tm243 at berlios.de  Sat Jan 14 16:09:25 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 14 Jan 2006 16:09:25 +0100
Subject: [Php-qt-svn] r174 - in trunk/tutorials: t1 t2 t3 t4 t5
Message-ID: <200601141509.k0EF9Pgq010403@sheep.berlios.de>

Author: tm243
Date: 2006-01-14 16:09:25 +0100 (Sat, 14 Jan 2006)
New Revision: 174

Modified:
   trunk/tutorials/t1/main.php
   trunk/tutorials/t2/main.php
   trunk/tutorials/t3/main.php
   trunk/tutorials/t4/main.php
   trunk/tutorials/t5/main.php
Log:
links to the original Qt tutorials added.

Modified: trunk/tutorials/t1/main.php
===================================================================
--- trunk/tutorials/t1/main.php	2006-01-12 20:52:02 UTC (rev 173)
+++ trunk/tutorials/t1/main.php	2006-01-14 15:09:25 UTC (rev 174)
@@ -3,6 +3,8 @@
      **
      ** Qt tutorial 1
      **
+     ** http://doc.trolltech.com/4.0/tutorial-t1.html
+     **
      ****************************************************************/
 
 	if(!extension_loaded('php_qt')) {
@@ -18,4 +20,4 @@
     $hello->show();
     $app->exec();
 
-?>
\ No newline at end of file
+?>

Modified: trunk/tutorials/t2/main.php
===================================================================
--- trunk/tutorials/t2/main.php	2006-01-12 20:52:02 UTC (rev 173)
+++ trunk/tutorials/t2/main.php	2006-01-14 15:09:25 UTC (rev 174)
@@ -4,6 +4,8 @@
     **
     ** Qt tutorial 2
     **
+    ** http://doc.trolltech.com/4.0/tutorial-t2.html
+    **
     ****************************************************************/
                 
 	if(!extension_loaded('php_qt')) {
@@ -23,4 +25,4 @@
 
     $app->exec();
 
-?>
\ No newline at end of file
+?>

Modified: trunk/tutorials/t3/main.php
===================================================================
--- trunk/tutorials/t3/main.php	2006-01-12 20:52:02 UTC (rev 173)
+++ trunk/tutorials/t3/main.php	2006-01-14 15:09:25 UTC (rev 174)
@@ -4,6 +4,8 @@
     **
     ** Qt tutorial 3
     **
+    ** http://doc.trolltech.com/4.0/tutorial-t3.html
+    **
     ****************************************************************/
                 
 	if(!extension_loaded('php_qt')) {
@@ -26,4 +28,4 @@
 
     $app->exec();
 
-?>
\ No newline at end of file
+?>

Modified: trunk/tutorials/t4/main.php
===================================================================
--- trunk/tutorials/t4/main.php	2006-01-12 20:52:02 UTC (rev 173)
+++ trunk/tutorials/t4/main.php	2006-01-14 15:09:25 UTC (rev 174)
@@ -4,6 +4,8 @@
     **
     ** Qt tutorial 4
     **
+    ** http://doc.trolltech.com/4.0/tutorial-t4.html
+    **
     ****************************************************************/
                 
 	if(!extension_loaded('php_qt')) {
@@ -41,4 +43,4 @@
 
     $app->exec();
 
-?>
\ No newline at end of file
+?>

Modified: trunk/tutorials/t5/main.php
===================================================================
--- trunk/tutorials/t5/main.php	2006-01-12 20:52:02 UTC (rev 173)
+++ trunk/tutorials/t5/main.php	2006-01-14 15:09:25 UTC (rev 174)
@@ -3,6 +3,8 @@
     **
     ** Qt tutorial 5
     **
+    ** http://doc.trolltech.com/4.0/tutorial-t5.html
+    **
     ****************************************************************/
 
 	if(!extension_loaded('php_qt')) {
@@ -51,4 +53,4 @@
 
     $app->exec();
 
-?>
\ No newline at end of file
+?>



From tm243 at berlios.de  Sat Jan 14 16:39:16 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 14 Jan 2006 16:39:16 +0100
Subject: [Php-qt-svn] r175 - trunk
Message-ID: <200601141539.k0EFdGUb013246@sheep.berlios.de>

Author: tm243
Date: 2006-01-14 16:39:16 +0100 (Sat, 14 Jan 2006)
New Revision: 175

Added:
   trunk/COPYING
Log:
license notice added.

Added: trunk/COPYING
===================================================================
--- trunk/COPYING	2006-01-14 15:09:25 UTC (rev 174)
+++ trunk/COPYING	2006-01-14 15:39:16 UTC (rev 175)
@@ -0,0 +1,14 @@
+
+About licensing
+===============
+
+PHP-Qt is licensed under the terms of the GNU Lesser Public License.
+Qt is dual licensed software. Please note that PHP-Qt is dynamically linked 
+against the Qt library, Qt header files are neccessary for building PHP-Qt.
+
+Qt itself is under the GPL license, people writing closed source commercial software using Qt and php-qt
+bindings need a commercial license if they are not prepared to open source license their own code.
+
+More informations can be found here:
+http://www.trolltech.com/download/opensource.html
+



From tm243 at berlios.de  Sat Jan 14 16:41:06 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 14 Jan 2006 16:41:06 +0100
Subject: [Php-qt-svn] r176 - trunk/qt
Message-ID: <200601141541.k0EFf6p4013558@sheep.berlios.de>

Author: tm243
Date: 2006-01-14 16:41:05 +0100 (Sat, 14 Jan 2006)
New Revision: 176

Modified:
   trunk/qt/ag_php_qt_cpp.inc
Log:
fixed wrong linking of qchar.

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-01-14 15:39:16 UTC (rev 175)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-01-14 15:41:05 UTC (rev 176)
@@ -584,7 +584,7 @@
 	ZEND_ME(QLabel,qt_cast,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,metaObject,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,setScaledContents,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PUBLI)	// changed manually
 	ZEND_ME(QLabel,indent,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,qt_emit,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,pixmap,NULL,ZEND_ACC_PUBLIC)



From tm243 at berlios.de  Sat Jan 14 16:52:53 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 14 Jan 2006 16:52:53 +0100
Subject: [Php-qt-svn] r177 - in trunk: . qt
Message-ID: <200601141552.k0EFqrkW014588@sheep.berlios.de>

Author: tm243
Date: 2006-01-14 16:52:52 +0100 (Sat, 14 Jan 2006)
New Revision: 177

Modified:
   trunk/config.m4
   trunk/qt/ag_php_qt_cpp.inc
Log:
constructors added to xxx_methods[] structures.

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-14 15:41:05 UTC (rev 176)
+++ trunk/config.m4	2006-01-14 15:52:52 UTC (rev 177)
@@ -102,7 +102,7 @@
   qt/object_model/qobject.cpp \
   qt/text_related/qstring.cpp \
   qt/text_related/qlatin1string.cpp \
-  qt/text_related/qchar.cpp \
+  qt/classes/qchar.cpp \
   qt/event/qevent.cpp \
 	qt/classes/qactionevent.cpp \ 
 	qt/classes/qcharref.cpp \ 

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-01-14 15:41:05 UTC (rev 176)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-01-14 15:52:52 UTC (rev 177)
@@ -18,6 +18,7 @@
 	ZEND_ME(QChar,isUpper,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,joining,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,row,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QChar, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QChar,isSymbol,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,category,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,isPrint,NULL,ZEND_ACC_PUBLIC)
@@ -162,6 +163,7 @@
 	ZEND_ME(QDate,gregorianToJulian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,longMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,julianToGregorian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QDate, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QDate,shortDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,dayOfYear,NULL,ZEND_ACC_PUBLIC)
@@ -198,6 +200,7 @@
 	ZEND_ME(QDateTime,timeSpec,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,setTime,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,addMonths,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QDateTime, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QDateTime,addSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,setDate,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,currentDateTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
@@ -372,6 +375,7 @@
 	ZEND_ME(QFont,setStyleHint,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QFont,substitutions,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QFont,setFamily,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QFont, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QFont,bold,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QFont,style,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QFont,setPointSize,NULL,ZEND_ACC_PUBLIC)
@@ -401,6 +405,7 @@
 static zend_function_entry QGridLayout_methods[] = {
 	ZEND_ME(QGridLayout,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QGridLayout,addLayout,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QGridLayout, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QGridLayout,qt_invoke,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QGridLayout,addItem,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QGridLayout,rowMinimumHeight,NULL,ZEND_ACC_PUBLIC)
@@ -543,18 +548,6 @@
 
 
 }
-static zend_function_entry Attribute_methods[] = {
-
-    {NULL,NULL,NULL}
-};
-
-void _register_Attribute(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"Attribute",Attribute_methods);
-    Attribute_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
-
-}
 static zend_function_entry QKeyEvent_methods[] = {
 	ZEND_ME(QKeyEvent,count,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QKeyEvent,text,NULL,ZEND_ACC_PUBLIC)
@@ -584,7 +577,7 @@
 	ZEND_ME(QLabel,qt_cast,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,metaObject,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,setScaledContents,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PUBLI)	// changed manually
+	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PROTECTED)
 	ZEND_ME(QLabel,indent,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,qt_emit,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,pixmap,NULL,ZEND_ACC_PUBLIC)
@@ -610,6 +603,7 @@
 	ZEND_ME(QLabel,setWordWrap,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QLabel,qt_property,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QLabel,setIndent,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,margin,NULL,ZEND_ACC_PUBLIC)
 
@@ -626,6 +620,7 @@
 }
 static zend_function_entry QLatin1Char_methods[] = {
 	ZEND_ME(QLatin1Char,unicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLatin1Char, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QLatin1Char,toLatin1,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
@@ -776,6 +771,7 @@
 	ZEND_ME(QPainter,strokePath,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QPainter,setBrush,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QPainter,drawPoint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPainter, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QPainter,setRedirected,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QPainter,compositionMode,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QPainter,setFont,NULL,ZEND_ACC_PUBLIC)
@@ -904,6 +900,7 @@
 	ZEND_ME(QTime,restart,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QTime,second,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTime, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QTime,addSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,addMSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,currentTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
@@ -935,6 +932,7 @@
 	ZEND_ME(QTimer,metaObject,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTimer,stop,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTimer,isActive,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QTimer, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QTimer,qt_emit,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTimer,interval,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTimer,setSingleShot,NULL,ZEND_ACC_PUBLIC)
@@ -1021,6 +1019,7 @@
 	ZEND_ME(QWidgetItem,hasHeightForWidth,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QWidgetItem,isEmpty,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QWidgetItem,setGeometry,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QWidgetItem, __construct,NULL,ZEND_ACC_PUBLIC);
 	ZEND_ME(QWidgetItem,minimumSize,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QWidgetItem,sizeHint,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QWidgetItem,maximumSize,NULL,ZEND_ACC_PUBLIC)



From tm243 at berlios.de  Sat Jan 14 17:14:55 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 14 Jan 2006 17:14:55 +0100
Subject: [Php-qt-svn] r178 - in trunk/qt: . classes
Message-ID: <200601141614.k0EGEtlv016944@sheep.berlios.de>

Author: tm243
Date: 2006-01-14 17:14:55 +0100 (Sat, 14 Jan 2006)
New Revision: 178

Modified:
   trunk/qt/ag_php_qt_cpp.inc
   trunk/qt/classes/qchar.cpp
Log:
fixed some compilation and runtime errors.

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-01-14 15:52:52 UTC (rev 177)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-01-14 16:14:55 UTC (rev 178)
@@ -18,7 +18,7 @@
 	ZEND_ME(QChar,isUpper,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,joining,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,row,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QChar, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QChar, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,isSymbol,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,category,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,isPrint,NULL,ZEND_ACC_PUBLIC)
@@ -163,7 +163,7 @@
 	ZEND_ME(QDate,gregorianToJulian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,longMonthName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,julianToGregorian,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QDate, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QDate, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDate,shortDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,dayOfYear,NULL,ZEND_ACC_PUBLIC)
@@ -200,7 +200,7 @@
 	ZEND_ME(QDateTime,timeSpec,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,setTime,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,addMonths,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QDateTime, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QDateTime, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,addSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,setDate,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QDateTime,currentDateTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
@@ -300,7 +300,7 @@
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce,"QDropEvent",QDropEvent_methods);
     QDropEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
-	zend_do_inheritance(QDropEvent_ce_ptr, QMimeSource_ce_ptr TSRMLS_CC);
+//	zend_do_inheritance(QDropEvent_ce_ptr, QMimeSource_ce_ptr TSRMLS_CC);
 
 
 }
@@ -375,7 +375,7 @@
 	ZEND_ME(QFont,setStyleHint,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QFont,substitutions,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QFont,setFamily,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QFont, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QFont, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QFont,bold,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QFont,style,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QFont,setPointSize,NULL,ZEND_ACC_PUBLIC)
@@ -405,7 +405,7 @@
 static zend_function_entry QGridLayout_methods[] = {
 	ZEND_ME(QGridLayout,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QGridLayout,addLayout,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QGridLayout, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QGridLayout, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QGridLayout,qt_invoke,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QGridLayout,addItem,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QGridLayout,rowMinimumHeight,NULL,ZEND_ACC_PUBLIC)
@@ -577,7 +577,7 @@
 	ZEND_ME(QLabel,qt_cast,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,metaObject,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,setScaledContents,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,indent,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,qt_emit,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,pixmap,NULL,ZEND_ACC_PUBLIC)
@@ -603,7 +603,7 @@
 	ZEND_ME(QLabel,setWordWrap,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QLabel,qt_property,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QLabel, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QLabel, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,setIndent,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,margin,NULL,ZEND_ACC_PUBLIC)
 
@@ -620,7 +620,7 @@
 }
 static zend_function_entry QLatin1Char_methods[] = {
 	ZEND_ME(QLatin1Char,unicode,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QLatin1Char, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QLatin1Char, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLatin1Char,toLatin1,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
@@ -771,7 +771,7 @@
 	ZEND_ME(QPainter,strokePath,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QPainter,setBrush,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QPainter,drawPoint,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QPainter, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QPainter, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QPainter,setRedirected,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QPainter,compositionMode,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QPainter,setFont,NULL,ZEND_ACC_PUBLIC)
@@ -900,7 +900,7 @@
 	ZEND_ME(QTime,restart,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,fromString,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QTime,second,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTime, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QTime, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,addSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,addMSecs,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTime,currentTime,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
@@ -932,7 +932,7 @@
 	ZEND_ME(QTimer,metaObject,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTimer,stop,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTimer,isActive,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QTimer, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QTimer, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTimer,qt_emit,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTimer,interval,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTimer,setSingleShot,NULL,ZEND_ACC_PUBLIC)
@@ -1019,7 +1019,7 @@
 	ZEND_ME(QWidgetItem,hasHeightForWidth,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QWidgetItem,isEmpty,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QWidgetItem,setGeometry,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QWidgetItem, __construct,NULL,ZEND_ACC_PUBLIC);
+	ZEND_ME(QWidgetItem, __construct,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QWidgetItem,minimumSize,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QWidgetItem,sizeHint,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QWidgetItem,maximumSize,NULL,ZEND_ACC_PUBLIC)

Modified: trunk/qt/classes/qchar.cpp
===================================================================
--- trunk/qt/classes/qchar.cpp	2006-01-14 15:52:52 UTC (rev 177)
+++ trunk/qt/classes/qchar.cpp	2006-01-14 16:14:55 UTC (rev 178)
@@ -214,10 +214,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QChar, row){
-	if (ZEND_NUM_ARGS() == 0){
+/*	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 			RETURN_CHAR* (obj->row());
-	}
+	}*/
 }
 
 /*********************************
@@ -257,24 +257,24 @@
 			QString tmp_o_0(var_o_2->metaObject()->className());
 			
 			if(tmp_o_0 == "QLatin1Char") {
-				QChar *QChar_ptr = new QChar((QLatin1Char) var_o_2);
+/*				QChar *QChar_ptr = new QChar((QLatin1Char) var_o_2);
 			PHP_QT_REGISTER(QChar_ptr);
-			RETURN_NULL();
+*/			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "ushort") {
-				QChar *QChar_ptr = new QChar((ushort) var_o_2);
+/*				QChar *QChar_ptr = new QChar((ushort) var_o_2);
 			PHP_QT_REGISTER(QChar_ptr);
-			RETURN_NULL();
+*/			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "short") {
-				QChar *QChar_ptr = new QChar((short) var_o_2);
+/*				QChar *QChar_ptr = new QChar((short) var_o_2);
 			PHP_QT_REGISTER(QChar_ptr);
-			RETURN_NULL();
+*/			RETURN_NULL();
 			}			
 			if(tmp_o_0 == "SpecialCharacter") {
-				QChar *QChar_ptr = new QChar((SpecialCharacter) var_o_2);
+/*				QChar *QChar_ptr = new QChar((SpecialCharacter) var_o_2);
 			PHP_QT_REGISTER(QChar_ptr);
-			RETURN_NULL();
+*/			RETURN_NULL();
 			}
 		}
 	}
@@ -642,10 +642,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QChar, cell){
-	if (ZEND_NUM_ARGS() == 0){
+/*	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 			RETURN_CHAR* (obj->cell());
-	}
+	}*/
 }
 
 /*********************************



From tm243 at berlios.de  Sat Jan 14 18:23:31 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 14 Jan 2006 18:23:31 +0100
Subject: [Php-qt-svn] r179 - trunk/qt/classes
Message-ID: <200601141723.k0EHNV2A024392@sheep.berlios.de>

Author: tm243
Date: 2006-01-14 18:23:31 +0100 (Sat, 14 Jan 2006)
New Revision: 179

Modified:
   trunk/qt/classes/qgridlayout.cpp
Log:
tutorial 6 added.

Modified: trunk/qt/classes/qgridlayout.cpp
===================================================================
--- trunk/qt/classes/qgridlayout.cpp	2006-01-14 16:14:55 UTC (rev 178)
+++ trunk/qt/classes/qgridlayout.cpp	2006-01-14 17:23:31 UTC (rev 179)
@@ -102,8 +102,8 @@
  */
 ZEND_METHOD(QGridLayout, __construct){
 	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-//			obj->QGridLayout();
+			QGridLayout *QGridLayout_ptr = new QGridLayout();
+			PHP_QT_REGISTER(QGridLayout_ptr);
 			RETURN_NULL();
 	}
 
@@ -113,15 +113,15 @@
 
 		/* QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+//			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "QWidget*") {
+			if(tmp_o_0 == "QWidget") {
 				QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget*) var_o_0);
-			PHP_QT_REGISTER(QGridLayout_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QGridLayout_ptr);
+				RETURN_NULL();
 			}
 		}
 	}
@@ -505,9 +505,12 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "QWidget*") {
+			if(tmp_o_0 == "QWidget") {
 				obj->addWidget((QWidget*) var_o_0);
-			RETURN_NULL();
+			  php_error(E_WARNING,"added");
+				RETURN_NULL();
+			} else {
+			  php_error(E_WARNING,"error");
 			}
 		}
 	}



From tm243 at berlios.de  Sat Jan 14 18:24:34 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 14 Jan 2006 18:24:34 +0100
Subject: [Php-qt-svn] r180 - trunk/qt/classes
Message-ID: <200601141724.k0EHOYed024487@sheep.berlios.de>

Author: tm243
Date: 2006-01-14 18:24:34 +0100 (Sat, 14 Jan 2006)
New Revision: 180

Removed:
   trunk/qt/classes/qactionevent.lo
   trunk/qt/classes/qcharref.lo
   trunk/qt/classes/qclipboardevent.lo
   trunk/qt/classes/qcloseevent.lo
   trunk/qt/classes/qcontextmenuevent.lo
   trunk/qt/classes/qdate.lo
   trunk/qt/classes/qdatetime.lo
   trunk/qt/classes/qdragenterevent.lo
   trunk/qt/classes/qdragleaveevent.lo
   trunk/qt/classes/qdragmoveevent.lo
   trunk/qt/classes/qdragresponseevent.lo
   trunk/qt/classes/qdropevent.lo
   trunk/qt/classes/qfileopenevent.lo
   trunk/qt/classes/qfocusevent.lo
   trunk/qt/classes/qfont.lo
   trunk/qt/classes/qgridlayout.lo
   trunk/qt/classes/qhelpevent.lo
   trunk/qt/classes/qhideevent.lo
   trunk/qt/classes/qhoverevent.lo
   trunk/qt/classes/qicondragevent.lo
   trunk/qt/classes/qinputevent.lo
   trunk/qt/classes/qinputmethodevent.lo
   trunk/qt/classes/qkeyevent.lo
   trunk/qt/classes/qlabel.lo
   trunk/qt/classes/qlatin1char.lo
   trunk/qt/classes/qmouseevent.lo
   trunk/qt/classes/qmoveevent.lo
   trunk/qt/classes/qobjectdata.lo
   trunk/qt/classes/qobjectuserdata.lo
   trunk/qt/classes/qpainter.lo
   trunk/qt/classes/qpaintevent.lo
   trunk/qt/classes/qresizeevent.lo
   trunk/qt/classes/qshortcutevent.lo
   trunk/qt/classes/qshowevent.lo
   trunk/qt/classes/qspaceritem.lo
   trunk/qt/classes/qstatustipevent.lo
   trunk/qt/classes/qtabletevent.lo
   trunk/qt/classes/qtime.lo
   trunk/qt/classes/qtimer.lo
   trunk/qt/classes/qtoolbarchangeevent.lo
   trunk/qt/classes/qwhatsthisclickedevent.lo
   trunk/qt/classes/qwheelevent.lo
   trunk/qt/classes/qwidgetdata.lo
   trunk/qt/classes/qwidgetitem.lo
   trunk/qt/classes/qwindowstatechangeevent.lo
Log:
directory cleaned up.

Deleted: trunk/qt/classes/qactionevent.lo
===================================================================
--- trunk/qt/classes/qactionevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qactionevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qactionevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qactionevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qcharref.lo
===================================================================
--- trunk/qt/classes/qcharref.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qcharref.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qcharref.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qcharref.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qclipboardevent.lo
===================================================================
--- trunk/qt/classes/qclipboardevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qclipboardevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qclipboardevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qclipboardevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qcloseevent.lo
===================================================================
--- trunk/qt/classes/qcloseevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qcloseevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qcloseevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qcloseevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qcontextmenuevent.lo
===================================================================
--- trunk/qt/classes/qcontextmenuevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qcontextmenuevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qcontextmenuevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qcontextmenuevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qdate.lo
===================================================================
--- trunk/qt/classes/qdate.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qdate.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qdate.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qdate.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qdatetime.lo
===================================================================
--- trunk/qt/classes/qdatetime.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qdatetime.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qdatetime.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qdatetime.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qdragenterevent.lo
===================================================================
--- trunk/qt/classes/qdragenterevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qdragenterevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qdragenterevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qdragenterevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qdragleaveevent.lo
===================================================================
--- trunk/qt/classes/qdragleaveevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qdragleaveevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qdragleaveevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qdragleaveevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qdragmoveevent.lo
===================================================================
--- trunk/qt/classes/qdragmoveevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qdragmoveevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qdragmoveevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qdragmoveevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qdragresponseevent.lo
===================================================================
--- trunk/qt/classes/qdragresponseevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qdragresponseevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qdragresponseevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qdragresponseevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qdropevent.lo
===================================================================
--- trunk/qt/classes/qdropevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qdropevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qdropevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qdropevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qfileopenevent.lo
===================================================================
--- trunk/qt/classes/qfileopenevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qfileopenevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qfileopenevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qfileopenevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qfocusevent.lo
===================================================================
--- trunk/qt/classes/qfocusevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qfocusevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qfocusevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qfocusevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qfont.lo
===================================================================
--- trunk/qt/classes/qfont.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qfont.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qfont.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qfont.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qgridlayout.lo
===================================================================
--- trunk/qt/classes/qgridlayout.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qgridlayout.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qgridlayout.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qgridlayout.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qhelpevent.lo
===================================================================
--- trunk/qt/classes/qhelpevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qhelpevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qhelpevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qhelpevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qhideevent.lo
===================================================================
--- trunk/qt/classes/qhideevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qhideevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qhideevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qhideevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qhoverevent.lo
===================================================================
--- trunk/qt/classes/qhoverevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qhoverevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qhoverevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qhoverevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qicondragevent.lo
===================================================================
--- trunk/qt/classes/qicondragevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qicondragevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qicondragevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qicondragevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qinputevent.lo
===================================================================
--- trunk/qt/classes/qinputevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qinputevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qinputevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qinputevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qinputmethodevent.lo
===================================================================
--- trunk/qt/classes/qinputmethodevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qinputmethodevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qinputmethodevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qinputmethodevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qkeyevent.lo
===================================================================
--- trunk/qt/classes/qkeyevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qkeyevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qkeyevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qkeyevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qlabel.lo
===================================================================
--- trunk/qt/classes/qlabel.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qlabel.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qlabel.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qlabel.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qlatin1char.lo
===================================================================
--- trunk/qt/classes/qlatin1char.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qlatin1char.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qlatin1char.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qlatin1char.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qmouseevent.lo
===================================================================
--- trunk/qt/classes/qmouseevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qmouseevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qmouseevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qmouseevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qmoveevent.lo
===================================================================
--- trunk/qt/classes/qmoveevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qmoveevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qmoveevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qmoveevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qobjectdata.lo
===================================================================
--- trunk/qt/classes/qobjectdata.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qobjectdata.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qobjectdata.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qobjectdata.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qobjectuserdata.lo
===================================================================
--- trunk/qt/classes/qobjectuserdata.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qobjectuserdata.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qobjectuserdata.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qobjectuserdata.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qpainter.lo
===================================================================
--- trunk/qt/classes/qpainter.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qpainter.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qpainter.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qpainter.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qpaintevent.lo
===================================================================
--- trunk/qt/classes/qpaintevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qpaintevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qpaintevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qpaintevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qresizeevent.lo
===================================================================
--- trunk/qt/classes/qresizeevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qresizeevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qresizeevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qresizeevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qshortcutevent.lo
===================================================================
--- trunk/qt/classes/qshortcutevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qshortcutevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qshortcutevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qshortcutevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qshowevent.lo
===================================================================
--- trunk/qt/classes/qshowevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qshowevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qshowevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qshowevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qspaceritem.lo
===================================================================
--- trunk/qt/classes/qspaceritem.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qspaceritem.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qspaceritem.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qspaceritem.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qstatustipevent.lo
===================================================================
--- trunk/qt/classes/qstatustipevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qstatustipevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qstatustipevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qstatustipevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qtabletevent.lo
===================================================================
--- trunk/qt/classes/qtabletevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qtabletevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qtabletevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qtabletevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qtime.lo
===================================================================
--- trunk/qt/classes/qtime.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qtime.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qtime.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qtime.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qtimer.lo
===================================================================
--- trunk/qt/classes/qtimer.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qtimer.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qtimer.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qtimer.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qtoolbarchangeevent.lo
===================================================================
--- trunk/qt/classes/qtoolbarchangeevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qtoolbarchangeevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qtoolbarchangeevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qtoolbarchangeevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qwhatsthisclickedevent.lo
===================================================================
--- trunk/qt/classes/qwhatsthisclickedevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qwhatsthisclickedevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qwhatsthisclickedevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qwhatsthisclickedevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qwheelevent.lo
===================================================================
--- trunk/qt/classes/qwheelevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qwheelevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qwheelevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qwheelevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qwidgetdata.lo
===================================================================
--- trunk/qt/classes/qwidgetdata.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qwidgetdata.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qwidgetdata.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qwidgetdata.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qwidgetitem.lo
===================================================================
--- trunk/qt/classes/qwidgetitem.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qwidgetitem.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qwidgetitem.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qwidgetitem.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-

Deleted: trunk/qt/classes/qwindowstatechangeevent.lo
===================================================================
--- trunk/qt/classes/qwindowstatechangeevent.lo	2006-01-14 17:23:31 UTC (rev 179)
+++ trunk/qt/classes/qwindowstatechangeevent.lo	2006-01-14 17:24:34 UTC (rev 180)
@@ -1,12 +0,0 @@
-# qt/classes/qwindowstatechangeevent.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.
-pic_object='.libs/qwindowstatechangeevent.o'
-
-# Name of the non-PIC object.
-non_pic_object=none
-



From tm243 at berlios.de  Sun Jan 15 19:05:54 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 15 Jan 2006 19:05:54 +0100
Subject: [Php-qt-svn] r182 - in trunk/tutorials: . t6
Message-ID: <200601151805.k0FI5sUw012120@sheep.berlios.de>

Author: tm243
Date: 2006-01-15 19:05:52 +0100 (Sun, 15 Jan 2006)
New Revision: 182

Added:
   trunk/tutorials/t6/
   trunk/tutorials/t6/main.php
Log:
6th tutorial added.

Added: trunk/tutorials/t6/main.php
===================================================================
--- trunk/tutorials/t6/main.php	2006-01-15 18:04:39 UTC (rev 181)
+++ trunk/tutorials/t6/main.php	2006-01-15 18:05:52 UTC (rev 182)
@@ -0,0 +1,74 @@
+<?php
+    /****************************************************************
+    **
+    ** Qt tutorial 6
+    **
+    ** http://doc.trolltech.com/4.0/tutorial-t6.html
+    **
+    ****************************************************************/
+
+    if(!extension_loaded('php_qt')) {
+        dl('php_qt.' . PHP_SHLIB_SUFFIX);
+    }
+
+    class LCDRange extends QWidget
+    {
+        var $lcd;
+        var $slider;
+        var $layout;
+
+        function __construct(){
+
+            parent::__construct();
+
+            $this->lcd = new QLCDNumber(2,$this);
+            $this->slider = new QSlider($this);
+            $this->slider->setOrientation(QT_ORIENTATIONS_HORIZONTAL);
+            $this->slider->setRange(0, 99);
+            $this->slider->setValue(0);
+            $this->connect($this->slider, SIGNAL("valueChanged(int)"),
+                    $this->lcd, SLOT("display(int)"));
+    
+            $this->layout = new QVBoxLayout($this);
+            $this->layout->addWidget($this->lcd);
+            $this->layout->addWidget($this->slider);
+            $this->setLayout($this->layout);
+        }
+
+    };
+
+    class MyWidget extends QWidget
+    {
+        var $quit;
+        var $grid;
+        var $layout;
+        var $LCDRange_array = array();
+
+        function __construct(){
+
+            parent::__construct();
+
+            $this->quit = new QPushButton("Quit");
+    //        $this->quit->setFont(QFont("Times", 18, QFont::Bold));
+            $this->connect($this->quit, SIGNAL("clicked()"), QApplication::instance(), SLOT("quit()"));
+    
+            $this->grid = new QGridLayout($this);
+            for ($row = 0; $row < 4; ++$row) {
+                for ($column = 0; $column < 4; ++$column) {
+                    $this->grid->addWidget(new LCDRange(), $row, $column);
+                }
+            }
+
+            $this->layout = new QVBoxLayout($this);
+            $this->layout->addWidget($this->quit);
+            $this->layout->addLayout($this->grid);
+            $this->setLayout($this->layout);
+        }
+    }
+
+    $app = new QApplication();
+    $widget = new MyWidget();
+    $widget->show();
+    $app->exec();
+
+?>
\ No newline at end of file



From tm243 at berlios.de  Sun Jan 15 19:13:27 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 15 Jan 2006 19:13:27 +0100
Subject: [Php-qt-svn] r183 - trunk
Message-ID: <200601151813.k0FIDRbv013758@sheep.berlios.de>

Author: tm243
Date: 2006-01-15 19:13:24 +0100 (Sun, 15 Jan 2006)
New Revision: 183

Modified:
   trunk/COPYING
Log:
trademark notice added.

Modified: trunk/COPYING
===================================================================
--- trunk/COPYING	2006-01-15 18:05:52 UTC (rev 182)
+++ trunk/COPYING	2006-01-15 18:13:24 UTC (rev 183)
@@ -1,4 +1,5 @@
 
+
 About licensing
 ===============
 
@@ -12,3 +13,9 @@
 More informations can be found here:
 http://www.trolltech.com/download/opensource.html
 
+
+Trademarks
+==========
+
+Qt is a trademark of Trolltech.
+



From tm243 at berlios.de  Sun Jan 15 19:04:49 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 15 Jan 2006 19:04:49 +0100
Subject: [Php-qt-svn] r181 - in trunk/qt: . classes
Message-ID: <200601151804.k0FI4n2B011220@sheep.berlios.de>

Author: tm243
Date: 2006-01-15 19:04:39 +0100 (Sun, 15 Jan 2006)
New Revision: 181

Modified:
   trunk/qt/ag_extern_zend_class_entry.inc
   trunk/qt/ag_php_qt_cpp.inc
   trunk/qt/ag_zend_class_entry.inc
   trunk/qt/ag_zend_php_qt.inc
   trunk/qt/classes/qactionevent.cpp
   trunk/qt/classes/qchar.cpp
   trunk/qt/classes/qcharref.cpp
   trunk/qt/classes/qclipboardevent.cpp
   trunk/qt/classes/qcloseevent.cpp
   trunk/qt/classes/qcontextmenuevent.cpp
   trunk/qt/classes/qdate.cpp
   trunk/qt/classes/qdatetime.cpp
   trunk/qt/classes/qdragenterevent.cpp
   trunk/qt/classes/qdragleaveevent.cpp
   trunk/qt/classes/qdragmoveevent.cpp
   trunk/qt/classes/qdragresponseevent.cpp
   trunk/qt/classes/qdropevent.cpp
   trunk/qt/classes/qfileopenevent.cpp
   trunk/qt/classes/qfocusevent.cpp
   trunk/qt/classes/qfont.cpp
   trunk/qt/classes/qgridlayout.cpp
   trunk/qt/classes/qhelpevent.cpp
   trunk/qt/classes/qhideevent.cpp
   trunk/qt/classes/qhoverevent.cpp
   trunk/qt/classes/qicondragevent.cpp
   trunk/qt/classes/qinputevent.cpp
   trunk/qt/classes/qinputmethodevent.cpp
   trunk/qt/classes/qkeyevent.cpp
   trunk/qt/classes/qlabel.cpp
   trunk/qt/classes/qlatin1char.cpp
   trunk/qt/classes/qmouseevent.cpp
   trunk/qt/classes/qmoveevent.cpp
   trunk/qt/classes/qobjectdata.cpp
   trunk/qt/classes/qobjectuserdata.cpp
   trunk/qt/classes/qpainter.cpp
   trunk/qt/classes/qpaintevent.cpp
   trunk/qt/classes/qresizeevent.cpp
   trunk/qt/classes/qshortcutevent.cpp
   trunk/qt/classes/qshowevent.cpp
   trunk/qt/classes/qstatustipevent.cpp
   trunk/qt/classes/qtabletevent.cpp
   trunk/qt/classes/qtime.cpp
   trunk/qt/classes/qtimer.cpp
   trunk/qt/classes/qtoolbarchangeevent.cpp
   trunk/qt/classes/qwhatsthisclickedevent.cpp
   trunk/qt/classes/qwheelevent.cpp
   trunk/qt/classes/qwidgetdata.cpp
   trunk/qt/classes/qwidgetitem.cpp
   trunk/qt/classes/qwindowstatechangeevent.cpp
Log:
a lot of bugfixes were done.

Modified: trunk/qt/ag_extern_zend_class_entry.inc
===================================================================
--- trunk/qt/ag_extern_zend_class_entry.inc	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/ag_extern_zend_class_entry.inc	2006-01-15 18:04:39 UTC (rev 181)
@@ -44,8 +44,6 @@
 void 	_register_QInputEvent();
 extern zend_class_entry *QInputMethodEvent_ce_ptr;
 void 	_register_QInputMethodEvent();
-extern zend_class_entry *Attribute_ce_ptr;
-void 	_register_Attribute();
 extern zend_class_entry *QKeyEvent_ce_ptr;
 void 	_register_QKeyEvent();
 extern zend_class_entry *QLabel_ce_ptr;

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-01-15 18:04:39 UTC (rev 181)
@@ -300,7 +300,7 @@
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce,"QDropEvent",QDropEvent_methods);
     QDropEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
-//	zend_do_inheritance(QDropEvent_ce_ptr, QMimeSource_ce_ptr TSRMLS_CC);
+	zend_do_inheritance(QDropEvent_ce_ptr, QMimeSource_ce_ptr TSRMLS_CC);
 
 
 }
@@ -577,7 +577,7 @@
 	ZEND_ME(QLabel,qt_cast,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,metaObject,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,setScaledContents,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PROTECTED)
 	ZEND_ME(QLabel,indent,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,qt_emit,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,pixmap,NULL,ZEND_ACC_PUBLIC)

Modified: trunk/qt/ag_zend_class_entry.inc
===================================================================
--- trunk/qt/ag_zend_class_entry.inc	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/ag_zend_class_entry.inc	2006-01-15 18:04:39 UTC (rev 181)
@@ -21,7 +21,6 @@
 zend_class_entry *QIconDragEvent_ce_ptr;
 zend_class_entry *QInputEvent_ce_ptr;
 zend_class_entry *QInputMethodEvent_ce_ptr;
-zend_class_entry *Attribute_ce_ptr;
 zend_class_entry *QKeyEvent_ce_ptr;
 zend_class_entry *QLabel_ce_ptr;
 zend_class_entry *QLatin1Char_ce_ptr;

Modified: trunk/qt/ag_zend_php_qt.inc
===================================================================
--- trunk/qt/ag_zend_php_qt.inc	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/ag_zend_php_qt.inc	2006-01-15 18:04:39 UTC (rev 181)
@@ -254,7 +254,6 @@
 ZEND_METHOD(QInputMethodEvent, setCommitString);
 ZEND_METHOD(QInputMethodEvent, replacementLength);
 ZEND_METHOD(QInputMethodEvent, preeditString);
-ZEND_METHOD(Attribute, __construct);
 ZEND_METHOD(QKeyEvent, count);
 ZEND_METHOD(QKeyEvent, text);
 ZEND_METHOD(QKeyEvent, isAutoRepeat);

Modified: trunk/qt/classes/qactionevent.cpp
===================================================================
--- trunk/qt/classes/qactionevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qactionevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QActionEvent.cpp - QActionEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -44,7 +44,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QActionEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -63,7 +63,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QActionEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qchar.cpp
===================================================================
--- trunk/qt/classes/qchar.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qchar.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QChar.cpp - QChar PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 15:31:03 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -174,10 +174,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QChar, combiningClass){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
-			RETURN_CHAR* (obj->combiningClass());
-	}*/
+			RETURN_STRING((char*) obj->combiningClass(), 1);
+	}
 }
 
 /*********************************
@@ -214,10 +214,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QChar, row){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
-			RETURN_CHAR* (obj->row());
-	}*/
+			RETURN_STRING((char*) obj->row(), 1);
+	}
 }
 
 /*********************************
@@ -234,24 +234,22 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* char c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QChar *obj = (QChar*) PHP_QT_FETCH();
 
 						
 			QChar *QChar_ptr = new QChar((char) var_l_0);
 			PHP_QT_REGISTER(QChar_ptr);
 			RETURN_NULL();
 		}
-		/* o */
+		/* o public*/
 		zval* z_var_o_2;   // default: 
 
 		/* QLatin1Char ch,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_2) == SUCCESS) {
-			QChar *obj = (QChar*) PHP_QT_FETCH();
 			QObject* var_o_2 = (QObject*) php_qt_fetch(z_var_o_2);
 
 			QString tmp_o_0(var_o_2->metaObject()->className());
@@ -260,17 +258,7 @@
 /*				QChar *QChar_ptr = new QChar((QLatin1Char) var_o_2);
 			PHP_QT_REGISTER(QChar_ptr);
 */			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "ushort") {
-/*				QChar *QChar_ptr = new QChar((ushort) var_o_2);
-			PHP_QT_REGISTER(QChar_ptr);
-*/			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "short") {
-/*				QChar *QChar_ptr = new QChar((short) var_o_2);
-			PHP_QT_REGISTER(QChar_ptr);
-*/			RETURN_NULL();
-			}			
+			}									
 			if(tmp_o_0 == "SpecialCharacter") {
 /*				QChar *QChar_ptr = new QChar((SpecialCharacter) var_o_2);
 			PHP_QT_REGISTER(QChar_ptr);
@@ -280,13 +268,12 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
-		/* uchar c, uchar r,  */
+		/* unsigned char c, unsigned char r,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
-			QChar *obj = (QChar*) PHP_QT_FETCH();
 
 			
 			QChar *QChar_ptr = new QChar((uchar) var_ll_0 ,(uchar) var_ll_1);
@@ -372,7 +359,7 @@
 ZEND_METHOD(QChar, fromLatin1){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* char c,  */
@@ -395,7 +382,7 @@
 ZEND_METHOD(QChar, fromAscii){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* char c,  */
@@ -463,7 +450,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QChar_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -580,7 +567,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QChar_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -608,10 +595,10 @@
 ZEND_METHOD(QChar, setRow){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
-		/* uchar row,  */
+		/* unsigned char row,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
@@ -642,10 +629,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QChar, cell){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
-			RETURN_CHAR* (obj->cell());
-	}*/
+			RETURN_STRING((char*) obj->cell(), 1);
+	}
 }
 
 /*********************************
@@ -670,10 +657,10 @@
 ZEND_METHOD(QChar, setCell){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
-		/* uchar cell,  */
+		/* unsigned char cell,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 

Modified: trunk/qt/classes/qcharref.cpp
===================================================================
--- trunk/qt/classes/qcharref.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qcharref.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QCharRef.cpp - QCharRef PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -51,10 +51,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QCharRef, combiningClass){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
-			RETURN_CHAR* (obj->combiningClass());
-	}*/
+			RETURN_STRING((char*) obj->combiningClass(), 1);
+	}
 }
 
 /*********************************
@@ -144,10 +144,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QCharRef, row){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
-			RETURN_CHAR* (obj->row());
-	}*/
+			RETURN_STRING((char*) obj->row(), 1);
+	}
 }
 
 /*********************************
@@ -159,10 +159,10 @@
 ZEND_METHOD(QCharRef, setRow){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
-		/* uchar row,  */
+		/* unsigned char row,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
 
@@ -206,10 +206,10 @@
  *    flags:    c
  */
 ZEND_METHOD(QCharRef, cell){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
-			RETURN_CHAR* (obj->cell());
-	}*/
+			RETURN_STRING((char*) obj->cell(), 1);
+	}
 }
 
 /*********************************
@@ -274,10 +274,10 @@
 ZEND_METHOD(QCharRef, setCell){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
-		/* uchar cell,  */
+		/* unsigned char cell,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
 
@@ -314,7 +314,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QCharRef_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -374,7 +374,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QCharRef_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qclipboardevent.cpp
===================================================================
--- trunk/qt/classes/qclipboardevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qclipboardevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QClipboardEvent.cpp - QClipboardEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -44,7 +44,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QClipboardEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qcloseevent.cpp
===================================================================
--- trunk/qt/classes/qcloseevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qcloseevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QCloseEvent.cpp - QCloseEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qcontextmenuevent.cpp
===================================================================
--- trunk/qt/classes/qcontextmenuevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qcontextmenuevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QContextMenuEvent.cpp - QContextMenuEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -34,8 +34,8 @@
 
 /*		public enumReason:long {
 			Reason = 0,
-			Reason = 1,
-			Reason = 2
+			Reason = 0,
+			Reason = 0,
 		}
 */
 /*********************************
@@ -85,16 +85,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QContextMenuEvent, pos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QContextMenuEvent *obj = (QContextMenuEvent*) PHP_QT_FETCH();
 			const QPoint& return_object = (const QPoint&) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QContextMenuEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -117,16 +117,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QContextMenuEvent, globalPos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QContextMenuEvent *obj = (QContextMenuEvent*) PHP_QT_FETCH();
 			const QPoint& return_object = (const QPoint&) obj->globalPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QContextMenuEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************

Modified: trunk/qt/classes/qdate.cpp
===================================================================
--- trunk/qt/classes/qdate.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qdate.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDate.cpp - QDate PHP implementation.
- * begin           : Mon Jan  9 00:33:12 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QDate, longDayName){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int weekday,  */
@@ -52,7 +52,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -111,7 +111,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* lll */
+		/* lll public*/
 		long var_lll_0;    // default: 
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
@@ -135,7 +135,7 @@
 ZEND_METHOD(QDate, setYMD){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* lll */
+		/* lll public*/
 		long var_lll_0;    // default: 
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
@@ -159,7 +159,7 @@
 ZEND_METHOD(QDate, shortMonthName){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int month,  */
@@ -171,7 +171,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -187,7 +187,7 @@
 ZEND_METHOD(QDate, toString){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: Qt::TextDate
 
 		/* int f,  */
@@ -199,26 +199,26 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
-		/* o */
-		zval* z_var_o_1;   // default: 
+		/* o public*/
+		zval* z_var_o_0;   // default: 
 
 		/* const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
+			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
-				QString return_object = (QString) obj->toString((const QString&) var_o_1);
+			if(tmp_o_0 == "const QString") {
+				QString return_object = (QString) obj->toString((const QString&) var_o_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -235,7 +235,7 @@
 ZEND_METHOD(QDate, isLeapYear){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int year,  */
@@ -257,7 +257,7 @@
 ZEND_METHOD(QDate, fromJulianDay){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int jd,  */
@@ -269,7 +269,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -289,7 +289,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -304,7 +304,7 @@
 ZEND_METHOD(QDate, addDays){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int days,  */
@@ -316,7 +316,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -345,7 +345,7 @@
 ZEND_METHOD(QDate, gregorianToJulian){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* lll */
+		/* lll public*/
 		long var_lll_0;    // default: 
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
@@ -369,7 +369,7 @@
 ZEND_METHOD(QDate, longMonthName){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int month,  */
@@ -381,7 +381,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -397,13 +397,13 @@
 ZEND_METHOD(QDate, julianToGregorian){
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 
 		long var_llll_3;    // default: 
 
-		/* uint jd, int& y, int& m, int& d,  */
+		/* unsigned int jd, int y, int m, int d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
@@ -428,14 +428,13 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* lll */
+		/* lll public*/
 		long var_lll_0;    // default: 
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: 
 
 		/* int y, int m, int d,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
-			QDate *obj = (QDate*) PHP_QT_FETCH();
 
 			
 			QDate *QDate_ptr = new QDate((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2);
@@ -454,7 +453,7 @@
 ZEND_METHOD(QDate, shortDayName){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int weekday,  */
@@ -466,7 +465,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -482,7 +481,7 @@
 ZEND_METHOD(QDate, fromString){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::TextDate
 
@@ -493,35 +492,35 @@
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QString&") {
+			if(tmp_ol_0 == "const QString") {
 				QDate return_object = (QDate) obj->fromString((const QString&) var_ol_0, (Qt::DateFormat) var_ol_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
 		}
-		/* oo */
-		zval* z_var_oo_2;   // default: 
-		zval* z_var_oo_3;   // default: 
+		/* oo public*/
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
 
 		/* const QString& s, const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_2, &z_var_oo_3) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QDate *obj = (QDate*) PHP_QT_FETCH();
-			QObject* var_oo_2 = (QObject*) php_qt_fetch(z_var_oo_2);
-			QObject* var_oo_3 = (QObject*) php_qt_fetch(z_var_oo_3);
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-			QString tmp_oo_0(var_oo_2->metaObject()->className());
-			QString tmp_oo_1(var_oo_3->metaObject()->className());
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
-				QDate return_object = (QDate) obj->fromString((const QString&) var_oo_2, (const QString&) var_oo_3);
+			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
+				QDate return_object = (QDate) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -551,7 +550,7 @@
 ZEND_METHOD(QDate, weekNumber){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 0
 
 		/* int* yearNum,  */
@@ -573,7 +572,7 @@
 ZEND_METHOD(QDate, addMonths){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int months,  */
@@ -585,7 +584,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -614,7 +613,7 @@
 ZEND_METHOD(QDate, addYears){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int years,  */
@@ -626,7 +625,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -642,7 +641,7 @@
 ZEND_METHOD(QDate, daysTo){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QDate& ,  */
@@ -652,7 +651,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QDate&") {
+			if(tmp_o_0 == "const QDate") {
 				RETURN_LONG(obj->daysTo((const QDate&) var_o_0));
 			}
 		}

Modified: trunk/qt/classes/qdatetime.cpp
===================================================================
--- trunk/qt/classes/qdatetime.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qdatetime.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDateTime.cpp - QDateTime PHP implementation.
- * begin           : Mon Jan  9 00:33:12 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -44,7 +44,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -63,7 +63,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -91,7 +91,7 @@
 ZEND_METHOD(QDateTime, toString){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: Qt::TextDate
 
 		/* int f,  */
@@ -103,26 +103,26 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
-		/* o */
-		zval* z_var_o_1;   // default: 
+		/* o public*/
+		zval* z_var_o_0;   // default: 
 
 		/* const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
+			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
-				QString return_object = (QString) obj->toString((const QString&) var_o_1);
+			if(tmp_o_0 == "const QString") {
+				QString return_object = (QString) obj->toString((const QString&) var_o_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -152,10 +152,10 @@
 ZEND_METHOD(QDateTime, setTime_t){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
-		/* uint secsSince1Jan1970UTC,  */
+		/* unsigned int secsSince1Jan1970UTC,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
@@ -175,7 +175,7 @@
 ZEND_METHOD(QDateTime, addDays){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int days,  */
@@ -187,7 +187,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -203,7 +203,7 @@
 ZEND_METHOD(QDateTime, secsTo){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QDateTime& ,  */
@@ -213,7 +213,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QDateTime&") {
+			if(tmp_o_0 == "const QDateTime") {
 				RETURN_LONG(obj->secsTo((const QDateTime&) var_o_0));
 			}
 		}
@@ -229,7 +229,7 @@
 ZEND_METHOD(QDateTime, toTimeSpec){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int spec,  */
@@ -241,7 +241,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -257,7 +257,7 @@
 ZEND_METHOD(QDateTime, fromString){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::TextDate
 
@@ -268,35 +268,35 @@
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QString&") {
+			if(tmp_ol_0 == "const QString") {
 				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_ol_0, (Qt::DateFormat) var_ol_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
 		}
-		/* oo */
-		zval* z_var_oo_2;   // default: 
-		zval* z_var_oo_3;   // default: 
+		/* oo public*/
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
 
 		/* const QString& s, const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_2, &z_var_oo_3) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_oo_2 = (QObject*) php_qt_fetch(z_var_oo_2);
-			QObject* var_oo_3 = (QObject*) php_qt_fetch(z_var_oo_3);
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-			QString tmp_oo_0(var_oo_2->metaObject()->className());
-			QString tmp_oo_1(var_oo_3->metaObject()->className());
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
-				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_oo_2, (const QString&) var_oo_3);
+			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
+				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -313,13 +313,7 @@
 ZEND_METHOD(QDateTime, timeSpec){
 	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			Qt::TimeSpec return_object = (Qt::TimeSpec) obj->timeSpec();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QDateTime_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->timeSpec());
 	}
 }
 
@@ -332,7 +326,7 @@
 ZEND_METHOD(QDateTime, setTime){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QTime& time,  */
@@ -342,7 +336,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QTime&") {
+			if(tmp_o_0 == "const QTime") {
 				obj->setTime((const QTime&) var_o_0);
 			RETURN_NULL();
 			}
@@ -359,7 +353,7 @@
 ZEND_METHOD(QDateTime, addMonths){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int months,  */
@@ -371,7 +365,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -392,22 +386,21 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QDate& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QDate&") {
+			if(tmp_o_0 == "const QDate") {
 				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) var_o_0);
 			PHP_QT_REGISTER(QDateTime_ptr);
 			RETURN_NULL();
 			}			
-			if(tmp_o_0 == "const QDateTime&") {
+			if(tmp_o_0 == "const QDateTime") {
 				QDateTime *QDateTime_ptr = new QDateTime((const QDateTime&) var_o_0);
 			PHP_QT_REGISTER(QDateTime_ptr);
 			RETURN_NULL();
@@ -416,21 +409,20 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* ool */
+		/* ool public*/
 		zval* z_var_ool_0;   // default: 
 		zval* z_var_ool_1;   // default: 
 		long var_ool_2;    // default: Qt::LocalTime
 
 		/* const QDate& , const QTime& , int spec,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
-			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
 			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
 
 			QString tmp_ool_0(var_ool_0->metaObject()->className());
 			QString tmp_ool_1(var_ool_1->metaObject()->className());
 			
-			if(tmp_ool_0 == "const QDate&" && tmp_ool_1 == "const QTime&") {
+			if(tmp_ool_0 == "const QDate" && tmp_ool_1 == "const QTime") {
 				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) var_ool_0, (const QTime&) var_ool_1, (Qt::TimeSpec) var_ool_2);
 			PHP_QT_REGISTER(QDateTime_ptr);
 			RETURN_NULL();
@@ -448,7 +440,7 @@
 ZEND_METHOD(QDateTime, addSecs){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int secs,  */
@@ -460,7 +452,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -476,7 +468,7 @@
 ZEND_METHOD(QDateTime, setDate){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QDate& date,  */
@@ -486,7 +478,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QDate&") {
+			if(tmp_o_0 == "const QDate") {
 				obj->setDate((const QDate&) var_o_0);
 			RETURN_NULL();
 			}
@@ -507,7 +499,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -522,7 +514,7 @@
 ZEND_METHOD(QDateTime, daysTo){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QDateTime& ,  */
@@ -532,7 +524,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QDateTime&") {
+			if(tmp_o_0 == "const QDateTime") {
 				RETURN_LONG(obj->daysTo((const QDateTime&) var_o_0));
 			}
 		}
@@ -548,7 +540,7 @@
 ZEND_METHOD(QDateTime, addYears){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int years,  */
@@ -560,7 +552,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -593,7 +585,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -612,7 +604,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -627,7 +619,7 @@
 ZEND_METHOD(QDateTime, setTimeSpec){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int spec,  */

Modified: trunk/qt/classes/qdragenterevent.cpp
===================================================================
--- trunk/qt/classes/qdragenterevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qdragenterevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragEnterEvent.cpp - QDragEnterEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qdragleaveevent.cpp
===================================================================
--- trunk/qt/classes/qdragleaveevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qdragleaveevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragLeaveEvent.cpp - QDragLeaveEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qdragmoveevent.cpp
===================================================================
--- trunk/qt/classes/qdragmoveevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qdragmoveevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragMoveEvent.cpp - QDragMoveEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -45,7 +45,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QRect& r,  */
@@ -55,7 +55,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QRect&") {
+			if(tmp_o_0 == "const QRect") {
 				obj->accept((const QRect&) var_o_0);
 			RETURN_NULL();
 			}
@@ -76,7 +76,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDragMoveEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -96,7 +96,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QRect& r,  */
@@ -106,7 +106,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QRect&") {
+			if(tmp_o_0 == "const QRect") {
 				obj->ignore((const QRect&) var_o_0);
 			RETURN_NULL();
 			}

Modified: trunk/qt/classes/qdragresponseevent.cpp
===================================================================
--- trunk/qt/classes/qdragresponseevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qdragresponseevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragResponseEvent.cpp - QDragResponseEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qdropevent.cpp
===================================================================
--- trunk/qt/classes/qdropevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qdropevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDropEvent.cpp - QDropEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -39,18 +39,21 @@
  */
 ZEND_METHOD(QDropEvent, encodedData){
 
-/*	if (ZEND_NUM_ARGS() == 1){
-
+	if (ZEND_NUM_ARGS() == 1){
+		/* s public*/
 		char* var_s_0;   // default: 
 		int len_s_0;
 
+
+		/* const char* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 
 			
-			RETURN_BYTE[](obj->encodedData( (const char*) var_s_0));
+		// bytearray, skipped
+		RETURN_NULL();
 		}
-	}*/
+	}
 }
 
 /*********************************
@@ -66,7 +69,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -85,7 +88,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -100,7 +103,7 @@
 ZEND_METHOD(QDropEvent, setDropAction){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int action,  */
@@ -137,13 +140,7 @@
 ZEND_METHOD(QDropEvent, dropAction){
 	if (ZEND_NUM_ARGS() == 0){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
-			Qt::DropAction return_object = (Qt::DropAction) obj->dropAction();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QDropEvent_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->dropAction());
 	}
 }
 
@@ -160,7 +157,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -175,7 +172,7 @@
 ZEND_METHOD(QDropEvent, provides){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
+		/* s public*/
 		char* var_s_0;   // default: 
 		int len_s_0;
 
@@ -199,7 +196,7 @@
 ZEND_METHOD(QDropEvent, format){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 0
 
 		/* int n,  */
@@ -211,7 +208,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -231,7 +228,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -246,13 +243,7 @@
 ZEND_METHOD(QDropEvent, proposedAction){
 	if (ZEND_NUM_ARGS() == 0){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
-			Qt::DropAction return_object = (Qt::DropAction) obj->proposedAction();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QDropEvent_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->proposedAction());
 	}
 }
 
@@ -263,16 +254,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QDropEvent, pos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 			const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -288,7 +279,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qfileopenevent.cpp
===================================================================
--- trunk/qt/classes/qfileopenevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qfileopenevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFileOpenEvent.cpp - QFileOpenEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -44,7 +44,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFileOpenEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qfocusevent.cpp
===================================================================
--- trunk/qt/classes/qfocusevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qfocusevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFocusEvent.cpp - QFocusEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -57,7 +57,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFocusEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qfont.cpp
===================================================================
--- trunk/qt/classes/qfont.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qfont.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFont.cpp - QFont PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -30,6 +30,7 @@
 #include <QFont>
 #include "../php_qt.h"
 
+#include <QStringList>
 
 
 /*		public enumStyleHint:long {
@@ -97,15 +98,15 @@
 ZEND_METHOD(QFont, setOverline){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
 			
-			obj->setOverline((bool) var_b_0);
+			obj->setOverline((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -120,7 +121,7 @@
 ZEND_METHOD(QFont, insertSubstitution){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
+		/* oo public*/
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
@@ -133,7 +134,7 @@
 			QString tmp_oo_0(var_oo_0->metaObject()->className());
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
+			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
 				obj->insertSubstitution((const QString&) var_oo_0, (const QString&) var_oo_1);
 			RETURN_NULL();
 			}
@@ -176,15 +177,15 @@
 ZEND_METHOD(QFont, setKerning){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
 			
-			obj->setKerning((bool) var_b_0);
+			obj->setKerning((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -212,7 +213,7 @@
 ZEND_METHOD(QFont, removeSubstitution){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
@@ -222,7 +223,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
+			if(tmp_o_0 == "const QString") {
 				obj->removeSubstitution((const QString&) var_o_0);
 			RETURN_NULL();
 			}
@@ -239,7 +240,7 @@
 ZEND_METHOD(QFont, substitute){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
@@ -249,12 +250,12 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
+			if(tmp_o_0 == "const QString") {
 				QString return_object = (QString) obj->substitute((const QString&) var_o_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -271,15 +272,15 @@
 ZEND_METHOD(QFont, setBold){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
 			
-			obj->setBold((bool) var_b_0);
+			obj->setBold((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -298,10 +299,10 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
-		/* uint mask,  */
+		/* unsigned int mask,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
@@ -309,22 +310,22 @@
 			obj->resolve((uint) var_l_0);
 			RETURN_NULL();
 		}
-		/* o */
-		zval* z_var_o_1;   // default: 
+		/* o public*/
+		zval* z_var_o_0;   // default: 
 
 		/* const QFont& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
+			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QFont&") {
-				QFont return_object = (QFont) obj->resolve((const QFont&) var_o_1);
+			if(tmp_o_0 == "const QFont") {
+				QFont return_object = (QFont) obj->resolve((const QFont&) var_o_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -380,7 +381,7 @@
 ZEND_METHOD(QFont, insertSubstitutions){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
+		/* oo public*/
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
@@ -393,7 +394,7 @@
 			QString tmp_oo_0(var_oo_0->metaObject()->className());
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QStringList&") {
+			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QStringList") {
 				obj->insertSubstitutions((const QString&) var_oo_0, (const QStringList&) var_oo_1);
 			RETURN_NULL();
 			}
@@ -414,7 +415,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -429,15 +430,15 @@
 ZEND_METHOD(QFont, setStrikeOut){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
 			
-			obj->setStrikeOut((bool) var_b_0);
+			obj->setStrikeOut((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -492,7 +493,7 @@
 ZEND_METHOD(QFont, fromString){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
@@ -502,7 +503,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
+			if(tmp_o_0 == "const QString") {
 				RETURN_BOOL(obj->fromString((const QString&) var_o_0));
 			}
 		}
@@ -531,7 +532,7 @@
 ZEND_METHOD(QFont, setWeight){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -571,7 +572,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -585,22 +586,19 @@
  */
 ZEND_METHOD(QFont, setStyle){
 
-/*	if (ZEND_NUM_ARGS() == 1){
-		zval* z_var_o_0;   // default: 
+	if (ZEND_NUM_ARGS() == 1){
+		/* o public*/
+		long var_o_0;    // default: 
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		/* QFont::Style style,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "Style") {
-				obj->setStyle((Style) var_o_0);
+			obj->setStyle((QFont::Style) var_o_0);
 			RETURN_NULL();
-			}
 		}
-	}*/
+	}
 }
 
 /*********************************
@@ -616,7 +614,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -631,15 +629,15 @@
 ZEND_METHOD(QFont, setUnderline){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
 			
-			obj->setUnderline((bool) var_b_0);
+			obj->setUnderline((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -658,7 +656,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -673,7 +671,7 @@
 ZEND_METHOD(QFont, isCopyOf){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QFont& ,  */
@@ -683,7 +681,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QFont&") {
+			if(tmp_o_0 == "const QFont") {
 				RETURN_BOOL(obj->isCopyOf((const QFont&) var_o_0));
 			}
 		}
@@ -711,28 +709,28 @@
  */
 ZEND_METHOD(QFont, substitutes){
 
-/*	if (ZEND_NUM_ARGS() == 1){
-
+	if (ZEND_NUM_ARGS() == 1){
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
-
+		/* const QString& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
+			if(tmp_o_0 == "const QString") {
 				QStringList return_object = (QStringList) obj->substitutes((const QString&) var_o_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
 		}
-	}*/
+	}
 }
 
 /*********************************
@@ -744,7 +742,7 @@
 ZEND_METHOD(QFont, setStretch){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -785,7 +783,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -804,7 +802,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -819,15 +817,15 @@
 ZEND_METHOD(QFont, setRawMode){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
 			
-			obj->setRawMode((bool) var_b_0);
+			obj->setRawMode((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -854,24 +852,20 @@
  */
 ZEND_METHOD(QFont, setStyleHint){
 
-/*	if (ZEND_NUM_ARGS() == 2){
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: PreferDefault
 
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: PreferDefault
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+		/* int , int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
-			if(tmp_lo_0 == "StyleStrategy") {
-				obj->setStyleHint((StyleHint) var_lo_0, (StyleStrategy) var_lo_1);
+			obj->setStyleHint((QFont::StyleHint) var_ll_0 ,(QFont::StyleStrategy) var_ll_1);
 			RETURN_NULL();
-			}
 		}
-	}*/
+	}
 }
 
 /*********************************
@@ -881,16 +875,16 @@
  *    flags:    s
  */
 ZEND_METHOD(QFont, substitutions){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QStringList return_object = (QStringList) obj->substitutions();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -902,7 +896,7 @@
 ZEND_METHOD(QFont, setFamily){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
@@ -912,7 +906,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
+			if(tmp_o_0 == "const QString") {
 				obj->setFamily((const QString&) var_o_0);
 			RETURN_NULL();
 			}
@@ -934,17 +928,16 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QFont& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QFont&") {
+			if(tmp_o_0 == "const QFont") {
 				QFont *QFont_ptr = new QFont((const QFont&) var_o_0);
 			PHP_QT_REGISTER(QFont_ptr);
 			RETURN_NULL();
@@ -953,18 +946,17 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
-		/* const QFont& , QPaintDevice* pd,  */
+		/* const QFont& , qt_QPaintDevice* pd,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
-			QFont *obj = (QFont*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QFont&") {
+			if(tmp_ol_0 == "const QFont") {
 				QFont *QFont_ptr = new QFont((const QFont&) var_ol_0, (QPaintDevice*) var_ol_1);
 			PHP_QT_REGISTER(QFont_ptr);
 			RETURN_NULL();
@@ -973,21 +965,20 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* ollb */
-		zval* z_var_ollb_0;   // default: 
-		long var_ollb_1;    // default: -1
-		long var_ollb_2;    // default: -1
-		bool var_ollb_3;   // _default: false
+		/* olll public*/
+		zval* z_var_olll_0;   // default: 
+		long var_olll_1;    // default: -1
+		long var_olll_2;    // default: -1
+		long var_olll_3;    // default: false
 
-		/* const QString& family, int pointSize, int weight, bool italic,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|b|", &z_var_ollb_0, &var_ollb_1, &var_ollb_2, &var_ollb_3) == SUCCESS) {
-			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_ollb_0 = (QObject*) php_qt_fetch(z_var_ollb_0);
+		/* const QString& family, int pointSize, int weight, int italic,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|l|", &z_var_olll_0, &var_olll_1, &var_olll_2, &var_olll_3) == SUCCESS) {
+			QObject* var_olll_0 = (QObject*) php_qt_fetch(z_var_olll_0);
 
-			QString tmp_ollb_0(var_ollb_0->metaObject()->className());
+			QString tmp_olll_0(var_olll_0->metaObject()->className());
 			
-			if(tmp_ollb_0 == "const QString&") {
-				QFont *QFont_ptr = new QFont((const QString&) var_ollb_0, (int) var_ollb_1, (int) var_ollb_2, (bool) var_ollb_3);
+			if(tmp_olll_0 == "const QString") {
+				QFont *QFont_ptr = new QFont((const QString&) var_olll_0, (int) var_olll_1, (int) var_olll_2, (bool) var_olll_3);
 			PHP_QT_REGISTER(QFont_ptr);
 			RETURN_NULL();
 			}
@@ -1017,8 +1008,13 @@
 ZEND_METHOD(QFont, style){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			obj->style();
-			RETURN_NULL();
+			QFont::Style return_object = (QFont::Style) obj->style();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QFont_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 
@@ -1031,7 +1027,7 @@
 ZEND_METHOD(QFont, setPointSize){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -1054,7 +1050,7 @@
 ZEND_METHOD(QFont, setRawName){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
@@ -1064,7 +1060,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
+			if(tmp_o_0 == "const QString") {
 				obj->setRawName((const QString&) var_o_0);
 			RETURN_NULL();
 			}
@@ -1080,23 +1076,19 @@
  */
 ZEND_METHOD(QFont, setStyleStrategy){
 
-/*	if (ZEND_NUM_ARGS() == 1){
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
 
-		zval* z_var_o_0;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		/* int s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "StyleStrategy") {
-				obj->setStyleStrategy((StyleStrategy) var_o_0);
+			obj->setStyleStrategy((QFont::StyleStrategy) var_l_0);
 			RETURN_NULL();
-			}
 		}
-	}*/
+	}
 }
 
 /*********************************
@@ -1122,7 +1114,7 @@
 ZEND_METHOD(QFont, setPixelSize){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -1145,15 +1137,15 @@
 ZEND_METHOD(QFont, setFixedPitch){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
 			
-			obj->setFixedPitch((bool) var_b_0);
+			obj->setFixedPitch((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -1168,15 +1160,15 @@
 ZEND_METHOD(QFont, setItalic){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool b,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int b,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
 			
-			obj->setItalic((bool) var_b_0);
+			obj->setItalic((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -1208,7 +1200,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1227,7 +1219,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1255,8 +1247,7 @@
 ZEND_METHOD(QFont, pointSizeF){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			obj->pointSizeF();
-			RETURN_NULL();
+			RETURN_DOUBLE(obj->pointSizeF());
 	}
 }
 
@@ -1268,23 +1259,19 @@
  */
 ZEND_METHOD(QFont, setPointSizeF){
 
-/*	if (ZEND_NUM_ARGS() == 1){
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
 
-		zval* z_var_o_0;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		/* double ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "qreal") {
-				obj->setPointSizeF((qreal) var_o_0);
+			obj->setPointSizeF((qreal) var_l_0);
 			RETURN_NULL();
-			}
 		}
-	}*/
+	}
 }
 
 

Modified: trunk/qt/classes/qgridlayout.cpp
===================================================================
--- trunk/qt/classes/qgridlayout.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qgridlayout.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QGridLayout.cpp - QGridLayout PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QGridLayout, tr){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
+		/* ss public*/
 		char* var_ss_0;   // default: 
 		int len_ss_0;
 
@@ -57,7 +57,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -73,25 +73,48 @@
 ZEND_METHOD(QGridLayout, addLayout){
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* olll */
+		/* olll public*/
 		zval* z_var_olll_0;   // default: 
 		long var_olll_1;    // default: 
 		long var_olll_2;    // default: 
 		long var_olll_3;    // default: 0
 
-		/* QLayout* , int row, int column, int ,  */
+		/* qt_QLayout* , int row, int column, int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olll|", &z_var_olll_0, &var_olll_1, &var_olll_2, &var_olll_3) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_olll_0 = (QObject*) php_qt_fetch(z_var_olll_0);
 
 			QString tmp_olll_0(var_olll_0->metaObject()->className());
 			
-			if(tmp_olll_0 == "QLayout*") {
+			if(tmp_olll_0 == "QLayout") {
 				obj->addLayout((QLayout*) var_olll_0, (int) var_olll_1, (int) var_olll_2, (Qt::Alignment) var_olll_3);
 			RETURN_NULL();
 			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 6){
+		/* olllll public*/
+		zval* z_var_olllll_0;   // default: 
+		long var_olllll_1;    // default: 
+		long var_olllll_2;    // default: 
+		long var_olllll_3;    // default: 
+		long var_olllll_4;    // default: 
+		long var_olllll_5;    // default: 0
+
+		/* qt_QLayout* , int row, int column, int rowSpan, int columnSpan, int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olllll|", &z_var_olllll_0, &var_olllll_1, &var_olllll_2, &var_olllll_3, &var_olllll_4, &var_olllll_5) == SUCCESS) {
+			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+			QObject* var_olllll_0 = (QObject*) php_qt_fetch(z_var_olllll_0);
+
+			QString tmp_olllll_0(var_olllll_0->metaObject()->className());
+			
+			if(tmp_olllll_0 == "QLayout") {
+				obj->addLayout((QLayout*) var_olllll_0, (int) var_olllll_1, (int) var_olllll_2, (int) var_olllll_3, (int) var_olllll_4, (Qt::Alignment) var_olllll_5);
+			RETURN_NULL();
+			}
+		}
+	}
 }
 
 /*********************************
@@ -108,20 +131,19 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
-		/* QWidget* parent,  */
+		/* qt_QWidget* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-//			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
 			if(tmp_o_0 == "QWidget") {
 				QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget*) var_o_0);
-				PHP_QT_REGISTER(QGridLayout_ptr);
-				RETURN_NULL();
+			PHP_QT_REGISTER(QGridLayout_ptr);
+			RETURN_NULL();
 			}
 		}
 	}
@@ -135,23 +157,8 @@
  */
 ZEND_METHOD(QGridLayout, qt_invoke){
 
-/*	if (ZEND_NUM_ARGS() == 2){
-
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 2){
+	}
 }
 
 /*********************************
@@ -162,23 +169,32 @@
  */
 ZEND_METHOD(QGridLayout, addItem){
 
-/*	if (ZEND_NUM_ARGS() == 1){
+	if (ZEND_NUM_ARGS() == 1){
+		/* o protected*/
+	}
 
-		zval* z_var_o_0;   // default: 
+	if (ZEND_NUM_ARGS() == 6){
+		/* olllll public*/
+		zval* z_var_olllll_0;   // default: 
+		long var_olllll_1;    // default: 
+		long var_olllll_2;    // default: 
+		long var_olllll_3;    // default: 1
+		long var_olllll_4;    // default: 1
+		long var_olllll_5;    // default: 0
 
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		/* qt_QLayoutItem* item, int row, int column, int rowSpan, int columnSpan, int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olll|l|l|", &z_var_olllll_0, &var_olllll_1, &var_olllll_2, &var_olllll_3, &var_olllll_4, &var_olllll_5) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* var_olllll_0 = (QObject*) php_qt_fetch(z_var_olllll_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
+			QString tmp_olllll_0(var_olllll_0->metaObject()->className());
 			
-			if(tmp_o_0 == "QLayoutItem*") {
-				obj->addItem((QLayoutItem*) var_o_0);
+			if(tmp_olllll_0 == "QLayoutItem") {
+				obj->addItem((QLayoutItem*) var_olllll_0, (int) var_olllll_1, (int) var_olllll_2, (int) var_olllll_3, (int) var_olllll_4, (Qt::Alignment) var_olllll_5);
 			RETURN_NULL();
 			}
 		}
-	}*/
+	}
 }
 
 /*********************************
@@ -190,7 +206,7 @@
 ZEND_METHOD(QGridLayout, rowMinimumHeight){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int row,  */
@@ -212,7 +228,7 @@
 ZEND_METHOD(QGridLayout, setOriginCorner){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -234,21 +250,8 @@
  */
 ZEND_METHOD(QGridLayout, qt_cast){
 
-/*	if (ZEND_NUM_ARGS() == 1){
-
-		char* var_s_0;   // default: 
-		int len_s_0;
-
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-
-			
-			obj->qt_cast( (const char*) var_s_0);
-			RETURN_NULL();
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 1){
+	}
 }
 
 /*********************************
@@ -264,7 +267,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -292,13 +295,7 @@
 ZEND_METHOD(QGridLayout, originCorner){
 	if (ZEND_NUM_ARGS() == 0){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			Qt::Corner return_object = (Qt::Corner) obj->originCorner();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->originCorner());
 	}
 }
 
@@ -325,7 +322,7 @@
 ZEND_METHOD(QGridLayout, setGeometry){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QRect& ,  */
@@ -335,7 +332,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QRect&") {
+			if(tmp_o_0 == "const QRect") {
 				obj->setGeometry((const QRect&) var_o_0);
 			RETURN_NULL();
 			}
@@ -351,23 +348,8 @@
  */
 ZEND_METHOD(QGridLayout, qt_emit){
 
-/*	if (ZEND_NUM_ARGS() == 2){
-
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 2){
+	}
 }
 
 /*********************************
@@ -379,7 +361,7 @@
 ZEND_METHOD(QGridLayout, setRowStretch){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -403,7 +385,7 @@
 ZEND_METHOD(QGridLayout, getItemPosition){
 
 	if (ZEND_NUM_ARGS() == 5){
-		/* lllll */
+		/* lllll public*/
 		long var_lllll_0;    // default: 
 		long var_lllll_1;    // default: 
 		long var_lllll_2;    // default: 
@@ -430,7 +412,7 @@
 ZEND_METHOD(QGridLayout, setDefaultPositioning){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -452,16 +434,6 @@
  *    flags:    cv
  */
 ZEND_METHOD(QGridLayout, className){
-/*	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			const char * return_object = (const char *) obj->className();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}*/
 }
 
 /*********************************
@@ -473,7 +445,7 @@
 ZEND_METHOD(QGridLayout, columnStretch){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int column,  */
@@ -495,10 +467,10 @@
 ZEND_METHOD(QGridLayout, addWidget){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
-		/* QWidget* w,  */
+		/* qt_QWidget* w,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
@@ -507,34 +479,54 @@
 			
 			if(tmp_o_0 == "QWidget") {
 				obj->addWidget((QWidget*) var_o_0);
-			  php_error(E_WARNING,"added");
-				RETURN_NULL();
-			} else {
-			  php_error(E_WARNING,"error");
+			RETURN_NULL();
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* olll */
+		/* olll public*/
 		zval* z_var_olll_0;   // default: 
 		long var_olll_1;    // default: 
 		long var_olll_2;    // default: 
 		long var_olll_3;    // default: 0
 
-		/* QWidget* , int row, int column, int ,  */
+		/* qt_QWidget* , int row, int column, int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olll|", &z_var_olll_0, &var_olll_1, &var_olll_2, &var_olll_3) == SUCCESS) {
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 			QObject* var_olll_0 = (QObject*) php_qt_fetch(z_var_olll_0);
 
 			QString tmp_olll_0(var_olll_0->metaObject()->className());
 			
-			if(tmp_olll_0 == "QWidget*") {
+			if(tmp_olll_0 == "QWidget") {
 				obj->addWidget((QWidget*) var_olll_0, (int) var_olll_1, (int) var_olll_2, (Qt::Alignment) var_olll_3);
 			RETURN_NULL();
 			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 6){
+		/* olllll public*/
+		zval* z_var_olllll_0;   // default: 
+		long var_olllll_1;    // default: 
+		long var_olllll_2;    // default: 
+		long var_olllll_3;    // default: 
+		long var_olllll_4;    // default: 
+		long var_olllll_5;    // default: 0
+
+		/* qt_QWidget* , int row, int column, int rowSpan, int columnSpan, int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olllll|", &z_var_olllll_0, &var_olllll_1, &var_olllll_2, &var_olllll_3, &var_olllll_4, &var_olllll_5) == SUCCESS) {
+			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+			QObject* var_olllll_0 = (QObject*) php_qt_fetch(z_var_olllll_0);
+
+			QString tmp_olllll_0(var_olllll_0->metaObject()->className());
+			
+			if(tmp_olllll_0 == "QWidget") {
+				obj->addWidget((QWidget*) var_olllll_0, (int) var_olllll_1, (int) var_olllll_2, (int) var_olllll_3, (int) var_olllll_4, (Qt::Alignment) var_olllll_5);
+			RETURN_NULL();
+			}
+		}
+	}
 }
 
 /*********************************
@@ -546,7 +538,7 @@
 ZEND_METHOD(QGridLayout, takeAt){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -558,7 +550,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -572,16 +564,6 @@
  *    flags:    s
  */
 ZEND_METHOD(QGridLayout, staticMetaObject){
-/*	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}*/
 }
 
 /*********************************
@@ -593,7 +575,7 @@
 ZEND_METHOD(QGridLayout, itemAt){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -605,7 +587,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -619,16 +601,6 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, qObject){
-/*	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* return_object = (QObject*) obj->qObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}*/
 }
 
 /*********************************
@@ -644,7 +616,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -663,7 +635,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -678,7 +650,7 @@
 ZEND_METHOD(QGridLayout, setColumnMinimumWidth){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -702,7 +674,7 @@
 ZEND_METHOD(QGridLayout, heightForWidth){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -737,7 +709,7 @@
 ZEND_METHOD(QGridLayout, setColumnStretch){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -774,7 +746,7 @@
 ZEND_METHOD(QGridLayout, columnMinimumWidth){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int column,  */
@@ -796,7 +768,7 @@
 ZEND_METHOD(QGridLayout, cellRect){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -809,7 +781,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -838,7 +810,7 @@
 ZEND_METHOD(QGridLayout, setRowMinimumHeight){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -862,7 +834,7 @@
 ZEND_METHOD(QGridLayout, trUtf8){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
+		/* ss public*/
 		char* var_ss_0;   // default: 
 		int len_ss_0;
 
@@ -879,7 +851,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -899,7 +871,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -913,24 +885,8 @@
  */
 ZEND_METHOD(QGridLayout, qt_property){
 
-/*	if (ZEND_NUM_ARGS() == 3){
-
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
-
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "QVariant*") {
-				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
-			}
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 3){
+	}
 }
 
 /*********************************
@@ -942,7 +898,7 @@
 ZEND_METHOD(QGridLayout, minimumHeightForWidth){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -968,7 +924,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -983,7 +939,7 @@
 ZEND_METHOD(QGridLayout, rowStretch){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int row,  */

Modified: trunk/qt/classes/qhelpevent.cpp
===================================================================
--- trunk/qt/classes/qhelpevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qhelpevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHelpEvent.cpp - QHelpEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -64,16 +64,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QHelpEvent, pos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QHelpEvent *obj = (QHelpEvent*) PHP_QT_FETCH();
 			const QPoint& return_object = (const QPoint&) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QHelpEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -96,16 +96,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QHelpEvent, globalPos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QHelpEvent *obj = (QHelpEvent*) PHP_QT_FETCH();
 			const QPoint& return_object = (const QPoint&) obj->globalPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QHelpEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************

Modified: trunk/qt/classes/qhideevent.cpp
===================================================================
--- trunk/qt/classes/qhideevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qhideevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHideEvent.cpp - QHideEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qhoverevent.cpp
===================================================================
--- trunk/qt/classes/qhoverevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qhoverevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHoverEvent.cpp - QHoverEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,16 +38,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QHoverEvent, oldPos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QHoverEvent *obj = (QHoverEvent*) PHP_QT_FETCH();
 			const QPoint & return_object = (const QPoint &) obj->oldPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QHoverEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -57,16 +57,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QHoverEvent, pos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QHoverEvent *obj = (QHoverEvent*) PHP_QT_FETCH();
 			const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QHoverEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 

Modified: trunk/qt/classes/qicondragevent.cpp
===================================================================
--- trunk/qt/classes/qicondragevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qicondragevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QIconDragEvent.cpp - QIconDragEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qinputevent.cpp
===================================================================
--- trunk/qt/classes/qinputevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qinputevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QInputEvent.cpp - QInputEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -44,7 +44,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QInputEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qinputmethodevent.cpp
===================================================================
--- trunk/qt/classes/qinputmethodevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qinputmethodevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QInputMethodEvent.cpp - QInputMethodEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -34,9 +34,9 @@
 
 /*		public enumAttributeType:long {
 			AttributeType = 0,
-			AttributeType = 1,
-			AttributeType = 2,
-			AttributeType = 3
+			AttributeType = 0,
+			AttributeType = 0,
+			AttributeType = 0,
 		}
 */
 /*********************************
@@ -46,16 +46,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QInputMethodEvent, commitString){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
 			const QString & return_object = (const QString &) obj->commitString();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -80,7 +80,7 @@
 ZEND_METHOD(QInputMethodEvent, setCommitString){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* oll */
+		/* oll public*/
 		zval* z_var_oll_0;   // default: 
 		long var_oll_1;    // default: 0
 		long var_oll_2;    // default: 0
@@ -92,7 +92,7 @@
 
 			QString tmp_oll_0(var_oll_0->metaObject()->className());
 			
-			if(tmp_oll_0 == "const QString&") {
+			if(tmp_oll_0 == "const QString") {
 				obj->setCommitString((const QString&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
 			RETURN_NULL();
 			}
@@ -120,16 +120,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QInputMethodEvent, preeditString){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
 			const QString & return_object = (const QString &) obj->preeditString();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 

Modified: trunk/qt/classes/qkeyevent.cpp
===================================================================
--- trunk/qt/classes/qkeyevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qkeyevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QKeyEvent.cpp - QKeyEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -57,7 +57,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QKeyEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -89,7 +89,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QKeyEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qlabel.cpp
===================================================================
--- trunk/qt/classes/qlabel.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qlabel.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLabel.cpp - QLabel PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QLabel, tr){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
+		/* ss public*/
 		char* var_ss_0;   // default: 
 		int len_ss_0;
 
@@ -57,7 +57,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -73,7 +73,7 @@
 ZEND_METHOD(QLabel, setMargin){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -109,23 +109,8 @@
  */
 ZEND_METHOD(QLabel, qt_invoke){
 
-/*	if (ZEND_NUM_ARGS() == 2){
-
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 2){
+	}
 }
 
 /*********************************
@@ -137,17 +122,17 @@
 ZEND_METHOD(QLabel, setBuddy){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
-		/* QWidget* ,  */
+		/* qt_QWidget* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "QWidget*") {
+			if(tmp_o_0 == "QWidget") {
 				obj->setBuddy((QWidget*) var_o_0);
 			RETURN_NULL();
 			}
@@ -168,7 +153,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -195,21 +180,8 @@
  */
 ZEND_METHOD(QLabel, qt_cast){
 
-/*	if (ZEND_NUM_ARGS() == 1){
-
-		char* var_s_0;   // default: 
-		int len_s_0;
-
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-
-			
-			obj->qt_cast( (const char*) var_s_0);
-			RETURN_NULL();
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 1){
+	}
 }
 
 /*********************************
@@ -225,7 +197,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -240,15 +212,15 @@
 ZEND_METHOD(QLabel, setScaledContents){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
 			
-			obj->setScaledContents((bool) var_b_0);
+			obj->setScaledContents((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -262,22 +234,9 @@
  */
 ZEND_METHOD(QLabel, event){
 
-/*	if (ZEND_NUM_ARGS() == 1){
-
-		zval* z_var_o_0;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
-
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QEvent*") {
-				RETURN_BOOL(obj->event((QEvent*) var_o_0));
-			}
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 1){
+		/* o protected*/
+	}
 }
 
 /*********************************
@@ -301,23 +260,8 @@
  */
 ZEND_METHOD(QLabel, qt_emit){
 
-/*	if (ZEND_NUM_ARGS() == 2){
-
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 2){
+	}
 }
 
 /*********************************
@@ -333,7 +277,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -348,7 +292,7 @@
 ZEND_METHOD(QLabel, setAlignment){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -369,16 +313,6 @@
  *    flags:    cv
  */
 ZEND_METHOD(QLabel, className){
-/*	if (ZEND_NUM_ARGS() == 0){
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			const char * return_object = (const char *) obj->className();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLabel_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}*/
 }
 
 /*********************************
@@ -394,7 +328,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -409,13 +343,7 @@
 ZEND_METHOD(QLabel, textFormat){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			Qt::TextFormat return_object = (Qt::TextFormat) obj->textFormat();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLabel_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->textFormat());
 	}
 }
 
@@ -428,17 +356,17 @@
 ZEND_METHOD(QLabel, setMovie){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public_slots*/
 		zval* z_var_o_0;   // default: 
 
-		/* QMovie* movie,  */
+		/* qt_QMovie* movie,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "QMovie*") {
+			if(tmp_o_0 == "QMovie") {
 				obj->setMovie((QMovie*) var_o_0);
 			RETURN_NULL();
 			}
@@ -455,7 +383,7 @@
 ZEND_METHOD(QLabel, setPicture){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public_slots*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QPicture& ,  */
@@ -465,7 +393,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QPicture&") {
+			if(tmp_o_0 == "const QPicture") {
 				obj->setPicture((const QPicture&) var_o_0);
 			RETURN_NULL();
 			}
@@ -482,32 +410,17 @@
 ZEND_METHOD(QLabel, setNum){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public_slots*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
+						
 			obj->setNum((int) var_l_0);
 			RETURN_NULL();
 		}
-		/* o */
-/*		zval* z_var_o_1;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
-
-			QString tmp_o_0(var_o_1->metaObject()->className());
-			
-			if(tmp_o_0 == "double") {
-				obj->setNum((double) var_o_1);
-			RETURN_NULL();
-			}
-		}*/
 	}
 }
 
@@ -531,16 +444,6 @@
  *    flags:    s
  */
 ZEND_METHOD(QLabel, staticMetaObject){
-/*	if (ZEND_NUM_ARGS() == 0){
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLabel_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}*/
 }
 
 /*********************************
@@ -552,7 +455,7 @@
 ZEND_METHOD(QLabel, setTextFormat){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -573,16 +476,6 @@
  *    flags:    
  */
 ZEND_METHOD(QLabel, qObject){
-/*	if (ZEND_NUM_ARGS() == 0){
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* return_object = (QObject*) obj->qObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLabel_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}*/
 }
 
 /*********************************
@@ -594,7 +487,7 @@
 ZEND_METHOD(QLabel, setText){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public_slots*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
@@ -604,7 +497,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
+			if(tmp_o_0 == "const QString") {
 				obj->setText((const QString&) var_o_0);
 			RETURN_NULL();
 			}
@@ -625,7 +518,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -640,13 +533,7 @@
 ZEND_METHOD(QLabel, alignment){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			Qt::Alignment return_object = (Qt::Alignment) obj->alignment();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLabel_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->alignment());
 	}
 }
 
@@ -663,7 +550,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -682,7 +569,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -697,7 +584,7 @@
 ZEND_METHOD(QLabel, heightForWidth){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -719,7 +606,7 @@
 ZEND_METHOD(QLabel, setPixmap){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public_slots*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QPixmap& ,  */
@@ -729,7 +616,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QPixmap&") {
+			if(tmp_o_0 == "const QPixmap") {
 				obj->setPixmap((const QPixmap&) var_o_0);
 			RETURN_NULL();
 			}
@@ -750,7 +637,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -765,15 +652,15 @@
 ZEND_METHOD(QLabel, setWordWrap){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool on,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int on,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
 			
-			obj->setWordWrap((bool) var_b_0);
+			obj->setWordWrap((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -788,7 +675,7 @@
 ZEND_METHOD(QLabel, trUtf8){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
+		/* ss public*/
 		char* var_ss_0;   // default: 
 		int len_ss_0;
 
@@ -805,7 +692,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -820,24 +707,8 @@
  */
 ZEND_METHOD(QLabel, qt_property){
 
-/*	if (ZEND_NUM_ARGS() == 3){
-
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
-
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "QVariant*") {
-				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
-			}
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 3){
+	}
 }
 
 /*********************************
@@ -849,18 +720,17 @@
 ZEND_METHOD(QLabel, __construct){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 0
 		long var_ol_1;    // default: 0
 
-		/* QWidget* parent, int f,  */
+		/* qt_QWidget* parent, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|l|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "QWidget*") {
+			if(tmp_ol_0 == "QWidget") {
 				QLabel *QLabel_ptr = new QLabel((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
 			PHP_QT_REGISTER(QLabel_ptr);
 			RETURN_NULL();
@@ -869,21 +739,20 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* ool */
+		/* ool public*/
 		zval* z_var_ool_0;   // default: 
 		zval* z_var_ool_1;   // default: 0
 		long var_ool_2;    // default: 0
 
-		/* const QString& text, QWidget* parent, int f,  */
+		/* const QString& text, qt_QWidget* parent, int f,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|l|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
-			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
 			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
 
 			QString tmp_ool_0(var_ool_0->metaObject()->className());
 			QString tmp_ool_1(var_ool_1->metaObject()->className());
 			
-			if(tmp_ool_0 == "const QString&" && tmp_ool_1 == "QWidget*") {
+			if(tmp_ool_0 == "const QString" && tmp_ool_1 == "QWidget") {
 				QLabel *QLabel_ptr = new QLabel((const QString&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
 			PHP_QT_REGISTER(QLabel_ptr);
 			RETURN_NULL();
@@ -901,7 +770,7 @@
 ZEND_METHOD(QLabel, setIndent){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */

Modified: trunk/qt/classes/qlatin1char.cpp
===================================================================
--- trunk/qt/classes/qlatin1char.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qlatin1char.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLatin1Char.cpp - QLatin1Char PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -54,12 +54,11 @@
 ZEND_METHOD(QLatin1Char, __construct){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* char c,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QLatin1Char *obj = (QLatin1Char*) PHP_QT_FETCH();
 
 			
 			QLatin1Char *QLatin1Char_ptr = new QLatin1Char((char) var_l_0);

Modified: trunk/qt/classes/qmouseevent.cpp
===================================================================
--- trunk/qt/classes/qmouseevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qmouseevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QMouseEvent.cpp - QMouseEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -64,16 +64,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QMouseEvent, globalPos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QMouseEvent *obj = (QMouseEvent*) PHP_QT_FETCH();
 			const QPoint & return_object = (const QPoint &) obj->globalPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMouseEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -109,16 +109,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QMouseEvent, pos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QMouseEvent *obj = (QMouseEvent*) PHP_QT_FETCH();
 			const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMouseEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -134,7 +134,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMouseEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -153,7 +153,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMouseEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qmoveevent.cpp
===================================================================
--- trunk/qt/classes/qmoveevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qmoveevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QMoveEvent.cpp - QMoveEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,16 +38,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QMoveEvent, oldPos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QMoveEvent *obj = (QMoveEvent*) PHP_QT_FETCH();
 			const QPoint & return_object = (const QPoint &) obj->oldPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMoveEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -57,16 +57,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QMoveEvent, pos){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QMoveEvent *obj = (QMoveEvent*) PHP_QT_FETCH();
 			const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMoveEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 

Modified: trunk/qt/classes/qobjectdata.cpp
===================================================================
--- trunk/qt/classes/qobjectdata.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qobjectdata.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QObjectData.cpp - QObjectData PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 15:31:03 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -32,6 +32,5 @@
 
 
 
-
 PHP_QT_DESTRUCT(QObjectData);
 

Modified: trunk/qt/classes/qobjectuserdata.cpp
===================================================================
--- trunk/qt/classes/qobjectuserdata.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qobjectuserdata.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QObjectUserData.cpp - QObjectUserData PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 15:31:03 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -31,5 +31,6 @@
 #include "../php_qt.h"
 
 
+
 PHP_QT_DESTRUCT(QObjectUserData);
 

Modified: trunk/qt/classes/qpainter.cpp
===================================================================
--- trunk/qt/classes/qpainter.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qpainter.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QPainter.cpp - QPainter PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:34:37 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -30,28 +30,29 @@
 #include <QPainter>
 #include "../php_qt.h"
 
+#include <QPainterPath>
 
 
 /*		public enumRenderHint:long {
 			Antialiasing = 0x01,
 			TextAntialiasing = 0x02,
-			SmoothPixmapTransform = 0x04
+			SmoothPixmapTransform = 0x04,
 		}
 */
 
 /*		public enumCompositionMode:long {
 			CompositionMode = 0,
-			CompositionMode = 1,
-			CompositionMode = 2,
-			CompositionMode = 3,
-			CompositionMode = 4,
-			CompositionMode = 5,
-			CompositionMode = 6,
-			CompositionMode = 7,
-			CompositionMode = 8,
-			CompositionMode = 9,
-			CompositionMode = 10,
-			CompositionMode = 11
+			CompositionMode = 0,
+			CompositionMode = 0,
+			CompositionMode = 0,
+			CompositionMode = 0,
+			CompositionMode = 0,
+			CompositionMode = 0,
+			CompositionMode = 0,
+			CompositionMode = 0,
+			CompositionMode = 0,
+			CompositionMode = 0,
+			CompositionMode = 0,
 		}
 */
 /*********************************
@@ -63,7 +64,7 @@
 ZEND_METHOD(QPainter, eraseRect){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QRectF& ,  */
@@ -73,11 +74,11 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QRectF&") {
+			if(tmp_o_0 == "const QRectF") {
 				obj->eraseRect((const QRectF&) var_o_0);
 			RETURN_NULL();
 			}			
-			if(tmp_o_0 == "const QRect&") {
+			if(tmp_o_0 == "const QRect") {
 				obj->eraseRect((const QRect&) var_o_0);
 			RETURN_NULL();
 			}
@@ -85,7 +86,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 
@@ -111,7 +112,7 @@
 ZEND_METHOD(QPainter, setClipPath){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: Qt::ReplaceClip
 
@@ -147,26 +148,20 @@
  */
 ZEND_METHOD(QPainter, shear){
 
-/*	if (ZEND_NUM_ARGS() == 2){
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
 
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		/* double sh, double sv,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "qreal" && tmp_oo_1 == "qreal") {
-				obj->shear((qreal) var_oo_0, (qreal) var_oo_1);
+			obj->shear((qreal) var_ll_0 ,(qreal) var_ll_1);
 			RETURN_NULL();
-			}
 		}
-	}*/
+	}
 }
 
 /*********************************
@@ -206,7 +201,7 @@
 ZEND_METHOD(QPainter, initFrom){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QWidget* widget,  */
@@ -216,7 +211,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QWidget*") {
+			if(tmp_o_0 == "const QWidget") {
 				obj->initFrom((const QWidget*) var_o_0);
 			RETURN_NULL();
 			}
@@ -237,7 +232,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -252,7 +247,7 @@
 ZEND_METHOD(QPainter, setLayoutDirection){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int direction,  */
@@ -275,21 +270,21 @@
 ZEND_METHOD(QPainter, setBrushOrigin){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* const QPoint& ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-						
+			
 			obj->setBrushOrigin((const QPoint&) var_l_0);
 			RETURN_NULL();
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -311,16 +306,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QPainter, pen){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 			const QPen & return_object = (const QPen &) obj->pen();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -332,7 +327,7 @@
 ZEND_METHOD(QPainter, drawRects){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
@@ -343,7 +338,7 @@
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QRectF*") {
+			if(tmp_ol_0 == "const QRectF") {
 				obj->drawRects((const QRectF*) var_ol_0, (int) var_ol_1);
 			RETURN_NULL();
 			}
@@ -360,7 +355,7 @@
 ZEND_METHOD(QPainter, drawPath){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* const QPainterPath& path,  */
@@ -383,7 +378,7 @@
 ZEND_METHOD(QPainter, fillPath){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
+		/* lo public*/
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
@@ -394,7 +389,7 @@
 
 			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
-			if(tmp_lo_0 == "const QBrush&") {
+			if(tmp_lo_0 == "const QBrush") {
 				obj->fillPath((const QPainterPath&) var_lo_0, (const QBrush&) var_lo_1);
 			RETURN_NULL();
 			}
@@ -411,20 +406,16 @@
 ZEND_METHOD(QPainter, rotate){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* qreal a,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		/* double a,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-/*			if(tmp_o_0 == "qreal") {
-				obj->rotate((qreal) var_o_0);
+			obj->rotate((qreal) var_l_0);
 			RETURN_NULL();
-			}*/
 		}
 	}
 }
@@ -438,7 +429,7 @@
 ZEND_METHOD(QPainter, drawPie){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* oll */
+		/* oll public*/
 		zval* z_var_oll_0;   // default: 
 		long var_oll_1;    // default: 
 		long var_oll_2;    // default: 
@@ -450,16 +441,35 @@
 
 			QString tmp_oll_0(var_oll_0->metaObject()->className());
 			
-			if(tmp_oll_0 == "const QRectF&") {
+			if(tmp_oll_0 == "const QRectF") {
 				obj->drawPie((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
 			RETURN_NULL();
 			}			
-/*			if(tmp_oll_0 == "const QRect&") {
-				obj->drawPie((const QRect&) var_oll_0, (int) var_oll_4, (int) var_oll_5);
+			if(tmp_oll_0 == "const QRect") {
+				obj->drawPie((const QRect&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
 			RETURN_NULL();
-			}*/
+			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 6){
+		/* llllll public*/
+		long var_llllll_0;    // default: 
+		long var_llllll_1;    // default: 
+		long var_llllll_2;    // default: 
+		long var_llllll_3;    // default: 
+		long var_llllll_4;    // default: 
+		long var_llllll_5;    // default: 
+
+		/* int x, int y, int w, int h, int a, int alen,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_llllll_0, &var_llllll_1, &var_llllll_2, &var_llllll_3, &var_llllll_4, &var_llllll_5) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+
+			
+			obj->drawPie((int) var_llllll_0 ,(int) var_llllll_1 ,(int) var_llllll_2 ,(int) var_llllll_3 ,(int) var_llllll_4 ,(int) var_llllll_5);
+			RETURN_NULL();
+		}
+	}
 }
 
 /*********************************
@@ -471,37 +481,31 @@
 ZEND_METHOD(QPainter, translate){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* const QPointF& offset,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-						
+			
 			obj->translate((const QPointF&) var_l_0);
 			RETURN_NULL();
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
 
-		/* qreal dx, qreal dy,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		/* double dx, double dy,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-/*			if(tmp_oo_0 == "qreal" && tmp_oo_1 == "qreal") {
-				obj->translate((qreal) var_oo_0, (qreal) var_oo_1);
+			obj->translate((qreal) var_ll_0 ,(qreal) var_ll_1);
 			RETURN_NULL();
-			}*/
 		}
 	}
 }
@@ -515,20 +519,16 @@
 ZEND_METHOD(QPainter, setCompositionMode){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* CompositionMode mode,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		/* QPainter::CompositionMode mode,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-/*			if(tmp_o_0 == "CompositionMode") {
-				obj->setCompositionMode((CompositionMode) var_o_0);
+			obj->setCompositionMode((QPainter::CompositionMode) var_l_0);
 			RETURN_NULL();
-			}*/
 		}
 	}
 }
@@ -542,7 +542,7 @@
 ZEND_METHOD(QPainter, setWindow){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QRect& window,  */
@@ -552,7 +552,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QRect&") {
+			if(tmp_o_0 == "const QRect") {
 				obj->setWindow((const QRect&) var_o_0);
 			RETURN_NULL();
 			}
@@ -560,7 +560,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 
@@ -590,7 +590,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -605,7 +605,7 @@
 ZEND_METHOD(QPainter, drawPixmap){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
+		/* oo public*/
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
@@ -618,35 +618,31 @@
 			QString tmp_oo_0(var_oo_0->metaObject()->className());
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QRect&" && tmp_oo_1 == "const QPixmap&") {
+			if(tmp_oo_0 == "const QRect" && tmp_oo_1 == "const QPixmap") {
 				obj->drawPixmap((const QRect&) var_oo_0, (const QPixmap&) var_oo_1);
 			RETURN_NULL();
 			}
 		}
-		/* lo */
-		long var_lo_2;    // default: 
-		zval* z_var_lo_3;   // default: 
+		/* lo public*/
+		long var_lo_0;    // default: 
+		zval* z_var_lo_1;   // default: 
 
 		/* const QPointF& p, const QPixmap& pm,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &z_var_lo_3) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lo_3 = (QObject*) php_qt_fetch(z_var_lo_3);
+			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
 
-			QString tmp_lo_0(var_lo_3->metaObject()->className());
+			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
-			if(tmp_lo_0 == "const QPixmap&") {
-				obj->drawPixmap((const QPointF&) var_lo_2, (const QPixmap&) var_lo_3);
+			if(tmp_lo_0 == "const QPixmap") {
+				obj->drawPixmap((const QPointF&) var_lo_0, (const QPixmap&) var_lo_1);
 			RETURN_NULL();
-			}			
-/*			if(tmp_lo_0 == "const QPixmap&") {
-				obj->drawPixmap((const QPoint&) var_lo_4, (const QPixmap&) var_lo_3);
-			RETURN_NULL();
-			}*/
+			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* loo */
+		/* loo public*/
 		long var_loo_0;    // default: 
 		zval* z_var_loo_1;   // default: 
 		zval* z_var_loo_2;   // default: 
@@ -660,57 +656,53 @@
 			QString tmp_loo_0(var_loo_1->metaObject()->className());
 			QString tmp_loo_1(var_loo_2->metaObject()->className());
 			
-			if(tmp_loo_0 == "const QPixmap&" && tmp_loo_1 == "const QRectF&") {
+			if(tmp_loo_0 == "const QPixmap" && tmp_loo_1 == "const QRectF") {
 				obj->drawPixmap((const QPointF&) var_loo_0, (const QPixmap&) var_loo_1, (const QRectF&) var_loo_2);
 			RETURN_NULL();
-			}			
-/*			if(tmp_loo_0 == "const QPixmap&" && tmp_loo_1 == "const QRect&") {
-				obj->drawPixmap((const QPoint&) var_loo_3, (const QPixmap&) var_loo_1, (const QRect&) var_loo_2);
-			RETURN_NULL();
-			}*/
+			}
 		}
-		/* ooo */
-		zval* z_var_ooo_6;   // default: 
-		zval* z_var_ooo_7;   // default: 
-		zval* z_var_ooo_8;   // default: 
+		/* ooo public*/
+		zval* z_var_ooo_0;   // default: 
+		zval* z_var_ooo_1;   // default: 
+		zval* z_var_ooo_2;   // default: 
 
 		/* const QRectF& targetRect, const QPixmap& pixmap, const QRectF& sourceRect,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_6, &z_var_ooo_7, &z_var_ooo_8) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ooo_6 = (QObject*) php_qt_fetch(z_var_ooo_6);
-			QObject* var_ooo_7 = (QObject*) php_qt_fetch(z_var_ooo_7);
-			QObject* var_ooo_8 = (QObject*) php_qt_fetch(z_var_ooo_8);
+			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
+			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
+			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);
 
-			QString tmp_ooo_0(var_ooo_6->metaObject()->className());
-			QString tmp_ooo_1(var_ooo_7->metaObject()->className());
-			QString tmp_ooo_2(var_ooo_8->metaObject()->className());
+			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
+			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
+			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
 			
-			if(tmp_ooo_0 == "const QRectF&" && tmp_ooo_1 == "const QPixmap&" && tmp_ooo_2 == "const QRectF&") {
-				obj->drawPixmap((const QRectF&) var_ooo_6, (const QPixmap&) var_ooo_7, (const QRectF&) var_ooo_8);
+			if(tmp_ooo_0 == "const QRectF" && tmp_ooo_1 == "const QPixmap" && tmp_ooo_2 == "const QRectF") {
+				obj->drawPixmap((const QRectF&) var_ooo_0, (const QPixmap&) var_ooo_1, (const QRectF&) var_ooo_2);
 			RETURN_NULL();
 			}
 		}
-		/* llo */
-		long var_llo_9;    // default: 
-		long var_llo_10;    // default: 
-		zval* z_var_llo_11;   // default: 
+		/* llo public*/
+		long var_llo_0;    // default: 
+		long var_llo_1;    // default: 
+		zval* z_var_llo_2;   // default: 
 
 		/* int x, int y, const QPixmap& pm,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_9, &var_llo_10, &z_var_llo_11) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llo_11 = (QObject*) php_qt_fetch(z_var_llo_11);
+			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
 
-			QString tmp_llo_0(var_llo_11->metaObject()->className());
+			QString tmp_llo_0(var_llo_2->metaObject()->className());
 			
-			if(tmp_llo_0 == "const QPixmap&") {
-				obj->drawPixmap((int) var_llo_9, (int) var_llo_10, (const QPixmap&) var_llo_11);
+			if(tmp_llo_0 == "const QPixmap") {
+				obj->drawPixmap((int) var_llo_0, (int) var_llo_1, (const QPixmap&) var_llo_2);
 			RETURN_NULL();
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 5){
-		/* llllo */
+		/* llllo public*/
 		long var_llllo_0;    // default: 
 		long var_llllo_1;    // default: 
 		long var_llllo_2;    // default: 
@@ -724,12 +716,62 @@
 
 			QString tmp_llllo_0(var_llllo_4->metaObject()->className());
 			
-			if(tmp_llllo_0 == "const QPixmap&") {
+			if(tmp_llllo_0 == "const QPixmap") {
 				obj->drawPixmap((int) var_llllo_0, (int) var_llllo_1, (int) var_llllo_2, (int) var_llllo_3, (const QPixmap&) var_llllo_4);
 			RETURN_NULL();
 			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 7){
+		/* llollll public*/
+		long var_llollll_0;    // default: 
+		long var_llollll_1;    // default: 
+		zval* z_var_llollll_2;   // default: 
+		long var_llollll_3;    // default: 
+		long var_llollll_4;    // default: 
+		long var_llollll_5;    // default: 
+		long var_llollll_6;    // default: 
+
+		/* int x, int y, const QPixmap& pm, int sx, int sy, int sw, int sh,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llollll", &var_llollll_0, &var_llollll_1, &z_var_llollll_2, &var_llollll_3, &var_llollll_4, &var_llollll_5, &var_llollll_6) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+			QObject* var_llollll_2 = (QObject*) php_qt_fetch(z_var_llollll_2);
+
+			QString tmp_llollll_0(var_llollll_2->metaObject()->className());
+			
+			if(tmp_llollll_0 == "const QPixmap") {
+				obj->drawPixmap((int) var_llollll_0, (int) var_llollll_1, (const QPixmap&) var_llollll_2, (int) var_llollll_3, (int) var_llollll_4, (int) var_llollll_5, (int) var_llollll_6);
+			RETURN_NULL();
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 9){
+		/* llllollll public*/
+		long var_llllollll_0;    // default: 
+		long var_llllollll_1;    // default: 
+		long var_llllollll_2;    // default: 
+		long var_llllollll_3;    // default: 
+		zval* z_var_llllollll_4;   // default: 
+		long var_llllollll_5;    // default: 
+		long var_llllollll_6;    // default: 
+		long var_llllollll_7;    // default: 
+		long var_llllollll_8;    // default: 
+
+		/* int x, int y, int w, int h, const QPixmap& pm, int sx, int sy, int sw, int sh,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllollll", &var_llllollll_0, &var_llllollll_1, &var_llllollll_2, &var_llllollll_3, &z_var_llllollll_4, &var_llllollll_5, &var_llllollll_6, &var_llllollll_7, &var_llllollll_8) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+			QObject* var_llllollll_4 = (QObject*) php_qt_fetch(z_var_llllollll_4);
+
+			QString tmp_llllollll_0(var_llllollll_4->metaObject()->className());
+			
+			if(tmp_llllollll_0 == "const QPixmap") {
+				obj->drawPixmap((int) var_llllollll_0, (int) var_llllollll_1, (int) var_llllollll_2, (int) var_llllollll_3, (const QPixmap&) var_llllollll_4, (int) var_llllollll_5, (int) var_llllollll_6, (int) var_llllollll_7, (int) var_llllollll_8);
+			RETURN_NULL();
+			}
+		}
+	}
 }
 
 /*********************************
@@ -741,7 +783,7 @@
 ZEND_METHOD(QPainter, drawPolyline){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QPolygonF& polyline,  */
@@ -751,11 +793,11 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QPolygonF&") {
+			if(tmp_o_0 == "const QPolygonF") {
 				obj->drawPolyline((const QPolygonF&) var_o_0);
 			RETURN_NULL();
 			}			
-			if(tmp_o_0 == "const QPolygon&") {
+			if(tmp_o_0 == "const QPolygon") {
 				obj->drawPolyline((const QPolygon&) var_o_0);
 			RETURN_NULL();
 			}
@@ -763,7 +805,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -791,7 +833,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -806,7 +848,7 @@
 ZEND_METHOD(QPainter, drawLine){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QLineF& line,  */
@@ -816,7 +858,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QLineF&") {
+			if(tmp_o_0 == "const QLineF") {
 				obj->drawLine((const QLineF&) var_o_0);
 			RETURN_NULL();
 			}
@@ -824,7 +866,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -832,14 +874,14 @@
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-						
+			
 			obj->drawLine((const QPoint&) var_ll_0 ,(const QPoint&) var_ll_1);
 			RETURN_NULL();
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 
@@ -865,7 +907,7 @@
 ZEND_METHOD(QPainter, fillRect){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
+		/* oo public*/
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
@@ -878,11 +920,11 @@
 			QString tmp_oo_0(var_oo_0->metaObject()->className());
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QRectF&" && tmp_oo_1 == "const QBrush&") {
+			if(tmp_oo_0 == "const QRectF" && tmp_oo_1 == "const QBrush") {
 				obj->fillRect((const QRectF&) var_oo_0, (const QBrush&) var_oo_1);
 			RETURN_NULL();
 			}			
-			if(tmp_oo_0 == "const QRect&" && tmp_oo_1 == "const QBrush&") {
+			if(tmp_oo_0 == "const QRect" && tmp_oo_1 == "const QBrush") {
 				obj->fillRect((const QRect&) var_oo_0, (const QBrush&) var_oo_1);
 			RETURN_NULL();
 			}
@@ -890,7 +932,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 5){
-		/* llllo */
+		/* llllo public*/
 		long var_llllo_0;    // default: 
 		long var_llllo_1;    // default: 
 		long var_llllo_2;    // default: 
@@ -904,7 +946,7 @@
 
 			QString tmp_llllo_0(var_llllo_4->metaObject()->className());
 			
-			if(tmp_llllo_0 == "const QBrush&") {
+			if(tmp_llllo_0 == "const QBrush") {
 				obj->fillRect((int) var_llllo_0, (int) var_llllo_1, (int) var_llllo_2, (int) var_llllo_3, (const QBrush&) var_llllo_4);
 			RETURN_NULL();
 			}
@@ -921,7 +963,7 @@
 ZEND_METHOD(QPainter, boundingRect){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* ooo */
+		/* ooo public*/
 		zval* z_var_ooo_0;   // default: 
 		zval* z_var_ooo_1;   // default: 
 		zval* z_var_ooo_2;   // default: QTextOption()
@@ -937,45 +979,73 @@
 			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
 			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
 			
-			if(tmp_ooo_0 == "const QRectF&" && tmp_ooo_1 == "const QString&" && tmp_ooo_2 == "const QTextOption&") {
+			if(tmp_ooo_0 == "const QRectF" && tmp_ooo_1 == "const QString" && tmp_ooo_2 == "const QTextOption") {
 				obj->boundingRect((const QRectF&) var_ooo_0, (const QString&) var_ooo_1, (const QTextOption&) var_ooo_2);
 			RETURN_NULL();
 			}
 		}
-		/* olo */
-		zval* z_var_olo_3;   // default: 
-		long var_olo_4;    // default: 
-		zval* z_var_olo_5;   // default: 
+		/* olo public*/
+		zval* z_var_olo_0;   // default: 
+		long var_olo_1;    // default: 
+		zval* z_var_olo_2;   // default: 
 
 		/* const QRectF& rect, int flags, const QString& text,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &z_var_olo_3, &var_olo_4, &z_var_olo_5) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &z_var_olo_0, &var_olo_1, &z_var_olo_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_olo_3 = (QObject*) php_qt_fetch(z_var_olo_3);
-			QObject* var_olo_5 = (QObject*) php_qt_fetch(z_var_olo_5);
+			QObject* var_olo_0 = (QObject*) php_qt_fetch(z_var_olo_0);
+			QObject* var_olo_2 = (QObject*) php_qt_fetch(z_var_olo_2);
 
-			QString tmp_olo_0(var_olo_3->metaObject()->className());
-			QString tmp_olo_1(var_olo_5->metaObject()->className());
+			QString tmp_olo_0(var_olo_0->metaObject()->className());
+			QString tmp_olo_1(var_olo_2->metaObject()->className());
 			
-			if(tmp_olo_0 == "const QRectF&" && tmp_olo_1 == "const QString&") {
-/*				QRect return_object = (QRect) obj->boundingRect((const QRectF&) var_olo_3, (int) var_olo_4, (const QString&) var_olo_5);
+			if(tmp_olo_0 == "const QRectF" && tmp_olo_1 == "const QString") {
+/*				QRect return_object = (QRect) obj->boundingRect((const QRectF&) var_olo_0, (int) var_olo_1, (const QString&) var_olo_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   */
-				return;                                             
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+*/				return;                                             
 			}			
-			if(tmp_olo_0 == "const QRect&" && tmp_olo_1 == "const QString&") {
-/*				QRect return_object = (QRect) obj->boundingRect((const QRect&) var_olo_3, (int) var_olo_7, (const QString&) var_olo_5);
+			if(tmp_olo_0 == "const QRect" && tmp_olo_1 == "const QString") {
+				QRect return_object = (QRect) obj->boundingRect((const QRect&) var_olo_0, (int) var_olo_1, (const QString&) var_olo_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   */
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
 				return;                                             
 			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 6){
+		/* lllllo public*/
+		long var_lllllo_0;    // default: 
+		long var_lllllo_1;    // default: 
+		long var_lllllo_2;    // default: 
+		long var_lllllo_3;    // default: 
+		long var_lllllo_4;    // default: 
+		zval* z_var_lllllo_5;   // default: 
+
+		/* int x, int y, int w, int h, int flags, const QString& text,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllllo", &var_lllllo_0, &var_lllllo_1, &var_lllllo_2, &var_lllllo_3, &var_lllllo_4, &z_var_lllllo_5) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+			QObject* var_lllllo_5 = (QObject*) php_qt_fetch(z_var_lllllo_5);
+
+			QString tmp_lllllo_0(var_lllllo_5->metaObject()->className());
+			
+			if(tmp_lllllo_0 == "const QString") {
+				QRect return_object = (QRect) obj->boundingRect((int) var_lllllo_0, (int) var_lllllo_1, (int) var_lllllo_2, (int) var_lllllo_3, (int) var_lllllo_4, (const QString&) var_lllllo_5);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QPainter_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
 }
 
 /*********************************
@@ -987,7 +1057,7 @@
 ZEND_METHOD(QPainter, setClipRect){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::ReplaceClip
 
@@ -998,7 +1068,7 @@
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QRectF&") {
+			if(tmp_ol_0 == "const QRectF") {
 				obj->setClipRect((const QRectF&) var_ol_0, (Qt::ClipOperation) var_ol_1);
 			RETURN_NULL();
 			}
@@ -1006,7 +1076,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 5){
-		/* lllll */
+		/* lllll public*/
 		long var_lllll_0;    // default: 
 		long var_lllll_1;    // default: 
 		long var_lllll_2;    // default: 
@@ -1033,7 +1103,7 @@
 ZEND_METHOD(QPainter, drawImage){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
+		/* oo public*/
 		zval* z_var_oo_0;   // default: 
 		zval* z_var_oo_1;   // default: 
 
@@ -1046,77 +1116,100 @@
 			QString tmp_oo_0(var_oo_0->metaObject()->className());
 			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QRectF&" && tmp_oo_1 == "const QImage&") {
+			if(tmp_oo_0 == "const QRectF" && tmp_oo_1 == "const QImage") {
 				obj->drawImage((const QRectF&) var_oo_0, (const QImage&) var_oo_1);
 			RETURN_NULL();
 			}
 		}
-		/* lo */
-		long var_lo_2;    // default: 
-		zval* z_var_lo_3;   // default: 
+		/* lo public*/
+		long var_lo_0;    // default: 
+		zval* z_var_lo_1;   // default: 
 
 		/* const QPointF& p, const QImage& image,  */
-/*		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &z_var_lo_3) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lo_3 = (QObject*) php_qt_fetch(z_var_lo_3);
+			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
 
-			QString tmp_lo_0(var_lo_3->metaObject()->className());
+			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
-			if(tmp_lo_0 == "const QImage&") {
-				obj->drawImage((const QPointF&) var_lo_2, (const QImage&) var_lo_3);
+			if(tmp_lo_0 == "const QImage") {
+				obj->drawImage((const QPointF&) var_lo_0, (const QImage&) var_lo_1);
 			RETURN_NULL();
-			}			
-			if(tmp_lo_0 == "const QImage&") {
-				obj->drawImage((const QPoint&) var_lo_4, (const QImage&) var_lo_3);
-			RETURN_NULL();
 			}
-		}*/
+		}
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* oool */
-		zval* z_var_oool_0;   // default: 
-		zval* z_var_oool_1;   // default: 
-		zval* z_var_oool_2;   // default: 
-		long var_oool_3;    // default: Qt::AutoColor
+		/* looo public*/
+		long var_looo_0;    // default: 
+		zval* z_var_looo_1;   // default: 
+		zval* z_var_looo_2;   // default: 
+		zval* z_var_looo_3;   // default: Qt::AutoColor
 
-		/* const QRectF& targetRect, const QImage& image, const QRectF& sourceRect, int flags,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oool|", &z_var_oool_0, &z_var_oool_1, &z_var_oool_2, &var_oool_3) == SUCCESS) {
+		/* const QPointF& p, const QImage& image, const QRectF& sr, Qt::ImageConversionFlags flags,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"looo|", &var_looo_0, &z_var_looo_1, &z_var_looo_2, &z_var_looo_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oool_0 = (QObject*) php_qt_fetch(z_var_oool_0);
-			QObject* var_oool_1 = (QObject*) php_qt_fetch(z_var_oool_1);
-			QObject* var_oool_2 = (QObject*) php_qt_fetch(z_var_oool_2);
+			QObject* var_looo_1 = (QObject*) php_qt_fetch(z_var_looo_1);
+			QObject* var_looo_2 = (QObject*) php_qt_fetch(z_var_looo_2);
+			QObject* var_looo_3 = (QObject*) php_qt_fetch(z_var_looo_3);
 
-			QString tmp_oool_0(var_oool_0->metaObject()->className());
-			QString tmp_oool_1(var_oool_1->metaObject()->className());
-			QString tmp_oool_2(var_oool_2->metaObject()->className());
+			QString tmp_looo_0(var_looo_1->metaObject()->className());
+			QString tmp_looo_1(var_looo_2->metaObject()->className());
+			QString tmp_looo_2(var_looo_3->metaObject()->className());
 			
-			if(tmp_oool_0 == "const QRectF&" && tmp_oool_1 == "const QImage&" && tmp_oool_2 == "const QRectF&") {
-				obj->drawImage((const QRectF&) var_oool_0, (const QImage&) var_oool_1, (const QRectF&) var_oool_2, (Qt::ImageConversionFlags) var_oool_3);
+			if(tmp_looo_0 == "const QImage" && tmp_looo_1 == "const QRectF" && tmp_looo_2 == "Qt::ImageConversionFlags") {
+//				obj->drawImage((const QPointF&) var_looo_0, (const QImage&) var_looo_1, (const QRectF&) var_looo_2, (Qt::ImageConversionFlags) var_looo_3);
 			RETURN_NULL();
 			}
 		}
-		/* lool */
-		long var_lool_4;    // default: 
-		zval* z_var_lool_5;   // default: 
-		zval* z_var_lool_6;   // default: 
-		long var_lool_7;    // default: Qt::AutoColor
+		/* oooo public*/
+		zval* z_var_oooo_0;   // default: 
+		zval* z_var_oooo_1;   // default: 
+		zval* z_var_oooo_2;   // default: 
+		zval* z_var_oooo_3;   // default: Qt::AutoColor
 
-		/* const QPointF& p, const QImage& image, const QRectF& sr, int flags,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lool|", &var_lool_4, &z_var_lool_5, &z_var_lool_6, &var_lool_7) == SUCCESS) {
+		/* const QRectF& targetRect, const QImage& image, const QRectF& sourceRect, Qt::ImageConversionFlags flags,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo|", &z_var_oooo_0, &z_var_oooo_1, &z_var_oooo_2, &z_var_oooo_3) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lool_5 = (QObject*) php_qt_fetch(z_var_lool_5);
-			QObject* var_lool_6 = (QObject*) php_qt_fetch(z_var_lool_6);
+			QObject* var_oooo_0 = (QObject*) php_qt_fetch(z_var_oooo_0);
+			QObject* var_oooo_1 = (QObject*) php_qt_fetch(z_var_oooo_1);
+			QObject* var_oooo_2 = (QObject*) php_qt_fetch(z_var_oooo_2);
+			QObject* var_oooo_3 = (QObject*) php_qt_fetch(z_var_oooo_3);
 
-			QString tmp_lool_0(var_lool_5->metaObject()->className());
-			QString tmp_lool_1(var_lool_6->metaObject()->className());
+			QString tmp_oooo_0(var_oooo_0->metaObject()->className());
+			QString tmp_oooo_1(var_oooo_1->metaObject()->className());
+			QString tmp_oooo_2(var_oooo_2->metaObject()->className());
+			QString tmp_oooo_3(var_oooo_3->metaObject()->className());
 			
-			if(tmp_lool_0 == "const QImage&" && tmp_lool_1 == "const QRectF&") {
-				obj->drawImage((const QPointF&) var_lool_4, (const QImage&) var_lool_5, (const QRectF&) var_lool_6, (Qt::ImageConversionFlags) var_lool_7);
+			if(tmp_oooo_0 == "const QRectF" && tmp_oooo_1 == "const QImage" && tmp_oooo_2 == "const QRectF" && tmp_oooo_3 == "Qt::ImageConversionFlags") {
+//				obj->drawImage((const QRectF&) var_oooo_0, (const QImage&) var_oooo_1, (const QRectF&) var_oooo_2, (Qt::ImageConversionFlags) var_oooo_3);
 			RETURN_NULL();
-			}			
-			if(tmp_lool_0 == "const QImage&" && tmp_lool_1 == "const QRect&") {
-//				obj->drawImage((const QPoint&) var_lool_8, (const QImage&) var_lool_5, (const QRect&) var_lool_6, (Qt::ImageConversionFlags) var_lool_11);
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 8){
+		/* llollllo public*/
+		long var_llollllo_0;    // default: 
+		long var_llollllo_1;    // default: 
+		zval* z_var_llollllo_2;   // default: 
+		long var_llollllo_3;    // default: 0
+		long var_llollllo_4;    // default: 0
+		long var_llollllo_5;    // default: -1
+		long var_llollllo_6;    // default: -1
+		zval* z_var_llollllo_7;   // default: Qt::AutoColor
+
+		/* int x, int y, const QImage& image, int sx, int sy, int sw, int sh, Qt::ImageConversionFlags flags,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol|l|l|l|o|", &var_llollllo_0, &var_llollllo_1, &z_var_llollllo_2, &var_llollllo_3, &var_llollllo_4, &var_llollllo_5, &var_llollllo_6, &z_var_llollllo_7) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+			QObject* var_llollllo_2 = (QObject*) php_qt_fetch(z_var_llollllo_2);
+			QObject* var_llollllo_7 = (QObject*) php_qt_fetch(z_var_llollllo_7);
+
+			QString tmp_llollllo_0(var_llollllo_2->metaObject()->className());
+			QString tmp_llollllo_1(var_llollllo_7->metaObject()->className());
+			
+			if(tmp_llollllo_0 == "const QImage" && tmp_llollllo_1 == "Qt::ImageConversionFlags") {
+//				obj->drawImage((int) var_llollllo_0, (int) var_llollllo_1, (const QImage&) var_llollllo_2, (int) var_llollllo_3, (int) var_llollllo_4, (int) var_llollllo_5, (int) var_llollllo_6, (Qt::ImageConversionFlags) var_llollllo_7);
 			RETURN_NULL();
 			}
 		}
@@ -1132,7 +1225,7 @@
 ZEND_METHOD(QPainter, drawTiledPixmap){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* ool */
+		/* ool public*/
 		zval* z_var_ool_0;   // default: 
 		zval* z_var_ool_1;   // default: 
 		long var_ool_2;    // default: QPointF()
@@ -1146,16 +1239,40 @@
 			QString tmp_ool_0(var_ool_0->metaObject()->className());
 			QString tmp_ool_1(var_ool_1->metaObject()->className());
 			
-			if(tmp_ool_0 == "const QRectF&" && tmp_ool_1 == "const QPixmap&") {
+			if(tmp_ool_0 == "const QRectF" && tmp_ool_1 == "const QPixmap") {
 				obj->drawTiledPixmap((const QRectF&) var_ool_0, (const QPixmap&) var_ool_1, (const QPointF&) var_ool_2);
 			RETURN_NULL();
 			}			
-			if(tmp_ool_0 == "const QRect&" && tmp_ool_1 == "const QPixmap&") {
-//				obj->drawTiledPixmap((const QRect&) var_ool_0, (const QPixmap&) var_ool_1, (const QPoint&) var_ool_5);
+			if(tmp_ool_0 == "const QRect" && tmp_ool_1 == "const QPixmap") {
+				obj->drawTiledPixmap((const QRect&) var_ool_0, (const QPixmap&) var_ool_1, (const QPoint&) var_ool_2);
 			RETURN_NULL();
 			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 7){
+		/* lllloll public*/
+		long var_lllloll_0;    // default: 
+		long var_lllloll_1;    // default: 
+		long var_lllloll_2;    // default: 
+		long var_lllloll_3;    // default: 
+		zval* z_var_lllloll_4;   // default: 
+		long var_lllloll_5;    // default: 0
+		long var_lllloll_6;    // default: 0
+
+		/* int x, int y, int w, int h, const QPixmap& , int sx, int sy,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllol|l|", &var_lllloll_0, &var_lllloll_1, &var_lllloll_2, &var_lllloll_3, &z_var_lllloll_4, &var_lllloll_5, &var_lllloll_6) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+			QObject* var_lllloll_4 = (QObject*) php_qt_fetch(z_var_lllloll_4);
+
+			QString tmp_lllloll_0(var_lllloll_4->metaObject()->className());
+			
+			if(tmp_lllloll_0 == "const QPixmap") {
+				obj->drawTiledPixmap((int) var_lllloll_0, (int) var_lllloll_1, (int) var_lllloll_2, (int) var_lllloll_3, (const QPixmap&) var_lllloll_4, (int) var_lllloll_5, (int) var_lllloll_6);
+			RETURN_NULL();
+			}
+		}
+	}
 }
 
 /*********************************
@@ -1167,13 +1284,7 @@
 ZEND_METHOD(QPainter, layoutDirection){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			Qt::LayoutDirection return_object = (Qt::LayoutDirection) obj->layoutDirection();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QPainter_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->layoutDirection());
 	}
 }
 
@@ -1190,7 +1301,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1205,7 +1316,7 @@
 ZEND_METHOD(QPainter, drawPolygon){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::OddEvenFill
 
@@ -1216,19 +1327,19 @@
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QPolygonF&") {
+			if(tmp_ol_0 == "const QPolygonF") {
 				obj->drawPolygon((const QPolygonF&) var_ol_0, (Qt::FillRule) var_ol_1);
 			RETURN_NULL();
 			}			
-			if(tmp_ol_0 == "const QPolygon&") {
-//				obj->drawPolygon((const QPolygon&) var_ol_0, (Qt::FillRule) var_ol_3);
+			if(tmp_ol_0 == "const QPolygon") {
+				obj->drawPolygon((const QPolygon&) var_ol_0, (Qt::FillRule) var_ol_1);
 			RETURN_NULL();
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* lll */
+		/* lll public*/
 		long var_lll_0;    // default: 
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: Qt::OddEvenFill
@@ -1257,7 +1368,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1272,7 +1383,7 @@
 ZEND_METHOD(QPainter, setClipRegion){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::ReplaceClip
 
@@ -1283,7 +1394,7 @@
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QRegion&") {
+			if(tmp_ol_0 == "const QRegion") {
 				obj->setClipRegion((const QRegion&) var_ol_0, (Qt::ClipOperation) var_ol_1);
 			RETURN_NULL();
 			}
@@ -1300,7 +1411,7 @@
 ZEND_METHOD(QPainter, restoreRedirected){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* const QPaintDevice* device,  */
@@ -1323,15 +1434,15 @@
 ZEND_METHOD(QPainter, setMatrixEnabled){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool enabled,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int enabled,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
 			
-			obj->setMatrixEnabled((bool) var_b_0);
+			obj->setMatrixEnabled((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -1346,7 +1457,7 @@
 ZEND_METHOD(QPainter, drawPoints){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QPolygonF& points,  */
@@ -1356,11 +1467,11 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QPolygonF&") {
+			if(tmp_o_0 == "const QPolygonF") {
 				obj->drawPoints((const QPolygonF&) var_o_0);
 			RETURN_NULL();
 			}			
-			if(tmp_o_0 == "const QPolygon&") {
+			if(tmp_o_0 == "const QPolygon") {
 				obj->drawPoints((const QPolygon&) var_o_0);
 			RETURN_NULL();
 			}
@@ -1368,7 +1479,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -1392,7 +1503,7 @@
 ZEND_METHOD(QPainter, drawRoundRect){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* oll */
+		/* oll public*/
 		zval* z_var_oll_0;   // default: 
 		long var_oll_1;    // default: 25
 		long var_oll_2;    // default: 25
@@ -1404,16 +1515,35 @@
 
 			QString tmp_oll_0(var_oll_0->metaObject()->className());
 			
-			if(tmp_oll_0 == "const QRectF&") {
+			if(tmp_oll_0 == "const QRectF") {
 				obj->drawRoundRect((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
 			RETURN_NULL();
 			}			
-			if(tmp_oll_0 == "const QRect&") {
-//				obj->drawRoundRect((const QRect&) var_oll_0, (int) var_oll_4, (int) var_oll_5);
+			if(tmp_oll_0 == "const QRect") {
+				obj->drawRoundRect((const QRect&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
 			RETURN_NULL();
 			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 6){
+		/* llllll public*/
+		long var_llllll_0;    // default: 
+		long var_llllll_1;    // default: 
+		long var_llllll_2;    // default: 
+		long var_llllll_3;    // default: 
+		long var_llllll_4;    // default: 25
+		long var_llllll_5;    // default: 25
+
+		/* int x, int y, int w, int h, int , int ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll|l|", &var_llllll_0, &var_llllll_1, &var_llllll_2, &var_llllll_3, &var_llllll_4, &var_llllll_5) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+
+			
+			obj->drawRoundRect((int) var_llllll_0 ,(int) var_llllll_1 ,(int) var_llllll_2 ,(int) var_llllll_3 ,(int) var_llllll_4 ,(int) var_llllll_5);
+			RETURN_NULL();
+		}
+	}
 }
 
 /*********************************
@@ -1425,7 +1555,7 @@
 ZEND_METHOD(QPainter, drawConvexPolygon){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QPolygonF& polygon,  */
@@ -1435,11 +1565,11 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QPolygonF&") {
+			if(tmp_o_0 == "const QPolygonF") {
 				obj->drawConvexPolygon((const QPolygonF&) var_o_0);
 			RETURN_NULL();
 			}			
-			if(tmp_o_0 == "const QPolygon&") {
+			if(tmp_o_0 == "const QPolygon") {
 				obj->drawConvexPolygon((const QPolygon&) var_o_0);
 			RETURN_NULL();
 			}
@@ -1447,7 +1577,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -1471,19 +1601,19 @@
 ZEND_METHOD(QPainter, setMatrix){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ob */
-		zval* z_var_ob_0;   // default: 
-		bool var_ob_1;   // _default: false
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: false
 
-		/* const QMatrix& matrix, bool combine,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob|", &z_var_ob_0, &var_ob_1) == SUCCESS) {
+		/* const QMatrix& matrix, int combine,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ob_0 = (QObject*) php_qt_fetch(z_var_ob_0);
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ob_0(var_ob_0->metaObject()->className());
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ob_0 == "const QMatrix&") {
-				obj->setMatrix((const QMatrix&) var_ob_0, (bool) var_ob_1);
+			if(tmp_ol_0 == "const QMatrix") {
+				obj->setMatrix((const QMatrix&) var_ol_0, (bool) var_ol_1);
 			RETURN_NULL();
 			}
 		}
@@ -1499,7 +1629,7 @@
 ZEND_METHOD(QPainter, drawPicture){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
+		/* lo public*/
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
@@ -1510,19 +1640,19 @@
 
 			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
-			if(tmp_lo_0 == "const QPicture&") {
+			if(tmp_lo_0 == "const QPicture") {
 				obj->drawPicture((const QPointF&) var_lo_0, (const QPicture&) var_lo_1);
 			RETURN_NULL();
 			}			
-			if(tmp_lo_0 == "const QPicture&") {
-//				obj->drawPicture((const QPoint&) var_lo_2, (const QPicture&) var_lo_1);
+			if(tmp_lo_0 == "const QPicture") {
+				obj->drawPicture((const QPoint&) var_lo_0, (const QPicture&) var_lo_1);
 			RETURN_NULL();
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* llo */
+		/* llo public*/
 		long var_llo_0;    // default: 
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
@@ -1534,7 +1664,7 @@
 
 			QString tmp_llo_0(var_llo_2->metaObject()->className());
 			
-			if(tmp_llo_0 == "const QPicture&") {
+			if(tmp_llo_0 == "const QPicture") {
 				obj->drawPicture((int) var_llo_0, (int) var_llo_1, (const QPicture&) var_llo_2);
 			RETURN_NULL();
 			}
@@ -1569,7 +1699,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1588,7 +1718,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1607,7 +1737,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1635,7 +1765,7 @@
 ZEND_METHOD(QPainter, drawText){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
+		/* lo public*/
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
@@ -1646,19 +1776,15 @@
 
 			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
-			if(tmp_lo_0 == "const QString&") {
+			if(tmp_lo_0 == "const QString") {
 				obj->drawText((const QPointF&) var_lo_0, (const QString&) var_lo_1);
 			RETURN_NULL();
-			}			
-			if(tmp_lo_0 == "const QString&") {
-//				obj->drawText((const QPoint&) var_lo_2, (const QString&) var_lo_1);
-			RETURN_NULL();
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* ooo */
+		/* ooo public*/
 		zval* z_var_ooo_0;   // default: 
 		zval* z_var_ooo_1;   // default: 
 		zval* z_var_ooo_2;   // default: QTextOption()
@@ -1674,32 +1800,32 @@
 			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
 			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
 			
-			if(tmp_ooo_0 == "const QRectF&" && tmp_ooo_1 == "const QString&" && tmp_ooo_2 == "const QTextOption&") {
+			if(tmp_ooo_0 == "const QRectF" && tmp_ooo_1 == "const QString" && tmp_ooo_2 == "const QTextOption") {
 				obj->drawText((const QRectF&) var_ooo_0, (const QString&) var_ooo_1, (const QTextOption&) var_ooo_2);
 			RETURN_NULL();
 			}
 		}
-		/* llo */
-		long var_llo_3;    // default: 
-		long var_llo_4;    // default: 
-		zval* z_var_llo_5;   // default: 
+		/* llo public*/
+		long var_llo_0;    // default: 
+		long var_llo_1;    // default: 
+		zval* z_var_llo_2;   // default: 
 
 		/* int x, int y, const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_3, &var_llo_4, &z_var_llo_5) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llo_5 = (QObject*) php_qt_fetch(z_var_llo_5);
+			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
 
-			QString tmp_llo_0(var_llo_5->metaObject()->className());
+			QString tmp_llo_0(var_llo_2->metaObject()->className());
 			
-			if(tmp_llo_0 == "const QString&") {
-				obj->drawText((int) var_llo_3, (int) var_llo_4, (const QString&) var_llo_5);
+			if(tmp_llo_0 == "const QString") {
+				obj->drawText((int) var_llo_0, (int) var_llo_1, (const QString&) var_llo_2);
 			RETURN_NULL();
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* oloo */
+		/* oloo public*/
 		zval* z_var_oloo_0;   // default: 
 		long var_oloo_1;    // default: 
 		zval* z_var_oloo_2;   // default: 
@@ -1716,12 +1842,38 @@
 			QString tmp_oloo_1(var_oloo_2->metaObject()->className());
 			QString tmp_oloo_2(var_oloo_3->metaObject()->className());
 			
-			if(tmp_oloo_0 == "const QRectF&" && tmp_oloo_1 == "const QString&" && tmp_oloo_2 == "QRectF*") {
+			if(tmp_oloo_0 == "const QRectF" && tmp_oloo_1 == "const QString" && tmp_oloo_2 == "QRectF") {
 				obj->drawText((const QRectF&) var_oloo_0, (int) var_oloo_1, (const QString&) var_oloo_2, (QRectF*) var_oloo_3);
 			RETURN_NULL();
 			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 7){
+		/* llllloo public*/
+		long var_llllloo_0;    // default: 
+		long var_llllloo_1;    // default: 
+		long var_llllloo_2;    // default: 
+		long var_llllloo_3;    // default: 
+		long var_llllloo_4;    // default: 
+		zval* z_var_llllloo_5;   // default: 
+		zval* z_var_llllloo_6;   // default: 0
+
+		/* int x, int y, int w, int h, int flags, const QString& text, qt_QRect* br,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllloo|", &var_llllloo_0, &var_llllloo_1, &var_llllloo_2, &var_llllloo_3, &var_llllloo_4, &z_var_llllloo_5, &z_var_llllloo_6) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+			QObject* var_llllloo_5 = (QObject*) php_qt_fetch(z_var_llllloo_5);
+			QObject* var_llllloo_6 = (QObject*) php_qt_fetch(z_var_llllloo_6);
+
+			QString tmp_llllloo_0(var_llllloo_5->metaObject()->className());
+			QString tmp_llllloo_1(var_llllloo_6->metaObject()->className());
+			
+			if(tmp_llllloo_0 == "const QString" && tmp_llllloo_1 == "QRect") {
+				obj->drawText((int) var_llllloo_0, (int) var_llllloo_1, (int) var_llllloo_2, (int) var_llllloo_3, (int) var_llllloo_4, (const QString&) var_llllloo_5, (QRect*) var_llllloo_6);
+			RETURN_NULL();
+			}
+		}
+	}
 }
 
 /*********************************
@@ -1733,7 +1885,7 @@
 ZEND_METHOD(QPainter, drawChord){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* oll */
+		/* oll public*/
 		zval* z_var_oll_0;   // default: 
 		long var_oll_1;    // default: 
 		long var_oll_2;    // default: 
@@ -1745,16 +1897,35 @@
 
 			QString tmp_oll_0(var_oll_0->metaObject()->className());
 			
-			if(tmp_oll_0 == "const QRectF&") {
+			if(tmp_oll_0 == "const QRectF") {
 				obj->drawChord((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
 			RETURN_NULL();
 			}			
-			if(tmp_oll_0 == "const QRect&") {
-//				obj->drawChord((const QRect&) var_oll_0, (int) var_oll_4, (int) var_oll_5);
+			if(tmp_oll_0 == "const QRect") {
+				obj->drawChord((const QRect&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
 			RETURN_NULL();
 			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 6){
+		/* llllll public*/
+		long var_llllll_0;    // default: 
+		long var_llllll_1;    // default: 
+		long var_llllll_2;    // default: 
+		long var_llllll_3;    // default: 
+		long var_llllll_4;    // default: 
+		long var_llllll_5;    // default: 
+
+		/* int x, int y, int w, int h, int a, int alen,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_llllll_0, &var_llllll_1, &var_llllll_2, &var_llllll_3, &var_llllll_4, &var_llllll_5) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+
+			
+			obj->drawChord((int) var_llllll_0 ,(int) var_llllll_1 ,(int) var_llllll_2 ,(int) var_llllll_3 ,(int) var_llllll_4 ,(int) var_llllll_5);
+			RETURN_NULL();
+		}
+	}
 }
 
 /*********************************
@@ -1770,7 +1941,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1796,10 +1967,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QPainter, brushOrigin){
-//	if (ZEND_NUM_ARGS() == 0){
-//			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-//			RETURN_LONG(obj->brushOrigin());
-//	}
+	if (ZEND_NUM_ARGS() == 0){
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+			QPoint return_object = (QPoint) obj->brushOrigin();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QPainter_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
 /*********************************
@@ -1811,15 +1988,15 @@
 ZEND_METHOD(QPainter, setViewTransformEnabled){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool enable,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int enable,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
 			
-			obj->setViewTransformEnabled((bool) var_b_0);
+			obj->setViewTransformEnabled((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -1834,23 +2011,17 @@
 ZEND_METHOD(QPainter, scale){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
 
-		/* qreal sx, qreal sy,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		/* double sx, double sy,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "qreal" && tmp_oo_1 == "qreal") {
-//				obj->scale((qreal) var_oo_0, (qreal) var_oo_1);
+			obj->scale((qreal) var_ll_0 ,(qreal) var_ll_1);
 			RETURN_NULL();
-			}
 		}
 	}
 }
@@ -1864,7 +2035,7 @@
 ZEND_METHOD(QPainter, setPen){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int style,  */
@@ -1875,22 +2046,22 @@
 			obj->setPen((Qt::PenStyle) var_l_0);
 			RETURN_NULL();
 		}
-		/* o */
-		zval* z_var_o_1;   // default: 
+		/* o public*/
+		zval* z_var_o_0;   // default: 
 
 		/* const QColor& color,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
+			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QColor&") {
-				obj->setPen((const QColor&) var_o_1);
+			if(tmp_o_0 == "const QColor") {
+				obj->setPen((const QColor&) var_o_0);
 			RETURN_NULL();
 			}			
-			if(tmp_o_0 == "const QPen&") {
-				obj->setPen((const QPen&) var_o_1);
+			if(tmp_o_0 == "const QPen") {
+				obj->setPen((const QPen&) var_o_0);
 			RETURN_NULL();
 			}
 		}
@@ -1906,7 +2077,7 @@
 ZEND_METHOD(QPainter, setBackgroundMode){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int mode,  */
@@ -1933,7 +2104,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1952,7 +2123,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1967,16 +2138,16 @@
 ZEND_METHOD(QPainter, setRenderHint){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* lb */
-		long var_lb_0;    // default: 
-		bool var_lb_1;   // _default: true
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: true
 
-		/* RenderHint hint, bool on,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb|", &var_lb_0, &var_lb_1) == SUCCESS) {
-//			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+		/* QPainter::RenderHint hint, int on,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
 			
-//			obj->setRenderHint((RenderHint) var_lb_0 ,(bool) var_lb_1);
+			obj->setRenderHint((QPainter::RenderHint) var_ll_0 ,(bool) var_ll_1);
 			RETURN_NULL();
 		}
 	}
@@ -1995,7 +2166,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -2010,7 +2181,7 @@
 ZEND_METHOD(QPainter, strokePath){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
+		/* lo public*/
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
@@ -2021,7 +2192,7 @@
 
 			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
-			if(tmp_lo_0 == "const QPen&") {
+			if(tmp_lo_0 == "const QPen") {
 				obj->strokePath((const QPainterPath&) var_lo_0, (const QPen&) var_lo_1);
 			RETURN_NULL();
 			}
@@ -2038,7 +2209,7 @@
 ZEND_METHOD(QPainter, setBrush){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int style,  */
@@ -2049,18 +2220,18 @@
 			obj->setBrush((Qt::BrushStyle) var_l_0);
 			RETURN_NULL();
 		}
-		/* o */
-		zval* z_var_o_1;   // default: 
+		/* o public*/
+		zval* z_var_o_0;   // default: 
 
 		/* const QBrush& brush,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
+			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QBrush&") {
-				obj->setBrush((const QBrush&) var_o_1);
+			if(tmp_o_0 == "const QBrush") {
+				obj->setBrush((const QBrush&) var_o_0);
 			RETURN_NULL();
 			}
 		}
@@ -2076,7 +2247,7 @@
 ZEND_METHOD(QPainter, drawPoint){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* const QPointF& pt,  */
@@ -2090,7 +2261,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 
 
@@ -2119,12 +2290,11 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
-		/* QPaintDevice* ,  */
+		/* qt_QPaintDevice* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
 			
 			QPainter *QPainter_ptr = new QPainter((QPaintDevice*) var_l_0);
@@ -2143,12 +2313,12 @@
 ZEND_METHOD(QPainter, setRedirected){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* lll */
+		/* lll public*/
 		long var_lll_0;    // default: 
 		long var_lll_1;    // default: 
 		long var_lll_2;    // default: QPoint()
 
-		/* const QPaintDevice* device, QPaintDevice* replacement, const QPoint& offset,  */
+		/* const QPaintDevice* device, qt_QPaintDevice* replacement, const QPoint& offset,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2168,8 +2338,13 @@
 ZEND_METHOD(QPainter, compositionMode){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			obj->compositionMode();
-			RETURN_NULL();
+			QPainter::CompositionMode return_object = (QPainter::CompositionMode) obj->compositionMode();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QPainter_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 
@@ -2182,7 +2357,7 @@
 ZEND_METHOD(QPainter, setFont){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QFont& f,  */
@@ -2192,7 +2367,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QFont&") {
+			if(tmp_o_0 == "const QFont") {
 				obj->setFont((const QFont&) var_o_0);
 			RETURN_NULL();
 			}
@@ -2209,10 +2384,10 @@
 ZEND_METHOD(QPainter, begin){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
-		/* QPaintDevice* ,  */
+		/* qt_QPaintDevice* ,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2231,7 +2406,7 @@
 ZEND_METHOD(QPainter, setViewport){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QRect& viewport,  */
@@ -2241,7 +2416,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QRect&") {
+			if(tmp_o_0 == "const QRect") {
 				obj->setViewport((const QRect&) var_o_0);
 			RETURN_NULL();
 			}
@@ -2249,7 +2424,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 
@@ -2275,7 +2450,7 @@
 ZEND_METHOD(QPainter, drawEllipse){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QRectF& r,  */
@@ -2285,7 +2460,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QRectF&") {
+			if(tmp_o_0 == "const QRectF") {
 				obj->drawEllipse((const QRectF&) var_o_0);
 			RETURN_NULL();
 			}
@@ -2293,7 +2468,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 
@@ -2319,7 +2494,7 @@
 ZEND_METHOD(QPainter, drawArc){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* oll */
+		/* oll public*/
 		zval* z_var_oll_0;   // default: 
 		long var_oll_1;    // default: 
 		long var_oll_2;    // default: 
@@ -2331,16 +2506,35 @@
 
 			QString tmp_oll_0(var_oll_0->metaObject()->className());
 			
-			if(tmp_oll_0 == "const QRectF&") {
+			if(tmp_oll_0 == "const QRectF") {
 				obj->drawArc((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
 			RETURN_NULL();
 			}			
-			if(tmp_oll_0 == "const QRect&") {
-//				obj->drawArc((const QRect&) var_oll_0, (int) var_oll_4, (int) var_oll_5);
+			if(tmp_oll_0 == "const QRect") {
+				obj->drawArc((const QRect&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
 			RETURN_NULL();
 			}
 		}
 	}
+
+	if (ZEND_NUM_ARGS() == 6){
+		/* llllll public*/
+		long var_llllll_0;    // default: 
+		long var_llllll_1;    // default: 
+		long var_llllll_2;    // default: 
+		long var_llllll_3;    // default: 
+		long var_llllll_4;    // default: 
+		long var_llllll_5;    // default: 
+
+		/* int x, int y, int w, int h, int a, int alen,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_llllll_0, &var_llllll_1, &var_llllll_2, &var_llllll_3, &var_llllll_4, &var_llllll_5) == SUCCESS) {
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+
+			
+			obj->drawArc((int) var_llllll_0 ,(int) var_llllll_1 ,(int) var_llllll_2 ,(int) var_llllll_3 ,(int) var_llllll_4 ,(int) var_llllll_5);
+			RETURN_NULL();
+		}
+	}
 }
 
 /*********************************
@@ -2352,7 +2546,7 @@
 ZEND_METHOD(QPainter, setBackground){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QBrush& bg,  */
@@ -2362,7 +2556,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QBrush&") {
+			if(tmp_o_0 == "const QBrush") {
 				obj->setBackground((const QBrush&) var_o_0);
 			RETURN_NULL();
 			}
@@ -2392,7 +2586,7 @@
 ZEND_METHOD(QPainter, drawRect){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QRectF& rect,  */
@@ -2402,11 +2596,11 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QRectF&") {
+			if(tmp_o_0 == "const QRectF") {
 				obj->drawRect((const QRectF&) var_o_0);
 			RETURN_NULL();
 			}			
-			if(tmp_o_0 == "const QRect&") {
+			if(tmp_o_0 == "const QRect") {
 				obj->drawRect((const QRect&) var_o_0);
 			RETURN_NULL();
 			}
@@ -2414,7 +2608,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 
@@ -2440,7 +2634,7 @@
 ZEND_METHOD(QPainter, drawLines){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: 
 
@@ -2451,25 +2645,25 @@
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QLineF*") {
+			if(tmp_ol_0 == "const QLineF") {
 				obj->drawLines((const QLineF*) var_ol_0, (int) var_ol_1);
 			RETURN_NULL();
 			}			
-			if(tmp_ol_0 == "const QLine*") {
-//				obj->drawLines((const QLine*) var_ol_0, (int) var_ol_3);
+			if(tmp_ol_0 == "const QLine") {
+				obj->drawLines((const QLine*) var_ol_0, (int) var_ol_1);
 			RETURN_NULL();
 			}
 		}
-		/* ll */
-		long var_ll_4;    // default: 
-		long var_ll_5;    // default: 
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
 
 		/* const QPointF* pointPairs, int lineCount,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_4, &var_ll_5) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
 						
-			obj->drawLines((const QPointF*) var_ll_4 ,(int) var_ll_5);
+			obj->drawLines((const QPointF*) var_ll_0 ,(int) var_ll_1);
 			RETURN_NULL();
 		}
 	}
@@ -2498,13 +2692,7 @@
 ZEND_METHOD(QPainter, backgroundMode){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			Qt::BGMode return_object = (Qt::BGMode) obj->backgroundMode();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QPainter_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->backgroundMode());
 	}
 }
 
@@ -2517,11 +2705,11 @@
 ZEND_METHOD(QPainter, redirected){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
+		/* ll public*/
 		long var_ll_0;    // default: 
 		long var_ll_1;    // default: 0
 
-		/* const QPaintDevice* device, QPoint* offset,  */
+		/* const QPaintDevice* device, qt_QPoint* offset,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
@@ -2530,7 +2718,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -2559,7 +2747,7 @@
 ZEND_METHOD(QPainter, drawTextItem){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
+		/* lo public*/
 		long var_lo_0;    // default: 
 		zval* z_var_lo_1;   // default: 
 
@@ -2570,19 +2758,19 @@
 
 			QString tmp_lo_0(var_lo_1->metaObject()->className());
 			
-			if(tmp_lo_0 == "const QTextItem&") {
+			if(tmp_lo_0 == "const QTextItem") {
 				obj->drawTextItem((const QPointF&) var_lo_0, (const QTextItem&) var_lo_1);
 			RETURN_NULL();
 			}			
-			if(tmp_lo_0 == "const QTextItem&") {
-//				obj->drawTextItem((const QPoint&) var_lo_2, (const QTextItem&) var_lo_1);
+			if(tmp_lo_0 == "const QTextItem") {
+				obj->drawTextItem((const QPoint&) var_lo_0, (const QTextItem&) var_lo_1);
 			RETURN_NULL();
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* llo */
+		/* llo public*/
 		long var_llo_0;    // default: 
 		long var_llo_1;    // default: 
 		zval* z_var_llo_2;   // default: 
@@ -2594,7 +2782,7 @@
 
 			QString tmp_llo_0(var_llo_2->metaObject()->className());
 			
-			if(tmp_llo_0 == "const QTextItem&") {
+			if(tmp_llo_0 == "const QTextItem") {
 				obj->drawTextItem((int) var_llo_0, (int) var_llo_1, (const QTextItem&) var_llo_2);
 			RETURN_NULL();
 			}
@@ -2611,15 +2799,15 @@
 ZEND_METHOD(QPainter, setClipping){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool enable,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int enable,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
 			
-			obj->setClipping((bool) var_b_0);
+			obj->setClipping((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -2634,7 +2822,7 @@
 ZEND_METHOD(QPainter, clipPath){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-//			obj->clipPath();
+			obj->clipPath();
 			RETURN_NULL();
 	}
 }

Modified: trunk/qt/classes/qpaintevent.cpp
===================================================================
--- trunk/qt/classes/qpaintevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qpaintevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QPaintEvent.cpp - QPaintEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,16 +38,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QPaintEvent, rect){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QPaintEvent *obj = (QPaintEvent*) PHP_QT_FETCH();
 			const QRect & return_object = (const QRect &) obj->rect();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPaintEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 /*********************************
@@ -57,16 +57,16 @@
  *    flags:    c
  */
 ZEND_METHOD(QPaintEvent, region){
-/*	if (ZEND_NUM_ARGS() == 0){
+	if (ZEND_NUM_ARGS() == 0){
 			QPaintEvent *obj = (QPaintEvent*) PHP_QT_FETCH();
 			const QRegion & return_object = (const QRegion &) obj->region();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPaintEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-	}*/
+	}
 }
 
 

Modified: trunk/qt/classes/qresizeevent.cpp
===================================================================
--- trunk/qt/classes/qresizeevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qresizeevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QResizeEvent.cpp - QResizeEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -44,7 +44,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QResizeEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -63,7 +63,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QResizeEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qshortcutevent.cpp
===================================================================
--- trunk/qt/classes/qshortcutevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qshortcutevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QShortcutEvent.cpp - QShortcutEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -70,7 +70,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QShortcutEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qshowevent.cpp
===================================================================
--- trunk/qt/classes/qshowevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qshowevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QShowEvent.cpp - QShowEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qstatustipevent.cpp
===================================================================
--- trunk/qt/classes/qstatustipevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qstatustipevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QStatusTipEvent.cpp - QStatusTipEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -44,7 +44,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QStatusTipEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qtabletevent.cpp
===================================================================
--- trunk/qt/classes/qtabletevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qtabletevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTabletEvent.cpp - QTabletEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -34,19 +34,19 @@
 
 /*		public enumTabletDevice:long {
 			TabletDevice = 0,
-			TabletDevice = 1,
-			TabletDevice = 2,
-			TabletDevice = 3,
-			TabletDevice = 4,
-			TabletDevice = 5
+			TabletDevice = 0,
+			TabletDevice = 0,
+			TabletDevice = 0,
+			TabletDevice = 0,
+			TabletDevice = 0,
 		}
 */
 
 /*		public enumPointerType:long {
 			PointerType = 0,
-			PointerType = 1,
-			PointerType = 2,
-			PointerType = 3
+			PointerType = 0,
+			PointerType = 0,
+			PointerType = 0,
 		}
 */
 /*********************************
@@ -58,8 +58,7 @@
 ZEND_METHOD(QTabletEvent, hiResGlobalX){
 	if (ZEND_NUM_ARGS() == 0){
 			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
-			obj->hiResGlobalX();
-			RETURN_NULL();
+			RETURN_DOUBLE(obj->hiResGlobalX());
 	}
 }
 
@@ -72,8 +71,7 @@
 ZEND_METHOD(QTabletEvent, pressure){
 	if (ZEND_NUM_ARGS() == 0){
 			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
-			obj->pressure();
-			RETURN_NULL();
+			RETURN_DOUBLE(obj->pressure());
 	}
 }
 
@@ -90,7 +88,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTabletEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -105,8 +103,7 @@
 ZEND_METHOD(QTabletEvent, tangentialPressure){
 	if (ZEND_NUM_ARGS() == 0){
 			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
-			obj->tangentialPressure();
-			RETURN_NULL();
+			RETURN_DOUBLE(obj->tangentialPressure());
 	}
 }
 
@@ -149,7 +146,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTabletEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -191,8 +188,7 @@
 ZEND_METHOD(QTabletEvent, hiResGlobalY){
 	if (ZEND_NUM_ARGS() == 0){
 			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
-			obj->hiResGlobalY();
-			RETURN_NULL();
+			RETURN_DOUBLE(obj->hiResGlobalY());
 	}
 }
 
@@ -209,7 +205,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTabletEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -237,8 +233,7 @@
 ZEND_METHOD(QTabletEvent, rotation){
 	if (ZEND_NUM_ARGS() == 0){
 			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
-			obj->rotation();
-			RETURN_NULL();
+			RETURN_DOUBLE(obj->rotation());
 	}
 }
 

Modified: trunk/qt/classes/qtime.cpp
===================================================================
--- trunk/qt/classes/qtime.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qtime.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTime.cpp - QTime PHP implementation.
- * begin           : Mon Jan  9 00:33:12 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -57,7 +57,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 
@@ -95,7 +95,7 @@
 ZEND_METHOD(QTime, toString){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: Qt::TextDate
 
 		/* int f,  */
@@ -107,26 +107,26 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
-		/* o */
-		zval* z_var_o_1;   // default: 
+		/* o public*/
+		zval* z_var_o_0;   // default: 
 
 		/* const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
+			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QString&") {
-				QString return_object = (QString) obj->toString((const QString&) var_o_1);
+			if(tmp_o_0 == "const QString") {
+				QString return_object = (QString) obj->toString((const QString&) var_o_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -156,7 +156,7 @@
 ZEND_METHOD(QTime, secsTo){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QTime& ,  */
@@ -166,7 +166,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QTime&") {
+			if(tmp_o_0 == "const QTime") {
 				RETURN_LONG(obj->secsTo((const QTime&) var_o_0));
 			}
 		}
@@ -195,7 +195,7 @@
 ZEND_METHOD(QTime, fromString){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
+		/* ol public*/
 		zval* z_var_ol_0;   // default: 
 		long var_ol_1;    // default: Qt::TextDate
 
@@ -206,35 +206,35 @@
 
 			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QString&") {
+			if(tmp_ol_0 == "const QString") {
 				QTime return_object = (QTime) obj->fromString((const QString&) var_ol_0, (Qt::DateFormat) var_ol_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
 		}
-		/* oo */
-		zval* z_var_oo_2;   // default: 
-		zval* z_var_oo_3;   // default: 
+		/* oo public*/
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
 
 		/* const QString& s, const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_2, &z_var_oo_3) == SUCCESS) {
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QObject* var_oo_2 = (QObject*) php_qt_fetch(z_var_oo_2);
-			QObject* var_oo_3 = (QObject*) php_qt_fetch(z_var_oo_3);
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-			QString tmp_oo_0(var_oo_2->metaObject()->className());
-			QString tmp_oo_1(var_oo_3->metaObject()->className());
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
 			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
-				QTime return_object = (QTime) obj->fromString((const QString&) var_oo_2, (const QString&) var_oo_3);
+			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
+				QTime return_object = (QTime) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -269,7 +269,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 0
@@ -277,7 +277,6 @@
 
 		/* int h, int m, int s, int ms,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|l|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
-			QTime *obj = (QTime*) PHP_QT_FETCH();
 
 			
 			QTime *QTime_ptr = new QTime((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
@@ -296,7 +295,7 @@
 ZEND_METHOD(QTime, addSecs){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int secs,  */
@@ -308,7 +307,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -324,7 +323,7 @@
 ZEND_METHOD(QTime, addMSecs){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ms,  */
@@ -336,7 +335,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -356,7 +355,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -384,7 +383,7 @@
 ZEND_METHOD(QTime, setHMS){
 
 	if (ZEND_NUM_ARGS() == 4){
-		/* llll */
+		/* llll public*/
 		long var_llll_0;    // default: 
 		long var_llll_1;    // default: 
 		long var_llll_2;    // default: 
@@ -422,7 +421,7 @@
 ZEND_METHOD(QTime, msecsTo){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QTime& ,  */
@@ -432,7 +431,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QTime&") {
+			if(tmp_o_0 == "const QTime") {
 				RETURN_LONG(obj->msecsTo((const QTime&) var_o_0));
 			}
 		}

Modified: trunk/qt/classes/qtimer.cpp
===================================================================
--- trunk/qt/classes/qtimer.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qtimer.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTimer.cpp - QTimer PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QTimer, tr){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
+		/* ss public*/
 		char* var_ss_0;   // default: 
 		int len_ss_0;
 
@@ -57,7 +57,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTimer_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -72,23 +72,8 @@
  */
 ZEND_METHOD(QTimer, qt_invoke){
 
-/*	if (ZEND_NUM_ARGS() == 2){
-
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}*/
+	if (ZEND_NUM_ARGS() == 2){
+	}
 }
 
 /*********************************
@@ -98,16 +83,6 @@
  *    flags:    s
  */
 ZEND_METHOD(QTimer, staticMetaObject){
-/*	if (ZEND_NUM_ARGS() == 0){
-			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QTimer_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}*/
 }
 
 /*********************************
@@ -119,7 +94,7 @@
 ZEND_METHOD(QTimer, setInterval){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int msec,  */
@@ -140,16 +115,6 @@
  *    flags:    
  */
 ZEND_METHOD(QTimer, qObject){
-/*	if (ZEND_NUM_ARGS() == 0){
-			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-			QObject* return_object = (QObject*) obj->qObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QTimer_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}*/
 }
 
 /*********************************
@@ -174,21 +139,21 @@
 ZEND_METHOD(QTimer, singleShot){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* los */
+		/* los public*/
 		long var_los_0;    // default: 
 		zval* z_var_los_1;   // default: 
 		char* var_los_2;   // default: 
 		int len_los_2;
 
 
-		/* int msec, QObject* receiver, const char* member,  */
+		/* int msec, qt_QObject* receiver, const char* member,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"los", &var_los_0, &z_var_los_1, &var_los_2, len_los_2) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 			QObject* var_los_1 = (QObject*) php_qt_fetch(z_var_los_1);
 
 			QString tmp_los_0(var_los_1->metaObject()->className());
 			
-			if(tmp_los_0 == "QObject*") {
+			if(tmp_los_0 == "QObject") {
 				obj->singleShot((int) var_los_0, (QObject*) var_los_1, (const char*) var_los_2);
 			RETURN_NULL();
 			}
@@ -205,19 +170,6 @@
 ZEND_METHOD(QTimer, qt_cast){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
-
-
-		/* const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-
-			
-//			obj->qt_cast( (const char*) var_s_0);
-			RETURN_NULL();
-		}
 	}
 }
 
@@ -234,7 +186,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTimer_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -276,17 +228,16 @@
 ZEND_METHOD(QTimer, __construct){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 0
 
-		/* QObject* parent,  */
+		/* qt_QObject* parent,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
-			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "QObject*") {
+			if(tmp_o_0 == "QObject") {
 				QTimer *QTimer_ptr = new QTimer((QObject*) var_o_0);
 			PHP_QT_REGISTER(QTimer_ptr);
 			RETURN_NULL();
@@ -304,21 +255,6 @@
 ZEND_METHOD(QTimer, qt_emit){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* int , QUObject* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-/*			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
-			}*/
-		}
 	}
 }
 
@@ -344,15 +280,15 @@
 ZEND_METHOD(QTimer, setSingleShot){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* l public*/
+		long var_l_0;    // default: 
 
-		/* bool singleShot,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		/* int singleShot,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
 			
-			obj->setSingleShot((bool) var_b_0);
+			obj->setSingleShot((bool) var_l_0);
 			RETURN_NULL();
 		}
 	}
@@ -365,16 +301,6 @@
  *    flags:    cv
  */
 ZEND_METHOD(QTimer, className){
-/*	if (ZEND_NUM_ARGS() == 0){
-			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-			const char * return_object = (const char *) obj->className();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QTimer_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}*/
 }
 
 /*********************************
@@ -386,7 +312,7 @@
 ZEND_METHOD(QTimer, trUtf8){
 
 	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
+		/* ss public*/
 		char* var_ss_0;   // default: 
 		int len_ss_0;
 
@@ -403,7 +329,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTimer_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 		}
@@ -419,22 +345,6 @@
 ZEND_METHOD(QTimer, qt_property){
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* llo */
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
-
-		/* int , int , QVariant* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
-			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
-
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-/*			if(tmp_llo_0 == "QVariant*") {
-				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
-			}*/
-		}
 	}
 }
 
@@ -465,7 +375,7 @@
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public_slots*/
 		long var_l_0;    // default: 
 
 		/* int msec,  */

Modified: trunk/qt/classes/qtoolbarchangeevent.cpp
===================================================================
--- trunk/qt/classes/qtoolbarchangeevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qtoolbarchangeevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QToolBarChangeEvent.cpp - QToolBarChangeEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qwhatsthisclickedevent.cpp
===================================================================
--- trunk/qt/classes/qwhatsthisclickedevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qwhatsthisclickedevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWhatsThisClickedEvent.cpp - QWhatsThisClickedEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -44,7 +44,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWhatsThisClickedEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qwheelevent.cpp
===================================================================
--- trunk/qt/classes/qwheelevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qwheelevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWheelEvent.cpp - QWheelEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -83,7 +83,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWheelEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -141,7 +141,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWheelEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-//				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -160,7 +160,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWheelEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qwidgetdata.cpp
===================================================================
--- trunk/qt/classes/qwidgetdata.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qwidgetdata.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWidgetData.cpp - QWidgetData PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qwidgetitem.cpp
===================================================================
--- trunk/qt/classes/qwidgetitem.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qwidgetitem.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWidgetItem.cpp - QWidgetItem PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -66,7 +66,7 @@
 ZEND_METHOD(QWidgetItem, setGeometry){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
 		/* const QRect& ,  */
@@ -76,7 +76,7 @@
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "const QRect&") {
+			if(tmp_o_0 == "const QRect") {
 				obj->setGeometry((const QRect&) var_o_0);
 			RETURN_NULL();
 			}
@@ -93,17 +93,16 @@
 ZEND_METHOD(QWidgetItem, __construct){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
+		/* o public*/
 		zval* z_var_o_0;   // default: 
 
-		/* QWidget* w,  */
+		/* qt_QWidget* w,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
 			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
 			QString tmp_o_0(var_o_0->metaObject()->className());
 			
-			if(tmp_o_0 == "QWidget*") {
+			if(tmp_o_0 == "QWidget") {
 				QWidgetItem *QWidgetItem_ptr = new QWidgetItem((QWidget*) var_o_0);
 			PHP_QT_REGISTER(QWidgetItem_ptr);
 			RETURN_NULL();
@@ -125,7 +124,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -144,7 +143,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -163,7 +162,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -178,7 +177,7 @@
 ZEND_METHOD(QWidgetItem, heightForWidth){
 
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
+		/* l public*/
 		long var_l_0;    // default: 
 
 		/* int ,  */
@@ -204,7 +203,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -223,7 +222,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -242,7 +241,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qwindowstatechangeevent.cpp
===================================================================
--- trunk/qt/classes/qwindowstatechangeevent.cpp	2006-01-14 17:24:34 UTC (rev 180)
+++ trunk/qt/classes/qwindowstatechangeevent.cpp	2006-01-15 18:04:39 UTC (rev 181)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWindowStateChangeEvent.cpp - QWindowStateChangeEvent PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 15 17:39:22 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -44,7 +44,7 @@
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWindowStateChangeEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}



From tm243 at berlios.de  Sun Jan 15 19:23:44 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 15 Jan 2006 19:23:44 +0100
Subject: [Php-qt-svn] r184 - trunk
Message-ID: <200601151823.k0FINimY018673@sheep.berlios.de>

Author: tm243
Date: 2006-01-15 19:23:40 +0100 (Sun, 15 Jan 2006)
New Revision: 184

Added:
   trunk/TODO
Log:
todo list added.

Added: trunk/TODO
===================================================================
--- trunk/TODO	2006-01-15 18:13:24 UTC (rev 183)
+++ trunk/TODO	2006-01-15 18:23:40 UTC (rev 184)
@@ -0,0 +1,5 @@
+
+- handling of optional method arguments
+- custom SLOTS/SIGNALS
+- cpp class members as php class members
+- virtual methods



From tm243 at berlios.de  Sun Jan 15 19:43:09 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 15 Jan 2006 19:43:09 +0100
Subject: [Php-qt-svn] r185 - trunk/tools
Message-ID: <200601151843.k0FIh9ix027131@sheep.berlios.de>

Author: tm243
Date: 2006-01-15 19:42:42 +0100 (Sun, 15 Jan 2006)
New Revision: 185

Modified:
   trunk/tools/kalyptusCxxToPHP.pm
Log:
kalyptus improved, a lot of bugs in the generated code were fixed.

Modified: trunk/tools/kalyptusCxxToPHP.pm
===================================================================
--- trunk/tools/kalyptusCxxToPHP.pm	2006-01-15 18:23:40 UTC (rev 184)
+++ trunk/tools/kalyptusCxxToPHP.pm	2006-01-15 18:42:42 UTC (rev 185)
@@ -22,10 +22,11 @@
 #   - support for all types in method calls
 #   - fit cplusplusToZEND, cplusplusToInvoke, cplusplusToMacro
 #   - setter methods support only one php property (adequate, I believe)
-#   - marshalling in constructor, destructor
 
-#   - enum types support goes wrong
+#   php properties, enums
+#   RETURN_BYTE[]
 
+
 package kalyptusCxxToPHP;
 
 use File::Path;
@@ -72,9 +73,9 @@
 		return "bool";
 	} elsif ( kalyptusDataDict::ctypemap($cplusplusType) =~ /\s*void\s*\**/ ) {
 		return "NULL";
-	} elsif ( kalyptusDataDict::ctypemap($cplusplusType) =~ /\s*int\s*\&*/ ) {
+	} elsif ( kalyptusDataDict::ctypemap($cplusplusType) =~ /\s*\bint\s*\&*/) {
 		return "long";
-	} elsif ( kalyptusDataDict::ctypemap($cplusplusType) =~ /\s*int\s*\*/) {
+	} elsif ( kalyptusDataDict::ctypemap($cplusplusType) =~ /\s*\bint\s*\*/) {
 		return "int[]";
 	} elsif ( kalyptusDataDict::ctypemap($cplusplusType) =~ /\s*double\s*\*/ ) {
 		return "double[]";
@@ -294,7 +295,7 @@
 	}
 }
 
-
+# function is not used yet
 sub cplusplusToPInvoke
 {
 	my ( $cplusplusType )  = @_;
@@ -614,32 +615,32 @@
 # open files
 
     # AG_ZEND_CLASS_ENTRY
-    my $file_ag_zend_class_entry = "$outputdir/ag_zend_class_entry.h";
+    my $file_ag_zend_class_entry = "$outputdir/ag_zend_class_entry.inc";
     open( AG_ZEND_CLASS_ENTRY, ">$file_ag_zend_class_entry" ) || die "Couldn't create $file_ag_zend_class_entry\n";
     $file_ag_zend_class_entry =~ s/\.h/.h/;
 
     # AG_EXTERN_ZEND_CLASS_ENTRY
-    my $file_ag_extern_zend_class_entry = "$outputdir/ag_extern_zend_class_entry.h";
+    my $file_ag_extern_zend_class_entry = "$outputdir/ag_extern_zend_class_entry.inc";
     open( AG_EXTERN_ZEND_CLASS_ENTRY, ">$file_ag_extern_zend_class_entry" ) || die "Couldn't create $file_ag_extern_zend_class_entry\n";
     $file_ag_extern_zend_class_entry =~ s/\.h/.h/;
 
     # AG_ZEND_PHP_QT
-    my $file_ag_zend_php_qt = "$outputdir/ag_zend_php_qt.h";
+    my $file_ag_zend_php_qt = "$outputdir/ag_zend_php_qt.inc";
     open( AG_ZEND_PHP_QT, ">$file_ag_zend_php_qt" ) || die "Couldn't create $file_ag_zend_php_qt\n";
     $file_ag_zend_php_qt =~ s/\.h/.h/;
 
     # AG_CONFIGM4
-    my $file_ag_configm4 = "$outputdir/ag_configm4.h";
+    my $file_ag_configm4 = "$outputdir/ag_configm4.inc";
     open( AG_CONFIGM4, ">$file_ag_configm4" ) || die "Couldn't create $file_ag_configm4\n";
     $file_ag_configm4 =~ s/\.h/.h/;
 
     # AG_QT_MINIT
-    my $file_ag_qt_minit = "$outputdir/ag_qt_minit.h";
+    my $file_ag_qt_minit = "$outputdir/ag_qt_minit.inc";
     open( AG_QT_MINIT, ">$file_ag_qt_minit" ) || die "Couldn't create $file_ag_qt_minit\n";
     $file_ag_qt_minit =~ s/\.h/.h/;
 
     # AG_PHP_QT_CPP
-    my $file_ag_php_qt_cpp = "$outputdir/ag_php_qt_cpp.h";
+    my $file_ag_php_qt_cpp = "$outputdir/ag_php_qt_cpp.inc";
     open( AG_PHP_QT_CPP, ">$file_ag_php_qt_cpp" ) || die "Couldn't create $file_ag_php_qt_cpp\n";
     $file_ag_php_qt_cpp =~ s/\.h/.h/;
 
@@ -691,10 +692,6 @@
 PHP_FUNCTION(SLOT);
     \n\n";
 
-#	my $file_php_qt_minit = "$outputdir/php_qt.snippets2.cpp";
-#	open( PHP_QT_MINIT, ">$file_php_qt_minit" ) || die "Couldn't create $file_php_qt_minit\n";
-#	$file_php_qt_minit =~ s/\.h/.h/;
-
     print PHP_QT_MINIT "\n";
 
 	# Document all compound nodes
@@ -744,6 +741,7 @@
     close AG_ZEND_CLASS_ENTRY;
     close AG_EXTERN_ZEND_CLASS_ENTRY;
 
+    print AG_ZEND_PHP_QT "\n";
     close AG_ZEND_PHP_QT;
     close AG_CONFIGM4;
     close AG_QT_MINIT;
@@ -757,6 +755,35 @@
 
     $ctorCount = 0;
 
+    if(
+            $node->{astNodeName} eq "QAbstractButton"
+        ||  $node->{astNodeName} eq "QLCDNumber"
+        ||  $node->{astNodeName} eq "QLatin1String"
+||  $node->{astNodeName} eq "QApplication"
+||  $node->{astNodeName} eq "QCoreApplication"
+||  $node->{astNodeName} eq "QBoxLayout"
+||  $node->{astNodeName} eq "QAbstractSlider"
+||  $node->{astNodeName} eq "QWidget"
+||  $node->{astNodeName} eq "QLayoutItem"
+||  $node->{astNodeName} eq "QLineEdit"
+||  $node->{astNodeName} eq "QObject"
+||  $node->{astNodeName} eq "QPushButton"
+||  $node->{astNodeName} eq "QLayout"
+||  $node->{astNodeName} eq "QHBoxLayout"
+||  $node->{astNodeName} eq "QFrame"
+||  $node->{astNodeName} eq "QPushButton"
+||  $node->{astNodeName} eq "QSlider"
+||  $node->{astNodeName} eq "QSpacerItem"
+||  $node->{astNodeName} eq "QString"
+||  $node->{astNodeName} eq "QVBoxLayout"
+||  $node->{astNodeName} eq "Qt"
+||  $node->{astNodeName} eq "QInternal"
+||  $node->{astNodeName} eq "Attribute"
+    ){
+        print $node->{astNodeName}," skipped\n";
+        return;
+    }
+
 	print "Enter: $node->{astNodeName}\n" if $debug;
 	if( exists $node->{ExtSource} ) {
 		warn "Trying to write doc for ".$node->{AstNodeName}.
@@ -779,7 +806,7 @@
 	}
 # make the class file
 	my $file = join("__", kdocAstUtil::heritage($node)).".cpp";
-    $file = $outputdir."classes/".lc($file);
+    $file = $outputdir."/classes/".lc($file);
 	my $docnode = $node->{DocNode};
 	my @list = ();
 	my $version = undef;
@@ -828,6 +855,8 @@
     print CLASS "\n#include <$node->{astNodeName}>\n";
     print CLASS "#include \"../php_qt.h\"\n\n";
 
+    print CLASS checkIncludes($node);
+
     print AG_PHP_QT_CPP "static zend_function_entry ",$node->{astNodeName},"_methods[] = {\n";
 
 
@@ -888,12 +917,14 @@
 
 #include \"../php_qt.h\"
 ";
-		}
+		} # ancestors < 0
 
+#        print CLASS "\n#include <",$node->{astNodeName},">\n\n";
+
 # CLASS
 	} else {
 
-        print CLASS "\n#include <",$node->{astNodeName},">\n\n";
+#        print CLASS "\n#include <",$node->{astNodeName},">\n\n";
         print ZEND_PHP_QT "\n\n/* $node->{astNodeName} */";
 
 	}
@@ -901,6 +932,7 @@
 	Iter::MembersByType ( $node,
 		sub { print CLASS "", $_[0], ""; print JNISOURCE "", $_[0], "";  },
 		sub {	my ($node, $kid ) = @_;
+
                  generateClassMethodForEnum( $node, $kid );
                },
 		sub { print CLASS ""; print JNISOURCE ""; }
@@ -938,7 +970,13 @@
         my @three;
         my @four;
         my @five;
+        my @six;
+        my @seven;
+        my @eight;
+        my @nine;
+        my @ten;
 
+
         print CLASS "
 /*********************************
  *    class     ",$node->{astNodeName}," */\n";
@@ -949,13 +987,37 @@
 # params
             foreach my $n_ (@{$m_}){
 
+# skip destructor
+            if($n_->{ReturnType} =~ /~/){ next; }
+
             if($first == 1){
                 $first = 0;
                 print CLASS "/*
  *    function  ",$n_->{astNodeName},"
  *    flags:    ",$n_->{Flags},"
  */\n";
-                print CLASS "ZEND_METHOD(",$node->{astNodeName},", ",$n_->{astNodeName},"){\n";
+#print_r($n_);
+# write class related stuff
+# check whether method is a ctor
+                if($node->{astNodeName} eq $n_->{astNodeName}){
+                    print CLASS "ZEND_METHOD(",$node->{astNodeName},", __construct){\n";
+                    $n_->AddProp("ctor","ctor");
+                    print AG_ZEND_PHP_QT "\nZEND_METHOD(",$node->{astNodeName},", __construct);";
+                    print AG_PHP_QT_CPP "\tZEND_ME(",$node->{astNodeName},", __construct,NULL,ZEND_ACC_PUBLIC)\n";
+# normal
+                } else {
+                    print CLASS "ZEND_METHOD(",$node->{astNodeName},", ",$n_->{astNodeName},"){\n";
+
+                    my $access = $n_->{Access};
+                    if( $n_->{Flags} =~ /s/ ){
+                        $access .= "|ZEND_ACC_STATIC";
+                    }
+                    $access = uc($access);
+                    $access =~ s/_SLOTS//;
+                    $access =~ s/_SIGNALS//;
+                    print AG_PHP_QT_CPP "\tZEND_ME(",$node->{astNodeName},",",$n_->{astNodeName},",NULL,ZEND_ACC_",$access,")\n";
+                    print AG_ZEND_PHP_QT "\nZEND_METHOD(",$node->{astNodeName},", ",$n_->{astNodeName},");";
+                }
             }
 
                 my $count = 0;
@@ -964,7 +1026,17 @@
                 }
 # copy
                 if($count == 0){
-                    print CLASS createReturn($node->{astNodeName}, $n_,"");
+                    if(!(
+                        $n_->{astNodeName} =~ /className/
+                        || $n_->{astNodeName} =~ /qt_/
+                        || $n_->{astNodeName} =~ /staticMetaObject/
+                        || $n_->{astNodeName} =~ /qObject/
+                        )
+                    ){
+                        print CLASS "\tif (ZEND_NUM_ARGS() == 0){\n";
+                        print CLASS createReturn($node->{astNodeName}, $n_,"");
+                        print CLASS "\t}\n";
+                    }
                 } elsif($count == 1){
                     push @one, $n_;
                 } elsif($count == 2){
@@ -975,6 +1047,16 @@
                     push @four, $n_;
                 } elsif($count == 5){
                     push @five, $n_;
+                } elsif($count == 6){
+                    push @six, $n_;
+                } elsif($count == 7){
+                    push @seven, $n_;
+                } elsif($count == 8){
+                    push @eight, $n_;
+                } elsif($count == 9){
+                    push @nine, $n_;
+                } elsif($count == 10){
+                    push @ten, $n_;
                 } else {
                     print "error, too much args: ",$count," ",$node->{astNodeName}," ",$n_->{astNodeName},"\n";
                 }
@@ -995,6 +1077,21 @@
             my %five_ = mergeEquals($node->{astNodeName},5, at five);
             print CLASS marshal($node->{astNodeName},5,%five_);
 
+            my %six_ = mergeEquals($node->{astNodeName},6, at six);
+            print CLASS marshal($node->{astNodeName},6,%six_);
+
+            my %seven_ = mergeEquals($node->{astNodeName},7, at seven);
+            print CLASS marshal($node->{astNodeName},7,%seven_);
+
+            my %eight_ = mergeEquals($node->{astNodeName},8, at eight);
+            print CLASS marshal($node->{astNodeName},8,%eight_);
+
+            my %nine_ = mergeEquals($node->{astNodeName},9, at nine);
+            print CLASS marshal($node->{astNodeName},9,%nine_);
+
+            my %ten_ = mergeEquals($node->{astNodeName},10, at ten);
+            print CLASS marshal($node->{astNodeName},105,%ten_);
+
 #            print CLASS "}\n"; # ZEND_METHOD
 
         }
@@ -1003,53 +1100,11 @@
 
     print CLASS "\n";
 
+
 # creating the constructor
-    my $function = $node->{astNodeName};
+     my $function = $node->{astNodeName};
 
-    print CLASS "\n\nZEND_METHOD(",$function, ",__construct){\n";
-    print CLASS "\n\t",$function, " *",$function,"_ptr = new ",$function,"();\n";
-
-    my $pc = 0;
-    foreach my $constructor (@constructors){
-
-        my $PHPzend_parse_parameters_s;
-        my $PHPzend_parse_parameters_vars;
-
-        my @ctor_params = @{$constructor};
-        my $pCount = @ctor_params;
-        print CLASS "\n";
-
-        do {
-                print CLASS "\tif(ZEND_NUM_ARGS() == ",$pCount,"){\n";
-
-                my $typeCount = 0;
-                foreach my $info ( @ctor_params ) {
-                    print CLASS "\t\tzval* param_",$typeCount++,";\n";
-                    $PHPzend_parse_parameters_s .= "z";
-                    $PHPzend_parse_parameters_vars .= ", &param_$typeCount";
-                } #if defined @{$info};
-
-                print CLASS "\t\tif(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,\"",$PHPzend_parse_parameters_s,"\"",$PHPzend_parse_parameters_vars,") == FAILURE) {\n";
-                print CLASS "\t\t\treturn;\n","\t\t}\n";
-
-                $typeCount = 0;
-                foreach my $info ( @ctor_params ) {
-                 do {
-                    print CLASS "\t\t /*",@{$info}[0]," ",@{$info}[1]," ",@{$info}[2],"*/\n";
-                    print CLASS "\t\tif(Z_TYPE_P(param_",$typeCount,") == IS_",cplusplusToZENDType(@{$info}[2]),") {\n";
-                    print CLASS "\t\t\t",@{$info}[2]," tmp(Z_STRVAL_P(param_",$typeCount++,"));\n";
-                    print CLASS "\t\t\t",$function,"_ptr = new ",$function,"(tmp);\n";
-                    print CLASS "\t\t}\n";
-                    } if defined @{$info};
-                }
-                print CLASS "\t}\n";
-    } if defined @ctor_params;
-
-}
-    print CLASS "\n\tPHP_QT_REGISTER(",$function,"_ptr);\n";
-    print CLASS "\tRETURN_NULL();\n";
-	print CLASS "}\n";
-# destructor
+#destructor
     print CLASS "\nPHP_QT_DESTRUCT(",$function,");\n\n";
 
 	close CLASS;
@@ -1286,29 +1341,13 @@
 		#This is to make sure we have no duplicate methods...
 		my $currentmethod .= "$name $returnType $PHPparams";
 		my $pastmethod .= "$pastname $pastreturn $pastparams";
-		if($currentmethod ne $pastmethod) {
 
-# make the cpp file
-# constructor
-            if ( $name eq $class->{astNodeName} ) {
-                $m->{astNodeName} = "__construct";
+        if($currentmethod ne $pastmethod) {
+            if ( $name =~ /.*Event$/ ) {
+                return;
             }
-# 		    if ( $name eq $class->{astNodeName} ) {
-# #                @constructors[$ctorCount++] = [@ctor_params];
-# # ?
-# 			    if ($PHPparams eq () ) {
-# 				    $nullctor = 1;
-# 			    }
-# # methods
-#		    } else {
-			    if ( $name =~ /.*Event$/ ) {
-				    return;
-			    }
 # prepare arguments
-                mergeNumbers($class,$m);
-# deprecated
-#                cplusplusToMacro($class,$m);
-   		    #}
+            mergeNumbers($class,$m);
 	    }
 	}
 	#Part of the duplicate methods check.
@@ -1359,10 +1398,17 @@
 				}
 #                $enum =~ s/=//g;
                 my @constant = split(/=/,$enum_);
-                print PHP_QT_MINIT "\t	REGISTER_LONG_CONSTANT(\"",uc($class->{astNodeName}),"_",uc($enum),"_",uc($constant[0]),"\", ",$class->{astNodeName},"::",$constant[0],", CONST_CS | CONST_PERSISTENT);\n";
-                print AG_QT_MINIT "\t  REGISTER_LONG_CONSTANT(\"",uc($class->{astNodeName}),"_",uc($enum),"_",uc($constant[0]),"\", ",$class->{astNodeName},"::",$constant[0],", CONST_CS | CONST_PERSISTENT);\n";
-				$enumCount++;
 
+# what to skip?
+                    if(!(
+                            $class->{astNodeName} =~ /QContextMenuEvent/
+                        ||  $class->{astNodeName} =~ /QInputMethodEvent/
+                        ||  $class->{astNodeName} =~ /QPainter/
+                        ||  $class->{astNodeName} =~ /QTabletEvent/
+                    )){
+                        print AG_QT_MINIT "\t  REGISTER_LONG_CONSTANT(\"",uc($class->{astNodeName}),"_",uc($enum),"_",uc($constant[0]),"\", ",$class->{astNodeName},"::",$constant[0],", CONST_CS | CONST_PERSISTENT);\n";
+                        $enumCount++;
+                    }
 			}
 
 			print CLASS "\n\t\t}\n*/";
@@ -1418,12 +1464,21 @@
         my $paramstring = "";
         foreach my $param ( @{$method->{ParamList}} ) {
 
+# add cast type
+            $param->AddProp("cast",$param->{ArgType});
+            $param->{cast} = checkCast($param->{cast});
+
             $param = checkEnum($param);
 
-            if ( $param->{ArgType} =~ /char/ ) {
+# TODO: test it with QByteArray
+            if ( $param->{ArgType} =~ /const char/ ) {
                 $paramstring .= "s";
+            } elsif ( $param->{ArgType} =~ /char/ ) {
+                $paramstring .= "l";
             } elsif ( $param->{ArgType} =~ /int/ ) {
                 $paramstring .= "l";
+            } elsif ( $param->{ArgType} =~ /double/ ) {
+                $paramstring .= "l";
             } elsif ( $param->{ArgType} =~ /bool/ ) {
                 $paramstring .= "b";
             } else {
@@ -1455,8 +1510,12 @@
         $tmp{ $paramstring }->AddProp("Access",$method->{Access});
         $tmp{ $paramstring }->AddProp("Flags",$method->{Flags});
 
+        if($classname eq $tmp{ $paramstring }->{methodname} ) {
+            $tmp{ $paramstring }->AddProp("ctor","ctor");
+        }
+
     }
-
+    
     return %tmp;
 
 }
@@ -1493,15 +1552,27 @@
         my $param_zend_function;    # parameter for zend function
         my @objects;                # object stack
         my $method = $args{$key};   # helping
-        my $access = $method->{Access};
+# skip qt_xxx
+        if(
+            $method->{methodname} =~ /qt_/
+            || $method->{methodname} =~ /className/
+        ){
+            last;
+        }
+
         my $object_selection = "";
         my $tmp_count = 0;          # helping
         my $c__ = $c;                # ugly
+        my $param_comment = "\t\t/* ";
 
-# informations about return type
+# identical strings grouped
+        $return .= "\t\t/* ".$key." ".$method->{Access}."*/\n";
 
-# identical strings grouped
-        $return .= "\t\t/* ".$key." */\n";
+# skip protected method
+        if($method->{Access} eq "protected"){
+            next;
+        }
+
         $run = $key."_";
 # first parameters are static, the others coincides with this
 # exception: objects
@@ -1510,6 +1581,9 @@
 # parse the first parameters
         foreach my $first_param (@{$params->{ParamList}})  {
 
+# just a comment
+            $param_comment .= $first_param->{ArgType}." ".$first_param->{ArgName}.", ";
+
             # comma for param_zend_function params
             if($d > 0){
                 $param_zend_function .= " ,";
@@ -1519,7 +1593,7 @@
 
             # the types
 # char
-            if ( $first_param->{ArgType} =~ /char/ ) {
+            if ( $first_param->{ArgType} =~ /const char/ ) {
                 $return .= "\t\tchar* var_".$run.$c__.";   // default: ".$first_param->{DefaultValue}."\n";
                 $return .= "\t\tint len_".$run.$c__.";\n\n";
 
@@ -1527,7 +1601,13 @@
                 $param_zend_function .= " (".$first_param->{ArgType}.") var_".$run.$c__;
                 $shortstring .= "s";
 # int
-            } elsif ( $first_param->{ArgType} =~ /int/ ) {
+            } elsif (
+                $first_param->{ArgType} =~ /int/
+                || $first_param->{ArgType} =~ /char/
+                || $first_param->{ArgType} =~ /short/
+                || $first_param->{ArgType} =~ /double/
+            ) {
+
                 $return .= "\t\tlong var_".$run.$c__.";    // default: ".$first_param->{DefaultValue}."\n";
 
                 $paratype .= ", &var_".$run.$c__;
@@ -1566,12 +1646,16 @@
         }
         $return .= "\n";
 # add additional objects
+        $param_comment .= " */\n";
+        $return .= $param_comment;
 
         foreach my $params (@{$method->{params}}){
 
             my $skip_first = 1;
             $tmp_count = 0;
 #            $c = $c__;
+# found in qpainter
+            $c__ = $c;
             my $c_ = 0;
 
 # skip first, this was already created
@@ -1589,31 +1673,41 @@
                 } else {
                     $object_call .= ", ";
                 }
-# skip all excepting objects
+
+# char
                 if ( $param->{ArgType} =~ /char/ ) {
-                    $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
-                } elsif ( $param->{ArgType} =~ /int/ ) {
-
+                    $object_call .= "(".$param->{ArgType}.") var_".$run.$c__;
+# int
+# short
+# double
+                } elsif (
+                    $param->{ArgType} =~ /int/
+                    || $param->{ArgType} =~ /short/
+                    || $param->{ArgType} =~ /double/
+                ) {
                     if(defined $param->{cast}){
-                        $object_call .= "(".$param->{cast}.") var_".$run.$c;
+                        $object_call .= "(".$param->{cast}.") var_".$run.$c__;
                     } else {
-                        $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
+                        $object_call .= "(".$param->{ArgType}.") var_".$run.$c__;
                     }
-
+# bool
                 } elsif ( $param->{ArgType} =~ /bool/ ) {
-                    $object_call .= "(".$param->{ArgType}.") var_".$run.$c;
+                    $object_call .= "(".$param->{ArgType}.") var_".$run.$c__;
+# object
                 } else {
                     if($obj_first == 1){
                         $obj_first = 0;
                     } else {
                         $object_test .= " && ";
                     }
-                    $object_test .= "tmp_".$run.$tmp_count++." == \"".$param->{ArgType}."\"";
+# temporarly
+                    my $objectname = $param->{ArgType};
+                    $objectname =~ s/[*&]//;
+                    $object_test .= "tmp_".$run.$tmp_count++." == \"".checkCast($objectname)."\"";
+                    $object_call .= "(".checkCast($param->{ArgType}).") ".$objects[$c_++];
 
-                    $object_call .= "(".$param->{ArgType}.") ".$objects[$c_++];
-
                 }
-                $c++;
+                $c__++;
             } # foreach param
 
             if(!$obj_first){
@@ -1627,7 +1721,10 @@
 
 # write zend_parse_parameters method
         $return .= "\t\tif(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,".$shortstring.$paratype.") == SUCCESS) {\n";
-        $return .= "\t\t\t".$classname." *obj = (".$classname."*) PHP_QT_FETCH();\n";
+# only if ctor
+        if(!($method->{ctor} eq "ctor")) {
+            $return .= "\t\t\t".$classname." *obj = (".$classname."*) PHP_QT_FETCH();\n";
+        }
 
 # objects as return type
         my $obj;
@@ -1660,20 +1757,6 @@
         $return .= "\t\t}\n";
         $tmp_count=0;
 
-        # write code snippets
-        if( $method->{Flags} =~ /s/ ){
-            $access .= "|ZEND_ACC_STATIC";
-        }
-    
-#        print ZEND_PHP_QT "\nZEND_METHOD(",$classname,", ",$method->{methodname},");";
-        print AG_ZEND_PHP_QT "\nZEND_METHOD(",$classname,", ",$method->{methodname},");";
-    
-    # code snippets for php_qt.cpp here
-        $access = uc($access);
-        $access =~ s/_SLOTS//;
-        $access =~ s/_SIGNALS//;
-        print AG_PHP_QT_CPP "\tZEND_ME(",$classname,",",$method->{methodname},",NULL,ZEND_ACC_",$access,")\n";
-
     } # foreach args
 
     my $not_empty = %args;
@@ -1689,6 +1772,22 @@
     my ($classname, $method, $param_zend_function) = @_;
     my $return;
 
+# sometimes it goes wrong
+# it is more secure to re-check that
+    if($classname eq $method->{astNodeName} ) {
+        $method->AddProp("ctor","ctor");
+    }
+
+
+# constructor
+    if($method->{ctor} eq "ctor"){
+        $return .= "\t\t\t".$classname." *".$classname."_ptr = new ".$classname."(".$param_zend_function.");\n";
+        $return .= "\t\t\tPHP_QT_REGISTER(".$classname."_ptr);\n";
+# php class members here
+        $return .= "\t\t\tRETURN_NULL();\n";
+        return $return;
+    }
+
 # no arguments, no object created
     if($param_zend_function eq ""){
         $return .= "\t\t\t".$classname." *obj = (".$classname."*) PHP_QT_FETCH();\n";
@@ -1702,29 +1801,40 @@
     }
 
     my $returntype = $method->{ReturnType};
+
     my $zend_return_type = cplusplusToZEND($returntype);
 
 # handle return value here
 # if no return type specified
-        if ( $zend_return_type eq "NULL" ) {
+        if ( $zend_return_type eq "NULL" || !defined $zend_return_type) {
             $return .=  "\t\t\tobj->".$methodname."(".$param_zend_function.");\n";
             $return .=  "\t\t\tRETURN_NULL();\n";
-# if return type is an object
+# const char*
+        } elsif ( $zend_return_type =~ /char/ ){
+            $return .=  "\t\t\tRETURN_STRING((char*) obj->".$methodname."(".$param_zend_function."), 1);\n" if defined $zend_return_type;
+        } elsif ( $zend_return_type =~ /byte/ ) {
+            $return .= "\t\t// bytearray, skipped\n";
+            $return .= "\t\tRETURN_NULL();\n";
+#if return type is an object
         } elsif ( $zend_return_type =~ /zval/ ) {
-        # TODO: consider 'const',
-        # and non-pointer types, pointer types
-            $return .=  "\t\t\t".$returntype." return_object = (".$returntype.") obj->".$methodname."(".$param_zend_function.");\n";
+#        TODO: consider 'const',
+#        and non-pointer types, pointer types
+            $return .=  "\t\t\t".checkCast($returntype)." return_object = (".checkCast($returntype).") obj->".$methodname."(".$param_zend_function.");\n";
             $return .=  "\t\t\t\tzend_class_entry *ce;                                   \n";
             $return .=  "\t\t\t\tobject_init_ex(return_value, ".$classname."_ce_ptr);     \n";
             $return .=  "\t\t\t\tzend_rsrc_list_entry le;                            \n";
-            $return .=  "\t\t\t\tle.ptr = &return_object;                                       \n";
+            $return .=  "\t\t\t\tle.ptr = (void*) &return_object;                                       \n";
             $return .=  "\t\t\t\tphp_qt_register(return_value,le);                   \n";
             $return .=  "\t\t\t\treturn;                                             \n";
-# simple types
+#simple types
         } else {
             $return .=  "\t\t\tRETURN_".uc($zend_return_type)."(obj->".$methodname."(".$param_zend_function."));\n" if defined $zend_return_type;
         }
 
+    if(!defined $zend_return_type){
+        $return .= "";
+    }
+
     return $return;
 
 }
@@ -1732,22 +1842,61 @@
 sub checkEnum(){
     my ($param) = @_;
 
-    if($param->{ArgType} =~ /Qt::/){
-
         my $ArgType = kalyptusDataDict::ctypemap($param->{ArgType});
 
+    if(!($param->{ArgType} =~ /qt_/)){
         if($ArgType eq ""){
             $ArgType = "int";
+            $ArgType = $param->{ArgType};
         }
 
-# copy the arg type for typecast
-        $param->AddProp("cast",$param->{ArgType});
         $param->{ArgType} = $ArgType;
-
     }
 
     return $param;
 }
 
+# check additional header files
+sub checkIncludes(){
+    my ($class) = @_;
+    my $return;
+
+    if($class->{astNodeName} eq "QFont") {
+        $return .= "#include <QStringList>\n";
+    }
+    if($class->{astNodeName} eq "QPainter") {
+        $return .= "#include <QPainterPath>\n";
+    }
+
+    return $return;
+
+}
+
+sub checkCast(){
+
+    my ($returntype) = @_;
+
+    if($returntype eq 'Style') {
+        $returntype = "QFont::Style";
+    }
+    if($returntype eq 'StyleHint') {
+        $returntype = "QFont::StyleHint";
+    }
+    if($returntype eq 'StyleStrategy') {
+        $returntype = "QFont::StyleStrategy";
+    }
+    if($returntype eq 'CompositionMode') {
+        $returntype = "QPainter::CompositionMode";
+    }
+    if($returntype eq 'RenderHint') {
+        $returntype = "QPainter::RenderHint";
+    }
+
+    $returntype =~ s/qt_//;
+
+    return $returntype;
+}
+
+
 1;
 



From tm243 at berlios.de  Sun Jan 15 19:52:32 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 15 Jan 2006 19:52:32 +0100
Subject: [Php-qt-svn] r186 - trunk/qt
Message-ID: <200601151852.k0FIqWZ3032595@sheep.berlios.de>

Author: tm243
Date: 2006-01-15 19:52:28 +0100 (Sun, 15 Jan 2006)
New Revision: 186

Modified:
   trunk/qt/ag_php_qt_cpp.inc
Log:
fixed two compilation errors.

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-01-15 18:42:42 UTC (rev 185)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-01-15 18:52:28 UTC (rev 186)
@@ -300,7 +300,7 @@
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce,"QDropEvent",QDropEvent_methods);
     QDropEvent_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QEvent_ce_ptr,NULL TSRMLS_CC);
-	zend_do_inheritance(QDropEvent_ce_ptr, QMimeSource_ce_ptr TSRMLS_CC);
+//	zend_do_inheritance(QDropEvent_ce_ptr, QMimeSource_ce_ptr TSRMLS_CC);
 
 
 }
@@ -577,7 +577,7 @@
 	ZEND_ME(QLabel,qt_cast,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,metaObject,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,setScaledContents,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PROTECTED)
+	ZEND_ME(QLabel,event,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,indent,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,qt_emit,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QLabel,pixmap,NULL,ZEND_ACC_PUBLIC)



From tm243 at berlios.de  Sun Jan 15 19:57:26 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 15 Jan 2006 19:57:26 +0100
Subject: [Php-qt-svn] r187 - trunk/tutorials/t6
Message-ID: <200601151857.k0FIvQQi003050@sheep.berlios.de>

Author: tm243
Date: 2006-01-15 19:57:21 +0100 (Sun, 15 Jan 2006)
New Revision: 187

Modified:
   trunk/tutorials/t6/main.php
Log:
the 4th param is neccessary in addWidget method.

Modified: trunk/tutorials/t6/main.php
===================================================================
--- trunk/tutorials/t6/main.php	2006-01-15 18:52:28 UTC (rev 186)
+++ trunk/tutorials/t6/main.php	2006-01-15 18:57:21 UTC (rev 187)
@@ -52,10 +52,10 @@
     //        $this->quit->setFont(QFont("Times", 18, QFont::Bold));
             $this->connect($this->quit, SIGNAL("clicked()"), QApplication::instance(), SLOT("quit()"));
     
-            $this->grid = new QGridLayout($this);
+            $this->grid = new QGridLayout();
             for ($row = 0; $row < 4; ++$row) {
                 for ($column = 0; $column < 4; ++$column) {
-                    $this->grid->addWidget(new LCDRange(), $row, $column);
+                    $this->grid->addWidget(new LCDRange(), $row, $column, 0);
                 }
             }
 



From tm243 at berlios.de  Sun Jan 15 20:23:55 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 15 Jan 2006 20:23:55 +0100
Subject: [Php-qt-svn] r188 - trunk
Message-ID: <200601151923.k0FJNtdc019302@sheep.berlios.de>

Author: tm243
Date: 2006-01-15 20:23:44 +0100 (Sun, 15 Jan 2006)
New Revision: 188

Modified:
   trunk/CHANGELOG
Log:
some memories added to the changelog.

Modified: trunk/CHANGELOG
===================================================================
--- trunk/CHANGELOG	2006-01-15 18:57:21 UTC (rev 187)
+++ trunk/CHANGELOG	2006-01-15 19:23:44 UTC (rev 188)
@@ -1 +1,5 @@
-22.10.2005 - initial import -
\ No newline at end of file
+0.0.2 - a lot of new classes added
+	  - multiple inheritance solved
+	  - kalyptus extension written
+	  - tutorials (1-6) added
+0.0.1 - initial import -
\ No newline at end of file



From tm243 at berlios.de  Mon Jan 16 00:27:32 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 16 Jan 2006 00:27:32 +0100
Subject: [Php-qt-svn] r189 - trunk
Message-ID: <200601152327.k0FNRWUB027122@sheep.berlios.de>

Author: tm243
Date: 2006-01-16 00:27:31 +0100 (Mon, 16 Jan 2006)
New Revision: 189

Modified:
   trunk/README
Log:
README file improved.

Modified: trunk/README
===================================================================
--- trunk/README	2006-01-15 19:23:44 UTC (rev 188)
+++ trunk/README	2006-01-15 23:27:31 UTC (rev 189)
@@ -20,19 +20,19 @@
 After unpacking or checking out from SVN copy the unpacked php_qt directory into the 
 php-5.1xxx/ext/ directory.
 
-We prefer to build PHP-Qt as module!
+We prefer to build PHP-Qt as module! In this example php is installed in /usr/local/
 
 At first it is neccessary to check your environment for compiling. 
 To do that change into this directory and run phpize and configure:
 
-phpize
+/usr/local/bin/phpize
 
-./configure --enable-php_qt
+./configure --with-php_qt[=/usr/lib/qt4/include] 		\
+  --with-qtlib=/usr/lib/qt4 							\
+  --with-php-config=/usr/local/php511/bin/php-config	\
 
-If you have two or more php installations you can specify the path with
+The arguments in brackets are optional but may be necessary on your system.
 
---prefix=/path/to/php5
-
 To remove old objectfiles run 
 
 make clean



From tm243 at berlios.de  Mon Jan 16 10:56:13 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 16 Jan 2006 10:56:13 +0100
Subject: [Php-qt-svn] r190 - trunk
Message-ID: <200601160956.k0G9uDWK012675@sheep.berlios.de>

Author: tm243
Date: 2006-01-16 10:56:13 +0100 (Mon, 16 Jan 2006)
New Revision: 190

Modified:
   trunk/README
Log:
pathes and description imrpoved.

Modified: trunk/README
===================================================================
--- trunk/README	2006-01-15 23:27:31 UTC (rev 189)
+++ trunk/README	2006-01-16 09:56:13 UTC (rev 190)
@@ -12,20 +12,23 @@
 PHP5: You should have a the header files and the development scripts.
 Qt4: You should have the header files.
 
-Note: at this time it is only possible to compile it in a unix envireonment.
+Note: at this time it is only possible to compile it in a unix environment.
 
 Compiling and installation
 ==========================
 
-After unpacking or checking out from SVN copy the unpacked php_qt directory into the 
-php-5.1xxx/ext/ directory.
+You have a php-5.1.xxx build directory where you have compiled php. You also 
+have a copy of php_qt. After downloading or checking out from SVN copy the 
+unpacked php_qt directory into the php-5.1xxx/ext/ directory.
 
-We prefer to build PHP-Qt as module! In this example php is installed in /usr/local/
+We prefer to build PHP-Qt as module! In this example php is 
+installed in /usr/local/php511
 
 At first it is neccessary to check your environment for compiling. 
-To do that change into this directory and run phpize and configure:
+To do that change into the php-5.1xxx/ext/php_qt directory and run phpize 
+and configure:
 
-/usr/local/bin/phpize
+/usr/local/php511/bin/phpize
 
 ./configure --with-php_qt[=/usr/lib/qt4/include] 		\
   --with-qtlib=/usr/lib/qt4 							\
@@ -45,7 +48,8 @@
 
 make install
 
-to copy 'php_qt.so' into php's extension directory.
+to copy 'php_qt.so' into php's extension directory. If it fails please check 
+all related pathes on your system at first.
 
 To test it, simply run one of the test scripts in the php_qt/test/ subdirectory.
 



From tm243 at berlios.de  Mon Jan 16 11:27:07 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 16 Jan 2006 11:27:07 +0100
Subject: [Php-qt-svn] r191 - trunk
Message-ID: <200601161027.k0GAR7bZ017079@sheep.berlios.de>

Author: tm243
Date: 2006-01-16 11:27:06 +0100 (Mon, 16 Jan 2006)
New Revision: 191

Modified:
   trunk/TODO
Log:
UTF-8 support.

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-01-16 09:56:13 UTC (rev 190)
+++ trunk/TODO	2006-01-16 10:27:06 UTC (rev 191)
@@ -1,5 +1,5 @@
 
 - handling of optional method arguments
 - custom SLOTS/SIGNALS
-- cpp class members as php class members
 - virtual methods
+- UTF-8/UTF-16 support



From tm243 at berlios.de  Mon Jan 16 13:19:50 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 16 Jan 2006 13:19:50 +0100
Subject: [Php-qt-svn] r192 - in trunk: . qt qt/text_related tests
Message-ID: <200601161219.k0GCJo47016941@sheep.berlios.de>

Author: tm243
Date: 2006-01-16 13:19:47 +0100 (Mon, 16 Jan 2006)
New Revision: 192

Added:
   trunk/tests/qstring.php
Modified:
   trunk/CHANGELOG
   trunk/TODO
   trunk/qt/php_qt.cpp
   trunk/qt/text_related/qstring.cpp
   trunk/qt/zend_php_qt.h
Log:
QStrings are allowed for echo,print commands.

Modified: trunk/CHANGELOG
===================================================================
--- trunk/CHANGELOG	2006-01-16 10:27:06 UTC (rev 191)
+++ trunk/CHANGELOG	2006-01-16 12:19:47 UTC (rev 192)
@@ -2,4 +2,5 @@
 	  - multiple inheritance solved
 	  - kalyptus extension written
 	  - tutorials (1-6) added
+	  - UTF-8/UTF-16 support
 0.0.1 - initial import -
\ No newline at end of file

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-01-16 10:27:06 UTC (rev 191)
+++ trunk/TODO	2006-01-16 12:19:47 UTC (rev 192)
@@ -2,4 +2,4 @@
 - handling of optional method arguments
 - custom SLOTS/SIGNALS
 - virtual methods
-- UTF-8/UTF-16 support
+

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-16 10:27:06 UTC (rev 191)
+++ trunk/qt/php_qt.cpp	2006-01-16 12:19:47 UTC (rev 192)
@@ -1193,6 +1193,7 @@
 
 static zend_function_entry QString_methods[] = { 
     ZEND_ME(QString,__construct,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,__toString,NULL,ZEND_ACC_PUBLIC)
     ZEND_ME(QString,append,NULL,ZEND_ACC_PUBLIC)
     ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
     ZEND_ME(QString,at,NULL,ZEND_ACC_PUBLIC)

Modified: trunk/qt/text_related/qstring.cpp
===================================================================
--- trunk/qt/text_related/qstring.cpp	2006-01-16 10:27:06 UTC (rev 191)
+++ trunk/qt/text_related/qstring.cpp	2006-01-16 12:19:47 UTC (rev 192)
@@ -50,6 +50,16 @@
 
 }
 
+ZEND_METHOD(QString,__toString){
+
+  QString *QString_ptr = (QString *) PHP_QT_FETCH();
+
+  int l = QString_ptr->size();
+  char* c = (char*) (QString_ptr->toAscii()).constData();
+  RETURN_STRING(c,l);
+
+}
+
 ZEND_METHOD(QString,append){
 
     const char *string; int *string_len;

Modified: trunk/qt/zend_php_qt.h
===================================================================
--- trunk/qt/zend_php_qt.h	2006-01-16 10:27:06 UTC (rev 191)
+++ trunk/qt/zend_php_qt.h	2006-01-16 12:19:47 UTC (rev 192)
@@ -80,6 +80,7 @@
 
 /* QString */
 ZEND_METHOD(QString,__construct);
+ZEND_METHOD(QString,__toString);
 ZEND_METHOD(QString,append);
 ZEND_METHOD(QString,arg);
 ZEND_METHOD(QString,at);

Added: trunk/tests/qstring.php
===================================================================
--- trunk/tests/qstring.php	2006-01-16 10:27:06 UTC (rev 191)
+++ trunk/tests/qstring.php	2006-01-16 12:19:47 UTC (rev 192)
@@ -0,0 +1,12 @@
+<?php
+
+    if(!extension_loaded('php_qt')) {
+        dl('php_qt.' . PHP_SHLIB_SUFFIX);
+    }
+
+	$QString = new QString("I'm a test!");
+
+	echo $QString;
+
+
+?>
\ No newline at end of file



From tm243 at berlios.de  Mon Jan 16 17:28:47 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 16 Jan 2006 17:28:47 +0100
Subject: [Php-qt-svn] r193 - in trunk: . qt qt/text_related tests
Message-ID: <200601161628.k0GGSlOE021401@sheep.berlios.de>

Author: tm243
Date: 2006-01-16 17:28:40 +0100 (Mon, 16 Jan 2006)
New Revision: 193

Modified:
   trunk/TODO
   trunk/qt/ag_php_qt_cpp.inc
   trunk/qt/ag_zend_php_qt.inc
   trunk/qt/php_qt.cpp
   trunk/qt/php_qt.h
   trunk/qt/text_related/qlatin1string.cpp
   trunk/qt/text_related/qstring.cpp
   trunk/qt/zend_php_qt.h
   trunk/tests/qstring.php
Log:
QString improved, we have unicode support now.

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-01-16 12:19:47 UTC (rev 192)
+++ trunk/TODO	2006-01-16 16:28:40 UTC (rev 193)
@@ -2,4 +2,4 @@
 - handling of optional method arguments
 - custom SLOTS/SIGNALS
 - virtual methods
-
+- float

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-01-16 12:19:47 UTC (rev 192)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-01-16 16:28:40 UTC (rev 193)
@@ -14,6 +14,7 @@
 
 }
 static zend_function_entry QChar_methods[] = {
+	ZEND_ME(QChar, __toString,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,combiningClass,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,isUpper,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,joining,NULL,ZEND_ACC_PUBLIC)

Modified: trunk/qt/ag_zend_php_qt.inc
===================================================================
--- trunk/qt/ag_zend_php_qt.inc	2006-01-16 12:19:47 UTC (rev 192)
+++ trunk/qt/ag_zend_php_qt.inc	2006-01-16 16:28:40 UTC (rev 193)
@@ -1,6 +1,7 @@
 
 ZEND_METHOD(QActionEvent, action);
 ZEND_METHOD(QActionEvent, before);
+ZEND_METHOD(QChar, __toString);
 ZEND_METHOD(QChar, combiningClass);
 ZEND_METHOD(QChar, isUpper);
 ZEND_METHOD(QChar, joining);

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-16 12:19:47 UTC (rev 192)
+++ trunk/qt/php_qt.cpp	2006-01-16 16:28:40 UTC (rev 193)
@@ -166,6 +166,17 @@
 	REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_GUISERVER",QApplication::GuiServer ,CONST_CS | CONST_PERSISTENT);	
 	
     _register_QString(TSRMLS_C);
+      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONDEFAULT", QString::SectionDefault, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONSKIPEMPTY", QString::SectionSkipEmpty, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONINCLUDELEADINGSEP", QString::SectionIncludeLeadingSep, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONINCLUDETRAILINGSEP", QString::SectionIncludeTrailingSep, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONCASEINSENSITIVESEPS", QString::SectionCaseInsensitiveSeps, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_SPLITBEHAVIOR_KEEPEMPTYPARTS", QString::KeepEmptyParts, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_SPLITBEHAVIOR_SKIPEMPTYPARTS", QString::SkipEmptyParts, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_D", QString::NormalizationForm_D, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_C", QString::NormalizationForm_C, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_KD", QString::NormalizationForm_KD, CONST_CS | CONST_PERSISTENT);
+      REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_KC", QString::NormalizationForm_KC, CONST_CS | CONST_PERSISTENT);
     _register_QLatin1String(TSRMLS_C);
     _register_QObject(TSRMLS_C);
     _register_QWidget(TSRMLS_C);
@@ -1189,17 +1200,103 @@
 
 ///
 
+static zend_function_entry QLatin1String_methods[] = {
+    ZEND_ME(QLatin1String, __construct,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QLatin1String,latin1,NULL,ZEND_ACC_PUBLIC)
 
+    {NULL,NULL,NULL}
+};
 
-static zend_function_entry QString_methods[] = { 
-    ZEND_ME(QString,__construct,NULL,ZEND_ACC_PUBLIC)
+void _register_QLatin1String(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLatin1String",QLatin1String_methods);
+    QLatin1String_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
+static zend_function_entry QString_methods[] = {
     ZEND_ME(QString,__toString,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,compare,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,utf16,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,constData,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,insert,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,clear,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,setUtf16,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,prepend,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,trimmed,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,chop,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,leftJustified,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,squeeze,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,count,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,fromAscii,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+    ZEND_ME(QString,toLongLong,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toUpper,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString, __construct,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,normalized,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,fromUtf16,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+    ZEND_ME(QString,isRightToLeft,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,endsWith,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,number,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+    ZEND_ME(QString,localeAwareCompare,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,section,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,isSimpleText,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,size,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,simplified,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toUInt,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toUShort,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,truncate,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toAscii,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,length,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,right,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,push_front,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toUtf8,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toULongLong,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,indexOf,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,fromRawData,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+    ZEND_ME(QString,constEnd,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,left,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,fromLocal8Bit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+    ZEND_ME(QString,startsWith,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,remove,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,isEmpty,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,vsprintf,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toFloat,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,isDetached,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,reserve,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toULong,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toShort,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,split,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,setUnicode,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,fromLatin1,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+    ZEND_ME(QString,data,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toLatin1,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,end,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,contains,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,resize,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,fromUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+    ZEND_ME(QString,toLong,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,detach,NULL,ZEND_ACC_PUBLIC)
     ZEND_ME(QString,append,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,mid,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toDouble,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,fill,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,rightJustified,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toLower,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,lastIndexOf,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,unicode,NULL,ZEND_ACC_PUBLIC)
     ZEND_ME(QString,at,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,begin,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,push_back,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,capacity,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,constBegin,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toLocal8Bit,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,toInt,NULL,ZEND_ACC_PUBLIC)
+    ZEND_ME(QString,isNull,NULL,ZEND_ACC_PUBLIC)
 
     {NULL,NULL,NULL}
-
 };
 
 void _register_QString(TSRMLS_D)
@@ -1212,24 +1309,6 @@
 
 }
 
-static zend_function_entry QLatin1String_methods[] = { 
-    ZEND_ME(QLatin1String,__construct,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLatin1String,latin1,NULL,ZEND_ACC_PUBLIC)
-
-    {NULL,NULL,NULL}
-
-};
-
-void _register_QLatin1String(TSRMLS_D){
-
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"QLatin1String",QLatin1String_methods);
-    QLatin1String_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
-
-    zend_declare_property_string(QLatin1String_ce_ptr,"QLatin1String",strlen("QLatin1String"),"",ZEND_ACC_PROTECTED TSRMLS_CC);
-
-}
-
 static zend_function_entry QObject_methods[] = { 
     ZEND_ME(QObject,__construct,NULL,ZEND_ACC_PUBLIC)
     ZEND_ME(QObject,test,NULL,ZEND_ACC_PUBLIC)    

Modified: trunk/qt/php_qt.h
===================================================================
--- trunk/qt/php_qt.h	2006-01-16 12:19:47 UTC (rev 192)
+++ trunk/qt/php_qt.h	2006-01-16 16:28:40 UTC (rev 193)
@@ -382,6 +382,11 @@
 extern zend_class_entry *QLCDNumber_ce_ptr;
 extern zend_class_entry *QMimeSource_ce_ptr;
 
+extern zend_class_entry *QCharRef_ce_ptr;
+void    _register_QCharRef();
+extern zend_class_entry *QLatin1String_ce_ptr;
+void    _register_QLatin1String();
+
 #include "ag_extern_zend_class_entry.inc"
 
 

Modified: trunk/qt/text_related/qlatin1string.cpp
===================================================================
--- trunk/qt/text_related/qlatin1string.cpp	2006-01-16 12:19:47 UTC (rev 192)
+++ trunk/qt/text_related/qlatin1string.cpp	2006-01-16 16:28:40 UTC (rev 193)
@@ -1,21 +1,27 @@
 /*
  * PHP-Qt - The PHP language bindings for Qt
  *
- * Copyright (C) 2005 Thomas Moenicke <tm at ippfp.org>
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
- * 
+ *
  * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Lesser General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QLatin1String.cpp - QLatin1String PHP implementation.
+ * begin           : Mon Jan 16 14:47:09 2006
+ * generated by    : moni using kalyptus 0.9.
  */
 
 #include <iostream>
@@ -24,33 +30,51 @@
 #include <QLatin1String>
 #include "../php_qt.h"
 
-/**
- *  QLatin1String
+
+/*********************************
+ *    class     QLatin1String */
+/*
+ *    function  QLatin1String
+ *    flags:    t
  */
+ZEND_METHOD(QLatin1String, __construct){
 
-ZEND_METHOD(QLatin1String,__construct){
+	if (ZEND_NUM_ARGS() == 1){
+		/* s public*/
+		char* var_s_0;   // default: 
+		int len_s_0;
 
-    char *string; int *string_len;
-    QLatin1String* QLatin1String_ptr;
 
-    if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &string, &string_len) == FAILURE) {
-        return; }
+		/* const char* s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
 
-    zend_update_property_string(Z_OBJCE_P(getThis()),getThis(),"QLatin1String",strlen("QLatin1String"), string TSRMLS_DC);
+			
+			QLatin1String *QLatin1String_ptr = new QLatin1String( (const char*) var_s_0);
+			PHP_QT_REGISTER(QLatin1String_ptr);
+			RETURN_NULL();
+		}
+	}
+}
 
-    QLatin1String_ptr = new QLatin1String(string);
-    PHP_QT_REGISTER(QLatin1String_ptr);
-
+/*********************************
+ *    class     QLatin1String */
+/*
+ *    function  latin1
+ *    flags:    c
+ */
+ZEND_METHOD(QLatin1String, latin1){
+	if (ZEND_NUM_ARGS() == 0){
+			QLatin1String *obj = (QLatin1String*) PHP_QT_FETCH();
+			const char * return_object = (const char *) obj->latin1();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QLatin1String_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
-ZEND_METHOD(QLatin1String,latin1){
 
-    zval *string;
-    QLatin1String* QLatin1String_ptr = (QLatin1String*) PHP_QT_FETCH();;
-    
-    string = zend_read_property(Z_OBJCE_P(getThis()),getThis(),"QLatin1String",strlen("QLatin1String"),1 TSRMLS_DC);
+PHP_QT_DESTRUCT(QLatin1String);
 
-    RETURN_STRING(Z_STRVAL_P(string),1);
-
-}
-

Modified: trunk/qt/text_related/qstring.cpp
===================================================================
--- trunk/qt/text_related/qstring.cpp	2006-01-16 12:19:47 UTC (rev 192)
+++ trunk/qt/text_related/qstring.cpp	2006-01-16 16:28:40 UTC (rev 193)
@@ -1,21 +1,27 @@
 /*
  * PHP-Qt - The PHP language bindings for Qt
  *
- * Copyright (C) 2005 Thomas Moenicke <tm at ippfp.org>
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
- * 
+ *
  * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Lesser General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QString.cpp - QString PHP implementation.
+ * begin           : Mon Jan 16 14:47:09 2006
+ * generated by    : moni using kalyptus 0.9.
  */
 
 #include <iostream>
@@ -24,74 +30,2837 @@
 #include <QString>
 #include "../php_qt.h"
 
-/**
- *  QString
+
+ZEND_METHOD(QString,__toString){
+
+  QString *QString_ptr = (QString *) PHP_QT_FETCH();
+
+  int l = QString_ptr->size();
+  char* c = (char*) (QString_ptr->toAscii()).constData();
+  RETURN_STRING(c,l);
+}
+
+
+/*		public enumSectionFlag:long {
+			SectionDefault = 0x00,
+			SectionSkipEmpty = 0x01,
+			SectionIncludeLeadingSep = 0x02,
+			SectionIncludeTrailingSep = 0x04,
+			SectionCaseInsensitiveSeps = 0x08
+		}
+*/
+
+/*		public enumSplitBehavior:long {
+			SplitBehavior = 0,
+			SplitBehavior = 1
+		}
+*/
+
+/*		public enumNormalizationForm:long {
+			NormalizationForm = 0,
+			NormalizationForm = 1,
+			NormalizationForm = 2,
+			NormalizationForm = 3
+		}
+*/
+/*********************************
+ *    class     QString */
+/*
+ *    function  compare
+ *    flags:    c
  */
+ZEND_METHOD(QString, compare){
 
-ZEND_METHOD(QString,__construct){
+	if (ZEND_NUM_ARGS() == 1){
+		/* o public*/
+		zval* z_var_o_0;   // default: 
 
-    char *string;
-    int *string_len;
-    QString *QString_ptr;
+		/* const QString& s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-    if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &string, &string_len) != FAILURE) {
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QString") {
+				RETURN_LONG(obj->compare((const QString&) var_o_0));
+			}
+		}
+	}
 
-        QString_ptr = new QString((const char*) string);
-        zend_update_property_string(Z_OBJCE_P(getThis()),getThis(),"QString",strlen("QString"), string TSRMLS_DC);
-        PHP_QT_REGISTER(QString_ptr);
+	if (ZEND_NUM_ARGS() == 2){
+		/* oo public*/
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
 
-    } else { 
+		/* const QString& s1, const QString& s2,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-        QString_ptr = new QString();
-//        zend_update_property_string(Z_OBJCE_P(getThis()),getThis(),"QString",strlen("QString"), "");
-        PHP_QT_REGISTER(QString_ptr);
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			
+			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
+				RETURN_LONG(obj->compare((const QString&) var_oo_0, (const QString&) var_oo_1));
+			}
+		}
+	}
+}
 
-    }
+/*********************************
+ *    class     QString */
+/*
+ *    function  utf16
+ *    flags:    c
+ */
+ZEND_METHOD(QString, utf16){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			const ushort * return_object = (const ushort *) obj->utf16();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
+}
 
+/*********************************
+ *    class     QString */
+/*
+ *    function  constData
+ *    flags:    c
+ */
+ZEND_METHOD(QString, constData){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			const QChar * return_object = (const QChar *) obj->constData();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
 }
 
-ZEND_METHOD(QString,__toString){
+/*********************************
+ *    class     QString */
+/*
+ *    function  insert
+ *    flags:    
+ */
+ZEND_METHOD(QString, insert){
 
-  QString *QString_ptr = (QString *) PHP_QT_FETCH();
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
 
-  int l = QString_ptr->size();
-  char* c = (char*) (QString_ptr->toAscii()).constData();
-  RETURN_STRING(c,l);
+		/* int i, char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
 
+			
+			QString & return_object = (QString &) obj->insert((int) var_ll_0 ,(char) var_ll_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+		/* lo public*/
+		long var_lo_0;    // default: 
+		zval* z_var_lo_1;   // default: 
+
+		/* int i, const QString& s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
+
+			QString tmp_lo_0(var_lo_1->metaObject()->className());
+			
+			if(tmp_lo_0 == "const QString") {
+				QString & return_object = (QString &) obj->insert((int) var_lo_0, (const QString&) var_lo_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* lol public*/
+		long var_lol_0;    // default: 
+		zval* z_var_lol_1;   // default: 
+		long var_lol_2;    // default: 
+
+		/* int i, const QChar* uc, int len,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_lol_0, &z_var_lol_1, &var_lol_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_lol_1 = (QObject*) php_qt_fetch(z_var_lol_1);
+
+			QString tmp_lol_0(var_lol_1->metaObject()->className());
+			
+			if(tmp_lol_0 == "const QChar") {
+				QString & return_object = (QString &) obj->insert((int) var_lol_0, (const QChar*) var_lol_1, (int) var_lol_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
 }
 
-ZEND_METHOD(QString,append){
+/*********************************
+ *    class     QString */
+/*
+ *    function  clear
+ *    flags:    
+ */
+ZEND_METHOD(QString, clear){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			obj->clear();
+			RETURN_NULL();
+	}
+}
 
-    const char *string; int *string_len;
-    QString *QString_ptr = (QString *) PHP_QT_FETCH();
+/*********************************
+ *    class     QString */
+/*
+ *    function  setUtf16
+ *    flags:    
+ */
+ZEND_METHOD(QString, setUtf16){
 
-    if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &string, &string_len) != FAILURE) {
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		long var_ol_0;    // default: 
+		long var_ol_1;    // default: 
 
-        QString_ptr->append(string);
-        /* achtung: *2 */
-        zend_update_property_stringl(Z_OBJCE_P(getThis()),getThis(),"QString",strlen("QString"), (char*) QString_ptr->data(), QString_ptr->size()*2 TSRMLS_DC);
-    }
+		/* const ushort* utf16, int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
 
+			
+			QString & return_object = (QString &) obj->setUtf16((const ushort*) var_ol_0 ,(int) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
 }
 
-ZEND_METHOD(QString,arg){
-    NOT_YET_IMPLEMENTED
+/*********************************
+ *    class     QString */
+/*
+ *    function  prepend
+ *    flags:    
+ */
+ZEND_METHOD(QString, prepend){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString & return_object = (QString &) obj->prepend((char) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+		/* s public*/
+		char* var_s_0;   // default: 
+		int len_s_0;
+
+
+		/* const char* s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString & return_object = (QString &) obj->prepend( (const char*) var_s_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+		/* o public*/
+		zval* z_var_o_0;   // default: 
+
+		/* const QString& s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QString") {
+				QString & return_object = (QString &) obj->prepend((const QString&) var_o_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}			
+			if(tmp_o_0 == "const QByteArray") {
+				QString & return_object = (QString &) obj->prepend((const QByteArray&) var_o_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
 }
 
-ZEND_METHOD(QString,at){
+/*********************************
+ *    class     QString */
+/*
+ *    function  trimmed
+ *    flags:    c
+ */
+ZEND_METHOD(QString, trimmed){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QString return_object = (QString) obj->trimmed();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
+}
 
-    int i;
-    QString *QString_ptr = (QString *) PHP_QT_FETCH();
+/*********************************
+ *    class     QString */
+/*
+ *    function  chop
+ *    flags:    
+ */
+ZEND_METHOD(QString, chop){
 
-    if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &i) != FAILURE) {
-        if((int) i > QString_ptr->size()){
-            php_error(E_ERROR,"QString::at(size) size out of bounds");
-            return;
-        }
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
 
-        char* l = (char *) &QString_ptr->at((int) i);
-        RETURN_STRING(l,1);
-    }
+		/* int n,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
 
+			
+			obj->chop((int) var_l_0);
+			RETURN_NULL();
+		}
+	}
 }
 
+/*********************************
+ *    class     QString */
+/*
+ *    function  leftJustified
+ *    flags:    c
+ */
+ZEND_METHOD(QString, leftJustified){
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* lll public*/
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: QLatin1Char(' ')
+		long var_lll_2;    // default: false
+
+		/* int width, char fill, int trunc,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->leftJustified((int) var_lll_0 ,(char) var_lll_1 ,(bool) var_lll_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  squeeze
+ *    flags:    
+ */
+ZEND_METHOD(QString, squeeze){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			obj->squeeze();
+			RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  count
+ *    flags:    c
+ */
+ZEND_METHOD(QString, count){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			RETURN_LONG(obj->count());
+	}
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o public*/
+		zval* z_var_o_0;   // default: 
+
+		/* const QRegExp& ,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QRegExp") {
+				RETURN_LONG(obj->count((const QRegExp&) var_o_0));
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: Qt::CaseSensitive
+
+		/* const QString& s, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QString") {
+				RETURN_LONG(obj->count((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
+			}
+		}
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: Qt::CaseSensitive
+
+		/* char c, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			RETURN_LONG(obj->count((char) var_ll_0 ,(Qt::CaseSensitivity) var_ll_1));
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  fromAscii
+ *    flags:    s
+ */
+ZEND_METHOD(QString, fromAscii){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* sl public*/
+		char* var_sl_0;   // default: 
+		int len_sl_0;
+
+		long var_sl_1;    // default: -1
+
+		/* const char* , int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->fromAscii( (const char*) var_sl_0 ,(int) var_sl_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toLongLong
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toLongLong){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 0
+		long var_ll_1;    // default: 10
+
+		/* int* ok, int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			obj->toLongLong((bool*) var_ll_0 ,(int) var_ll_1);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toUpper
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toUpper){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QString return_object = (QString) obj->toUpper();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  QString
+ *    flags:    
+ */
+ZEND_METHOD(QString, __construct){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *QString_ptr = new QString();
+			PHP_QT_REGISTER(QString_ptr);
+			RETURN_NULL();
+	}
+
+	if (ZEND_NUM_ARGS() == 1){
+
+		zval *var_l_0;
+
+		/* s public*/
+		char* var_s_0;   // default: 
+		int len_s_0;
+
+		/* char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_DC,"z", &var_l_0) == SUCCESS) {
+
+		  QString *QString_ptr;
+	
+		  if(Z_TYPE_P(var_l_0) == IS_LONG)
+  		  {		
+			QString_ptr = new QString((char)Z_LVAL_P(var_l_0));
+		  } else if(Z_TYPE_P(var_l_0) == IS_STRING)
+		  {
+			QString_ptr = new QString(Z_STRVAL_P(var_l_0));
+		  }
+
+		  PHP_QT_REGISTER(QString_ptr);
+		  RETURN_NULL();
+		}
+
+		/* const char* ch,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == FAILURE) {
+
+			
+			QString *QString_ptr = new QString( (const char*) var_s_0);
+			PHP_QT_REGISTER(QString_ptr);
+			RETURN_NULL();
+		}
+		/* o public*/
+		zval* z_var_o_0;   // default: 
+
+		/* const QLatin1String& latin1,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QLatin1String") {
+				QString *QString_ptr = new QString((const QLatin1String&) var_o_0);
+			PHP_QT_REGISTER(QString_ptr);
+			RETURN_NULL();
+			}			
+			if(tmp_o_0 == "const QString") {
+				QString *QString_ptr = new QString((const QString&) var_o_0);
+			PHP_QT_REGISTER(QString_ptr);
+			RETURN_NULL();
+			}			
+			if(tmp_o_0 == "const QByteArray") {
+				QString *QString_ptr = new QString((const QByteArray&) var_o_0);
+			PHP_QT_REGISTER(QString_ptr);
+			RETURN_NULL();
+			}			
+			if(tmp_o_0 == "const Null") {
+/*				QString *QString_ptr = new QString((const Null&) var_o_0);
+			PHP_QT_REGISTER(QString_ptr);
+*/			RETURN_NULL();
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: 
+
+		/* const QChar* unicode, int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QChar") {
+				QString *QString_ptr = new QString((const QChar*) var_ol_0, (int) var_ol_1);
+			PHP_QT_REGISTER(QString_ptr);
+			RETURN_NULL();
+			}
+		}
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
+
+		/* int size, char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+			
+			QString *QString_ptr = new QString((int) var_ll_0 ,(char) var_ll_1);
+			PHP_QT_REGISTER(QString_ptr);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  normalized
+ *    flags:    c
+ */
+ZEND_METHOD(QString, normalized){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o public*/
+		long var_o_0;    // default: 
+
+		/* QString::NormalizationForm mode,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->normalized((QString::NormalizationForm) var_o_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		long var_ol_0;    // default: 
+		long var_ol_1;    // default: 
+
+		/* QString::NormalizationForm mode, int version,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->normalized((QString::NormalizationForm) var_ol_0 ,(QChar::UnicodeVersion) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  fromUtf16
+ *    flags:    s
+ */
+ZEND_METHOD(QString, fromUtf16){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		long var_ol_0;    // default: 
+		long var_ol_1;    // default: -1
+
+		/* const ushort* , int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->fromUtf16((const ushort*) var_ol_0 ,(int) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  isRightToLeft
+ *    flags:    c
+ */
+ZEND_METHOD(QString, isRightToLeft){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isRightToLeft());
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  setNum
+ *    flags:    
+ */
+ZEND_METHOD(QString, setNum){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		long var_ol_0;    // default: 
+		long var_ol_1;    // default: 10
+
+		/* short , int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+															
+			QString & return_object = (QString &) obj->setNum((short) var_ol_0 ,(int) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* oll public*/
+		long var_oll_0;    // default: 
+		long var_oll_1;    // default: 'g'
+		long var_oll_2;    // default: 6
+
+		/* float , char f, int prec,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString & return_object = (QString &) obj->setNum((float) var_oll_0 ,(char) var_oll_1 ,(int) var_oll_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+		/* lll public*/
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: 'g'
+		long var_lll_2;    // default: 6
+
+		/* double , char f, int prec,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString & return_object = (QString &) obj->setNum((double) var_lll_0 ,(char) var_lll_1 ,(int) var_lll_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  endsWith
+ *    flags:    c
+ */
+ZEND_METHOD(QString, endsWith){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: Qt::CaseSensitive
+
+		/* const QString& s, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QString") {
+				RETURN_BOOL(obj->endsWith((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
+			}			
+			if(tmp_ol_0 == "const QChar") {
+				RETURN_BOOL(obj->endsWith((const QChar&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  number
+ *    flags:    s
+ */
+ZEND_METHOD(QString, number){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		long var_ol_0;    // default: 
+		long var_ol_1;    // default: 10
+
+		/* unsigned long , int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+									
+			QString return_object = (QString) obj->number((ulong) var_ol_0 ,(int) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 10
+
+		/* int , int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->number((int) var_ll_0 ,(int) var_ll_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* lll public*/
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: 'g'
+		long var_lll_2;    // default: 6
+
+		/* double , char f, int prec,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->number((double) var_lll_0 ,(char) var_lll_1 ,(int) var_lll_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  localeAwareCompare
+ *    flags:    c
+ */
+ZEND_METHOD(QString, localeAwareCompare){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o public*/
+		zval* z_var_o_0;   // default: 
+
+		/* const QString& s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QString") {
+				RETURN_LONG(obj->localeAwareCompare((const QString&) var_o_0));
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* oo public*/
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
+
+		/* const QString& s1, const QString& s2,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			
+			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
+				RETURN_LONG(obj->localeAwareCompare((const QString&) var_oo_0, (const QString&) var_oo_1));
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  section
+ *    flags:    c
+ */
+ZEND_METHOD(QString, section){
+
+	if (ZEND_NUM_ARGS() == 4){
+		/* lllo public*/
+		long var_lllo_0;    // default: 
+		long var_lllo_1;    // default: 
+		long var_lllo_2;    // default: -1
+		long var_lllo_3;    // default: SectionDefault
+
+		/* char sep, int start, int end, QString::SectionFlags flags,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|l|", &var_lllo_0, &var_lllo_1, &var_lllo_2, &var_lllo_3) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->section((char) var_lllo_0 ,(int) var_lllo_1 ,(int) var_lllo_2 ,(QString::SectionFlags) var_lllo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+		/* ollo public*/
+		zval* z_var_ollo_0;   // default: 
+		long var_ollo_1;    // default: 
+		long var_ollo_2;    // default: -1
+		long var_ollo_3;    // default: SectionDefault
+
+		/* const QString& in_sep, int start, int end, QString::SectionFlags flags,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll|l|", &z_var_ollo_0, &var_ollo_1, &var_ollo_2, &var_ollo_3) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ollo_0 = (QObject*) php_qt_fetch(z_var_ollo_0);
+
+			QString tmp_ollo_0(var_ollo_0->metaObject()->className());
+			
+			if(tmp_ollo_0 == "const QString") {
+				QString return_object = (QString) obj->section((const QString&) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (QString::SectionFlags) var_ollo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}			
+			if(tmp_ollo_0 == "const QRegExp") {
+				QString return_object = (QString) obj->section((const QRegExp&) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (QString::SectionFlags) var_ollo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  isSimpleText
+ *    flags:    c
+ */
+ZEND_METHOD(QString, isSimpleText){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isSimpleText());
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  size
+ *    flags:    c
+ */
+ZEND_METHOD(QString, size){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			RETURN_LONG(obj->size());
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  simplified
+ *    flags:    c
+ */
+ZEND_METHOD(QString, simplified){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QString return_object = (QString) obj->simplified();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toUInt
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toUInt){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 0
+		long var_ll_1;    // default: 10
+
+		/* int* ok, int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			RETURN_LONG(obj->toUInt((bool*) var_ll_0 ,(int) var_ll_1));
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toUShort
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toUShort){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 0
+		long var_ll_1;    // default: 10
+
+		/* int* ok, int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			RETURN_LONG(obj->toUShort((bool*) var_ll_0 ,(int) var_ll_1));
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  truncate
+ *    flags:    
+ */
+ZEND_METHOD(QString, truncate){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* int pos,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			obj->truncate((int) var_l_0);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toAscii
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toAscii){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+		// bytearray, skipped
+		RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  length
+ *    flags:    c
+ */
+ZEND_METHOD(QString, length){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			RETURN_LONG(obj->length());
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  right
+ *    flags:    c
+ */
+ZEND_METHOD(QString, right){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* int len,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->right((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  push_front
+ *    flags:    
+ */
+ZEND_METHOD(QString, push_front){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			obj->push_front((char) var_l_0);
+			RETURN_NULL();
+		}
+		/* o public*/
+		zval* z_var_o_0;   // default: 
+
+		/* const QString& s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QString") {
+				obj->push_front((const QString&) var_o_0);
+			RETURN_NULL();
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toUtf8
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toUtf8){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+		// bytearray, skipped
+		RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toULongLong
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toULongLong){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 0
+		long var_ll_1;    // default: 10
+
+		/* int* ok, int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			obj->toULongLong((bool*) var_ll_0 ,(int) var_ll_1);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  indexOf
+ *    flags:    c
+ */
+ZEND_METHOD(QString, indexOf){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: 0
+
+		/* const QRegExp& , int from,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QRegExp") {
+				RETURN_LONG(obj->indexOf((const QRegExp&) var_ol_0, (int) var_ol_1));
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* oll public*/
+		zval* z_var_oll_0;   // default: 
+		long var_oll_1;    // default: 0
+		long var_oll_2;    // default: Qt::CaseSensitive
+
+		/* const QString& s, int from, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
+
+			QString tmp_oll_0(var_oll_0->metaObject()->className());
+			
+			if(tmp_oll_0 == "const QString") {
+				RETURN_LONG(obj->indexOf((const QString&) var_oll_0, (int) var_oll_1, (Qt::CaseSensitivity) var_oll_2));
+			}
+		}
+		/* lll public*/
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: 0
+		long var_lll_2;    // default: Qt::CaseSensitive
+
+		/* char c, int from, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			RETURN_LONG(obj->indexOf((char) var_lll_0 ,(int) var_lll_1 ,(Qt::CaseSensitivity) var_lll_2));
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  fromRawData
+ *    flags:    s
+ */
+ZEND_METHOD(QString, fromRawData){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: 
+
+		/* const QChar* , int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QChar") {
+				QString return_object = (QString) obj->fromRawData((const QChar*) var_ol_0, (int) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  constEnd
+ *    flags:    c
+ */
+ZEND_METHOD(QString, constEnd){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			obj->constEnd();
+			RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  left
+ *    flags:    c
+ */
+ZEND_METHOD(QString, left){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* int len,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->left((int) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  fromLocal8Bit
+ *    flags:    s
+ */
+ZEND_METHOD(QString, fromLocal8Bit){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* sl public*/
+		char* var_sl_0;   // default: 
+		int len_sl_0;
+
+		long var_sl_1;    // default: -1
+
+		/* const char* , int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->fromLocal8Bit( (const char*) var_sl_0 ,(int) var_sl_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  startsWith
+ *    flags:    c
+ */
+ZEND_METHOD(QString, startsWith){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: Qt::CaseSensitive
+
+		/* const QString& s, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QString") {
+				RETURN_BOOL(obj->startsWith((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
+			}			
+			if(tmp_ol_0 == "const QChar") {
+				RETURN_BOOL(obj->startsWith((const QChar&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  remove
+ *    flags:    
+ */
+ZEND_METHOD(QString, remove){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o public*/
+		zval* z_var_o_0;   // default: 
+
+		/* const QRegExp& rx,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QRegExp") {
+				QString & return_object = (QString &) obj->remove((const QRegExp&) var_o_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: Qt::CaseSensitive
+
+		/* const QString& s, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QString") {
+				QString & return_object = (QString &) obj->remove((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: 
+
+		/* int i, int len,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+						
+			QString & return_object = (QString &) obj->remove((int) var_ll_0 ,(int) var_ll_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  isEmpty
+ *    flags:    c
+ */
+ZEND_METHOD(QString, isEmpty){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isEmpty());
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  arg
+ *    flags:    c
+ */
+ZEND_METHOD(QString, arg){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* oo public*/
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
+
+		/* const QString& a1, const QString& a2,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			
+			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
+				QString return_object = (QString) obj->arg((const QString&) var_oo_0, (const QString&) var_oo_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* ooo public*/
+		zval* z_var_ooo_0;   // default: 
+		zval* z_var_ooo_1;   // default: 
+		zval* z_var_ooo_2;   // default: 
+
+		/* const QString& a1, const QString& a2, const QString& a3,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
+			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
+			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);
+
+			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
+			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
+			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
+			
+			if(tmp_ooo_0 == "const QString" && tmp_ooo_1 == "const QString" && tmp_ooo_2 == "const QString") {
+				QString return_object = (QString) obj->arg((const QString&) var_ooo_0, (const QString&) var_ooo_1, (const QString&) var_ooo_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+		/* olo public*/
+		zval* z_var_olo_0;   // default: 
+		long var_olo_1;    // default: 0
+		zval* z_var_olo_2;   // default: QLatin1Char(' ')
+
+		/* const QString& a, int fieldWidth, const QChar& fillChar,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|o|", &z_var_olo_0, &var_olo_1, &z_var_olo_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_olo_0 = (QObject*) php_qt_fetch(z_var_olo_0);
+			QObject* var_olo_2 = (QObject*) php_qt_fetch(z_var_olo_2);
+
+			QString tmp_olo_0(var_olo_0->metaObject()->className());
+			QString tmp_olo_1(var_olo_2->metaObject()->className());
+			
+			if(tmp_olo_0 == "const QString" && tmp_olo_1 == "const QChar") {
+				QString return_object = (QString) obj->arg((const QString&) var_olo_0, (int) var_olo_1, (const QChar&) var_olo_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+		/* llo public*/
+		long var_llo_0;    // default: 
+		long var_llo_1;    // default: 0
+		zval* z_var_llo_2;   // default: QLatin1Char(' ')
+
+		/* char a, int fieldWidth, const QChar& fillChar,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|o|", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
+
+			QString tmp_llo_0(var_llo_2->metaObject()->className());
+			
+			if(tmp_llo_0 == "const QChar") {
+				QString return_object = (QString) obj->arg((char) var_llo_0, (int) var_llo_1, (const QChar&) var_llo_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 4){
+		/* lllo public*/
+		long var_lllo_0;    // default: 
+		long var_lllo_1;    // default: 0
+		long var_lllo_2;    // default: 10
+		zval* z_var_lllo_3;   // default: QLatin1Char(' ')
+
+		/* int a, int fieldWidth, int base, const QChar& fillChar,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|o|", &var_lllo_0, &var_lllo_1, &var_lllo_2, &z_var_lllo_3) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_lllo_3 = (QObject*) php_qt_fetch(z_var_lllo_3);
+
+			QString tmp_lllo_0(var_lllo_3->metaObject()->className());
+			
+			if(tmp_lllo_0 == "const QChar") {
+				QString return_object = (QString) obj->arg((int) var_lllo_0, (int) var_lllo_1, (int) var_lllo_2, (const QChar&) var_lllo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+		/* ollo public*/
+		long var_ollo_0;    // default: 
+		long var_ollo_1;    // default: 0
+		long var_ollo_2;    // default: 10
+		zval* z_var_ollo_3;   // default: QLatin1Char(' ')
+
+		/* qlonglong a, int fieldwidth, int base, const QChar& fillChar,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|o|", &var_ollo_0, &var_ollo_1, &var_ollo_2, &z_var_ollo_3) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ollo_3 = (QObject*) php_qt_fetch(z_var_ollo_3);
+
+			QString tmp_ollo_0(var_ollo_3->metaObject()->className());
+			
+			if(tmp_ollo_0 == "const QChar") {
+				QString return_object = (QString) obj->arg((qlonglong) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}			
+			if(tmp_ollo_0 == "const QChar") {
+				QString return_object = (QString) obj->arg((qulonglong) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}			
+			if(tmp_ollo_0 == "const QChar") {
+				QString return_object = (QString) obj->arg((long) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}			
+			if(tmp_ollo_0 == "const QChar") {
+				QString return_object = (QString) obj->arg((ulong) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}			
+			if(tmp_ollo_0 == "const QChar") {
+				QString return_object = (QString) obj->arg((short) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}			
+			if(tmp_ollo_0 == "const QChar") {
+				QString return_object = (QString) obj->arg((ushort) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+		/* oooo public*/
+		zval* z_var_oooo_0;   // default: 
+		zval* z_var_oooo_1;   // default: 
+		zval* z_var_oooo_2;   // default: 
+		zval* z_var_oooo_3;   // default: 
+
+		/* const QString& a1, const QString& a2, const QString& a3, const QString& a4,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &z_var_oooo_0, &z_var_oooo_1, &z_var_oooo_2, &z_var_oooo_3) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_oooo_0 = (QObject*) php_qt_fetch(z_var_oooo_0);
+			QObject* var_oooo_1 = (QObject*) php_qt_fetch(z_var_oooo_1);
+			QObject* var_oooo_2 = (QObject*) php_qt_fetch(z_var_oooo_2);
+			QObject* var_oooo_3 = (QObject*) php_qt_fetch(z_var_oooo_3);
+
+			QString tmp_oooo_0(var_oooo_0->metaObject()->className());
+			QString tmp_oooo_1(var_oooo_1->metaObject()->className());
+			QString tmp_oooo_2(var_oooo_2->metaObject()->className());
+			QString tmp_oooo_3(var_oooo_3->metaObject()->className());
+			
+			if(tmp_oooo_0 == "const QString" && tmp_oooo_1 == "const QString" && tmp_oooo_2 == "const QString" && tmp_oooo_3 == "const QString") {
+				QString return_object = (QString) obj->arg((const QString&) var_oooo_0, (const QString&) var_oooo_1, (const QString&) var_oooo_2, (const QString&) var_oooo_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 5){
+		/* llllo public*/
+		long var_llllo_0;    // default: 
+		long var_llllo_1;    // default: 0
+		long var_llllo_2;    // default: 'g'
+		long var_llllo_3;    // default: -1
+		zval* z_var_llllo_4;   // default: QLatin1Char(' ')
+
+		/* double a, int fieldWidth, char fmt, int prec, const QChar& fillChar,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|l|o|", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &z_var_llllo_4) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_llllo_4 = (QObject*) php_qt_fetch(z_var_llllo_4);
+
+			QString tmp_llllo_0(var_llllo_4->metaObject()->className());
+			
+			if(tmp_llllo_0 == "const QChar") {
+				QString return_object = (QString) obj->arg((double) var_llllo_0, (int) var_llllo_1, (char) var_llllo_2, (int) var_llllo_3, (const QChar&) var_llllo_4);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  vsprintf
+ *    flags:    
+ */
+ZEND_METHOD(QString, vsprintf){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* so public*/
+		char* var_so_0;   // default: 
+		int len_so_0;
+
+		zval* z_var_so_1;   // default: 
+
+		/* const char* format, va_list ap,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_so_0, len_so_0, &z_var_so_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_so_1 = (QObject*) php_qt_fetch(z_var_so_1);
+
+			QString tmp_so_0(var_so_1->metaObject()->className());
+			
+			if(tmp_so_0 == "va_list") {
+				QString & return_object = (QString &) obj->vsprintf((const char*) var_so_0, (va_list) var_so_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toFloat
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toFloat){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 0
+
+		/* int* ok,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+//			RETURN_FLOAT(obj->toFloat((bool*) var_l_0));
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  isDetached
+ *    flags:    c
+ */
+ZEND_METHOD(QString, isDetached){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isDetached());
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  reserve
+ *    flags:    
+ */
+ZEND_METHOD(QString, reserve){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			obj->reserve((int) var_l_0);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toULong
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toULong){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 0
+		long var_ll_1;    // default: 10
+
+		/* int* ok, int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+//			RETURN_ULONG(obj->toULong((bool*) var_ll_0 ,(int) var_ll_1));
+		  	RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toShort
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toShort){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 0
+		long var_ll_1;    // default: 10
+
+		/* int* ok, int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+//			RETURN_SHORT(obj->toShort((bool*) var_ll_0 ,(int) var_ll_1));
+	  		RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  split
+ *    flags:    c
+ */
+ZEND_METHOD(QString, split){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* oo public*/
+		zval* z_var_oo_0;   // default: 
+		long var_oo_1;    // default: KeepEmptyParts
+
+		/* const QRegExp& sep, QString::SplitBehavior behavior,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_oo_0, &var_oo_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			
+			if(tmp_oo_0 == "const QRegExp") {
+/*				QStringList return_object = (QStringList) obj->split((const QRegExp&) var_oo_0, (QString::SplitBehavior) var_oo_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+*/				return;                                             
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* ool public*/
+		zval* z_var_ool_0;   // default: 
+		long var_ool_1;    // default: KeepEmptyParts
+		long var_ool_2;    // default: Qt::CaseSensitive
+
+		/* const QString& sep, QString::SplitBehavior behavior, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_ool_0, &var_ool_1, &var_ool_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
+
+			QString tmp_ool_0(var_ool_0->metaObject()->className());
+			
+			if(tmp_ool_0 == "const QString") {
+/*				QStringList return_object = (QStringList) obj->split((const QString&) var_ool_0, (QString::SplitBehavior) var_ool_1, (Qt::CaseSensitivity) var_ool_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+*/				return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  setUnicode
+ *    flags:    
+ */
+ZEND_METHOD(QString, setUnicode){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: 
+
+		/* const QChar* unicode, int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QChar") {
+				QString & return_object = (QString &) obj->setUnicode((const QChar*) var_ol_0, (int) var_ol_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  fromLatin1
+ *    flags:    s
+ */
+ZEND_METHOD(QString, fromLatin1){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* sl public*/
+		char* var_sl_0;   // default: 
+		int len_sl_0;
+
+		long var_sl_1;    // default: -1
+
+		/* const char* , int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->fromLatin1( (const char*) var_sl_0 ,(int) var_sl_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  data
+ *    flags:    
+ */
+ZEND_METHOD(QString, data){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QChar * return_object = (QChar *) obj->data();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toLatin1
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toLatin1){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+		// bytearray, skipped
+		RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  end
+ *    flags:    
+ */
+ZEND_METHOD(QString, end){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+//			RETURN_INTPTR(obj->end());
+			RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  contains
+ *    flags:    c
+ */
+ZEND_METHOD(QString, contains){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* o public*/
+		zval* z_var_o_0;   // default: 
+
+		/* const QRegExp& rx,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QRegExp") {
+				obj->contains((const QRegExp&) var_o_0);
+			RETURN_NULL();
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: Qt::CaseSensitive
+
+		/* const QString& s, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QString") {
+				obj->contains((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1);
+			RETURN_NULL();
+			}
+		}
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: Qt::CaseSensitive
+
+		/* char c, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			obj->contains((char) var_ll_0 ,(Qt::CaseSensitivity) var_ll_1);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  resize
+ *    flags:    
+ */
+ZEND_METHOD(QString, resize){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			obj->resize((int) var_l_0);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  replace
+ *    flags:    
+ */
+ZEND_METHOD(QString, replace){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* oo public*/
+		zval* z_var_oo_0;   // default: 
+		zval* z_var_oo_1;   // default: 
+
+		/* const QRegExp& rx, const QString& after,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+
+			QString tmp_oo_0(var_oo_0->metaObject()->className());
+			QString tmp_oo_1(var_oo_1->metaObject()->className());
+			
+			if(tmp_oo_0 == "const QRegExp" && tmp_oo_1 == "const QString") {
+				QString & return_object = (QString &) obj->replace((const QRegExp&) var_oo_0, (const QString&) var_oo_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* ool public*/
+		zval* z_var_ool_0;   // default: 
+		zval* z_var_ool_1;   // default: 
+		long var_ool_2;    // default: Qt::CaseSensitive
+
+		/* const QString& before, const QString& after, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
+			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
+
+			QString tmp_ool_0(var_ool_0->metaObject()->className());
+			QString tmp_ool_1(var_ool_1->metaObject()->className());
+			
+			if(tmp_ool_0 == "const QString" && tmp_ool_1 == "const QString") {
+				QString & return_object = (QString &) obj->replace((const QString&) var_ool_0, (const QString&) var_ool_1, (Qt::CaseSensitivity) var_ool_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+		/* lol public*/
+		long var_lol_0;    // default: 
+		zval* z_var_lol_1;   // default: 
+		long var_lol_2;    // default: Qt::CaseSensitive
+
+		/* char c, const QString& after, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol|", &var_lol_0, &z_var_lol_1, &var_lol_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_lol_1 = (QObject*) php_qt_fetch(z_var_lol_1);
+
+			QString tmp_lol_0(var_lol_1->metaObject()->className());
+			
+			if(tmp_lol_0 == "const QString") {
+				QString & return_object = (QString &) obj->replace((char) var_lol_0, (const QString&) var_lol_1, (Qt::CaseSensitivity) var_lol_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+		/* lll public*/
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: 
+		long var_lll_2;    // default: 
+
+		/* int i, int len, char after,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+						
+			QString & return_object = (QString &) obj->replace((int) var_lll_0 ,(int) var_lll_1 ,(char) var_lll_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+		/* llo public*/
+		long var_llo_0;    // default: 
+		long var_llo_1;    // default: 
+		zval* z_var_llo_2;   // default: 
+
+		/* int i, int len, const QString& after,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
+
+			QString tmp_llo_0(var_llo_2->metaObject()->className());
+			
+			if(tmp_llo_0 == "const QString") {
+				QString & return_object = (QString &) obj->replace((int) var_llo_0, (int) var_llo_1, (const QString&) var_llo_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 4){
+		/* llol public*/
+		long var_llol_0;    // default: 
+		long var_llol_1;    // default: 
+		zval* z_var_llol_2;   // default: 
+		long var_llol_3;    // default: 
+
+		/* int i, int len, const QChar* s, int slen,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol", &var_llol_0, &var_llol_1, &z_var_llol_2, &var_llol_3) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_llol_2 = (QObject*) php_qt_fetch(z_var_llol_2);
+
+			QString tmp_llol_0(var_llol_2->metaObject()->className());
+			
+			if(tmp_llol_0 == "const QChar") {
+				QString & return_object = (QString &) obj->replace((int) var_llol_0, (int) var_llol_1, (const QChar*) var_llol_2, (int) var_llol_3);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  fromUtf8
+ *    flags:    s
+ */
+ZEND_METHOD(QString, fromUtf8){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* sl public*/
+		char* var_sl_0;   // default: 
+		int len_sl_0;
+
+		long var_sl_1;    // default: -1
+
+		/* const char* , int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->fromUtf8( (const char*) var_sl_0 ,(int) var_sl_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toLong
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toLong){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 0
+		long var_ll_1;    // default: 10
+
+		/* int* ok, int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			RETURN_LONG(obj->toLong((bool*) var_ll_0 ,(int) var_ll_1));
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  detach
+ *    flags:    
+ */
+ZEND_METHOD(QString, detach){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			obj->detach();
+			RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  append
+ *    flags:    
+ */
+ZEND_METHOD(QString, append){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString & return_object = (QString &) obj->append((char) var_l_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+		/* s public*/
+		char* var_s_0;   // default: 
+		int len_s_0;
+
+
+		/* const char* s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString & return_object = (QString &) obj->append( (const char*) var_s_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+		/* o public*/
+		zval* z_var_o_0;   // default: 
+
+		/* const QString& s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QString") {
+				QString & return_object = (QString &) obj->append((const QString&) var_o_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}			
+			if(tmp_o_0 == "const QByteArray") {
+				QString & return_object = (QString &) obj->append((const QByteArray&) var_o_0);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  mid
+ *    flags:    c
+ */
+ZEND_METHOD(QString, mid){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: -1
+
+		/* int i, int len,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->mid((int) var_ll_0 ,(int) var_ll_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toDouble
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toDouble){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 0
+
+		/* int* ok,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			RETURN_DOUBLE(obj->toDouble((bool*) var_l_0));
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  fill
+ *    flags:    
+ */
+ZEND_METHOD(QString, fill){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 
+		long var_ll_1;    // default: -1
+
+		/* char c, int size,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString & return_object = (QString &) obj->fill((char) var_ll_0 ,(int) var_ll_1);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  rightJustified
+ *    flags:    c
+ */
+ZEND_METHOD(QString, rightJustified){
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* lll public*/
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: QLatin1Char(' ')
+		long var_lll_2;    // default: false
+
+		/* int width, char fill, int trunc,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			QString return_object = (QString) obj->rightJustified((int) var_lll_0 ,(char) var_lll_1 ,(bool) var_lll_2);
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toLower
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toLower){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QString return_object = (QString) obj->toLower();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  lastIndexOf
+ *    flags:    c
+ */
+ZEND_METHOD(QString, lastIndexOf){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ol public*/
+		zval* z_var_ol_0;   // default: 
+		long var_ol_1;    // default: -1
+
+		/* const QRegExp& , int from,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+
+			QString tmp_ol_0(var_ol_0->metaObject()->className());
+			
+			if(tmp_ol_0 == "const QRegExp") {
+				RETURN_LONG(obj->lastIndexOf((const QRegExp&) var_ol_0, (int) var_ol_1));
+			}
+		}
+	}
+
+	if (ZEND_NUM_ARGS() == 3){
+		/* oll public*/
+		zval* z_var_oll_0;   // default: 
+		long var_oll_1;    // default: -1
+		long var_oll_2;    // default: Qt::CaseSensitive
+
+		/* const QString& s, int from, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
+
+			QString tmp_oll_0(var_oll_0->metaObject()->className());
+			
+			if(tmp_oll_0 == "const QString") {
+				RETURN_LONG(obj->lastIndexOf((const QString&) var_oll_0, (int) var_oll_1, (Qt::CaseSensitivity) var_oll_2));
+			}
+		}
+		/* lll public*/
+		long var_lll_0;    // default: 
+		long var_lll_1;    // default: -1
+		long var_lll_2;    // default: Qt::CaseSensitive
+
+		/* char c, int from, int cs,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			RETURN_LONG(obj->lastIndexOf((char) var_lll_0 ,(int) var_lll_1 ,(Qt::CaseSensitivity) var_lll_2));
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  unicode
+ *    flags:    c
+ */
+ZEND_METHOD(QString, unicode){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			const QChar * return_object = (const QChar *) obj->unicode();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QString_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  at
+ *    flags:    c
+ */
+ZEND_METHOD(QString, at){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* int i,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			obj->at((int) var_l_0);
+			RETURN_NULL();
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  begin
+ *    flags:    
+ */
+ZEND_METHOD(QString, begin){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+//			RETURN_INTPTR(obj->begin());
+			RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  push_back
+ *    flags:    
+ */
+ZEND_METHOD(QString, push_back){
+
+	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
+		long var_l_0;    // default: 
+
+		/* char c,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			obj->push_back((char) var_l_0);
+			RETURN_NULL();
+		}
+		/* o public*/
+		zval* z_var_o_0;   // default: 
+
+		/* const QString& s,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+
+			QString tmp_o_0(var_o_0->metaObject()->className());
+			
+			if(tmp_o_0 == "const QString") {
+				obj->push_back((const QString&) var_o_0);
+			RETURN_NULL();
+			}
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  capacity
+ *    flags:    c
+ */
+ZEND_METHOD(QString, capacity){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			RETURN_LONG(obj->capacity());
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  constBegin
+ *    flags:    c
+ */
+ZEND_METHOD(QString, constBegin){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			obj->constBegin();
+			RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toLocal8Bit
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toLocal8Bit){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+		// bytearray, skipped
+		RETURN_NULL();
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  toInt
+ *    flags:    c
+ */
+ZEND_METHOD(QString, toInt){
+
+	if (ZEND_NUM_ARGS() == 2){
+		/* ll public*/
+		long var_ll_0;    // default: 0
+		long var_ll_1;    // default: 10
+
+		/* int* ok, int base,  */
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+			
+			RETURN_LONG(obj->toInt((bool*) var_ll_0 ,(int) var_ll_1));
+		}
+	}
+}
+
+/*********************************
+ *    class     QString */
+/*
+ *    function  isNull
+ *    flags:    c
+ */
+ZEND_METHOD(QString, isNull){
+	if (ZEND_NUM_ARGS() == 0){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			RETURN_BOOL(obj->isNull());
+	}
+}
+
+
+PHP_QT_DESTRUCT(QString);
+

Modified: trunk/qt/zend_php_qt.h
===================================================================
--- trunk/qt/zend_php_qt.h	2006-01-16 12:19:47 UTC (rev 192)
+++ trunk/qt/zend_php_qt.h	2006-01-16 16:28:40 UTC (rev 193)
@@ -78,17 +78,119 @@
 ZEND_METHOD(QObject,startTimer);
 ZEND_METHOD(QObject,thread);
 
+
+ZEND_METHOD(QCharRef, isDigit);
+ZEND_METHOD(QCharRef, combiningClass);
+ZEND_METHOD(QCharRef, decompositionTag);
+ZEND_METHOD(QCharRef, joining);
+ZEND_METHOD(QCharRef, direction);
+ZEND_METHOD(QCharRef, hasMirrored);
+ZEND_METHOD(QCharRef, toLower);
+ZEND_METHOD(QCharRef, unicode);
+ZEND_METHOD(QCharRef, row);
+ZEND_METHOD(QCharRef, setRow);
+ZEND_METHOD(QCharRef, category);
+ZEND_METHOD(QCharRef, isLetter);
+ZEND_METHOD(QCharRef, cell);
+ZEND_METHOD(QCharRef, digitValue);
+ZEND_METHOD(QCharRef, isPrint);
+ZEND_METHOD(QCharRef, isLetterOrNumber);
+ZEND_METHOD(QCharRef, mirroredChar);
+ZEND_METHOD(QCharRef, setCell);
+ZEND_METHOD(QCharRef, isNumber);
+ZEND_METHOD(QCharRef, unicodeVersion);
+ZEND_METHOD(QCharRef, isSpace);
+ZEND_METHOD(QCharRef, toLatin1);
+ZEND_METHOD(QCharRef, toAscii);
+ZEND_METHOD(QCharRef, decomposition);
+ZEND_METHOD(QCharRef, toUpper);
+ZEND_METHOD(QCharRef, isMark);
+ZEND_METHOD(QCharRef, isPunct);
+ZEND_METHOD(QCharRef, isNull);
+
 /* QString */
-ZEND_METHOD(QString,__construct);
-ZEND_METHOD(QString,__toString);
-ZEND_METHOD(QString,append);
-ZEND_METHOD(QString,arg);
-ZEND_METHOD(QString,at);
-ZEND_METHOD(QString,capacity);
-ZEND_METHOD(QString,chop);
-ZEND_METHOD(QString,clear);
-ZEND_METHOD(QString,compare);
+ZEND_METHOD(QString, __toString);
+ZEND_METHOD(QString, compare);
+ZEND_METHOD(QString, utf16);
+ZEND_METHOD(QString, constData);
+ZEND_METHOD(QString, insert);
+ZEND_METHOD(QString, clear);
+ZEND_METHOD(QString, setUtf16);
+ZEND_METHOD(QString, prepend);
+ZEND_METHOD(QString, trimmed);
+ZEND_METHOD(QString, chop);
+ZEND_METHOD(QString, leftJustified);
+ZEND_METHOD(QString, squeeze);
+ZEND_METHOD(QString, count);
+ZEND_METHOD(QString, fromAscii);
+ZEND_METHOD(QString, toLongLong);
+ZEND_METHOD(QString, toUpper);
+ZEND_METHOD(QString, __construct);
+ZEND_METHOD(QString, normalized);
+ZEND_METHOD(QString, fromUtf16);
+ZEND_METHOD(QString, isRightToLeft);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, endsWith);
+ZEND_METHOD(QString, number);
+ZEND_METHOD(QString, localeAwareCompare);
+ZEND_METHOD(QString, section);
+ZEND_METHOD(QString, isSimpleText);
+ZEND_METHOD(QString, size);
+ZEND_METHOD(QString, simplified);
+ZEND_METHOD(QString, toUInt);
+ZEND_METHOD(QString, toUShort);
+ZEND_METHOD(QString, truncate);
+ZEND_METHOD(QString, toAscii);
+ZEND_METHOD(QString, length);
+ZEND_METHOD(QString, right);
+ZEND_METHOD(QString, push_front);
+ZEND_METHOD(QString, toUtf8);
+ZEND_METHOD(QString, toULongLong);
+ZEND_METHOD(QString, indexOf);
+ZEND_METHOD(QString, fromRawData);
+ZEND_METHOD(QString, constEnd);
+ZEND_METHOD(QString, left);
+ZEND_METHOD(QString, fromLocal8Bit);
+ZEND_METHOD(QString, startsWith);
+ZEND_METHOD(QString, remove);
+ZEND_METHOD(QString, isEmpty);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, vsprintf);
+ZEND_METHOD(QString, toFloat);
+ZEND_METHOD(QString, isDetached);
+ZEND_METHOD(QString, reserve);
+ZEND_METHOD(QString, toULong);
+ZEND_METHOD(QString, toShort);
+ZEND_METHOD(QString, split);
+ZEND_METHOD(QString, setUnicode);
+ZEND_METHOD(QString, fromLatin1);
+ZEND_METHOD(QString, data);
+ZEND_METHOD(QString, toLatin1);
+ZEND_METHOD(QString, end);
+ZEND_METHOD(QString, contains);
+ZEND_METHOD(QString, resize);
+ZEND_METHOD(QString, replace);
+ZEND_METHOD(QString, fromUtf8);
+ZEND_METHOD(QString, toLong);
+ZEND_METHOD(QString, detach);
+ZEND_METHOD(QString, append);
+ZEND_METHOD(QString, mid);
+ZEND_METHOD(QString, toDouble);
+ZEND_METHOD(QString, fill);
+ZEND_METHOD(QString, rightJustified);
+ZEND_METHOD(QString, toLower);
+ZEND_METHOD(QString, lastIndexOf);
+ZEND_METHOD(QString, unicode);
+ZEND_METHOD(QString, at);
+ZEND_METHOD(QString, begin);
+ZEND_METHOD(QString, push_back);
+ZEND_METHOD(QString, capacity);
+ZEND_METHOD(QString, constBegin);
+ZEND_METHOD(QString, toLocal8Bit);
+ZEND_METHOD(QString, toInt);
+ZEND_METHOD(QString, isNull);
 
+
 /* QLatin1String */
 ZEND_METHOD(QLatin1String,__construct);
 ZEND_METHOD(QLatin1String,latin1);

Modified: trunk/tests/qstring.php
===================================================================
--- trunk/tests/qstring.php	2006-01-16 12:19:47 UTC (rev 192)
+++ trunk/tests/qstring.php	2006-01-16 16:28:40 UTC (rev 193)
@@ -4,9 +4,45 @@
         dl('php_qt.' . PHP_SHLIB_SUFFIX);
     }
 
-	$QString = new QString("I'm a test!");
+/* String as parameter */
+	$QString_1 = new QString("I'm a test!");
 
-	echo $QString;
+/* ASCII as parameter */
+	$QString_2 = new QString(40);
+	$QString_3 = new QString(41);
 
+/* this works: */
+	echo $QString_2;
+	echo $QString_1;
+	echo $QString_3;
+    echo "\n";
 
+/* this does not works */
+	echo $QString_2." ".$QString_1." ".$QString_3;
+    echo "\n";
+
+/* this does not works */
+	$tmp = $QString_2." ".$QString_1." ".$QString_3;
+	print($tmp);
+
+    echo "\n";
+
+/* this does not works */
+	$tmp2 = $QString_2;
+	$tmp2 = $QString_1;
+	$tmp2 = $QString_3;
+	echo $tmp;
+    echo "\n";
+
+/* this does not works */
+	echo "$QString_2 $QString_1 $QString_3";
+    echo "\n";
+
+/* this works: */
+	$var1 = $QString_1->__toString();
+	$var2 = $QString_2->__toString();
+	$var3 = $QString_3->__toString();
+	print $var2." ".$var1." ".$var3;
+    echo "\n";
+
 ?>
\ No newline at end of file



From tm243 at berlios.de  Mon Jan 16 17:39:19 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 16 Jan 2006 17:39:19 +0100
Subject: [Php-qt-svn] r194 - trunk/qt/classes
Message-ID: <200601161639.k0GGdJev022547@sheep.berlios.de>

Author: tm243
Date: 2006-01-16 17:39:18 +0100 (Mon, 16 Jan 2006)
New Revision: 194

Modified:
   trunk/qt/classes/qchar.cpp
Log:
QChar has __toString method.

Modified: trunk/qt/classes/qchar.cpp
===================================================================
--- trunk/qt/classes/qchar.cpp	2006-01-16 16:28:40 UTC (rev 193)
+++ trunk/qt/classes/qchar.cpp	2006-01-16 16:39:18 UTC (rev 194)
@@ -30,8 +30,15 @@
 #include <QChar>
 #include "../php_qt.h"
 
+ZEND_METHOD(QChar,__toString){
 
+  QChar *QChar_ptr = (QChar *) PHP_QT_FETCH();
 
+  long c = (const char) QChar_ptr->toAscii();
+  RETURN_LONG(c);
+}
+
+
 /*		public enumSpecialCharacter:long {
 			Null = 0x0000,
 			Nbsp = 0x00a0,



From tm243 at berlios.de  Mon Jan 16 17:56:10 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 16 Jan 2006 17:56:10 +0100
Subject: [Php-qt-svn] r195 - trunk/qt/text_related
Message-ID: <200601161656.k0GGuA5t024203@sheep.berlios.de>

Author: tm243
Date: 2006-01-16 17:56:09 +0100 (Mon, 16 Jan 2006)
New Revision: 195

Modified:
   trunk/qt/text_related/qstring.cpp
Log:
setUnicode repaired.

Modified: trunk/qt/text_related/qstring.cpp
===================================================================
--- trunk/qt/text_related/qstring.cpp	2006-01-16 16:39:18 UTC (rev 194)
+++ trunk/qt/text_related/qstring.cpp	2006-01-16 16:56:09 UTC (rev 195)
@@ -2036,9 +2036,9 @@
 			QString *obj = (QString*) PHP_QT_FETCH();
 			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
+//			QString tmp_ol_0(var_ol_0->metaObject()->className());
 			
-			if(tmp_ol_0 == "const QChar") {
+//			if(tmp_ol_0 == "QChar") {
 				QString & return_object = (QString &) obj->setUnicode((const QChar*) var_ol_0, (int) var_ol_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
@@ -2046,7 +2046,7 @@
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}
+//			}
 		}
 	}
 }



From tm243 at berlios.de  Mon Jan 16 18:07:59 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 16 Jan 2006 18:07:59 +0100
Subject: [Php-qt-svn] r196 - trunk/qt/text_related
Message-ID: <200601161707.k0GH7xAg025960@sheep.berlios.de>

Author: tm243
Date: 2006-01-16 18:07:58 +0100 (Mon, 16 Jan 2006)
New Revision: 196

Modified:
   trunk/qt/text_related/qstring.cpp
Log:
toUtf8() repaired.

Modified: trunk/qt/text_related/qstring.cpp
===================================================================
--- trunk/qt/text_related/qstring.cpp	2006-01-16 16:56:09 UTC (rev 195)
+++ trunk/qt/text_related/qstring.cpp	2006-01-16 17:07:58 UTC (rev 196)
@@ -1250,7 +1250,9 @@
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
 		// bytearray, skipped
-		RETURN_NULL();
+		int l = obj->size();
+		char* c = (char*) (obj->toAscii()).constData();
+		RETURN_STRING(c,l);
 	}
 }
 
@@ -2377,8 +2379,8 @@
 
 		/* const char* , int size,  */
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+
 			QString *obj = (QString*) PHP_QT_FETCH();
-
 			
 			QString return_object = (QString) obj->fromUtf8( (const char*) var_sl_0 ,(int) var_sl_1);
 				zend_class_entry *ce;                                   



From tm243 at berlios.de  Mon Jan 16 18:10:25 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 16 Jan 2006 18:10:25 +0100
Subject: [Php-qt-svn] r197 - trunk/tests
Message-ID: <200601161710.k0GHAPdY026262@sheep.berlios.de>

Author: tm243
Date: 2006-01-16 18:10:25 +0100 (Mon, 16 Jan 2006)
New Revision: 197

Added:
   trunk/tests/unicode.php
Log:
unicode test added.

Added: trunk/tests/unicode.php
===================================================================
--- trunk/tests/unicode.php	2006-01-16 17:07:58 UTC (rev 196)
+++ trunk/tests/unicode.php	2006-01-16 17:10:25 UTC (rev 197)
@@ -0,0 +1,19 @@
+<?php
+
+    if(!extension_loaded('php_qt')) {
+        dl('php_qt.' . PHP_SHLIB_SUFFIX);
+    }
+
+	$QString = new QString("hello");
+
+	echo $QString->toUTF8();
+
+	echo $QString;
+
+	$QString->setUnicode(new QChar(65), 1);
+
+	echo $QString;
+
+	echo "\n";
+
+?>
\ No newline at end of file



From tm243 at berlios.de  Wed Jan 18 23:37:05 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Wed, 18 Jan 2006 23:37:05 +0100
Subject: [Php-qt-svn] r198 - trunk/qt/text_related
Message-ID: <200601182237.k0IMb51w017174@sheep.berlios.de>

Author: tm243
Date: 2006-01-18 23:37:02 +0100 (Wed, 18 Jan 2006)
New Revision: 198

Modified:
   trunk/qt/text_related/qstring.cpp
Log:
argument handling improved. toUtf8, toLatin1 toLocal8bit, toAscii should work.

Modified: trunk/qt/text_related/qstring.cpp
===================================================================
--- trunk/qt/text_related/qstring.cpp	2006-01-16 17:10:25 UTC (rev 197)
+++ trunk/qt/text_related/qstring.cpp	2006-01-18 22:37:02 UTC (rev 198)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QString.cpp - QString PHP implementation.
- * begin           : Mon Jan 16 14:47:09 2006
+ * begin           : Wed Jan 18 23:31:01 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -73,37 +73,32 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				RETURN_LONG(obj->compare((const QString&) var_o_0));
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
 
 		/* const QString& s1, const QString& s2,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
-				RETURN_LONG(obj->compare((const QString&) var_oo_0, (const QString&) var_oo_1));
+
 			}
 		}
 	}
@@ -118,7 +113,7 @@
 ZEND_METHOD(QString, utf16){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			const ushort * return_object = (const ushort *) obj->utf16();
+				const ushort * return_object = (const ushort *) obj->utf16();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -137,7 +132,7 @@
 ZEND_METHOD(QString, constData){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			const QChar * return_object = (const QChar *) obj->constData();
+				const QChar * return_object = (const QChar *) obj->constData();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -157,35 +152,19 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int i, char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-
-			
-			QString & return_object = (QString &) obj->insert((int) var_ll_0 ,(char) var_ll_1);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-		}
 		/* lo public*/
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
 
 		/* int i, const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "const QString") {
-				QString & return_object = (QString &) obj->insert((int) var_lo_0, (const QString&) var_lo_1);
+
+				QString & return_object = (QString &) obj->insert((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -193,30 +172,28 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+
+
+			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* lol public*/
-		long var_lol_0;    // default: 
-		zval* z_var_lol_1;   // default: 
-		long var_lol_2;    // default: 
 
 		/* int i, const QChar* uc, int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_lol_0, &z_var_lol_1, &var_lol_2) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lol_1 = (QObject*) php_qt_fetch(z_var_lol_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_lol_0(var_lol_1->metaObject()->className());
-			
-			if(tmp_lol_0 == "const QChar") {
-				QString & return_object = (QString &) obj->insert((int) var_lol_0, (const QChar*) var_lol_1, (int) var_lol_2);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
@@ -246,21 +223,23 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		long var_ol_0;    // default: 
-		long var_ol_1;    // default: 
 
 		/* const ushort* utf16, int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString & return_object = (QString &) obj->setUtf16((const ushort*) var_ol_0 ,(int) var_ol_1);
+
+				QString & return_object = (QString &) obj->setUtf16((const ushort*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -275,60 +254,33 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-
-			
-			QString & return_object = (QString &) obj->prepend((char) var_l_0);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-		}
 		/* s public*/
-		char* var_s_0;   // default: 
-		int len_s_0;
 
-
 		/* const char* s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-
-			
-			QString & return_object = (QString &) obj->prepend( (const char*) var_s_0);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-		}
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				QString & return_object = (QString &) obj->prepend((const QString&) var_o_0);
+
+				QString & return_object = (QString &) obj->prepend((char) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_o_0 == "const QByteArray") {
-				QString & return_object = (QString &) obj->prepend((const QByteArray&) var_o_0);
+			}
+			if(Z_TYPE_P(z_0) == IS_STRING){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+				QString & return_object = (QString &) obj->prepend( (const char*) Z_STRVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -336,6 +288,12 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			}
 		}
 	}
 }
@@ -349,7 +307,7 @@
 ZEND_METHOD(QString, trimmed){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->trimmed();
+				QString return_object = (QString) obj->trimmed();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -369,15 +327,17 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int n,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->chop((int) var_l_0);
+
+			obj->chop((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -392,22 +352,24 @@
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: QLatin1Char(' ')
-		long var_lll_2;    // default: false
 
 		/* int width, char fill, int trunc,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->leftJustified((int) var_lll_0 ,(char) var_lll_1 ,(bool) var_lll_2);
+
+				QString return_object = (QString) obj->leftJustified((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(bool) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -440,47 +402,41 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRegExp& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRegExp") {
-				RETURN_LONG(obj->count((const QRegExp&) var_o_0));
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
 
 		/* const QString& s, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
-
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString") {
-				RETURN_LONG(obj->count((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
-			}
-		}
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: Qt::CaseSensitive
 
 		/* char c, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			
-			RETURN_LONG(obj->count((char) var_ll_0 ,(Qt::CaseSensitivity) var_ll_1));
+
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+			RETURN_LONG(obj->count((char) Z_LVAL_P(z_0) ,(Qt::CaseSensitivity) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -495,23 +451,23 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* sl public*/
-		char* var_sl_0;   // default: 
-		int len_sl_0;
 
-		long var_sl_1;    // default: -1
-
 		/* const char* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->fromAscii( (const char*) var_sl_0 ,(int) var_sl_1);
+
+				QString return_object = (QString) obj->fromAscii( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -526,16 +482,18 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 0
-		long var_ll_1;    // default: 10
 
 		/* int* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->toLongLong((bool*) var_ll_0 ,(int) var_ll_1);
+
+			obj->toLongLong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -549,7 +507,7 @@
 ZEND_METHOD(QString, toUpper){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->toUpper();
+				QString return_object = (QString) obj->toUpper();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -568,103 +526,66 @@
 ZEND_METHOD(QString, __construct){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *QString_ptr = new QString();
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
 	}
 
 	if (ZEND_NUM_ARGS() == 1){
+		/* l public*/
 
-		zval *var_l_0;
-
+		/* char c,  */
 		/* s public*/
-		char* var_s_0;   // default: 
-		int len_s_0;
 
-		/* char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_DC,"z", &var_l_0) == SUCCESS) {
+		/* const char* ch,  */
+		/* o public*/
 
-		  QString *QString_ptr;
-	
-		  if(Z_TYPE_P(var_l_0) == IS_LONG)
-  		  {		
-			QString_ptr = new QString((char)Z_LVAL_P(var_l_0));
-		  } else if(Z_TYPE_P(var_l_0) == IS_STRING)
-		  {
-			QString_ptr = new QString(Z_STRVAL_P(var_l_0));
-		  }
+		/* const QLatin1String& latin1,  */
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 
-		  PHP_QT_REGISTER(QString_ptr);
-		  RETURN_NULL();
-		}
 
-		/* const char* ch,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == FAILURE) {
+			QString *QString_ptr = new QString((char) Z_LVAL_P(z_0));
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
+			}
+			if(Z_TYPE_P(z_0) == IS_STRING){
 
-			
-			QString *QString_ptr = new QString( (const char*) var_s_0);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-		}
-		/* o public*/
-		zval* z_var_o_0;   // default: 
 
-		/* const QLatin1String& latin1,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QString *QString_ptr = new QString( (const char*) Z_STRVAL_P(z_0));
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QLatin1String") {
-				QString *QString_ptr = new QString((const QLatin1String&) var_o_0);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QString") {
-				QString *QString_ptr = new QString((const QString&) var_o_0);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QByteArray") {
-				QString *QString_ptr = new QString((const QByteArray&) var_o_0);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const Null") {
-/*				QString *QString_ptr = new QString((const Null&) var_o_0);
-			PHP_QT_REGISTER(QString_ptr);
-*/			RETURN_NULL();
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
 
 		/* const QChar* unicode, int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
-
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QChar") {
-				QString *QString_ptr = new QString((const QChar*) var_ol_0, (int) var_ol_1);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-			}
-		}
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int size, char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			
-			QString *QString_ptr = new QString((int) var_ll_0 ,(char) var_ll_1);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
+
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
+
+
+			QString *QString_ptr = new QString((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1));
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
+			}
 		}
 	}
 }
@@ -679,40 +600,44 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		long var_o_0;    // default: 
 
 		/* QString::NormalizationForm mode,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->normalized((QString::NormalizationForm) var_o_0);
+
+				QString return_object = (QString) obj->normalized((QString::NormalizationForm) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		long var_ol_0;    // default: 
-		long var_ol_1;    // default: 
 
 		/* QString::NormalizationForm mode, int version,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->normalized((QString::NormalizationForm) var_ol_0 ,(QChar::UnicodeVersion) var_ol_1);
+
+				QString return_object = (QString) obj->normalized((QString::NormalizationForm) Z_LVAL_P(z_0) ,(QChar::UnicodeVersion) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -727,21 +652,23 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		long var_ol_0;    // default: 
-		long var_ol_1;    // default: -1
 
 		/* const ushort* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->fromUtf16((const ushort*) var_ol_0 ,(int) var_ol_1);
+
+				QString return_object = (QString) obj->fromUtf16((const ushort*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -769,60 +696,61 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		long var_ol_0;    // default: 
-		long var_ol_1;    // default: 10
 
 		/* short , int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-															
-			QString & return_object = (QString &) obj->setNum((short) var_ol_0 ,(int) var_ol_1);
+
+				QString & return_object = (QString &) obj->setNum((short) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* oll public*/
-		long var_oll_0;    // default: 
-		long var_oll_1;    // default: 'g'
-		long var_oll_2;    // default: 6
 
 		/* float , char f, int prec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+		/* lll public*/
+
+		/* double , char f, int prec,  */
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString & return_object = (QString &) obj->setNum((float) var_oll_0 ,(char) var_oll_1 ,(int) var_oll_2);
+
+				QString & return_object = (QString &) obj->setNum((float) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-		}
-		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 'g'
-		long var_lll_2;    // default: 6
-
-		/* double , char f, int prec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString & return_object = (QString &) obj->setNum((double) var_lll_0 ,(char) var_lll_1 ,(int) var_lll_2);
+
+				QString & return_object = (QString &) obj->setNum((double) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -837,21 +765,16 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
 
 		/* const QString& s, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString") {
-				RETURN_BOOL(obj->endsWith((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
-			}			
-			if(tmp_ol_0 == "const QChar") {
-				RETURN_BOOL(obj->endsWith((const QChar&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
+
 			}
 		}
 	}
@@ -867,59 +790,61 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		long var_ol_0;    // default: 
-		long var_ol_1;    // default: 10
 
 		/* unsigned long , int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ol_0, &var_ol_1) == SUCCESS) {
+		/* ll public*/
+
+		/* int , int base,  */
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-									
-			QString return_object = (QString) obj->number((ulong) var_ol_0 ,(int) var_ol_1);
+
+				QString return_object = (QString) obj->number((ulong) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-		}
-		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 10
-
-		/* int , int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->number((int) var_ll_0 ,(int) var_ll_1);
+
+				QString return_object = (QString) obj->number((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 'g'
-		long var_lll_2;    // default: 6
 
 		/* double , char f, int prec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->number((double) var_lll_0 ,(char) var_lll_1 ,(int) var_lll_2);
+
+				QString return_object = (QString) obj->number((double) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -934,37 +859,32 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				RETURN_LONG(obj->localeAwareCompare((const QString&) var_o_0));
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
 
 		/* const QString& s1, const QString& s2,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
-				RETURN_LONG(obj->localeAwareCompare((const QString&) var_oo_0, (const QString&) var_oo_1));
+
 			}
 		}
 	}
@@ -980,55 +900,34 @@
 
 	if (ZEND_NUM_ARGS() == 4){
 		/* lllo public*/
-		long var_lllo_0;    // default: 
-		long var_lllo_1;    // default: 
-		long var_lllo_2;    // default: -1
-		long var_lllo_3;    // default: SectionDefault
 
 		/* char sep, int start, int end, QString::SectionFlags flags,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|l|", &var_lllo_0, &var_lllo_1, &var_lllo_2, &var_lllo_3) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-
-			
-			QString return_object = (QString) obj->section((char) var_lllo_0 ,(int) var_lllo_1 ,(int) var_lllo_2 ,(QString::SectionFlags) var_lllo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-		}
 		/* ollo public*/
-		zval* z_var_ollo_0;   // default: 
-		long var_ollo_1;    // default: 
-		long var_ollo_2;    // default: -1
-		long var_ollo_3;    // default: SectionDefault
 
 		/* const QString& in_sep, int start, int end, QString::SectionFlags flags,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll|l|", &z_var_ollo_0, &var_ollo_1, &var_ollo_2, &var_ollo_3) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ollo_0 = (QObject*) php_qt_fetch(z_var_ollo_0);
 
-			QString tmp_ollo_0(var_ollo_0->metaObject()->className());
-			
-			if(tmp_ollo_0 == "const QString") {
-				QString return_object = (QString) obj->section((const QString&) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (QString::SectionFlags) var_ollo_3);
+
+				QString return_object = (QString) obj->section((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(QString::SectionFlags) Z_LVAL_P(z_3));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ollo_0 == "const QRegExp") {
-				QString return_object = (QString) obj->section((const QRegExp&) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (QString::SectionFlags) var_ollo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
 			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			}
 		}
 	}
 }
@@ -1068,7 +967,7 @@
 ZEND_METHOD(QString, simplified){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->simplified();
+				QString return_object = (QString) obj->simplified();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1088,15 +987,17 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 0
-		long var_ll_1;    // default: 10
 
 		/* int* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->toUInt((bool*) var_ll_0 ,(int) var_ll_1));
+
+			RETURN_LONG(obj->toUInt((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -1111,15 +1012,17 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 0
-		long var_ll_1;    // default: 10
 
 		/* int* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->toUShort((bool*) var_ll_0 ,(int) var_ll_1));
+
+			RETURN_LONG(obj->toUShort((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -1134,15 +1037,17 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int pos,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->truncate((int) var_l_0);
+
+			obj->truncate((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1156,8 +1061,7 @@
 ZEND_METHOD(QString, toAscii){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-		// bytearray, skipped
-		RETURN_NULL();
+			RETURN_STRING((char*) obj->toAscii().constData(), 1);
 	}
 }
 
@@ -1184,20 +1088,22 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->right((int) var_l_0);
+
+				QString return_object = (QString) obj->right((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -1212,30 +1118,26 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-
-			
-			obj->push_front((char) var_l_0);
-			RETURN_NULL();
-		}
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				obj->push_front((const QString&) var_o_0);
+
+			obj->push_front((char) Z_LVAL_P(z_0));
 			RETURN_NULL();
 			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			}
 		}
 	}
 }
@@ -1249,10 +1151,7 @@
 ZEND_METHOD(QString, toUtf8){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-		// bytearray, skipped
-		int l = obj->size();
-		char* c = (char*) (obj->toAscii()).constData();
-		RETURN_STRING(c,l);
+			RETURN_STRING((char*) obj->toUtf8().constData(), 1);
 	}
 }
 
@@ -1266,16 +1165,18 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 0
-		long var_ll_1;    // default: 10
 
 		/* int* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->toULongLong((bool*) var_ll_0 ,(int) var_ll_1);
+
+			obj->toULongLong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1290,50 +1191,43 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 0
 
 		/* const QRegExp& , int from,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QRegExp") {
-				RETURN_LONG(obj->indexOf((const QRegExp&) var_ol_0, (int) var_ol_1));
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* oll public*/
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: 0
-		long var_oll_2;    // default: Qt::CaseSensitive
 
 		/* const QString& s, int from, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
-
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "const QString") {
-				RETURN_LONG(obj->indexOf((const QString&) var_oll_0, (int) var_oll_1, (Qt::CaseSensitivity) var_oll_2));
-			}
-		}
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 0
-		long var_lll_2;    // default: Qt::CaseSensitive
 
 		/* char c, int from, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			
-			RETURN_LONG(obj->indexOf((char) var_lll_0 ,(int) var_lll_1 ,(Qt::CaseSensitivity) var_lll_2));
+
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+			RETURN_LONG(obj->indexOf((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(Qt::CaseSensitivity) Z_LVAL_P(z_2)));
+			}
 		}
 	}
 }
@@ -1348,24 +1242,16 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
 
 		/* const QChar* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QChar") {
-				QString return_object = (QString) obj->fromRawData((const QChar*) var_ol_0, (int) var_ol_1);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
@@ -1395,20 +1281,22 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->left((int) var_l_0);
+
+				QString return_object = (QString) obj->left((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -1423,23 +1311,23 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* sl public*/
-		char* var_sl_0;   // default: 
-		int len_sl_0;
 
-		long var_sl_1;    // default: -1
-
 		/* const char* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->fromLocal8Bit( (const char*) var_sl_0 ,(int) var_sl_1);
+
+				QString return_object = (QString) obj->fromLocal8Bit( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -1454,21 +1342,16 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
 
 		/* const QString& s, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString") {
-				RETURN_BOOL(obj->startsWith((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
-			}			
-			if(tmp_ol_0 == "const QChar") {
-				RETURN_BOOL(obj->startsWith((const QChar&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
+
 			}
 		}
 	}
@@ -1484,65 +1367,47 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRegExp& rx,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRegExp") {
-				QString & return_object = (QString &) obj->remove((const QRegExp&) var_o_0);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
 
 		/* const QString& s, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
-
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString") {
-				QString & return_object = (QString &) obj->remove((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int i, int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-						
-			QString & return_object = (QString &) obj->remove((int) var_ll_0 ,(int) var_ll_1);
+
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+				QString & return_object = (QString &) obj->remove((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -1570,251 +1435,113 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
 
 		/* const QString& a1, const QString& a2,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
-				QString return_object = (QString) obj->arg((const QString&) var_oo_0, (const QString&) var_oo_1);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* ooo public*/
-		zval* z_var_ooo_0;   // default: 
-		zval* z_var_ooo_1;   // default: 
-		zval* z_var_ooo_2;   // default: 
 
 		/* const QString& a1, const QString& a2, const QString& a3,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
-			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
-			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);
-
-			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
-			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
-			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
-			
-			if(tmp_ooo_0 == "const QString" && tmp_ooo_1 == "const QString" && tmp_ooo_2 == "const QString") {
-				QString return_object = (QString) obj->arg((const QString&) var_ooo_0, (const QString&) var_ooo_1, (const QString&) var_ooo_2);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
 		/* olo public*/
-		zval* z_var_olo_0;   // default: 
-		long var_olo_1;    // default: 0
-		zval* z_var_olo_2;   // default: QLatin1Char(' ')
 
 		/* const QString& a, int fieldWidth, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|o|", &z_var_olo_0, &var_olo_1, &z_var_olo_2) == SUCCESS) {
+		/* llo public*/
+
+		/* char a, int fieldWidth, const QChar& fillChar,  */
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_olo_0 = (QObject*) php_qt_fetch(z_var_olo_0);
-			QObject* var_olo_2 = (QObject*) php_qt_fetch(z_var_olo_2);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_olo_0(var_olo_0->metaObject()->className());
-			QString tmp_olo_1(var_olo_2->metaObject()->className());
-			
-			if(tmp_olo_0 == "const QString" && tmp_olo_1 == "const QChar") {
-				QString return_object = (QString) obj->arg((const QString&) var_olo_0, (int) var_olo_1, (const QChar&) var_olo_2);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
-		}
-		/* llo public*/
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 0
-		zval* z_var_llo_2;   // default: QLatin1Char(' ')
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-		/* char a, int fieldWidth, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|o|", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
+
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "const QChar") {
-				QString return_object = (QString) obj->arg((char) var_llo_0, (int) var_llo_1, (const QChar&) var_llo_2);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
 		/* lllo public*/
-		long var_lllo_0;    // default: 
-		long var_lllo_1;    // default: 0
-		long var_lllo_2;    // default: 10
-		zval* z_var_lllo_3;   // default: QLatin1Char(' ')
 
 		/* int a, int fieldWidth, int base, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|o|", &var_lllo_0, &var_lllo_1, &var_lllo_2, &z_var_lllo_3) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lllo_3 = (QObject*) php_qt_fetch(z_var_lllo_3);
-
-			QString tmp_lllo_0(var_lllo_3->metaObject()->className());
-			
-			if(tmp_lllo_0 == "const QChar") {
-				QString return_object = (QString) obj->arg((int) var_lllo_0, (int) var_lllo_1, (int) var_lllo_2, (const QChar&) var_lllo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
 		/* ollo public*/
-		long var_ollo_0;    // default: 
-		long var_ollo_1;    // default: 0
-		long var_ollo_2;    // default: 10
-		zval* z_var_ollo_3;   // default: QLatin1Char(' ')
 
 		/* qlonglong a, int fieldwidth, int base, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|o|", &var_ollo_0, &var_ollo_1, &var_ollo_2, &z_var_ollo_3) == SUCCESS) {
+		/* oooo public*/
+
+		/* const QString& a1, const QString& a2, const QString& a3, const QString& a4,  */
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ollo_3 = (QObject*) php_qt_fetch(z_var_ollo_3);
+			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);
 
-			QString tmp_ollo_0(var_ollo_3->metaObject()->className());
-			
-			if(tmp_ollo_0 == "const QChar") {
-				QString return_object = (QString) obj->arg((qlonglong) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}			
-			if(tmp_ollo_0 == "const QChar") {
-				QString return_object = (QString) obj->arg((qulonglong) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}			
-			if(tmp_ollo_0 == "const QChar") {
-				QString return_object = (QString) obj->arg((long) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}			
-			if(tmp_ollo_0 == "const QChar") {
-				QString return_object = (QString) obj->arg((ulong) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}			
-			if(tmp_ollo_0 == "const QChar") {
-				QString return_object = (QString) obj->arg((short) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}			
-			if(tmp_ollo_0 == "const QChar") {
-				QString return_object = (QString) obj->arg((ushort) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (const QChar&) var_ollo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
-		}
-		/* oooo public*/
-		zval* z_var_oooo_0;   // default: 
-		zval* z_var_oooo_1;   // default: 
-		zval* z_var_oooo_2;   // default: 
-		zval* z_var_oooo_3;   // default: 
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);
 
-		/* const QString& a1, const QString& a2, const QString& a3, const QString& a4,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &z_var_oooo_0, &z_var_oooo_1, &z_var_oooo_2, &z_var_oooo_3) == SUCCESS) {
+
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oooo_0 = (QObject*) php_qt_fetch(z_var_oooo_0);
-			QObject* var_oooo_1 = (QObject*) php_qt_fetch(z_var_oooo_1);
-			QObject* var_oooo_2 = (QObject*) php_qt_fetch(z_var_oooo_2);
-			QObject* var_oooo_3 = (QObject*) php_qt_fetch(z_var_oooo_3);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
+			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);
 
-			QString tmp_oooo_0(var_oooo_0->metaObject()->className());
-			QString tmp_oooo_1(var_oooo_1->metaObject()->className());
-			QString tmp_oooo_2(var_oooo_2->metaObject()->className());
-			QString tmp_oooo_3(var_oooo_3->metaObject()->className());
-			
-			if(tmp_oooo_0 == "const QString" && tmp_oooo_1 == "const QString" && tmp_oooo_2 == "const QString" && tmp_oooo_3 == "const QString") {
-				QString return_object = (QString) obj->arg((const QString&) var_oooo_0, (const QString&) var_oooo_1, (const QString&) var_oooo_2, (const QString&) var_oooo_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 5){
 		/* llllo public*/
-		long var_llllo_0;    // default: 
-		long var_llllo_1;    // default: 0
-		long var_llllo_2;    // default: 'g'
-		long var_llllo_3;    // default: -1
-		zval* z_var_llllo_4;   // default: QLatin1Char(' ')
 
 		/* double a, int fieldWidth, char fmt, int prec, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|l|o|", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &z_var_llllo_4) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_llllo_4 = (QObject*) php_qt_fetch(z_var_llllo_4);
+			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);
 
-			QString tmp_llllo_0(var_llllo_4->metaObject()->className());
-			
-			if(tmp_llllo_0 == "const QChar") {
-				QString return_object = (QString) obj->arg((double) var_llllo_0, (int) var_llllo_1, (char) var_llllo_2, (int) var_llllo_3, (const QChar&) var_llllo_4);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
@@ -1830,26 +1557,16 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* so public*/
-		char* var_so_0;   // default: 
-		int len_so_0;
 
-		zval* z_var_so_1;   // default: 
-
 		/* const char* format, va_list ap,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_so_0, len_so_0, &z_var_so_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_so_1 = (QObject*) php_qt_fetch(z_var_so_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_so_0(var_so_1->metaObject()->className());
-			
-			if(tmp_so_0 == "va_list") {
-				QString & return_object = (QString &) obj->vsprintf((const char*) var_so_0, (va_list) var_so_1);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
@@ -1865,15 +1582,16 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 0
 
 		/* int* ok,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-//			RETURN_FLOAT(obj->toFloat((bool*) var_l_0));
-			RETURN_NULL();
+
+//			RETURN_FLOAT(obj->toFloat((bool*) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -1901,15 +1619,17 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->reserve((int) var_l_0);
+
+			obj->reserve((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1924,16 +1644,17 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 0
-		long var_ll_1;    // default: 10
 
 		/* int* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
+//			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-//			RETURN_ULONG(obj->toULong((bool*) var_ll_0 ,(int) var_ll_1));
-		  	RETURN_NULL();
+
+//			RETURN_ULONG(obj->toULong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -1948,16 +1669,17 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 0
-		long var_ll_1;    // default: 10
 
 		/* int* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
+//			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-//			RETURN_SHORT(obj->toShort((bool*) var_ll_0 ,(int) var_ll_1));
-	  		RETURN_NULL();
+
+//			RETURN_SHORT(obj->toShort((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -1972,49 +1694,33 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		long var_oo_1;    // default: KeepEmptyParts
 
 		/* const QRegExp& sep, QString::SplitBehavior behavior,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_oo_0, &var_oo_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QRegExp") {
-/*				QStringList return_object = (QStringList) obj->split((const QRegExp&) var_oo_0, (QString::SplitBehavior) var_oo_1);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-*/				return;                                             
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* ool public*/
-		zval* z_var_ool_0;   // default: 
-		long var_ool_1;    // default: KeepEmptyParts
-		long var_ool_2;    // default: Qt::CaseSensitive
 
 		/* const QString& sep, QString::SplitBehavior behavior, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_ool_0, &var_ool_1, &var_ool_2) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ool_0(var_ool_0->metaObject()->className());
-			
-			if(tmp_ool_0 == "const QString") {
-/*				QStringList return_object = (QStringList) obj->split((const QString&) var_ool_0, (QString::SplitBehavior) var_ool_1, (Qt::CaseSensitivity) var_ool_2);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-*/				return;                                             
+
 			}
 		}
 	}
@@ -2030,25 +1736,17 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
 
 		/* const QChar* unicode, int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-//			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-//			if(tmp_ol_0 == "QChar") {
-				QString & return_object = (QString &) obj->setUnicode((const QChar*) var_ol_0, (int) var_ol_1);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-//			}
+
+			}
 		}
 	}
 }
@@ -2063,23 +1761,23 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* sl public*/
-		char* var_sl_0;   // default: 
-		int len_sl_0;
 
-		long var_sl_1;    // default: -1
-
 		/* const char* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->fromLatin1( (const char*) var_sl_0 ,(int) var_sl_1);
+
+				QString return_object = (QString) obj->fromLatin1( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -2093,7 +1791,7 @@
 ZEND_METHOD(QString, data){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QChar * return_object = (QChar *) obj->data();
+				QChar * return_object = (QChar *) obj->data();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -2112,8 +1810,7 @@
 ZEND_METHOD(QString, toLatin1){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-		// bytearray, skipped
-		RETURN_NULL();
+			RETURN_STRING((char*) obj->toLatin1().constData(), 1);
 	}
 }
 
@@ -2125,9 +1822,8 @@
  */
 ZEND_METHOD(QString, end){
 	if (ZEND_NUM_ARGS() == 0){
-			QString *obj = (QString*) PHP_QT_FETCH();
+//			QString *obj = (QString*) PHP_QT_FETCH();
 //			RETURN_INTPTR(obj->end());
-			RETURN_NULL();
 	}
 }
 
@@ -2141,50 +1837,42 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRegExp& rx,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRegExp") {
-				obj->contains((const QRegExp&) var_o_0);
-			RETURN_NULL();
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
 
 		/* const QString& s, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
-
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString") {
-				obj->contains((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1);
-			RETURN_NULL();
-			}
-		}
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: Qt::CaseSensitive
 
 		/* char c, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			
-			obj->contains((char) var_ll_0 ,(Qt::CaseSensitivity) var_ll_1);
+
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+			obj->contains((char) Z_LVAL_P(z_0) ,(Qt::CaseSensitivity) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2199,15 +1887,17 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->resize((int) var_l_0);
+
+			obj->resize((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2222,109 +1912,56 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
 
 		/* const QRegExp& rx, const QString& after,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QRegExp" && tmp_oo_1 == "const QString") {
-				QString & return_object = (QString &) obj->replace((const QRegExp&) var_oo_0, (const QString&) var_oo_1);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* ool public*/
-		zval* z_var_ool_0;   // default: 
-		zval* z_var_ool_1;   // default: 
-		long var_ool_2;    // default: Qt::CaseSensitive
 
 		/* const QString& before, const QString& after, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
-			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
-
-			QString tmp_ool_0(var_ool_0->metaObject()->className());
-			QString tmp_ool_1(var_ool_1->metaObject()->className());
-			
-			if(tmp_ool_0 == "const QString" && tmp_ool_1 == "const QString") {
-				QString & return_object = (QString &) obj->replace((const QString&) var_ool_0, (const QString&) var_ool_1, (Qt::CaseSensitivity) var_ool_2);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
 		/* lol public*/
-		long var_lol_0;    // default: 
-		zval* z_var_lol_1;   // default: 
-		long var_lol_2;    // default: Qt::CaseSensitive
 
 		/* char c, const QString& after, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol|", &var_lol_0, &z_var_lol_1, &var_lol_2) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lol_1 = (QObject*) php_qt_fetch(z_var_lol_1);
-
-			QString tmp_lol_0(var_lol_1->metaObject()->className());
-			
-			if(tmp_lol_0 == "const QString") {
-				QString & return_object = (QString &) obj->replace((char) var_lol_0, (const QString&) var_lol_1, (Qt::CaseSensitivity) var_lol_2);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 
-		long var_lll_2;    // default: 
 
 		/* int i, int len, char after,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-
-						
-			QString & return_object = (QString &) obj->replace((int) var_lll_0 ,(int) var_lll_1 ,(char) var_lll_2);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-		}
 		/* llo public*/
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
 
 		/* int i, int len, const QString& after,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "const QString") {
-				QString & return_object = (QString &) obj->replace((int) var_llo_0, (int) var_llo_1, (const QString&) var_llo_2);
+
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+
+
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+				QString & return_object = (QString &) obj->replace((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(char) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -2332,31 +1969,29 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
+
+
+			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 4){
 		/* llol public*/
-		long var_llol_0;    // default: 
-		long var_llol_1;    // default: 
-		zval* z_var_llol_2;   // default: 
-		long var_llol_3;    // default: 
 
 		/* int i, int len, const QChar* s, int slen,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol", &var_llol_0, &var_llol_1, &z_var_llol_2, &var_llol_3) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_llol_2 = (QObject*) php_qt_fetch(z_var_llol_2);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llol_0(var_llol_2->metaObject()->className());
-			
-			if(tmp_llol_0 == "const QChar") {
-				QString & return_object = (QString &) obj->replace((int) var_llol_0, (int) var_llol_1, (const QChar*) var_llol_2, (int) var_llol_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+
 			}
 		}
 	}
@@ -2372,23 +2007,23 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* sl public*/
-		char* var_sl_0;   // default: 
-		int len_sl_0;
 
-		long var_sl_1;    // default: -1
-
 		/* const char* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
-
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			
-			QString return_object = (QString) obj->fromUtf8( (const char*) var_sl_0 ,(int) var_sl_1);
+
+
+				QString return_object = (QString) obj->fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -2403,15 +2038,17 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 0
-		long var_ll_1;    // default: 10
 
 		/* int* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->toLong((bool*) var_ll_0 ,(int) var_ll_1));
+
+			RETURN_LONG(obj->toLong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -2440,60 +2077,33 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-
-			
-			QString & return_object = (QString &) obj->append((char) var_l_0);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-		}
 		/* s public*/
-		char* var_s_0;   // default: 
-		int len_s_0;
 
-
 		/* const char* s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-
-			
-			QString & return_object = (QString &) obj->append( (const char*) var_s_0);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-		}
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				QString & return_object = (QString &) obj->append((const QString&) var_o_0);
+
+				QString & return_object = (QString &) obj->append((char) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_o_0 == "const QByteArray") {
-				QString & return_object = (QString &) obj->append((const QByteArray&) var_o_0);
+			}
+			if(Z_TYPE_P(z_0) == IS_STRING){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+				QString & return_object = (QString &) obj->append( (const char*) Z_STRVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -2501,6 +2111,12 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			}
 		}
 	}
 }
@@ -2515,21 +2131,23 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: -1
 
 		/* int i, int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->mid((int) var_ll_0 ,(int) var_ll_1);
+
+				QString return_object = (QString) obj->mid((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -2544,14 +2162,16 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 0
 
 		/* int* ok,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_DOUBLE(obj->toDouble((bool*) var_l_0));
+
+			RETURN_DOUBLE(obj->toDouble((bool*) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -2566,21 +2186,23 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: -1
 
 		/* char c, int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString & return_object = (QString &) obj->fill((char) var_ll_0 ,(int) var_ll_1);
+
+				QString & return_object = (QString &) obj->fill((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -2595,22 +2217,24 @@
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: QLatin1Char(' ')
-		long var_lll_2;    // default: false
 
 		/* int width, char fill, int trunc,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->rightJustified((int) var_lll_0 ,(char) var_lll_1 ,(bool) var_lll_2);
+
+				QString return_object = (QString) obj->rightJustified((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(bool) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -2624,7 +2248,7 @@
 ZEND_METHOD(QString, toLower){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->toLower();
+				QString return_object = (QString) obj->toLower();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -2644,50 +2268,43 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: -1
 
 		/* const QRegExp& , int from,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QRegExp") {
-				RETURN_LONG(obj->lastIndexOf((const QRegExp&) var_ol_0, (int) var_ol_1));
+
 			}
 		}
 	}
 
 	if (ZEND_NUM_ARGS() == 3){
 		/* oll public*/
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: -1
-		long var_oll_2;    // default: Qt::CaseSensitive
 
 		/* const QString& s, int from, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
-
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "const QString") {
-				RETURN_LONG(obj->lastIndexOf((const QString&) var_oll_0, (int) var_oll_1, (Qt::CaseSensitivity) var_oll_2));
-			}
-		}
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: -1
-		long var_lll_2;    // default: Qt::CaseSensitive
 
 		/* char c, int from, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			
-			RETURN_LONG(obj->lastIndexOf((char) var_lll_0 ,(int) var_lll_1 ,(Qt::CaseSensitivity) var_lll_2));
+
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+			RETURN_LONG(obj->lastIndexOf((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(Qt::CaseSensitivity) Z_LVAL_P(z_2)));
+			}
 		}
 	}
 }
@@ -2701,7 +2318,7 @@
 ZEND_METHOD(QString, unicode){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			const QChar * return_object = (const QChar *) obj->unicode();
+				const QChar * return_object = (const QChar *) obj->unicode();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -2721,15 +2338,17 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int i,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->at((int) var_l_0);
+
+			obj->at((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2742,9 +2361,8 @@
  */
 ZEND_METHOD(QString, begin){
 	if (ZEND_NUM_ARGS() == 0){
-			QString *obj = (QString*) PHP_QT_FETCH();
+//			QString *obj = (QString*) PHP_QT_FETCH();
 //			RETURN_INTPTR(obj->begin());
-			RETURN_NULL();
 	}
 }
 
@@ -2758,30 +2376,26 @@
 
 	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-
-			
-			obj->push_back((char) var_l_0);
-			RETURN_NULL();
-		}
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				obj->push_back((const QString&) var_o_0);
+
+			obj->push_back((char) Z_LVAL_P(z_0));
 			RETURN_NULL();
 			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			}
 		}
 	}
 }
@@ -2822,8 +2436,7 @@
 ZEND_METHOD(QString, toLocal8Bit){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-		// bytearray, skipped
-		RETURN_NULL();
+			RETURN_STRING((char*) obj->toLocal8Bit().constData(), 1);
 	}
 }
 
@@ -2837,15 +2450,17 @@
 
 	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 0
-		long var_ll_1;    // default: 10
 
 		/* int* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|l|", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->toInt((bool*) var_ll_0 ,(int) var_ll_1));
+
+			RETURN_LONG(obj->toInt((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }



From tm243 at berlios.de  Thu Jan 19 02:51:27 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Thu, 19 Jan 2006 02:51:27 +0100
Subject: [Php-qt-svn] r199 - trunk/qt/classes
Message-ID: <200601190151.k0J1pRia023639@sheep.berlios.de>

Author: tm243
Date: 2006-01-19 02:51:23 +0100 (Thu, 19 Jan 2006)
New Revision: 199

Modified:
   trunk/qt/classes/qdatetime.cpp
   trunk/qt/classes/qgridlayout.cpp
   trunk/qt/classes/qlcdnumber.cpp
Log:
better handling of objects as argument types. However, overloading is still restricted in some cases.

Modified: trunk/qt/classes/qdatetime.cpp
===================================================================
--- trunk/qt/classes/qdatetime.cpp	2006-01-18 22:37:02 UTC (rev 198)
+++ trunk/qt/classes/qdatetime.cpp	2006-01-19 01:51:23 UTC (rev 199)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDateTime.cpp - QDateTime PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Thu Jan 19 02:44:10 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QDateTime, time){
 	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QTime return_object = (QTime) obj->time();
+				QTime return_object = (QTime) obj->time();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -59,7 +59,7 @@
 ZEND_METHOD(QDateTime, date){
 	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QDate return_object = (QDate) obj->date();
+				QDate return_object = (QDate) obj->date();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -89,36 +89,35 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, toString){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: Qt::TextDate
 
 		/* int f,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+		/* o public*/
+
+		/* const QString& format,  */
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->toString((Qt::DateFormat) var_l_0);
+
+				QString return_object = (QString) obj->toString((Qt::DateFormat) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-		}
-		/* o public*/
-		zval* z_var_o_0;   // default: 
-
-		/* const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				QString return_object = (QString) obj->toString((const QString&) var_o_0);
+
+			if(1 == 1) {
+					QString return_object = (QString) obj->toString((const QString&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -126,6 +125,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -150,18 +150,20 @@
  *    flags:    
  */
 ZEND_METHOD(QDateTime, setTime_t){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* unsigned int secsSince1Jan1970UTC,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
-			
-			obj->setTime_t((uint) var_l_0);
+
+			obj->setTime_t((uint) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -173,23 +175,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, addDays){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int days,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
-			
-			QDateTime return_object = (QDateTime) obj->addDays((int) var_l_0);
+
+				QDateTime return_object = (QDateTime) obj->addDays((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -201,21 +205,22 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, secsTo){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QDateTime& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QDateTime") {
-				RETURN_LONG(obj->secsTo((const QDateTime&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QDateTime") {
+				RETURN_LONG(obj->secsTo((const QDateTime&) obj_z_0));
 			}
+			}
 		}
 	}
 }
@@ -227,23 +232,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, toTimeSpec){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int spec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
-			
-			QDateTime return_object = (QDateTime) obj->toTimeSpec((Qt::TimeSpec) var_l_0);
+
+				QDateTime return_object = (QDateTime) obj->toTimeSpec((Qt::TimeSpec) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -255,21 +262,24 @@
  *    flags:    s
  */
 ZEND_METHOD(QDateTime, fromString){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::TextDate
 
 		/* const QString& s, int f,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		/* oo public*/
+
+		/* const QString& s, const QString& format,  */
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString") {
-				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_ol_0, (Qt::DateFormat) var_ol_1);
+
+			if(1 == 1) {
+					QDateTime return_object = (QDateTime) obj->fromString((const QString&) obj_z_0, (Qt::DateFormat) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -277,22 +287,15 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
-		}
-		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
-
-		/* const QString& s, const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
-				QDateTime return_object = (QDateTime) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
+
+			if(1 == 1 && 1 == 1) {
+					QDateTime return_object = (QDateTime) obj->fromString((const QString&) obj_z_0, (const QString&) obj_z_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -300,6 +303,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -324,22 +328,23 @@
  *    flags:    
  */
 ZEND_METHOD(QDateTime, setTime){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QTime& time,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QTime") {
-				obj->setTime((const QTime&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QTime") {
+				obj->setTime((const QTime&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -351,23 +356,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, addMonths){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int months,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
-			
-			QDateTime return_object = (QDateTime) obj->addMonths((int) var_l_0);
+
+				QDateTime return_object = (QDateTime) obj->addMonths((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -381,52 +388,53 @@
 ZEND_METHOD(QDateTime, __construct){
 	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *QDateTime_ptr = new QDateTime();
-			PHP_QT_REGISTER(QDateTime_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QDateTime_ptr);
+				RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QDate& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QDate") {
-				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) var_o_0);
-			PHP_QT_REGISTER(QDateTime_ptr);
-			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QDateTime") {
-				QDateTime *QDateTime_ptr = new QDateTime((const QDateTime&) var_o_0);
-			PHP_QT_REGISTER(QDateTime_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QDate") {
+				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) obj_z_0);
+				PHP_QT_REGISTER(QDateTime_ptr);
+				RETURN_NULL();
 			}
+			if(Z_OBJCE_P(z_0)->name == "QDateTime") {
+				QDateTime *QDateTime_ptr = new QDateTime((const QDateTime&) obj_z_0);
+				PHP_QT_REGISTER(QDateTime_ptr);
+				RETURN_NULL();
+			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* ool public*/
-		zval* z_var_ool_0;   // default: 
-		zval* z_var_ool_1;   // default: 
-		long var_ool_2;    // default: Qt::LocalTime
 
 		/* const QDate& , const QTime& , int spec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
-			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
-			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
 
-			QString tmp_ool_0(var_ool_0->metaObject()->className());
-			QString tmp_ool_1(var_ool_1->metaObject()->className());
-			
-			if(tmp_ool_0 == "const QDate" && tmp_ool_1 == "const QTime") {
-				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) var_ool_0, (const QTime&) var_ool_1, (Qt::TimeSpec) var_ool_2);
-			PHP_QT_REGISTER(QDateTime_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QDate" && Z_OBJCE_P(z_1)->name == "QTime") {
+				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) obj_z_0, (const QTime&) obj_z_1, (Qt::TimeSpec) Z_LVAL_P(z_2));
+				PHP_QT_REGISTER(QDateTime_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -438,23 +446,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, addSecs){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int secs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
-			
-			QDateTime return_object = (QDateTime) obj->addSecs((int) var_l_0);
+
+				QDateTime return_object = (QDateTime) obj->addSecs((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -466,22 +476,23 @@
  *    flags:    
  */
 ZEND_METHOD(QDateTime, setDate){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QDate& date,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QDate") {
-				obj->setDate((const QDate&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QDate") {
+				obj->setDate((const QDate&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -495,7 +506,7 @@
 ZEND_METHOD(QDateTime, currentDateTime){
 	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QDateTime return_object = (QDateTime) obj->currentDateTime();
+				QDateTime return_object = (QDateTime) obj->currentDateTime();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -512,21 +523,22 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, daysTo){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QDateTime& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QDateTime") {
-				RETURN_LONG(obj->daysTo((const QDateTime&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QDateTime") {
+				RETURN_LONG(obj->daysTo((const QDateTime&) obj_z_0));
 			}
+			}
 		}
 	}
 }
@@ -538,23 +550,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QDateTime, addYears){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int years,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
-			
-			QDateTime return_object = (QDateTime) obj->addYears((int) var_l_0);
+
+				QDateTime return_object = (QDateTime) obj->addYears((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -581,7 +595,7 @@
 ZEND_METHOD(QDateTime, toUTC){
 	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QDateTime return_object = (QDateTime) obj->toUTC();
+				QDateTime return_object = (QDateTime) obj->toUTC();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -600,7 +614,7 @@
 ZEND_METHOD(QDateTime, toLocalTime){
 	if (ZEND_NUM_ARGS() == 0){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
-			QDateTime return_object = (QDateTime) obj->toLocalTime();
+				QDateTime return_object = (QDateTime) obj->toLocalTime();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -617,18 +631,20 @@
  *    flags:    
  */
 ZEND_METHOD(QDateTime, setTimeSpec){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int spec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
 
-			
-			obj->setTimeSpec((Qt::TimeSpec) var_l_0);
+
+			obj->setTimeSpec((Qt::TimeSpec) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qgridlayout.cpp
===================================================================
--- trunk/qt/classes/qgridlayout.cpp	2006-01-18 22:37:02 UTC (rev 198)
+++ trunk/qt/classes/qgridlayout.cpp	2006-01-19 01:51:23 UTC (rev 199)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QGridLayout.cpp - QGridLayout PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Thu Jan 19 02:44:10 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,28 +38,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QGridLayout, tr){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ss public*/
-		char* var_ss_0;   // default: 
-		int len_ss_0;
 
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
+		/* const char* , const char* ,  */
 
-
-		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -71,48 +69,50 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, addLayout){
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* olll public*/
-		zval* z_var_olll_0;   // default: 
-		long var_olll_1;    // default: 
-		long var_olll_2;    // default: 
-		long var_olll_3;    // default: 0
 
 		/* qt_QLayout* , int row, int column, int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olll|", &z_var_olll_0, &var_olll_1, &var_olll_2, &var_olll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_olll_0 = (QObject*) php_qt_fetch(z_var_olll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_olll_0(var_olll_0->metaObject()->className());
-			
-			if(tmp_olll_0 == "QLayout") {
-				obj->addLayout((QLayout*) var_olll_0, (int) var_olll_1, (int) var_olll_2, (Qt::Alignment) var_olll_3);
+
+			if(Z_OBJCE_P(z_0)->name == "QLayout") {
+				obj->addLayout((QLayout*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 6){
 		/* olllll public*/
-		zval* z_var_olllll_0;   // default: 
-		long var_olllll_1;    // default: 
-		long var_olllll_2;    // default: 
-		long var_olllll_3;    // default: 
-		long var_olllll_4;    // default: 
-		long var_olllll_5;    // default: 0
 
 		/* qt_QLayout* , int row, int column, int rowSpan, int columnSpan, int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olllll|", &z_var_olllll_0, &var_olllll_1, &var_olllll_2, &var_olllll_3, &var_olllll_4, &var_olllll_5) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 6){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_olllll_0 = (QObject*) php_qt_fetch(z_var_olllll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_olllll_0(var_olllll_0->metaObject()->className());
-			
-			if(tmp_olllll_0 == "QLayout") {
-				obj->addLayout((QLayout*) var_olllll_0, (int) var_olllll_1, (int) var_olllll_2, (int) var_olllll_3, (int) var_olllll_4, (Qt::Alignment) var_olllll_5);
+
+			if(Z_OBJCE_P(z_0)->name == "QLayout") {
+				obj->addLayout((QLayout*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -126,25 +126,26 @@
 ZEND_METHOD(QGridLayout, __construct){
 	if (ZEND_NUM_ARGS() == 0){
 			QGridLayout *QGridLayout_ptr = new QGridLayout();
-			PHP_QT_REGISTER(QGridLayout_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QGridLayout_ptr);
+				RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* qt_QWidget* parent,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QWidget") {
-				QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget*) var_o_0);
-			PHP_QT_REGISTER(QGridLayout_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(1 == 1) {
+				QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget*) obj_z_0);
+				PHP_QT_REGISTER(QGridLayout_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -156,9 +157,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QGridLayout, qt_invoke){
-
-	if (ZEND_NUM_ARGS() == 2){
-	}
 }
 
 /*********************************
@@ -168,31 +166,29 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, addItem){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o protected*/
-	}
-
-	if (ZEND_NUM_ARGS() == 6){
 		/* olllll public*/
-		zval* z_var_olllll_0;   // default: 
-		long var_olllll_1;    // default: 
-		long var_olllll_2;    // default: 
-		long var_olllll_3;    // default: 1
-		long var_olllll_4;    // default: 1
-		long var_olllll_5;    // default: 0
 
 		/* qt_QLayoutItem* item, int row, int column, int rowSpan, int columnSpan, int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olll|l|l|", &z_var_olllll_0, &var_olllll_1, &var_olllll_2, &var_olllll_3, &var_olllll_4, &var_olllll_5) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 6){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_olllll_0 = (QObject*) php_qt_fetch(z_var_olllll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_olllll_0(var_olllll_0->metaObject()->className());
-			
-			if(tmp_olllll_0 == "QLayoutItem") {
-				obj->addItem((QLayoutItem*) var_olllll_0, (int) var_olllll_1, (int) var_olllll_2, (int) var_olllll_3, (int) var_olllll_4, (Qt::Alignment) var_olllll_5);
+
+			if(Z_OBJCE_P(z_0)->name == "QLayoutItem") {
+				obj->addItem((QLayoutItem*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -204,17 +200,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QGridLayout, rowMinimumHeight){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int row,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->rowMinimumHeight((int) var_l_0));
+
+			RETURN_LONG(obj->rowMinimumHeight((int) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -226,18 +224,20 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, setOriginCorner){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			obj->setOriginCorner((Qt::Corner) var_l_0);
+
+			obj->setOriginCorner((Qt::Corner) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -249,9 +249,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QGridLayout, qt_cast){
-
-	if (ZEND_NUM_ARGS() == 1){
-	}
 }
 
 /*********************************
@@ -263,7 +260,7 @@
 ZEND_METHOD(QGridLayout, metaObject){
 	if (ZEND_NUM_ARGS() == 0){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
+				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -320,22 +317,23 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, setGeometry){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRect& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRect") {
-				obj->setGeometry((const QRect&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->setGeometry((const QRect&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -347,9 +345,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QGridLayout, qt_emit){
-
-	if (ZEND_NUM_ARGS() == 2){
-	}
 }
 
 /*********************************
@@ -359,19 +354,21 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, setRowStretch){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int row, int stretch,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			obj->setRowStretch((int) var_ll_0 ,(int) var_ll_1);
+
+			obj->setRowStretch((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -383,22 +380,24 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, getItemPosition){
-
-	if (ZEND_NUM_ARGS() == 5){
 		/* lllll public*/
-		long var_lllll_0;    // default: 
-		long var_lllll_1;    // default: 
-		long var_lllll_2;    // default: 
-		long var_lllll_3;    // default: 
-		long var_lllll_4;    // default: 
 
 		/* int idx, int* row, int* column, int* rowSpan, int* columnSpan,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll", &var_lllll_0, &var_lllll_1, &var_lllll_2, &var_lllll_3, &var_lllll_4) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 5){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			obj->getItemPosition((int) var_lllll_0 ,(int*) var_lllll_1 ,(int*) var_lllll_2 ,(int*) var_lllll_3 ,(int*) var_lllll_4);
+
+			obj->getItemPosition((int) Z_LVAL_P(z_0) ,(int*) Z_LVAL_P(z_1) ,(int*) Z_LVAL_P(z_2) ,(int*) Z_LVAL_P(z_3) ,(int*) Z_LVAL_P(z_4));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -410,19 +409,21 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, setDefaultPositioning){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int n, int orient,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			obj->setDefaultPositioning((int) var_ll_0 ,(Qt::Orientation) var_ll_1);
+
+			obj->setDefaultPositioning((int) Z_LVAL_P(z_0) ,(Qt::Orientation) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -443,17 +444,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QGridLayout, columnStretch){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int column,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->columnStretch((int) var_l_0));
+
+			RETURN_LONG(obj->columnStretch((int) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -465,66 +468,69 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, addWidget){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* qt_QWidget* w,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QWidget") {
-				obj->addWidget((QWidget*) var_o_0);
+
+			if(1 == 1) {
+				obj->addWidget((QWidget*) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* olll public*/
-		zval* z_var_olll_0;   // default: 
-		long var_olll_1;    // default: 
-		long var_olll_2;    // default: 
-		long var_olll_3;    // default: 0
 
 		/* qt_QWidget* , int row, int column, int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olll|", &z_var_olll_0, &var_olll_1, &var_olll_2, &var_olll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_olll_0 = (QObject*) php_qt_fetch(z_var_olll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_olll_0(var_olll_0->metaObject()->className());
-			
-			if(tmp_olll_0 == "QWidget") {
-				obj->addWidget((QWidget*) var_olll_0, (int) var_olll_1, (int) var_olll_2, (Qt::Alignment) var_olll_3);
+
+			if(1 == 1) {
+				obj->addWidget((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 6){
 		/* olllll public*/
-		zval* z_var_olllll_0;   // default: 
-		long var_olllll_1;    // default: 
-		long var_olllll_2;    // default: 
-		long var_olllll_3;    // default: 
-		long var_olllll_4;    // default: 
-		long var_olllll_5;    // default: 0
 
 		/* qt_QWidget* , int row, int column, int rowSpan, int columnSpan, int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olllll|", &z_var_olllll_0, &var_olllll_1, &var_olllll_2, &var_olllll_3, &var_olllll_4, &var_olllll_5) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 6){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* var_olllll_0 = (QObject*) php_qt_fetch(z_var_olllll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_olllll_0(var_olllll_0->metaObject()->className());
-			
-			if(tmp_olllll_0 == "QWidget") {
-				obj->addWidget((QWidget*) var_olllll_0, (int) var_olllll_1, (int) var_olllll_2, (int) var_olllll_3, (int) var_olllll_4, (Qt::Alignment) var_olllll_5);
+
+			if(1 == 1) {
+				obj->addWidget((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -536,23 +542,25 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, takeAt){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			QLayoutItem * return_object = (QLayoutItem *) obj->takeAt((int) var_l_0);
+
+				QLayoutItem * return_object = (QLayoutItem *) obj->takeAt((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -573,23 +581,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QGridLayout, itemAt){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			QLayoutItem * return_object = (QLayoutItem *) obj->itemAt((int) var_l_0);
+
+				QLayoutItem * return_object = (QLayoutItem *) obj->itemAt((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -612,7 +622,7 @@
 ZEND_METHOD(QGridLayout, minimumSize){
 	if (ZEND_NUM_ARGS() == 0){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->minimumSize();
+				QSize return_object = (QSize) obj->minimumSize();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -631,7 +641,7 @@
 ZEND_METHOD(QGridLayout, sizeHint){
 	if (ZEND_NUM_ARGS() == 0){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->sizeHint();
+				QSize return_object = (QSize) obj->sizeHint();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -648,19 +658,21 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, setColumnMinimumWidth){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int column, int minSize,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			obj->setColumnMinimumWidth((int) var_ll_0 ,(int) var_ll_1);
+
+			obj->setColumnMinimumWidth((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -672,17 +684,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QGridLayout, heightForWidth){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->heightForWidth((int) var_l_0));
+
+			RETURN_LONG(obj->heightForWidth((int) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -707,19 +721,21 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, setColumnStretch){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int column, int stretch,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			obj->setColumnStretch((int) var_ll_0 ,(int) var_ll_1);
+
+			obj->setColumnStretch((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -744,17 +760,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QGridLayout, columnMinimumWidth){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int column,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->columnMinimumWidth((int) var_l_0));
+
+			RETURN_LONG(obj->columnMinimumWidth((int) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -766,24 +784,26 @@
  *    flags:    c
  */
 ZEND_METHOD(QGridLayout, cellRect){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int row, int column,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			QRect return_object = (QRect) obj->cellRect((int) var_ll_0 ,(int) var_ll_1);
+
+				QRect return_object = (QRect) obj->cellRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -808,19 +828,21 @@
  *    flags:    
  */
 ZEND_METHOD(QGridLayout, setRowMinimumHeight){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int row, int minSize,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			obj->setRowMinimumHeight((int) var_ll_0 ,(int) var_ll_1);
+
+			obj->setRowMinimumHeight((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -832,28 +854,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QGridLayout, trUtf8){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ss public*/
-		char* var_ss_0;   // default: 
-		int len_ss_0;
 
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
+		/* const char* , const char* ,  */
 
-
-		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -867,7 +887,7 @@
 ZEND_METHOD(QGridLayout, maximumSize){
 	if (ZEND_NUM_ARGS() == 0){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->maximumSize();
+				QSize return_object = (QSize) obj->maximumSize();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -884,9 +904,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QGridLayout, qt_property){
-
-	if (ZEND_NUM_ARGS() == 3){
-	}
 }
 
 /*********************************
@@ -896,17 +913,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QGridLayout, minimumHeightForWidth){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->minimumHeightForWidth((int) var_l_0));
+
+			RETURN_LONG(obj->minimumHeightForWidth((int) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -920,7 +939,7 @@
 ZEND_METHOD(QGridLayout, expandingDirections){
 	if (ZEND_NUM_ARGS() == 0){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			Qt::Orientations return_object = (Qt::Orientations) obj->expandingDirections();
+				Qt::Orientations return_object = (Qt::Orientations) obj->expandingDirections();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QGridLayout_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -937,17 +956,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QGridLayout, rowStretch){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int row,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->rowStretch((int) var_l_0));
+
+			RETURN_LONG(obj->rowStretch((int) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qlcdnumber.cpp
===================================================================
--- trunk/qt/classes/qlcdnumber.cpp	2006-01-18 22:37:02 UTC (rev 198)
+++ trunk/qt/classes/qlcdnumber.cpp	2006-01-19 01:51:23 UTC (rev 199)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLCDNumber.cpp - QLCDNumber PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Thu Jan 19 02:44:10 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -53,28 +53,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QLCDNumber, tr){
+		/* ss public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
-		char* var_ss_0;   // default: 
-		int len_ss_0;
-
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
-
-
 		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLCDNumber_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -88,7 +86,13 @@
 ZEND_METHOD(QLCDNumber, segmentStyle){
 	if (ZEND_NUM_ARGS() == 0){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			RETURN_LONG(obj->segmentStyle());
+				QLCDNumber::SegmentStyle return_object = (QLCDNumber::SegmentStyle) obj->segmentStyle();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QLCDNumber_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 
@@ -112,30 +116,18 @@
  *    flags:    c
  */
 ZEND_METHOD(QLCDNumber, checkOverflow){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
+		/* double num,  */
 
-		/* int num,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
-			
-			RETURN_BOOL(obj->checkOverflow((int) var_l_0));
-		}
-		/* o */
-		zval* z_var_o_1;   // default: 
 
-		/* double num,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
-
-			QString tmp_o_0(var_o_1->metaObject()->className());
-			
-			if(tmp_o_0 == "double") {
-				RETURN_BOOL(obj->checkOverflow((double) var_o_1));
+			RETURN_BOOL(obj->checkOverflow((double) Z_LVAL_P(z_0)));
 			}
 		}
 	}
@@ -148,24 +140,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLCDNumber, qt_invoke){
-
-	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* int , QUObject* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -175,16 +149,6 @@
  *    flags:    s
  */
 ZEND_METHOD(QLCDNumber, staticMetaObject){
-	if (ZEND_NUM_ARGS() == 0){
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLCDNumber_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -208,37 +172,33 @@
  *    flags:    l
  */
 ZEND_METHOD(QLCDNumber, display){
+		/* l public_slots*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
 		/* int num,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		/* o public_slots*/
+
+		/* const QString& str,  */
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
-			
-			obj->display((int) var_l_0);
-			RETURN_NULL();
-		}
-		/* o */
-		zval* z_var_o_1;   // default: 
 
-		/* const QString& str,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+			obj->display((int) Z_LVAL_P(z_0));
+			RETURN_NULL();
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString&") {
-				obj->display((const QString&) var_o_1);
+
+			if(1 == 1) {
+				obj->display((const QString&) obj_z_0);
 			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "double") {
-				obj->display((double) var_o_1);
-			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -250,20 +210,18 @@
  *    flags:    
  */
 ZEND_METHOD(QLCDNumber, setSegmentStyle){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
+		/* QLCDNumber::SegmentStyle ,  */
 
-		/* SegmentStyle ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "SegmentStyle") {
-				obj->setSegmentStyle((SegmentStyle) var_o_0);
+
+			obj->setSegmentStyle((QLCDNumber::SegmentStyle) Z_LVAL_P(z_0));
 			RETURN_NULL();
 			}
 		}
@@ -291,16 +249,6 @@
  *    flags:    
  */
 ZEND_METHOD(QLCDNumber, qObject){
-	if (ZEND_NUM_ARGS() == 0){
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* return_object = (QObject*) obj->qObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLCDNumber_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -310,18 +258,20 @@
  *    flags:    l
  */
 ZEND_METHOD(QLCDNumber, setSmallDecimalPoint){
+		/* l public_slots*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* int ,  */
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
-			
-			obj->setSmallDecimalPoint((bool) var_b_0);
+
+			obj->setSmallDecimalPoint((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -335,11 +285,11 @@
 ZEND_METHOD(QLCDNumber, sizeHint){
 	if (ZEND_NUM_ARGS() == 0){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->sizeHint();
+				QSize return_object = (QSize) obj->sizeHint();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLCDNumber_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -352,22 +302,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLCDNumber, qt_cast){
-
-	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
-
-
-		/* const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-
-			
-			obj->qt_cast( (const char*) var_s_0);
-			RETURN_NULL();
-		}
-	}
 }
 
 /*********************************
@@ -379,11 +313,11 @@
 ZEND_METHOD(QLCDNumber, metaObject){
 	if (ZEND_NUM_ARGS() == 0){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
+				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLCDNumber_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -423,24 +357,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLCDNumber, qt_emit){
-
-	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* int , QUObject* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -450,16 +366,6 @@
  *    flags:    cv
  */
 ZEND_METHOD(QLCDNumber, className){
-	if (ZEND_NUM_ARGS() == 0){
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			const char * return_object = (const char *) obj->className();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLCDNumber_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -482,43 +388,43 @@
  *    flags:    t
  */
 ZEND_METHOD(QLCDNumber, __construct){
+		/* o public*/
 
+		/* qt_QWidget* parent,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 0
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-		/* QWidget* parent,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QWidget*") {
-				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((QWidget*) var_o_0);
-			PHP_QT_REGISTER(QLCDNumber_ptr);
-			RETURN_NULL();
+			if(1 == 1) {
+				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((QWidget*) obj_z_0);
+				PHP_QT_REGISTER(QLCDNumber_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
+		/* lo public*/
 
+		/* unsigned int numDigits, qt_QWidget* parent,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 0
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-		/* uint numDigits, QWidget* parent,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QWidget*") {
-				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((uint) var_lo_0, (QWidget*) var_lo_1);
-			PHP_QT_REGISTER(QLCDNumber_ptr);
-			RETURN_NULL();
+			if(1 == 1) {
+				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((uint) Z_LVAL_P(z_0), (QWidget*) obj_z_1);
+				PHP_QT_REGISTER(QLCDNumber_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -530,18 +436,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLCDNumber, setNumDigits){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
 		/* int nDigits,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
-			
-			obj->setNumDigits((int) var_l_0);
+
+			obj->setNumDigits((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -566,20 +474,18 @@
  *    flags:    
  */
 ZEND_METHOD(QLCDNumber, setMode){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
+		/* int ,  */
 
-		/* Mode ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "Mode") {
-				obj->setMode((Mode) var_o_0);
+
+			obj->setMode((QLCDNumber::Mode) Z_LVAL_P(z_0));
 			RETURN_NULL();
 			}
 		}
@@ -593,28 +499,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QLCDNumber, trUtf8){
+		/* ss public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
-		char* var_ss_0;   // default: 
-		int len_ss_0;
-
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
-
-
 		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLCDNumber_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -626,25 +530,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLCDNumber, qt_property){
-
-	if (ZEND_NUM_ARGS() == 3){
-		/* llo */
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
-
-		/* int , int , QVariant* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
-			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
-
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "QVariant*") {
-				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
-			}
-		}
-	}
 }
 
 /*********************************



From tm243 at berlios.de  Thu Jan 19 20:41:13 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Thu, 19 Jan 2006 20:41:13 +0100
Subject: [Php-qt-svn] r200 - trunk
Message-ID: <200601191941.k0JJfD1V000014@sheep.berlios.de>

Author: tm243
Date: 2006-01-19 20:40:57 +0100 (Thu, 19 Jan 2006)
New Revision: 200

Modified:
   trunk/config.m4
Log:
blanks after brackets removed.

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-19 01:51:23 UTC (rev 199)
+++ trunk/config.m4	2006-01-19 19:40:57 UTC (rev 200)
@@ -104,51 +104,51 @@
   qt/text_related/qlatin1string.cpp \
   qt/classes/qchar.cpp \
   qt/event/qevent.cpp \
-	qt/classes/qactionevent.cpp \ 
-	qt/classes/qcharref.cpp \ 
-	qt/classes/qclipboardevent.cpp \ 
-	qt/classes/qcloseevent.cpp \ 
-	qt/classes/qcontextmenuevent.cpp \ 
-	qt/classes/qdate.cpp \ 
-	qt/classes/qdatetime.cpp \ 
-	qt/classes/qdragenterevent.cpp \ 
-	qt/classes/qdragleaveevent.cpp \ 
-	qt/classes/qdragmoveevent.cpp \ 
-	qt/classes/qdragresponseevent.cpp \ 
-	qt/classes/qdropevent.cpp \ 
-	qt/classes/qfileopenevent.cpp \ 
-	qt/classes/qfocusevent.cpp \ 
-	qt/classes/qfont.cpp \ 
-	qt/classes/qgridlayout.cpp \ 
-	qt/classes/qhelpevent.cpp \ 
-	qt/classes/qhideevent.cpp \ 
-	qt/classes/qhoverevent.cpp \ 
-	qt/classes/qicondragevent.cpp \ 
-	qt/classes/qinputevent.cpp \ 
-	qt/classes/qinputmethodevent.cpp \ 
-	qt/classes/qkeyevent.cpp \ 
-	qt/classes/qlabel.cpp \ 
-	qt/classes/qlatin1char.cpp \ 
-	qt/classes/qmouseevent.cpp \ 
-	qt/classes/qmoveevent.cpp \ 
-	qt/classes/qobjectdata.cpp \ 
-	qt/classes/qobjectuserdata.cpp \ 
-	qt/classes/qpaintevent.cpp \ 
-	qt/classes/qpainter.cpp \  
-	qt/classes/qresizeevent.cpp \ 
-	qt/classes/qshortcutevent.cpp \ 
-	qt/classes/qshowevent.cpp \ 
-	qt/classes/qspaceritem.cpp \ 
-	qt/classes/qstatustipevent.cpp \ 
-	qt/classes/qtabletevent.cpp \ 
-	qt/classes/qtime.cpp \ 
-	qt/classes/qtimer.cpp \ 
-	qt/classes/qtoolbarchangeevent.cpp \ 
-	qt/classes/qwhatsthisclickedevent.cpp \ 
-	qt/classes/qwheelevent.cpp \ 
-	qt/classes/qwidgetdata.cpp \ 
-	qt/classes/qwidgetitem.cpp \ 
-	qt/classes/qwindowstatechangeevent.cpp \ 
+	qt/classes/qactionevent.cpp \
+	qt/classes/qcharref.cpp \
+	qt/classes/qclipboardevent.cpp \
+	qt/classes/qcloseevent.cpp \
+	qt/classes/qcontextmenuevent.cpp \
+	qt/classes/qdate.cpp \
+	qt/classes/qdatetime.cpp \
+	qt/classes/qdragenterevent.cpp \
+	qt/classes/qdragleaveevent.cpp \
+	qt/classes/qdragmoveevent.cpp \
+	qt/classes/qdragresponseevent.cpp \
+	qt/classes/qdropevent.cpp \
+	qt/classes/qfileopenevent.cpp \
+	qt/classes/qfocusevent.cpp \
+	qt/classes/qfont.cpp \
+	qt/classes/qgridlayout.cpp \
+	qt/classes/qhelpevent.cpp \
+	qt/classes/qhideevent.cpp \
+	qt/classes/qhoverevent.cpp \
+	qt/classes/qicondragevent.cpp \
+	qt/classes/qinputevent.cpp \
+	qt/classes/qinputmethodevent.cpp \
+	qt/classes/qkeyevent.cpp \
+	qt/classes/qlabel.cpp \
+	qt/classes/qlatin1char.cpp \
+	qt/classes/qmouseevent.cpp \
+	qt/classes/qmoveevent.cpp \
+	qt/classes/qobjectdata.cpp \
+	qt/classes/qobjectuserdata.cpp \
+	qt/classes/qpaintevent.cpp \
+	qt/classes/qpainter.cpp \ 
+	qt/classes/qresizeevent.cpp \
+	qt/classes/qshortcutevent.cpp \
+	qt/classes/qshowevent.cpp \
+	qt/classes/qspaceritem.cpp \
+	qt/classes/qstatustipevent.cpp \
+	qt/classes/qtabletevent.cpp \
+	qt/classes/qtime.cpp \
+	qt/classes/qtimer.cpp \
+	qt/classes/qtoolbarchangeevent.cpp \
+	qt/classes/qwhatsthisclickedevent.cpp \
+	qt/classes/qwheelevent.cpp \
+	qt/classes/qwidgetdata.cpp \
+	qt/classes/qwidgetitem.cpp \
+	qt/classes/qwindowstatechangeevent.cpp \
   qt/php_qt.cpp,$ext_shared)
   PHP_ADD_BUILD_DIR($ext_builddir/qt)
 



From tm243 at berlios.de  Sat Jan 21 13:39:49 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 21 Jan 2006 13:39:49 +0100
Subject: [Php-qt-svn] r201 - trunk/qt
Message-ID: <200601211239.k0LCdnOX007272@sheep.berlios.de>

Author: tm243
Date: 2006-01-21 13:39:46 +0100 (Sat, 21 Jan 2006)
New Revision: 201

Modified:
   trunk/qt/php_qt.cpp
   trunk/qt/php_qt.h
Log:
pointer storing in a way that ensures safety.

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-19 19:40:57 UTC (rev 200)
+++ trunk/qt/php_qt.cpp	2006-01-21 12:39:46 UTC (rev 201)
@@ -35,6 +35,10 @@
 
 //QOUT();
 
+#include <iostream>
+using namespace std;
+
+
 //static int objects_handle;
 
 /* If you declare any globals in php_php_qt.h uncomment this:
@@ -44,6 +48,9 @@
 /* True global resources - no need for thread safety here */
 static int le_php_qt;
 
+int le_php_qt_hashtype;
+HashTable php_qt_objptr_hash;
+
 zend_class_entry *QWidget_ce_ptr; //Gyger Jean-Luc change to non static
 zend_class_entry *QString_ce_ptr;
 zend_class_entry *QObject_ce_ptr;
@@ -1052,10 +1059,13 @@
 	  REGISTER_LONG_CONSTANT("QT_WINDOWMODALITY_APPLICATIONMODAL", Qt::ApplicationModal, CONST_CS | CONST_PERSISTENT);
 */
 
-//    objects_handle = zend_register_list_destructors_ex(NULL,NULL,"Qt Wrapper",module_number);
-
 #include "ag_qt_minit.inc"
 
+	le_php_qt_hashtype = zend_register_list_destructors_ex(destroy_php_qt_hashtable, NULL, "PHP-Qt object list", module_number);
+
+	zend_hash_init_ex(&php_qt_objptr_hash, 50, NULL, NULL, 1, 0);
+
+
 	return SUCCESS;
 }
 /* }}} */
@@ -1076,6 +1086,8 @@
  */
 PHP_RINIT_FUNCTION(php_qt)
 {
+
+
 	return SUCCESS;
 }
 /* }}} */
@@ -1085,6 +1097,7 @@
  */
 PHP_RSHUTDOWN_FUNCTION(php_qt)
 {
+	zend_hash_destroy(&php_qt_objptr_hash);
 	return SUCCESS;
 }
 /* }}} */
@@ -1173,31 +1186,57 @@
 /* {{{ */
 
 void php_qt_register(zval* this_ptr, zend_rsrc_list_entry le){
+	php_qt_setObject(this_ptr, le.ptr);
+}
 
-    if(PHP_QT_REGISTER_OBJECT(le) == FAILURE){
-        php_error(E_ERROR,"PHP_QT: %s(): could not register qobject in hashtable.",get_active_function_name(TSRMLS_C));
-        return;
-    }
+void php_qt_setObject(zval* this_ptr, void* obj){
 
+	zval *listhandle;
+	MAKE_STD_ZVAL(listhandle);
+	Z_TYPE_P(listhandle) = IS_LONG;
+	Z_LVAL_P(listhandle) = zend_list_insert(obj, le_php_qt_hashtype);
+
+	if(zend_hash_index_update(Z_OBJPROP_P(this_ptr), 0, &listhandle, sizeof(zval*), NULL) == FAILURE){
+		php_error(E_ERROR,"could not bind resource to object.");
+	}
+	zval_add_ref(&this_ptr);
+
+	if(zend_hash_index_update(&php_qt_objptr_hash, (long) obj, (void*) &this_ptr, sizeof(zval *), NULL) == FAILURE){
+		php_error(E_ERROR,"could not register Qt object in resource table.");
+	}
+
 }
 
 void* php_qt_fetch(zval* this_ptr){
 
-    zend_rsrc_list_entry* le;  
+	void *ptr;
+	zval **listhandle;
+	int type;
+	TSRMLS_FETCH();
 
-    if(!zend_hash_exists(HASH_OF(this_ptr),PHP_QT_HASH_QOBJECT,strlen(PHP_QT_HASH_QOBJECT))){
-        php_error(E_ERROR,"PHP_QT: %s(): hash not found.",get_active_function_name(TSRMLS_C));
-    }
+	if(zend_hash_index_find(Z_OBJPROP_P(this_ptr), 0, (void**) &listhandle) == FAILURE){
+	  php_error(E_WARNING,"reference to Qt object missing.");
+	}
+	ptr = zend_list_find(Z_LVAL_PP(listhandle), &type);
+	if(!ptr){
+		php_error(E_ERROR,"reference to Qt object missing.");
+	} 
+	if(type != le_php_qt_hashtype){
+		php_error(E_ERROR,"wrong type.");
+	}
 
-    if(PHP_QT_FETCH_OBJECT(le) == FAILURE){
-        php_error(E_ERROR,"PHP_QT: %s(): could not fetch qobject from hashtable.",get_active_function_name(TSRMLS_C));
-        return NULL;
-    }
+	return ptr;
 
-    return le->ptr;
+}
 
+static void destroy_php_qt_hashtable(zend_rsrc_list_entry *rsrc TSRMLS_DC)
+{
+#ifdef DEBUG
+	php_error(E_ERROR,"Hashtable destroyed. Shutdown PHP-Qt now.");
+#endif
 }
 
+
 ///
 
 static zend_function_entry QLatin1String_methods[] = {

Modified: trunk/qt/php_qt.h
===================================================================
--- trunk/qt/php_qt.h	2006-01-19 19:40:57 UTC (rev 200)
+++ trunk/qt/php_qt.h	2006-01-21 12:39:46 UTC (rev 201)
@@ -22,9 +22,7 @@
 
 /* define macros */
 #define debug
-#define object_hash_list
 
-
 #include <QTextStream>
 #define QOUT()                                              \
     extern QTextStream qout(stdout, QIODevice::WriteOnly);  \
@@ -33,23 +31,10 @@
 #define NOT_YET_IMPLEMENTED { php_printf("%s(): functionality not yet implemented\n",get_active_function_name(TSRMLS_C));} 
 #endif
 
-//#define PHP_QT_REGISTER_OBJECT(list_entry)  zend_hash_update(HASH_OF(this_ptr),(char*)getThis(),strlen((char*)getThis()),(void*)&list_entry,sizeof(list_entry.ptr),NULL)
-//#define PHP_QT_FETCH_OBJECT(list_entry)     zend_hash_find(HASH_OF(this_ptr),h_name,strlen(h_name),(void**)&list_entry)
-
-#ifdef object_hash_list
 #define PHP_QT_HASH_QOBJECT  "qobject_list"
 #define PHP_QT_REGISTER_OBJECT(list_entry)  zend_hash_update(HASH_OF(this_ptr),PHP_QT_HASH_QOBJECT,strlen(PHP_QT_HASH_QOBJECT),(void*)&list_entry,sizeof(QObject),NULL)
 #define PHP_QT_FETCH_OBJECT(list_entry)     zend_hash_find(HASH_OF(this_ptr),PHP_QT_HASH_QOBJECT,strlen(PHP_QT_HASH_QOBJECT),(void**)&list_entry)
-#endif
 
-#ifndef object_hash_list
-#define PHP_QT_HASH_QOBJECT  "qobject_list"
-//		zend_hash_apply_with_argument(&EG(regular_list), (apply_func_arg_t) clean_module_resource, (void *) &(ld->resource_id) TSRMLS_CC);
-//#define PHP_QT_REGISTER_OBJECT(list_entry)  zend_hash_update(&EG(persistent_list),PHP_QT_HASH_QOBJECT,strlen(PHP_QT_HASH_QOBJECT),(void*)&list_entry,sizeof(QObject),NULL)
-#define PHP_QT_REGISTER_OBJECT(list_entry)  zend_hash_add(&EG(persistent_list),PHP_QT_HASH_QOBJECT,strlen(PHP_QT_HASH_QOBJECT),(void*)&list_entry,sizeof(QObject),NULL)
-#define PHP_QT_FETCH_OBJECT(list_entry)     zend_hash_find(&EG(persistent_list),PHP_QT_HASH_QOBJECT,strlen(PHP_QT_HASH_QOBJECT),(void**)&list_entry)
-#endif
-
 #define PHP_QT_DECLARE_PROPERTY(property)           \
     zend_declare_property_null(QObject_ce_ptr,property,strlen(property),ZEND_ACC_PROTECTED TSRMLS_CC);
 
@@ -339,7 +324,12 @@
 
 void* php_qt_fetch(zval* this_ptr);
 void php_qt_register(zval* this_ptr, zend_rsrc_list_entry le);
+void php_qt_setObject(zval* this_ptr, void* obj);
+static void destroy_php_qt_hashtable(zend_rsrc_list_entry *rsrc);
 
+extern int le_php_qt_hashtype;
+extern HashTable php_qt_objptr_hash;
+
 void _register_QString();
 void _register_QLatin1String();
 void _register_QObject();



From tm243 at berlios.de  Sun Jan 22 20:25:28 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 22 Jan 2006 20:25:28 +0100
Subject: [Php-qt-svn] r202 - trunk
Message-ID: <200601221925.k0MJPSnR025881@sheep.berlios.de>

Author: tm243
Date: 2006-01-22 20:25:26 +0100 (Sun, 22 Jan 2006)
New Revision: 202

Modified:
   trunk/config.m4
Log:
audio flag removed.

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-21 12:39:46 UTC (rev 201)
+++ trunk/config.m4	2006-01-22 19:25:26 UTC (rev 202)
@@ -75,7 +75,7 @@
   PHP_ADD_INCLUDE($PHP_QT_DIR/include)
 
   dnl from qmake
-  LDFLAGS="$LDFLAGS -lQtGui -laudio -lXt -lpng -lSM -lICE -lXi -lXrender -lXrandr -lXcursor -lXinerama -lfreetype -lXext -lX11 -lm -lQtCore -lfontconfig -lz -ldl -lpthread"
+  LDFLAGS="$LDFLAGS -lQtGui -lXt -lpng -lSM -lICE -lXi -lXrender -lXrandr -lXcursor -lXinerama -lfreetype -lXext -lX11 -lm -lQtCore -lfontconfig -lz -ldl -lpthread"
 
   PHP_REQUIRE_CXX
 



From tm243 at berlios.de  Sun Jan 22 21:29:46 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 22 Jan 2006 21:29:46 +0100
Subject: [Php-qt-svn] r203 - in trunk/qt: . classes text_related
Message-ID: <200601222029.k0MKTkR5016169@sheep.berlios.de>

Author: tm243
Date: 2006-01-22 21:29:43 +0100 (Sun, 22 Jan 2006)
New Revision: 203

Modified:
   trunk/qt/ag_extern_zend_class_entry.inc
   trunk/qt/ag_php_qt_cpp.inc
   trunk/qt/ag_qt_minit.inc
   trunk/qt/ag_zend_class_entry.inc
   trunk/qt/ag_zend_php_qt.inc
   trunk/qt/classes/qdate.cpp
   trunk/qt/classes/qdatetime.cpp
   trunk/qt/classes/qtime.cpp
   trunk/qt/php_qt.cpp
   trunk/qt/php_qt.h
   trunk/qt/text_related/qstring.cpp
   trunk/qt/zend_php_qt.h
Log:
better handling of overloaded constructors if they have to accept several objects.

Modified: trunk/qt/ag_extern_zend_class_entry.inc
===================================================================
--- trunk/qt/ag_extern_zend_class_entry.inc	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/ag_extern_zend_class_entry.inc	2006-01-22 20:29:43 UTC (rev 203)
@@ -1,3 +1,5 @@
+extern zend_class_entry *QAbstractButton_ce_ptr;
+void 	_register_QAbstractButton();
 extern zend_class_entry *QActionEvent_ce_ptr;
 void 	_register_QActionEvent();
 extern zend_class_entry *QChar_ce_ptr;
@@ -46,10 +48,14 @@
 void 	_register_QInputMethodEvent();
 extern zend_class_entry *QKeyEvent_ce_ptr;
 void 	_register_QKeyEvent();
+extern zend_class_entry *QLCDNumber_ce_ptr;
+void 	_register_QLCDNumber();
 extern zend_class_entry *QLabel_ce_ptr;
 void 	_register_QLabel();
 extern zend_class_entry *QLatin1Char_ce_ptr;
 void 	_register_QLatin1Char();
+extern zend_class_entry *QLatin1String_ce_ptr;
+void 	_register_QLatin1String();
 extern zend_class_entry *QMouseEvent_ce_ptr;
 void 	_register_QMouseEvent();
 extern zend_class_entry *QMoveEvent_ce_ptr;
@@ -62,6 +68,8 @@
 void 	_register_QPaintEvent();
 extern zend_class_entry *QPainter_ce_ptr;
 void 	_register_QPainter();
+extern zend_class_entry *QPushButton_ce_ptr;
+void 	_register_QPushButton();
 extern zend_class_entry *QResizeEvent_ce_ptr;
 void 	_register_QResizeEvent();
 extern zend_class_entry *QShortcutEvent_ce_ptr;
@@ -70,6 +78,8 @@
 void 	_register_QShowEvent();
 extern zend_class_entry *QStatusTipEvent_ce_ptr;
 void 	_register_QStatusTipEvent();
+extern zend_class_entry *QString_ce_ptr;
+void 	_register_QString();
 extern zend_class_entry *QTabletEvent_ce_ptr;
 void 	_register_QTabletEvent();
 extern zend_class_entry *QTime_ce_ptr;

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-01-22 20:29:43 UTC (rev 203)
@@ -1,3 +1,48 @@
+static zend_function_entry QAbstractButton_methods[] = {
+	ZEND_ME(QAbstractButton,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QAbstractButton,setAutoRepeat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,isDown,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,qt_invoke,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,setAutoExclusive,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,setIconSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,qt_cast,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,metaObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,setIcon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,qt_emit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,autoExclusive,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,className,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,toggle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,setCheckable,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,setDown,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,shortcut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,icon,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,setChecked,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,setShortcut,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,animateClick,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QAbstractButton,autoRepeat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,qObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,group,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,setText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,text,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,isChecked,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,iconSize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,isCheckable,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,click,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,qt_property,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QAbstractButton,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QAbstractButton(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QAbstractButton",QAbstractButton_methods);
+    QAbstractButton_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QWidget_ce_ptr,NULL TSRMLS_CC);
+
+
+}
 static zend_function_entry QActionEvent_methods[] = {
 	ZEND_ME(QActionEvent,action,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QActionEvent,before,NULL,ZEND_ACC_PUBLIC)
@@ -14,7 +59,6 @@
 
 }
 static zend_function_entry QChar_methods[] = {
-	ZEND_ME(QChar, __toString,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,combiningClass,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,isUpper,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QChar,joining,NULL,ZEND_ACC_PUBLIC)
@@ -567,6 +611,47 @@
 
 
 }
+static zend_function_entry QLCDNumber_methods[] = {
+	ZEND_ME(QLCDNumber,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLCDNumber,segmentStyle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,mode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,checkOverflow,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,qt_invoke,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLCDNumber,setOctMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,display,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setSegmentStyle,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setHexMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,qObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setSmallDecimalPoint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,qt_cast,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,metaObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,value,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setDecMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,qt_emit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,className,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,intValue,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber, __construct,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setNumDigits,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,numDigits,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setMode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QLCDNumber,qt_property,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,smallDecimalPoint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLCDNumber,setBinMode,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QLCDNumber(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLCDNumber",QLCDNumber_methods);
+    QLCDNumber_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QFrame_ce_ptr,NULL TSRMLS_CC);
+
+
+}
 static zend_function_entry QLabel_methods[] = {
 	ZEND_ME(QLabel,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QLabel,setMargin,NULL,ZEND_ACC_PUBLIC)
@@ -634,6 +719,20 @@
     QLatin1Char_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
 
 }
+static zend_function_entry QLatin1String_methods[] = {
+	ZEND_ME(QLatin1String, __construct,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QLatin1String,latin1,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QLatin1String(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QLatin1String",QLatin1String_methods);
+    QLatin1String_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
 static zend_function_entry QMouseEvent_methods[] = {
 	ZEND_ME(QMouseEvent,x,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QMouseEvent,globalX,NULL,ZEND_ACC_PUBLIC)
@@ -802,6 +901,40 @@
     QPainter_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
 
 }
+static zend_function_entry QPushButton_methods[] = {
+	ZEND_ME(QPushButton,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPushButton,showMenu,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,setFlat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,qt_invoke,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPushButton,qObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,isDefault,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,setAutoDefault,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,sizeHint,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,qt_cast,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,metaObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,menu,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,setDefault,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,qt_emit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton, __construct,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,className,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,autoDefault,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QPushButton,isFlat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,qt_property,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QPushButton,setMenu,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QPushButton(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QPushButton",QPushButton_methods);
+    QPushButton_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QAbstractButton_ce_ptr,NULL TSRMLS_CC);
+
+
+}
 static zend_function_entry QResizeEvent_methods[] = {
 	ZEND_ME(QResizeEvent,oldSize,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QResizeEvent,size,NULL,ZEND_ACC_PUBLIC)
@@ -860,6 +993,97 @@
 
 
 }
+static zend_function_entry QString_methods[] = {
+	ZEND_ME(QString,compare,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,utf16,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,constData,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,insert,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,clear,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setUtf16,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,prepend,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,trimmed,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,chop,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,leftJustified,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,squeeze,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,count,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,fromAscii,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,toLongLong,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toUpper,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString, __construct,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,normalized,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,fromUtf16,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,isRightToLeft,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,endsWith,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,number,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,localeAwareCompare,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,section,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,isSimpleText,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,size,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,simplified,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toUInt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toUShort,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,truncate,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toAscii,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,length,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,right,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,push_front,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toUtf8,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toULongLong,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,indexOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,fromRawData,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,constEnd,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,left,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,fromLocal8Bit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,startsWith,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,remove,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,isEmpty,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,vsprintf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toFloat,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,isDetached,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,reserve,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toULong,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toShort,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,split,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,setUnicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,fromLatin1,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,data,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toLatin1,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,end,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,contains,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,resize,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,fromUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QString,toLong,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,detach,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,append,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,mid,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toDouble,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,fill,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,rightJustified,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toLower,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,lastIndexOf,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,unicode,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,at,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,begin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,push_back,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,capacity,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,constBegin,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toLocal8Bit,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,toInt,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QString,isNull,NULL,ZEND_ACC_PUBLIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QString(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QString",QString_methods);
+    QString_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
+
+}
 static zend_function_entry QTabletEvent_methods[] = {
 	ZEND_ME(QTabletEvent,hiResGlobalX,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QTabletEvent,pressure,NULL,ZEND_ACC_PUBLIC)

Modified: trunk/qt/ag_qt_minit.inc
===================================================================
--- trunk/qt/ag_qt_minit.inc	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/ag_qt_minit.inc	2006-01-22 20:29:43 UTC (rev 203)
@@ -1,4 +1,6 @@
 
+	_register_QAbstractButton(TSRMLS_C);
+
 	_register_QActionEvent(TSRMLS_C);
 
 	_register_QChar(TSRMLS_C);
@@ -192,10 +194,21 @@
 
 	_register_QKeyEvent(TSRMLS_C);
 
+	_register_QLCDNumber(TSRMLS_C);
+	  REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_HEX", QLCDNumber::Hex, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_DEC", QLCDNumber::Dec, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_OCT", QLCDNumber::Oct, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_BIN", QLCDNumber::Bin, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_OUTLINE", QLCDNumber::Outline, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_FILLED", QLCDNumber::Filled, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_FLAT", QLCDNumber::Flat, CONST_CS | CONST_PERSISTENT);
+
 	_register_QLabel(TSRMLS_C);
 
 	_register_QLatin1Char(TSRMLS_C);
 
+	_register_QLatin1String(TSRMLS_C);
+
 	_register_QMouseEvent(TSRMLS_C);
 
 	_register_QMoveEvent(TSRMLS_C);
@@ -208,6 +221,8 @@
 
 	_register_QPainter(TSRMLS_C);
 
+	_register_QPushButton(TSRMLS_C);
+
 	_register_QResizeEvent(TSRMLS_C);
 
 	_register_QShortcutEvent(TSRMLS_C);
@@ -216,6 +231,19 @@
 
 	_register_QStatusTipEvent(TSRMLS_C);
 
+	_register_QString(TSRMLS_C);
+	  REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONDEFAULT", QString::SectionDefault, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONSKIPEMPTY", QString::SectionSkipEmpty, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONINCLUDELEADINGSEP", QString::SectionIncludeLeadingSep, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONINCLUDETRAILINGSEP", QString::SectionIncludeTrailingSep, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONCASEINSENSITIVESEPS", QString::SectionCaseInsensitiveSeps, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_SPLITBEHAVIOR_KEEPEMPTYPARTS", QString::KeepEmptyParts, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_SPLITBEHAVIOR_SKIPEMPTYPARTS", QString::SkipEmptyParts, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_D", QString::NormalizationForm_D, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_C", QString::NormalizationForm_C, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_KD", QString::NormalizationForm_KD, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_KC", QString::NormalizationForm_KC, CONST_CS | CONST_PERSISTENT);
+
 	_register_QTabletEvent(TSRMLS_C);
 
 	_register_QTime(TSRMLS_C);

Modified: trunk/qt/ag_zend_class_entry.inc
===================================================================
--- trunk/qt/ag_zend_class_entry.inc	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/ag_zend_class_entry.inc	2006-01-22 20:29:43 UTC (rev 203)
@@ -1,3 +1,4 @@
+zend_class_entry *QAbstractButton_ce_ptr;
 zend_class_entry *QActionEvent_ce_ptr;
 zend_class_entry *QChar_ce_ptr;
 zend_class_entry *QCharRef_ce_ptr;
@@ -22,18 +23,22 @@
 zend_class_entry *QInputEvent_ce_ptr;
 zend_class_entry *QInputMethodEvent_ce_ptr;
 zend_class_entry *QKeyEvent_ce_ptr;
+zend_class_entry *QLCDNumber_ce_ptr;
 zend_class_entry *QLabel_ce_ptr;
 zend_class_entry *QLatin1Char_ce_ptr;
+zend_class_entry *QLatin1String_ce_ptr;
 zend_class_entry *QMouseEvent_ce_ptr;
 zend_class_entry *QMoveEvent_ce_ptr;
 zend_class_entry *QObjectData_ce_ptr;
 zend_class_entry *QObjectUserData_ce_ptr;
 zend_class_entry *QPaintEvent_ce_ptr;
 zend_class_entry *QPainter_ce_ptr;
+zend_class_entry *QPushButton_ce_ptr;
 zend_class_entry *QResizeEvent_ce_ptr;
 zend_class_entry *QShortcutEvent_ce_ptr;
 zend_class_entry *QShowEvent_ce_ptr;
 zend_class_entry *QStatusTipEvent_ce_ptr;
+zend_class_entry *QString_ce_ptr;
 zend_class_entry *QTabletEvent_ce_ptr;
 zend_class_entry *QTime_ce_ptr;
 zend_class_entry *QTimer_ce_ptr;

Modified: trunk/qt/ag_zend_php_qt.inc
===================================================================
--- trunk/qt/ag_zend_php_qt.inc	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/ag_zend_php_qt.inc	2006-01-22 20:29:43 UTC (rev 203)
@@ -1,7 +1,38 @@
 
+ZEND_METHOD(QAbstractButton, tr);
+ZEND_METHOD(QAbstractButton, setAutoRepeat);
+ZEND_METHOD(QAbstractButton, isDown);
+ZEND_METHOD(QAbstractButton, qt_invoke);
+ZEND_METHOD(QAbstractButton, setAutoExclusive);
+ZEND_METHOD(QAbstractButton, setIconSize);
+ZEND_METHOD(QAbstractButton, qt_cast);
+ZEND_METHOD(QAbstractButton, metaObject);
+ZEND_METHOD(QAbstractButton, setIcon);
+ZEND_METHOD(QAbstractButton, qt_emit);
+ZEND_METHOD(QAbstractButton, autoExclusive);
+ZEND_METHOD(QAbstractButton, className);
+ZEND_METHOD(QAbstractButton, toggle);
+ZEND_METHOD(QAbstractButton, setCheckable);
+ZEND_METHOD(QAbstractButton, setDown);
+ZEND_METHOD(QAbstractButton, shortcut);
+ZEND_METHOD(QAbstractButton, icon);
+ZEND_METHOD(QAbstractButton, setChecked);
+ZEND_METHOD(QAbstractButton, setShortcut);
+ZEND_METHOD(QAbstractButton, animateClick);
+ZEND_METHOD(QAbstractButton, staticMetaObject);
+ZEND_METHOD(QAbstractButton, autoRepeat);
+ZEND_METHOD(QAbstractButton, qObject);
+ZEND_METHOD(QAbstractButton, group);
+ZEND_METHOD(QAbstractButton, setText);
+ZEND_METHOD(QAbstractButton, text);
+ZEND_METHOD(QAbstractButton, isChecked);
+ZEND_METHOD(QAbstractButton, iconSize);
+ZEND_METHOD(QAbstractButton, isCheckable);
+ZEND_METHOD(QAbstractButton, click);
+ZEND_METHOD(QAbstractButton, qt_property);
+ZEND_METHOD(QAbstractButton, trUtf8);
 ZEND_METHOD(QActionEvent, action);
 ZEND_METHOD(QActionEvent, before);
-ZEND_METHOD(QChar, __toString);
 ZEND_METHOD(QChar, combiningClass);
 ZEND_METHOD(QChar, isUpper);
 ZEND_METHOD(QChar, joining);
@@ -260,6 +291,34 @@
 ZEND_METHOD(QKeyEvent, isAutoRepeat);
 ZEND_METHOD(QKeyEvent, modifiers);
 ZEND_METHOD(QKeyEvent, key);
+ZEND_METHOD(QLCDNumber, tr);
+ZEND_METHOD(QLCDNumber, segmentStyle);
+ZEND_METHOD(QLCDNumber, mode);
+ZEND_METHOD(QLCDNumber, checkOverflow);
+ZEND_METHOD(QLCDNumber, qt_invoke);
+ZEND_METHOD(QLCDNumber, staticMetaObject);
+ZEND_METHOD(QLCDNumber, setOctMode);
+ZEND_METHOD(QLCDNumber, display);
+ZEND_METHOD(QLCDNumber, setSegmentStyle);
+ZEND_METHOD(QLCDNumber, setHexMode);
+ZEND_METHOD(QLCDNumber, qObject);
+ZEND_METHOD(QLCDNumber, setSmallDecimalPoint);
+ZEND_METHOD(QLCDNumber, sizeHint);
+ZEND_METHOD(QLCDNumber, qt_cast);
+ZEND_METHOD(QLCDNumber, metaObject);
+ZEND_METHOD(QLCDNumber, value);
+ZEND_METHOD(QLCDNumber, setDecMode);
+ZEND_METHOD(QLCDNumber, qt_emit);
+ZEND_METHOD(QLCDNumber, className);
+ZEND_METHOD(QLCDNumber, intValue);
+ZEND_METHOD(QLCDNumber, __construct);
+ZEND_METHOD(QLCDNumber, setNumDigits);
+ZEND_METHOD(QLCDNumber, numDigits);
+ZEND_METHOD(QLCDNumber, setMode);
+ZEND_METHOD(QLCDNumber, trUtf8);
+ZEND_METHOD(QLCDNumber, qt_property);
+ZEND_METHOD(QLCDNumber, smallDecimalPoint);
+ZEND_METHOD(QLCDNumber, setBinMode);
 ZEND_METHOD(QLabel, tr);
 ZEND_METHOD(QLabel, setMargin);
 ZEND_METHOD(QLabel, clear);
@@ -302,6 +361,8 @@
 ZEND_METHOD(QLatin1Char, unicode);
 ZEND_METHOD(QLatin1Char, __construct);
 ZEND_METHOD(QLatin1Char, toLatin1);
+ZEND_METHOD(QLatin1String, __construct);
+ZEND_METHOD(QLatin1String, latin1);
 ZEND_METHOD(QMouseEvent, x);
 ZEND_METHOD(QMouseEvent, globalX);
 ZEND_METHOD(QMouseEvent, globalPos);
@@ -395,12 +456,112 @@
 ZEND_METHOD(QPainter, drawTextItem);
 ZEND_METHOD(QPainter, setClipping);
 ZEND_METHOD(QPainter, clipPath);
+ZEND_METHOD(QPushButton, tr);
+ZEND_METHOD(QPushButton, showMenu);
+ZEND_METHOD(QPushButton, setFlat);
+ZEND_METHOD(QPushButton, qt_invoke);
+ZEND_METHOD(QPushButton, staticMetaObject);
+ZEND_METHOD(QPushButton, qObject);
+ZEND_METHOD(QPushButton, isDefault);
+ZEND_METHOD(QPushButton, setAutoDefault);
+ZEND_METHOD(QPushButton, sizeHint);
+ZEND_METHOD(QPushButton, qt_cast);
+ZEND_METHOD(QPushButton, metaObject);
+ZEND_METHOD(QPushButton, menu);
+ZEND_METHOD(QPushButton, setDefault);
+ZEND_METHOD(QPushButton, qt_emit);
+ZEND_METHOD(QPushButton, __construct);
+ZEND_METHOD(QPushButton, className);
+ZEND_METHOD(QPushButton, autoDefault);
+ZEND_METHOD(QPushButton, trUtf8);
+ZEND_METHOD(QPushButton, isFlat);
+ZEND_METHOD(QPushButton, qt_property);
+ZEND_METHOD(QPushButton, setMenu);
 ZEND_METHOD(QResizeEvent, oldSize);
 ZEND_METHOD(QResizeEvent, size);
 ZEND_METHOD(QShortcutEvent, shortcutId);
 ZEND_METHOD(QShortcutEvent, isAmbiguous);
 ZEND_METHOD(QShortcutEvent, key);
 ZEND_METHOD(QStatusTipEvent, tip);
+ZEND_METHOD(QString, compare);
+ZEND_METHOD(QString, utf16);
+ZEND_METHOD(QString, constData);
+ZEND_METHOD(QString, insert);
+ZEND_METHOD(QString, clear);
+ZEND_METHOD(QString, setUtf16);
+ZEND_METHOD(QString, prepend);
+ZEND_METHOD(QString, trimmed);
+ZEND_METHOD(QString, chop);
+ZEND_METHOD(QString, leftJustified);
+ZEND_METHOD(QString, squeeze);
+ZEND_METHOD(QString, count);
+ZEND_METHOD(QString, fromAscii);
+ZEND_METHOD(QString, toLongLong);
+ZEND_METHOD(QString, toUpper);
+ZEND_METHOD(QString, __construct);
+ZEND_METHOD(QString, normalized);
+ZEND_METHOD(QString, fromUtf16);
+ZEND_METHOD(QString, isRightToLeft);
+ZEND_METHOD(QString, setNum);
+ZEND_METHOD(QString, endsWith);
+ZEND_METHOD(QString, number);
+ZEND_METHOD(QString, localeAwareCompare);
+ZEND_METHOD(QString, section);
+ZEND_METHOD(QString, isSimpleText);
+ZEND_METHOD(QString, size);
+ZEND_METHOD(QString, simplified);
+ZEND_METHOD(QString, toUInt);
+ZEND_METHOD(QString, toUShort);
+ZEND_METHOD(QString, truncate);
+ZEND_METHOD(QString, toAscii);
+ZEND_METHOD(QString, length);
+ZEND_METHOD(QString, right);
+ZEND_METHOD(QString, push_front);
+ZEND_METHOD(QString, toUtf8);
+ZEND_METHOD(QString, toULongLong);
+ZEND_METHOD(QString, indexOf);
+ZEND_METHOD(QString, fromRawData);
+ZEND_METHOD(QString, constEnd);
+ZEND_METHOD(QString, left);
+ZEND_METHOD(QString, fromLocal8Bit);
+ZEND_METHOD(QString, startsWith);
+ZEND_METHOD(QString, remove);
+ZEND_METHOD(QString, isEmpty);
+ZEND_METHOD(QString, arg);
+ZEND_METHOD(QString, vsprintf);
+ZEND_METHOD(QString, toFloat);
+ZEND_METHOD(QString, isDetached);
+ZEND_METHOD(QString, reserve);
+ZEND_METHOD(QString, toULong);
+ZEND_METHOD(QString, toShort);
+ZEND_METHOD(QString, split);
+ZEND_METHOD(QString, setUnicode);
+ZEND_METHOD(QString, fromLatin1);
+ZEND_METHOD(QString, data);
+ZEND_METHOD(QString, toLatin1);
+ZEND_METHOD(QString, end);
+ZEND_METHOD(QString, contains);
+ZEND_METHOD(QString, resize);
+ZEND_METHOD(QString, replace);
+ZEND_METHOD(QString, fromUtf8);
+ZEND_METHOD(QString, toLong);
+ZEND_METHOD(QString, detach);
+ZEND_METHOD(QString, append);
+ZEND_METHOD(QString, mid);
+ZEND_METHOD(QString, toDouble);
+ZEND_METHOD(QString, fill);
+ZEND_METHOD(QString, rightJustified);
+ZEND_METHOD(QString, toLower);
+ZEND_METHOD(QString, lastIndexOf);
+ZEND_METHOD(QString, unicode);
+ZEND_METHOD(QString, at);
+ZEND_METHOD(QString, begin);
+ZEND_METHOD(QString, push_back);
+ZEND_METHOD(QString, capacity);
+ZEND_METHOD(QString, constBegin);
+ZEND_METHOD(QString, toLocal8Bit);
+ZEND_METHOD(QString, toInt);
+ZEND_METHOD(QString, isNull);
 ZEND_METHOD(QTabletEvent, hiResGlobalX);
 ZEND_METHOD(QTabletEvent, pressure);
 ZEND_METHOD(QTabletEvent, hiResGlobalPos);

Modified: trunk/qt/classes/qdate.cpp
===================================================================
--- trunk/qt/classes/qdate.cpp	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/classes/qdate.cpp	2006-01-22 20:29:43 UTC (rev 203)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDate.cpp - QDate PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,23 +38,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, longDayName){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int weekday,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->longDayName((int) var_l_0);
+
+				QString return_object = (QString) obj->longDayName((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -109,19 +111,21 @@
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 			RETURN_BOOL(obj->isValid());
 	}
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 
-		long var_lll_2;    // default: 
 
 		/* int y, int m, int d,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			RETURN_BOOL(obj->isValid((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2));
+
+			RETURN_BOOL(obj->isValid((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2)));
+			}
 		}
 	}
 }
@@ -133,19 +137,21 @@
  *    flags:    
  */
 ZEND_METHOD(QDate, setYMD){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 
-		long var_lll_2;    // default: 
 
 		/* int y, int m, int d,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			RETURN_BOOL(obj->setYMD((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2));
+
+			RETURN_BOOL(obj->setYMD((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2)));
+			}
 		}
 	}
 }
@@ -157,23 +163,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, shortMonthName){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int month,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->shortMonthName((int) var_l_0);
+
+				QString return_object = (QString) obj->shortMonthName((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -185,36 +193,35 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, toString){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: Qt::TextDate
 
 		/* int f,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+		/* o public*/
+
+		/* const QString& format,  */
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->toString((Qt::DateFormat) var_l_0);
+
+				QString return_object = (QString) obj->toString((Qt::DateFormat) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-		}
-		/* o public*/
-		zval* z_var_o_0;   // default: 
-
-		/* const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				QString return_object = (QString) obj->toString((const QString&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QString return_object = (QString) obj->toString((const QString&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -222,6 +229,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -233,17 +241,19 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, isLeapYear){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int year,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			RETURN_BOOL(obj->isLeapYear((int) var_l_0));
+
+			RETURN_BOOL(obj->isLeapYear((int) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -255,23 +265,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, fromJulianDay){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int jd,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			QDate return_object = (QDate) obj->fromJulianDay((int) var_l_0);
+
+				QDate return_object = (QDate) obj->fromJulianDay((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -285,7 +297,7 @@
 ZEND_METHOD(QDate, currentDate){
 	if (ZEND_NUM_ARGS() == 0){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
-			QDate return_object = (QDate) obj->currentDate();
+				QDate return_object = (QDate) obj->currentDate();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -302,23 +314,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, addDays){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int days,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			QDate return_object = (QDate) obj->addDays((int) var_l_0);
+
+				QDate return_object = (QDate) obj->addDays((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -343,19 +357,21 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, gregorianToJulian){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 
-		long var_lll_2;    // default: 
 
 		/* int y, int m, int d,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->gregorianToJulian((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2));
+
+			RETURN_LONG(obj->gregorianToJulian((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2)));
+			}
 		}
 	}
 }
@@ -367,23 +383,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, longMonthName){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int month,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->longMonthName((int) var_l_0);
+
+				QString return_object = (QString) obj->longMonthName((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -395,21 +413,23 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, julianToGregorian){
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 
 
 		/* unsigned int jd, int y, int m, int d,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			obj->julianToGregorian((uint) var_llll_0 ,(int&) var_llll_1 ,(int&) var_llll_2 ,(int&) var_llll_3);
+
+			obj->julianToGregorian((uint) Z_LVAL_P(z_0) ,(int&) Z_LVAL_P(z_1) ,(int&) Z_LVAL_P(z_2) ,(int&) Z_LVAL_P(z_3));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -423,23 +443,25 @@
 ZEND_METHOD(QDate, __construct){
 	if (ZEND_NUM_ARGS() == 0){
 			QDate *QDate_ptr = new QDate();
-			PHP_QT_REGISTER(QDate_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QDate_ptr);
+				RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 
-		long var_lll_2;    // default: 
 
 		/* int y, int m, int d,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
 
-			
-			QDate *QDate_ptr = new QDate((int) var_lll_0 ,(int) var_lll_1 ,(int) var_lll_2);
-			PHP_QT_REGISTER(QDate_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
+
+
+			QDate *QDate_ptr = new QDate((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
+				PHP_QT_REGISTER(QDate_ptr);
+				RETURN_NULL();
+			}
 		}
 	}
 }
@@ -451,23 +473,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, shortDayName){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int weekday,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->shortDayName((int) var_l_0);
+
+				QString return_object = (QString) obj->shortDayName((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -479,21 +503,24 @@
  *    flags:    s
  */
 ZEND_METHOD(QDate, fromString){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::TextDate
 
 		/* const QString& s, int f,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		/* oo public*/
+
+		/* const QString& s, const QString& format,  */
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString") {
-				QDate return_object = (QDate) obj->fromString((const QString&) var_ol_0, (Qt::DateFormat) var_ol_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QDate return_object = (QDate) obj->fromString((const QString&) obj_z_0, (Qt::DateFormat) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -501,22 +528,15 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
-		}
-		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
-
-		/* const QString& s, const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
-				QDate return_object = (QDate) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
+					QDate return_object = (QDate) obj->fromString((const QString&) obj_z_0, (const QString&) obj_z_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -524,6 +544,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -548,17 +569,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, weekNumber){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 0
 
 		/* int* yearNum,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->weekNumber((int*) var_l_0));
+
+			RETURN_LONG(obj->weekNumber((int*) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -570,23 +593,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, addMonths){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int months,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			QDate return_object = (QDate) obj->addMonths((int) var_l_0);
+
+				QDate return_object = (QDate) obj->addMonths((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -611,23 +636,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, addYears){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int years,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
 
-			
-			QDate return_object = (QDate) obj->addYears((int) var_l_0);
+
+				QDate return_object = (QDate) obj->addYears((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDate_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -639,21 +666,22 @@
  *    flags:    c
  */
 ZEND_METHOD(QDate, daysTo){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QDate& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QDate *obj = (QDate*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QDate") {
-				RETURN_LONG(obj->daysTo((const QDate&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QDate") {
+				RETURN_LONG(obj->daysTo((const QDate&) obj_z_0));
 			}
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qdatetime.cpp
===================================================================
--- trunk/qt/classes/qdatetime.cpp	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/classes/qdatetime.cpp	2006-01-22 20:29:43 UTC (rev 203)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDateTime.cpp - QDateTime PHP implementation.
- * begin           : Thu Jan 19 02:44:10 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -116,7 +116,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(1 == 1) {
+			if(Z_OBJCE_P(z_0)->name == "QString") {
 					QString return_object = (QString) obj->toString((const QString&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
@@ -278,7 +278,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(1 == 1) {
+			if(Z_OBJCE_P(z_0)->name == "QString") {
 					QDateTime return_object = (QDateTime) obj->fromString((const QString&) obj_z_0, (Qt::DateFormat) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     
@@ -294,7 +294,7 @@
 			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
 
-			if(1 == 1 && 1 == 1) {
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
 					QDateTime return_object = (QDateTime) obj->fromString((const QString&) obj_z_0, (const QString&) obj_z_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDateTime_ce_ptr);     

Modified: trunk/qt/classes/qtime.cpp
===================================================================
--- trunk/qt/classes/qtime.cpp	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/classes/qtime.cpp	2006-01-22 20:29:43 UTC (rev 203)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTime.cpp - QTime PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -55,20 +55,22 @@
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 			RETURN_BOOL(obj->isValid());
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 0
 
 		/* int h, int m, int s, int ms,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
-			
-			RETURN_BOOL(obj->isValid((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3));
+
+			RETURN_BOOL(obj->isValid((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3)));
+			}
 		}
 	}
 }
@@ -93,36 +95,35 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, toString){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: Qt::TextDate
 
 		/* int f,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+		/* o public*/
+
+		/* const QString& format,  */
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->toString((Qt::DateFormat) var_l_0);
+
+				QString return_object = (QString) obj->toString((Qt::DateFormat) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-		}
-		/* o public*/
-		zval* z_var_o_0;   // default: 
-
-		/* const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				QString return_object = (QString) obj->toString((const QString&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QString return_object = (QString) obj->toString((const QString&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -130,6 +131,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -154,21 +156,22 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, secsTo){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QTime& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QTime") {
-				RETURN_LONG(obj->secsTo((const QTime&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QTime") {
+				RETURN_LONG(obj->secsTo((const QTime&) obj_z_0));
 			}
+			}
 		}
 	}
 }
@@ -193,21 +196,24 @@
  *    flags:    s
  */
 ZEND_METHOD(QTime, fromString){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::TextDate
 
 		/* const QString& s, int f,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		/* oo public*/
+
+		/* const QString& s, const QString& format,  */
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString") {
-				QTime return_object = (QTime) obj->fromString((const QString&) var_ol_0, (Qt::DateFormat) var_ol_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QTime return_object = (QTime) obj->fromString((const QString&) obj_z_0, (Qt::DateFormat) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -215,22 +221,15 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
-		}
-		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
-
-		/* const QString& s, const QString& format,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
-				QTime return_object = (QTime) obj->fromString((const QString&) var_oo_0, (const QString&) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
+					QTime return_object = (QTime) obj->fromString((const QString&) obj_z_0, (const QString&) obj_z_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -238,6 +237,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -264,24 +264,26 @@
 ZEND_METHOD(QTime, __construct){
 	if (ZEND_NUM_ARGS() == 0){
 			QTime *QTime_ptr = new QTime();
-			PHP_QT_REGISTER(QTime_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QTime_ptr);
+				RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 0
-		long var_llll_3;    // default: 0
 
 		/* int h, int m, int s, int ms,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|l|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
 
-			
-			QTime *QTime_ptr = new QTime((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
-			PHP_QT_REGISTER(QTime_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
+
+
+			QTime *QTime_ptr = new QTime((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
+				PHP_QT_REGISTER(QTime_ptr);
+				RETURN_NULL();
+			}
 		}
 	}
 }
@@ -293,23 +295,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, addSecs){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int secs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
-			
-			QTime return_object = (QTime) obj->addSecs((int) var_l_0);
+
+				QTime return_object = (QTime) obj->addSecs((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -321,23 +325,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, addMSecs){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ms,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
-			
-			QTime return_object = (QTime) obj->addMSecs((int) var_l_0);
+
+				QTime return_object = (QTime) obj->addMSecs((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -351,7 +357,7 @@
 ZEND_METHOD(QTime, currentTime){
 	if (ZEND_NUM_ARGS() == 0){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QTime return_object = (QTime) obj->currentTime();
+				QTime return_object = (QTime) obj->currentTime();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTime_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -381,20 +387,22 @@
  *    flags:    
  */
 ZEND_METHOD(QTime, setHMS){
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 0
 
 		/* int h, int m, int s, int ms,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll|", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
 
-			
-			RETURN_BOOL(obj->setHMS((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3));
+
+			RETURN_BOOL(obj->setHMS((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3)));
+			}
 		}
 	}
 }
@@ -419,21 +427,22 @@
  *    flags:    c
  */
 ZEND_METHOD(QTime, msecsTo){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QTime& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QTime *obj = (QTime*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QTime") {
-				RETURN_LONG(obj->msecsTo((const QTime&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QTime") {
+				RETURN_LONG(obj->msecsTo((const QTime&) obj_z_0));
 			}
+			}
 		}
 	}
 }

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/php_qt.cpp	2006-01-22 20:29:43 UTC (rev 203)
@@ -52,11 +52,7 @@
 HashTable php_qt_objptr_hash;
 
 zend_class_entry *QWidget_ce_ptr; //Gyger Jean-Luc change to non static
-zend_class_entry *QString_ce_ptr;
 zend_class_entry *QObject_ce_ptr;
-zend_class_entry *QLatin1String_ce_ptr;
-zend_class_entry *QPushButton_ce_ptr;
-zend_class_entry *QAbstractButton_ce_ptr;
 zend_class_entry *QApplication_ce_ptr;
 zend_class_entry *QCoreApplication_ce_ptr;
 zend_class_entry *QEvent_ce_ptr;
@@ -70,7 +66,6 @@
 zend_class_entry *QSlider_ce_ptr;
 zend_class_entry *QLineEdit_ce_ptr;
 zend_class_entry *QFrame_ce_ptr;
-zend_class_entry *QLCDNumber_ce_ptr;
 zend_class_entry *QMimeSource_ce_ptr;
 
 #include "ag_zend_class_entry.inc"
@@ -172,23 +167,8 @@
 	REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_GUICLIENT",QApplication::GuiClient ,CONST_CS | CONST_PERSISTENT);	
 	REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_GUISERVER",QApplication::GuiServer ,CONST_CS | CONST_PERSISTENT);	
 	
-    _register_QString(TSRMLS_C);
-      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONDEFAULT", QString::SectionDefault, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONSKIPEMPTY", QString::SectionSkipEmpty, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONINCLUDELEADINGSEP", QString::SectionIncludeLeadingSep, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONINCLUDETRAILINGSEP", QString::SectionIncludeTrailingSep, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_SECTIONFLAG_SECTIONCASEINSENSITIVESEPS", QString::SectionCaseInsensitiveSeps, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_SPLITBEHAVIOR_KEEPEMPTYPARTS", QString::KeepEmptyParts, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_SPLITBEHAVIOR_SKIPEMPTYPARTS", QString::SkipEmptyParts, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_D", QString::NormalizationForm_D, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_C", QString::NormalizationForm_C, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_KD", QString::NormalizationForm_KD, CONST_CS | CONST_PERSISTENT);
-      REGISTER_LONG_CONSTANT("QSTRING_NORMALIZATIONFORM_NORMALIZATIONFORM_KC", QString::NormalizationForm_KC, CONST_CS | CONST_PERSISTENT);
-    _register_QLatin1String(TSRMLS_C);
     _register_QObject(TSRMLS_C);
     _register_QWidget(TSRMLS_C);
-    _register_QAbstractButton(TSRMLS_C);
-    _register_QPushButton(TSRMLS_C);
 	
 	_register_QEvent(TSRMLS_C);
 	REGISTER_LONG_CONSTANT("QEVENT_TYPE_NONE", QEvent::None,CONST_CS | CONST_PERSISTENT);	
@@ -343,15 +323,6 @@
         REGISTER_LONG_CONSTANT("QFRAME__SHADOW_MASK", QFrame::Shadow_Mask, CONST_CS | CONST_PERSISTENT);
         REGISTER_LONG_CONSTANT("QFRAME__SHAPE_MASK", QFrame::Shape_Mask, CONST_CS | CONST_PERSISTENT);
 
-    _register_QLCDNumber(TSRMLS_C);
-        REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_HEX", QLCDNumber::Hex, CONST_CS | CONST_PERSISTENT);
-        REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_DEC", QLCDNumber::Dec, CONST_CS | CONST_PERSISTENT);
-        REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_OCT", QLCDNumber::Oct, CONST_CS | CONST_PERSISTENT);
-        REGISTER_LONG_CONSTANT("QLCDNUMBER_MODE_BIN", QLCDNumber::Bin, CONST_CS | CONST_PERSISTENT);
-        REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_OUTLINE", QLCDNumber::Outline, CONST_CS | CONST_PERSISTENT);
-        REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_FILLED", QLCDNumber::Filled, CONST_CS | CONST_PERSISTENT);
-        REGISTER_LONG_CONSTANT("QLCDNUMBER_SEGMENTSTYLE_FLAT", QLCDNumber::Flat, CONST_CS | CONST_PERSISTENT);
-
 // handfixed:
 	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_UNKNOWNDEVICE", QInternal::UnknownDevice, CONST_CS | CONST_PERSISTENT);
 	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_WIDGET", QInternal::Widget, CONST_CS | CONST_PERSISTENT);
@@ -1061,6 +1032,7 @@
 
 #include "ag_qt_minit.inc"
 
+
 	le_php_qt_hashtype = zend_register_list_destructors_ex(destroy_php_qt_hashtable, NULL, "PHP-Qt object list", module_number);
 
 	zend_hash_init_ex(&php_qt_objptr_hash, 50, NULL, NULL, 1, 0);
@@ -1218,6 +1190,7 @@
 	  php_error(E_WARNING,"reference to Qt object missing.");
 	}
 	ptr = zend_list_find(Z_LVAL_PP(listhandle), &type);
+
 	if(!ptr){
 		php_error(E_ERROR,"reference to Qt object missing.");
 	} 
@@ -1238,116 +1211,6 @@
 
 
 ///
-
-static zend_function_entry QLatin1String_methods[] = {
-    ZEND_ME(QLatin1String, __construct,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLatin1String,latin1,NULL,ZEND_ACC_PUBLIC)
-
-    {NULL,NULL,NULL}
-};
-
-void _register_QLatin1String(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"QLatin1String",QLatin1String_methods);
-    QLatin1String_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
-
-}
-static zend_function_entry QString_methods[] = {
-    ZEND_ME(QString,__toString,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,compare,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,utf16,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,constData,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,insert,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,clear,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,setUtf16,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,prepend,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,trimmed,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,chop,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,leftJustified,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,squeeze,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,count,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,fromAscii,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-    ZEND_ME(QString,toLongLong,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toUpper,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString, __construct,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,normalized,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,fromUtf16,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-    ZEND_ME(QString,isRightToLeft,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,setNum,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,endsWith,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,number,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-    ZEND_ME(QString,localeAwareCompare,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,section,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,isSimpleText,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,size,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,simplified,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toUInt,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toUShort,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,truncate,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toAscii,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,length,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,right,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,push_front,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toUtf8,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toULongLong,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,indexOf,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,fromRawData,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-    ZEND_ME(QString,constEnd,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,left,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,fromLocal8Bit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-    ZEND_ME(QString,startsWith,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,remove,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,isEmpty,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,arg,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,vsprintf,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toFloat,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,isDetached,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,reserve,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toULong,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toShort,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,split,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,setUnicode,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,fromLatin1,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-    ZEND_ME(QString,data,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toLatin1,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,end,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,contains,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,resize,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,replace,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,fromUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-    ZEND_ME(QString,toLong,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,detach,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,append,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,mid,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toDouble,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,fill,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,rightJustified,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toLower,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,lastIndexOf,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,unicode,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,at,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,begin,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,push_back,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,capacity,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,constBegin,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toLocal8Bit,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,toInt,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QString,isNull,NULL,ZEND_ACC_PUBLIC)
-
-    {NULL,NULL,NULL}
-};
-
-void _register_QString(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"QString",QString_methods);
-    QString_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
-
-    zend_declare_property_string(QString_ce_ptr,"QString",strlen("QString"),"",ZEND_ACC_PROTECTED TSRMLS_CC);
-
-}
-
 static zend_function_entry QObject_methods[] = { 
     ZEND_ME(QObject,__construct,NULL,ZEND_ACC_PUBLIC)
     ZEND_ME(QObject,test,NULL,ZEND_ACC_PUBLIC)    
@@ -1578,77 +1441,6 @@
 
 }
 
-static zend_function_entry QPushButton_methods[] = {
- 
-    ZEND_ME(QPushButton,__construct,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QPushButton,autoDefault,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QPushButton,isDefault,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QPushButton,isFlat,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QPushButton,menu,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QPushButton,setAutoDefault,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QPushButton,setDefault,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QPushButton,setFlat,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QPushButton,setMenu,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QPushButton,paintEvent,NULL,ZEND_ACC_PROTECTED)
-    {NULL,NULL,NULL}
-
-};
-
-void _register_QPushButton(TSRMLS_D)
-{
-    zend_class_entry ce;
-    
-    INIT_CLASS_ENTRY(ce,"QPushButton",QPushButton_methods);
-    
-    QPushButton_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QAbstractButton_ce_ptr,NULL TSRMLS_CC);
-    zend_declare_property_null(QPushButton_ce_ptr,"menu",strlen("menu"),ZEND_ACC_PRIVATE TSRMLS_CC);
-
-    PHP_QT_DECLARE_PROPERTY("autoDefault");
-    PHP_QT_DECLARE_PROPERTY("default");
-    PHP_QT_DECLARE_PROPERTY("flat");
-
-}
-
-static zend_function_entry QAbstractButton_methods[] = {
- 
-    ZEND_ME(QAbstractButton,__construct,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QAbstractButton,autoExclusive,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QAbstractButton,autoRepeat,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QAbstractButton,isCheckable,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QAbstractButton,isChecked,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QAbstractButton,isDown,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QAbstractButton,setAutoExclusive,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QAbstractButton,setAutoRepeat,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QAbstractButton,paintEvent,NULL,ZEND_ACC_PROTECTED|ZEND_ACC_ABSTRACT)
-//    ZEND_ME(QAbstractButton,setCheckable,NULL,ZEND_ACC_PUBLIC)
-//    ZEND_ME(QAbstractButton,setDown,NULL,ZEND_ACC_PUBLIC)
-
-    {NULL,NULL,NULL}
-
-};
-
-void _register_QAbstractButton(TSRMLS_D)
-{
-    zend_class_entry ce;
-    
-    INIT_CLASS_ENTRY(ce,"QAbstractButton",QAbstractButton_methods);
-    
-    QAbstractButton_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QWidget_ce_ptr,NULL TSRMLS_CC);
-    zend_declare_property_null(QAbstractButton_ce_ptr,"menu",strlen("menu"),ZEND_ACC_PRIVATE TSRMLS_CC);
-
-    zend_declare_property_bool(QAbstractButton_ce_ptr,"autoExclusive",strlen("autoExclusive"),0,ZEND_ACC_PRIVATE TSRMLS_CC);
-    zend_declare_property_bool(QAbstractButton_ce_ptr,"autoRepeat",strlen("autoRepeat"),0,ZEND_ACC_PRIVATE TSRMLS_CC);
-    zend_declare_property_bool(QAbstractButton_ce_ptr,"checkable",strlen("checkable"),0,ZEND_ACC_PRIVATE TSRMLS_CC);
-    zend_declare_property_bool(QAbstractButton_ce_ptr,"checked",strlen("checked"),0,ZEND_ACC_PRIVATE TSRMLS_CC);
-    zend_declare_property_bool(QAbstractButton_ce_ptr,"down",strlen("down"),0,ZEND_ACC_PRIVATE TSRMLS_CC);
-
-    zend_declare_property_null(QAbstractButton_ce_ptr,"icon",strlen("icon"),ZEND_ACC_PRIVATE TSRMLS_CC);
-    zend_declare_property_null(QAbstractButton_ce_ptr,"iconSize",strlen("iconSize"),ZEND_ACC_PRIVATE TSRMLS_CC);
-    zend_declare_property_null(QAbstractButton_ce_ptr,"shortcut",strlen("shortcut"),ZEND_ACC_PRIVATE TSRMLS_CC);
-    zend_declare_property_null(QAbstractButton_ce_ptr,"text",strlen("text"),ZEND_ACC_PRIVATE TSRMLS_CC);
-
-}
-
 static zend_function_entry QCoreApplication_methods[] = {
 	//public members 
     ZEND_ME(QCoreApplication,__construct,NULL,ZEND_ACC_PUBLIC)
@@ -2159,42 +1951,7 @@
 
 }
 
-static zend_function_entry QLCDNumber_methods[] = {
-    ZEND_ME(QLCDNumber,__construct,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,smallDecimalPoint,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,numDigits,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,checkOverflow,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,mode,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,segmentStyle,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,value,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,intValue,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,sizeHint,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,setHexMode,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,setDecMode,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,setOctMode,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,setBinMode,NULL,ZEND_ACC_PUBLIC)
-    ZEND_ME(QLCDNumber,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-    ZEND_ME(QLCDNumber,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-    ZEND_ME(QLCDNumber,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 
-    {NULL,NULL,NULL}
-};
-
-void _register_QLCDNumber(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"QLCDNumber",QLCDNumber_methods);
-    QLCDNumber_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QFrame_ce_ptr,NULL TSRMLS_CC);
-
-    PHP_QT_DECLARE_PROPERTY("smallDecimalPoint");
-    PHP_QT_DECLARE_PROPERTY("numDigits");
-    PHP_QT_DECLARE_PROPERTY("mode");
-    PHP_QT_DECLARE_PROPERTY("segmentStyle");
-    PHP_QT_DECLARE_PROPERTY("value");
-    PHP_QT_DECLARE_PROPERTY("intValue");
-
-}
-
 #include "ag_php_qt_cpp.inc"
 
 /* }}} */

Modified: trunk/qt/php_qt.h
===================================================================
--- trunk/qt/php_qt.h	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/php_qt.h	2006-01-22 20:29:43 UTC (rev 203)
@@ -330,14 +330,10 @@
 extern int le_php_qt_hashtype;
 extern HashTable php_qt_objptr_hash;
 
-void _register_QString();
-void _register_QLatin1String();
 void _register_QObject();
 void _register_QApplication();
 void _register_QCoreApplication();
 void _register_QWidget();
-void _register_QAbstractButton();
-void _register_QPushButton();
 void _register_QEvent();
 void _register_QLayoutItem();
 void _register_QLayout();
@@ -348,13 +344,8 @@
 void _register_QSlider();
 void _register_QLineEdit();
 void _register_QFrame();
-void _register_QLCDNumber();
 
-extern zend_class_entry *QString_ce_ptr;
 extern zend_class_entry *QObject_ce_ptr;
-extern zend_class_entry *QLatin1String_ce_ptr;
-extern zend_class_entry *QPushButton_ce_ptr;
-extern zend_class_entry *QAbstractButton_ce_ptr;
 extern zend_class_entry *QApplication_ce_ptr;
 extern zend_class_entry *QWidget_ce_ptr;
 extern zend_class_entry *QCoreApplication_ce_ptr;
@@ -369,7 +360,6 @@
 extern zend_class_entry *QSlider_ce_ptr;
 extern zend_class_entry *QLineEdit_ce_ptr;
 extern zend_class_entry *QFrame_ce_ptr;
-extern zend_class_entry *QLCDNumber_ce_ptr;
 extern zend_class_entry *QMimeSource_ce_ptr;
 
 extern zend_class_entry *QCharRef_ce_ptr;

Modified: trunk/qt/text_related/qstring.cpp
===================================================================
--- trunk/qt/text_related/qstring.cpp	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/text_related/qstring.cpp	2006-01-22 20:29:43 UTC (rev 203)
@@ -36,7 +36,9 @@
   QString *QString_ptr = (QString *) PHP_QT_FETCH();
 
   int l = QString_ptr->size();
-  char* c = (char*) (QString_ptr->toAscii()).constData();
+
+  char* c = (char*) (QString_ptr->toUtf8()).constData();
+
   RETURN_STRING(c,l);
 }
 
@@ -2013,10 +2015,15 @@
 		zval *z_1; // define ZVAL
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
 			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
-			QString *obj = (QString*) PHP_QT_FETCH();
 
-
-				QString return_object = (QString) obj->fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
+	QString return_object;			
+    if(getThis() != NULL){
+        QString *obj = (QString*) PHP_QT_FETCH();
+        return_object = (QString) obj->fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
+    }else {
+        return_object = (QString) QString::fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
+    }
+				
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/zend_php_qt.h
===================================================================
--- trunk/qt/zend_php_qt.h	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/qt/zend_php_qt.h	2006-01-22 20:29:43 UTC (rev 203)
@@ -316,30 +316,6 @@
 ZEND_METHOD(QApplication,widgetAt); //WARNING 2 imlementation,
 ZEND_METHOD(QApplication,windowIcon); 
 
-/* QAbstractButton */
-ZEND_METHOD(QAbstractButton,__construct);
-ZEND_METHOD(QAbstractButton,autoExclusive);
-ZEND_METHOD(QAbstractButton,autoRepeat);
-ZEND_METHOD(QAbstractButton,isCheckable);
-ZEND_METHOD(QAbstractButton,isChecked);
-ZEND_METHOD(QAbstractButton,isDown);
-ZEND_METHOD(QAbstractButton,setAutoExclusive);
-ZEND_METHOD(QAbstractButton,setAutoRepeat);
-ZEND_METHOD(QAbstractButton,setCheckable);
-ZEND_METHOD(QAbstractButton,paintEvent);
-
-/* QPushButton */
-ZEND_METHOD(QPushButton,__construct);
-ZEND_METHOD(QPushButton,autoDefault);
-ZEND_METHOD(QPushButton,isDefault);
-ZEND_METHOD(QPushButton,isFlat);
-ZEND_METHOD(QPushButton,menu);
-ZEND_METHOD(QPushButton,setAutoDefault);
-ZEND_METHOD(QPushButton,setDefault);
-ZEND_METHOD(QPushButton,setFlat);
-ZEND_METHOD(QPushButton,setMenu);
-ZEND_METHOD(QPushButton,paintEvent);
-
 /* QWidget */
 ZEND_METHOD(QWidget,__construct);
 ZEND_METHOD(QWidget,show);



From tm243 at berlios.de  Sun Jan 22 21:50:00 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 22 Jan 2006 21:50:00 +0100
Subject: [Php-qt-svn] r205 - trunk
Message-ID: <200601222050.k0MKo0uN018768@sheep.berlios.de>

Author: tm243
Date: 2006-01-22 21:50:00 +0100 (Sun, 22 Jan 2006)
New Revision: 205

Removed:
   trunk/EXPERIMENTAL
   trunk/autom4te.cache/
   trunk/php_qt.loT
Log:
tidied up.

Deleted: trunk/EXPERIMENTAL
===================================================================

Deleted: trunk/php_qt.loT
===================================================================
--- trunk/php_qt.loT	2006-01-22 20:31:14 UTC (rev 204)
+++ trunk/php_qt.loT	2006-01-22 20:50:00 UTC (rev 205)
@@ -1,7 +0,0 @@
-# php_qt.lo - a libtool object file
-# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
-#
-# Please DO NOT delete this file!
-# It is necessary for linking the library.
-
-# Name of the PIC object.



From tm243 at berlios.de  Sun Jan 22 21:31:24 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 22 Jan 2006 21:31:24 +0100
Subject: [Php-qt-svn] r204 - trunk/qt/classes
Message-ID: <200601222031.k0MKVObF016418@sheep.berlios.de>

Author: tm243
Date: 2006-01-22 21:31:14 +0100 (Sun, 22 Jan 2006)
New Revision: 204

Modified:
   trunk/qt/classes/qabstractbutton.cpp
   trunk/qt/classes/qactionevent.cpp
   trunk/qt/classes/qchar.cpp
   trunk/qt/classes/qcharref.cpp
   trunk/qt/classes/qclipboardevent.cpp
   trunk/qt/classes/qcloseevent.cpp
   trunk/qt/classes/qcontextmenuevent.cpp
   trunk/qt/classes/qdragenterevent.cpp
   trunk/qt/classes/qdragleaveevent.cpp
   trunk/qt/classes/qdragmoveevent.cpp
   trunk/qt/classes/qdragresponseevent.cpp
   trunk/qt/classes/qdropevent.cpp
   trunk/qt/classes/qfileopenevent.cpp
   trunk/qt/classes/qfocusevent.cpp
   trunk/qt/classes/qfont.cpp
   trunk/qt/classes/qgridlayout.cpp
   trunk/qt/classes/qhelpevent.cpp
   trunk/qt/classes/qhideevent.cpp
   trunk/qt/classes/qhoverevent.cpp
   trunk/qt/classes/qicondragevent.cpp
   trunk/qt/classes/qinputevent.cpp
   trunk/qt/classes/qinputmethodevent.cpp
   trunk/qt/classes/qkeyevent.cpp
   trunk/qt/classes/qlabel.cpp
   trunk/qt/classes/qlatin1char.cpp
   trunk/qt/classes/qlatin1string.cpp
   trunk/qt/classes/qlcdnumber.cpp
   trunk/qt/classes/qmouseevent.cpp
   trunk/qt/classes/qmoveevent.cpp
   trunk/qt/classes/qobjectdata.cpp
   trunk/qt/classes/qobjectuserdata.cpp
   trunk/qt/classes/qpainter.cpp
   trunk/qt/classes/qpaintevent.cpp
   trunk/qt/classes/qpushbutton.cpp
   trunk/qt/classes/qresizeevent.cpp
   trunk/qt/classes/qshortcutevent.cpp
   trunk/qt/classes/qshowevent.cpp
   trunk/qt/classes/qstatustipevent.cpp
   trunk/qt/classes/qstring.cpp
   trunk/qt/classes/qtabletevent.cpp
   trunk/qt/classes/qtimer.cpp
   trunk/qt/classes/qtoolbarchangeevent.cpp
   trunk/qt/classes/qwhatsthisclickedevent.cpp
   trunk/qt/classes/qwheelevent.cpp
   trunk/qt/classes/qwidgetdata.cpp
   trunk/qt/classes/qwidgetitem.cpp
   trunk/qt/classes/qwindowstatechangeevent.cpp
Log:
better handling of overloaded constructors if they have to accept several objects.

Modified: trunk/qt/classes/qabstractbutton.cpp
===================================================================
--- trunk/qt/classes/qabstractbutton.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qabstractbutton.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QAbstractButton.cpp - QAbstractButton PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,28 +38,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QAbstractButton, tr){
+		/* ss public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
-		char* var_ss_0;   // default: 
-		int len_ss_0;
-
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
-
-
 		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QAbstractButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -71,18 +69,20 @@
  *    flags:    
  */
 ZEND_METHOD(QAbstractButton, setAutoRepeat){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* int ,  */
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
-			
-			obj->setAutoRepeat((bool) var_b_0);
+
+			obj->setAutoRepeat((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -107,24 +107,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QAbstractButton, qt_invoke){
-
-	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* int , QUObject* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -134,18 +116,20 @@
  *    flags:    
  */
 ZEND_METHOD(QAbstractButton, setAutoExclusive){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* int ,  */
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
-			
-			obj->setAutoExclusive((bool) var_b_0);
+
+			obj->setAutoExclusive((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -157,22 +141,23 @@
  *    flags:    l
  */
 ZEND_METHOD(QAbstractButton, setIconSize){
+		/* o public_slots*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* const QSize& size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QSize&") {
-				obj->setIconSize((const QSize&) var_o_0);
+
+			if(obj_z_0->inherits("QSize")) {
+				obj->setIconSize((const QSize&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -184,22 +169,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QAbstractButton, qt_cast){
-
-	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
-
-
-		/* const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-
-			
-			obj->qt_cast( (const char*) var_s_0);
-			RETURN_NULL();
-		}
-	}
 }
 
 /*********************************
@@ -211,11 +180,11 @@
 ZEND_METHOD(QAbstractButton, metaObject){
 	if (ZEND_NUM_ARGS() == 0){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
+				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QAbstractButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -228,22 +197,23 @@
  *    flags:    
  */
 ZEND_METHOD(QAbstractButton, setIcon){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* const QIcon& icon,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QIcon&") {
-				obj->setIcon((const QIcon&) var_o_0);
+
+			if(obj_z_0->inherits("QIcon")) {
+				obj->setIcon((const QIcon&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -255,24 +225,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QAbstractButton, qt_emit){
-
-	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* int , QUObject* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -295,16 +247,6 @@
  *    flags:    cv
  */
 ZEND_METHOD(QAbstractButton, className){
-	if (ZEND_NUM_ARGS() == 0){
-			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			const char * return_object = (const char *) obj->className();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QAbstractButton_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -328,18 +270,20 @@
  *    flags:    
  */
 ZEND_METHOD(QAbstractButton, setCheckable){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* int ,  */
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
-			
-			obj->setCheckable((bool) var_b_0);
+
+			obj->setCheckable((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -351,18 +295,20 @@
  *    flags:    
  */
 ZEND_METHOD(QAbstractButton, setDown){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* int ,  */
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
-			
-			obj->setDown((bool) var_b_0);
+
+			obj->setDown((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -376,11 +322,11 @@
 ZEND_METHOD(QAbstractButton, shortcut){
 	if (ZEND_NUM_ARGS() == 0){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QKeySequence return_object = (QKeySequence) obj->shortcut();
+				QKeySequence return_object = (QKeySequence) obj->shortcut();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QAbstractButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -407,18 +353,20 @@
  *    flags:    l
  */
 ZEND_METHOD(QAbstractButton, setChecked){
+		/* l public_slots*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* int ,  */
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
-			
-			obj->setChecked((bool) var_b_0);
+
+			obj->setChecked((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -430,22 +378,23 @@
  *    flags:    
  */
 ZEND_METHOD(QAbstractButton, setShortcut){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* const QKeySequence& key,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QKeySequence&") {
-				obj->setShortcut((const QKeySequence&) var_o_0);
+
+			if(obj_z_0->inherits("QKeySequence")) {
+				obj->setShortcut((const QKeySequence&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -457,18 +406,20 @@
  *    flags:    l
  */
 ZEND_METHOD(QAbstractButton, animateClick){
+		/* l public_slots*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 100
-
 		/* int msec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
-			
-			obj->animateClick((int) var_l_0);
+
+			obj->animateClick((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -480,16 +431,6 @@
  *    flags:    s
  */
 ZEND_METHOD(QAbstractButton, staticMetaObject){
-	if (ZEND_NUM_ARGS() == 0){
-			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QAbstractButton_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -512,16 +453,6 @@
  *    flags:    
  */
 ZEND_METHOD(QAbstractButton, qObject){
-	if (ZEND_NUM_ARGS() == 0){
-			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QObject* return_object = (QObject*) obj->qObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QAbstractButton_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -533,11 +464,11 @@
 ZEND_METHOD(QAbstractButton, group){
 	if (ZEND_NUM_ARGS() == 0){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QButtonGroup * return_object = (QButtonGroup *) obj->group();
+				QButtonGroup * return_object = (QButtonGroup *) obj->group();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QAbstractButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -550,22 +481,23 @@
  *    flags:    
  */
 ZEND_METHOD(QAbstractButton, setText){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* const QString& text,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString&") {
-				obj->setText((const QString&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				obj->setText((const QString&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -579,11 +511,11 @@
 ZEND_METHOD(QAbstractButton, text){
 	if (ZEND_NUM_ARGS() == 0){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->text();
+				QString return_object = (QString) obj->text();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QAbstractButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -611,11 +543,11 @@
 ZEND_METHOD(QAbstractButton, iconSize){
 	if (ZEND_NUM_ARGS() == 0){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->iconSize();
+				QSize return_object = (QSize) obj->iconSize();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QAbstractButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -623,10 +555,6 @@
 
 /*********************************
  *    class     QAbstractButton */
-}
-
-/*********************************
- *    class     QAbstractButton */
 /*
  *    function  isCheckable
  *    flags:    c
@@ -659,25 +587,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QAbstractButton, qt_property){
-
-	if (ZEND_NUM_ARGS() == 3){
-		/* llo */
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
-
-		/* int , int , QVariant* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
-			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
-
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "QVariant*") {
-				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -687,28 +596,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QAbstractButton, trUtf8){
+		/* ss public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
-		char* var_ss_0;   // default: 
-		int len_ss_0;
-
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
-
-
 		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QAbstractButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qactionevent.cpp
===================================================================
--- trunk/qt/classes/qactionevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qactionevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QActionEvent.cpp - QActionEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QActionEvent, action){
 	if (ZEND_NUM_ARGS() == 0){
 			QActionEvent *obj = (QActionEvent*) PHP_QT_FETCH();
-			QAction * return_object = (QAction *) obj->action();
+				QAction * return_object = (QAction *) obj->action();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QActionEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -59,7 +59,7 @@
 ZEND_METHOD(QActionEvent, before){
 	if (ZEND_NUM_ARGS() == 0){
 			QActionEvent *obj = (QActionEvent*) PHP_QT_FETCH();
-			QAction * return_object = (QAction *) obj->before();
+				QAction * return_object = (QAction *) obj->before();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QActionEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qchar.cpp
===================================================================
--- trunk/qt/classes/qchar.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qchar.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QChar.cpp - QChar PHP implementation.
- * begin           : Sun Jan 15 15:31:03 2006
+ * begin           : Sun Jan 22 20:52:15 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -30,15 +30,8 @@
 #include <QChar>
 #include "../php_qt.h"
 
-ZEND_METHOD(QChar,__toString){
 
-  QChar *QChar_ptr = (QChar *) PHP_QT_FETCH();
 
-  long c = (const char) QChar_ptr->toAscii();
-  RETURN_LONG(c);
-}
-
-
 /*		public enumSpecialCharacter:long {
 			Null = 0x0000,
 			Nbsp = 0x00a0,
@@ -236,56 +229,58 @@
 ZEND_METHOD(QChar, __construct){
 	if (ZEND_NUM_ARGS() == 0){
 			QChar *QChar_ptr = new QChar();
-			PHP_QT_REGISTER(QChar_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QChar_ptr);
+				RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-
-						
-			QChar *QChar_ptr = new QChar((char) var_l_0);
-			PHP_QT_REGISTER(QChar_ptr);
-			RETURN_NULL();
-		}
 		/* o public*/
-		zval* z_var_o_2;   // default: 
 
 		/* QLatin1Char ch,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_2) == SUCCESS) {
-			QObject* var_o_2 = (QObject*) php_qt_fetch(z_var_o_2);
 
-			QString tmp_o_0(var_o_2->metaObject()->className());
-			
-			if(tmp_o_0 == "QLatin1Char") {
-/*				QChar *QChar_ptr = new QChar((QLatin1Char) var_o_2);
-			PHP_QT_REGISTER(QChar_ptr);
-*/			RETURN_NULL();
-			}									
-			if(tmp_o_0 == "SpecialCharacter") {
-/*				QChar *QChar_ptr = new QChar((SpecialCharacter) var_o_2);
-			PHP_QT_REGISTER(QChar_ptr);
-*/			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
+
+
+			QChar *QChar_ptr = new QChar((char) Z_LVAL_P(z_0));
+				PHP_QT_REGISTER(QChar_ptr);
+				RETURN_NULL();
 			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QLatin1Char") {
+/*				QChar *QChar_ptr = new QChar((QLatin1Char) obj_z_0);
+				PHP_QT_REGISTER(QChar_ptr);
+*/				RETURN_NULL();
+			}
+			if(obj_z_0->inherits("SpecialCharacter")) {
+/*				QChar *QChar_ptr = new QChar((SpecialCharacter) obj_z_0);
+				PHP_QT_REGISTER(QChar_ptr);
+*/				RETURN_NULL();
+			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* unsigned char c, unsigned char r,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
 
-			
-			QChar *QChar_ptr = new QChar((uchar) var_ll_0 ,(uchar) var_ll_1);
-			PHP_QT_REGISTER(QChar_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
+
+
+			QChar *QChar_ptr = new QChar((uchar) Z_LVAL_P(z_0) ,(uchar) Z_LVAL_P(z_1));
+				PHP_QT_REGISTER(QChar_ptr);
+				RETURN_NULL();
+			}
 		}
 	}
 }
@@ -352,8 +347,13 @@
 ZEND_METHOD(QChar, mirroredChar){
 	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
-			obj->mirroredChar();
-			RETURN_NULL();
+				QChar return_object = (QChar) obj->mirroredChar();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QChar_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 
@@ -364,18 +364,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QChar, fromLatin1){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
-			
-			obj->fromLatin1((char) var_l_0);
-			RETURN_NULL();
+
+				QChar return_object = (QChar) obj->fromLatin1((char) Z_LVAL_P(z_0));
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QChar_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
 		}
 	}
 }
@@ -387,18 +394,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QChar, fromAscii){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
-			
-			obj->fromAscii((char) var_l_0);
-			RETURN_NULL();
+
+				QChar return_object = (QChar) obj->fromAscii((char) Z_LVAL_P(z_0));
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QChar_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
+			}
 		}
 	}
 }
@@ -439,8 +453,13 @@
 ZEND_METHOD(QChar, toUpper){
 	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
-			obj->toUpper();
-			RETURN_NULL();
+				QChar return_object = (QChar) obj->toUpper();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QChar_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 
@@ -453,7 +472,7 @@
 ZEND_METHOD(QChar, decomposition){
 	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->decomposition();
+				QString return_object = (QString) obj->decomposition();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QChar_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -551,8 +570,13 @@
 ZEND_METHOD(QChar, toLower){
 	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
-			obj->toLower();
-			RETURN_NULL();
+				QChar return_object = (QChar) obj->toLower();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QChar_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 
@@ -570,7 +594,7 @@
 	}
 	if (ZEND_NUM_ARGS() == 0){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
-			ushort & return_object = (ushort &) obj->unicode();
+				ushort & return_object = (ushort &) obj->unicode();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QChar_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -600,18 +624,20 @@
  *    flags:    
  */
 ZEND_METHOD(QChar, setRow){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* unsigned char row,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
-			
-			obj->setRow((uchar) var_l_0);
+
+			obj->setRow((uchar) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -662,18 +688,20 @@
  *    flags:    
  */
 ZEND_METHOD(QChar, setCell){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* unsigned char cell,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QChar *obj = (QChar*) PHP_QT_FETCH();
 
-			
-			obj->setCell((uchar) var_l_0);
+
+			obj->setCell((uchar) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qcharref.cpp
===================================================================
--- trunk/qt/classes/qcharref.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qcharref.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QCharRef.cpp - QCharRef PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 20:52:15 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -118,8 +118,13 @@
 ZEND_METHOD(QCharRef, toLower){
 	if (ZEND_NUM_ARGS() == 0){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
-			obj->toLower();
-			RETURN_NULL();
+				QChar return_object = (QChar) obj->toLower();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QCharRef_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 
@@ -157,18 +162,20 @@
  *    flags:    
  */
 ZEND_METHOD(QCharRef, setRow){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* unsigned char row,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
 
-			
-			obj->setRow((uchar) var_l_0);
+
+			obj->setRow((uchar) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -260,8 +267,13 @@
 ZEND_METHOD(QCharRef, mirroredChar){
 	if (ZEND_NUM_ARGS() == 0){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
-			obj->mirroredChar();
-			RETURN_NULL();
+				QChar return_object = (QChar) obj->mirroredChar();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QCharRef_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 
@@ -272,18 +284,20 @@
  *    flags:    
  */
 ZEND_METHOD(QCharRef, setCell){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* unsigned char cell,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
 
-			
-			obj->setCell((uchar) var_l_0);
+
+			obj->setCell((uchar) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -310,13 +324,7 @@
 ZEND_METHOD(QCharRef, unicodeVersion){
 	if (ZEND_NUM_ARGS() == 0){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
-			QChar::UnicodeVersion return_object = (QChar::UnicodeVersion) obj->unicodeVersion();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QCharRef_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->unicodeVersion());
 	}
 }
 
@@ -370,7 +378,7 @@
 ZEND_METHOD(QCharRef, decomposition){
 	if (ZEND_NUM_ARGS() == 0){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->decomposition();
+				QString return_object = (QString) obj->decomposition();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QCharRef_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -389,8 +397,13 @@
 ZEND_METHOD(QCharRef, toUpper){
 	if (ZEND_NUM_ARGS() == 0){
 			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
-			obj->toUpper();
-			RETURN_NULL();
+				QChar return_object = (QChar) obj->toUpper();
+				zend_class_entry *ce;                                   
+				object_init_ex(return_value, QCharRef_ce_ptr);     
+				zend_rsrc_list_entry le;                            
+				le.ptr = (void*) &return_object;                                       
+				php_qt_register(return_value,le);                   
+				return;                                             
 	}
 }
 

Modified: trunk/qt/classes/qclipboardevent.cpp
===================================================================
--- trunk/qt/classes/qclipboardevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qclipboardevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QClipboardEvent.cpp - QClipboardEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QClipboardEvent, data){
 	if (ZEND_NUM_ARGS() == 0){
 			QClipboardEvent *obj = (QClipboardEvent*) PHP_QT_FETCH();
-			QEventPrivate * return_object = (QEventPrivate *) obj->data();
+				QEventPrivate * return_object = (QEventPrivate *) obj->data();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QClipboardEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qcloseevent.cpp
===================================================================
--- trunk/qt/classes/qcloseevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qcloseevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QCloseEvent.cpp - QCloseEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qcontextmenuevent.cpp
===================================================================
--- trunk/qt/classes/qcontextmenuevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qcontextmenuevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QContextMenuEvent.cpp - QContextMenuEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -87,7 +87,7 @@
 ZEND_METHOD(QContextMenuEvent, pos){
 	if (ZEND_NUM_ARGS() == 0){
 			QContextMenuEvent *obj = (QContextMenuEvent*) PHP_QT_FETCH();
-			const QPoint& return_object = (const QPoint&) obj->pos();
+				const QPoint& return_object = (const QPoint&) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QContextMenuEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -119,7 +119,7 @@
 ZEND_METHOD(QContextMenuEvent, globalPos){
 	if (ZEND_NUM_ARGS() == 0){
 			QContextMenuEvent *obj = (QContextMenuEvent*) PHP_QT_FETCH();
-			const QPoint& return_object = (const QPoint&) obj->globalPos();
+				const QPoint& return_object = (const QPoint&) obj->globalPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QContextMenuEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qdragenterevent.cpp
===================================================================
--- trunk/qt/classes/qdragenterevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qdragenterevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragEnterEvent.cpp - QDragEnterEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qdragleaveevent.cpp
===================================================================
--- trunk/qt/classes/qdragleaveevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qdragleaveevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragLeaveEvent.cpp - QDragLeaveEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qdragmoveevent.cpp
===================================================================
--- trunk/qt/classes/qdragmoveevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qdragmoveevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragMoveEvent.cpp - QDragMoveEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -43,22 +43,23 @@
 			obj->accept();
 			RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRect& r,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QDragMoveEvent *obj = (QDragMoveEvent*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRect") {
-				obj->accept((const QRect&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->accept((const QRect&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -72,7 +73,7 @@
 ZEND_METHOD(QDragMoveEvent, answerRect){
 	if (ZEND_NUM_ARGS() == 0){
 			QDragMoveEvent *obj = (QDragMoveEvent*) PHP_QT_FETCH();
-			QRect return_object = (QRect) obj->answerRect();
+				QRect return_object = (QRect) obj->answerRect();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDragMoveEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -94,22 +95,23 @@
 			obj->ignore();
 			RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRect& r,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QDragMoveEvent *obj = (QDragMoveEvent*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRect") {
-				obj->ignore((const QRect&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->ignore((const QRect&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qdragresponseevent.cpp
===================================================================
--- trunk/qt/classes/qdragresponseevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qdragresponseevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDragResponseEvent.cpp - QDragResponseEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qdropevent.cpp
===================================================================
--- trunk/qt/classes/qdropevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qdropevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QDropEvent.cpp - QDropEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,20 +38,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QDropEvent, encodedData){
+		/* s public*/
 
+		/* const char* ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* s public*/
-		char* var_s_0;   // default: 
-		int len_s_0;
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING){
+//			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 
 
-		/* const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
-
-			
-		// bytearray, skipped
-		RETURN_NULL();
+//			RETURN_STRING((char*) obj->encodedData( (const char*) Z_STRVAL_P(z_0)), 1);
+			}
 		}
 	}
 }
@@ -65,7 +64,7 @@
 ZEND_METHOD(QDropEvent, source){
 	if (ZEND_NUM_ARGS() == 0){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
-			QWidget* return_object = (QWidget*) obj->source();
+				QWidget* return_object = (QWidget*) obj->source();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -84,7 +83,7 @@
 ZEND_METHOD(QDropEvent, keyboardModifiers){
 	if (ZEND_NUM_ARGS() == 0){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
-			Qt::KeyboardModifiers return_object = (Qt::KeyboardModifiers) obj->keyboardModifiers();
+				Qt::KeyboardModifiers return_object = (Qt::KeyboardModifiers) obj->keyboardModifiers();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -101,18 +100,20 @@
  *    flags:    
  */
 ZEND_METHOD(QDropEvent, setDropAction){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int action,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 
-			
-			obj->setDropAction((Qt::DropAction) var_l_0);
+
+			obj->setDropAction((Qt::DropAction) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -153,7 +154,7 @@
 ZEND_METHOD(QDropEvent, mimeData){
 	if (ZEND_NUM_ARGS() == 0){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
-			const QMimeData * return_object = (const QMimeData *) obj->mimeData();
+				const QMimeData * return_object = (const QMimeData *) obj->mimeData();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -170,19 +171,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QDropEvent, provides){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* s public*/
-		char* var_s_0;   // default: 
-		int len_s_0;
 
+		/* const char* ,  */
 
-		/* const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 
-			
-			RETURN_BOOL(obj->provides( (const char*) var_s_0));
+
+			RETURN_BOOL(obj->provides( (const char*) Z_STRVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -194,23 +195,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QDropEvent, format){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 0
 
 		/* int n,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l|", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
 
-			
-			const char* return_object = (const char*) obj->format((int) var_l_0);
+
+				const char* return_object = (const char*) obj->format((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -224,7 +227,7 @@
 ZEND_METHOD(QDropEvent, mouseButtons){
 	if (ZEND_NUM_ARGS() == 0){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
-			Qt::MouseButtons return_object = (Qt::MouseButtons) obj->mouseButtons();
+				Qt::MouseButtons return_object = (Qt::MouseButtons) obj->mouseButtons();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -256,7 +259,7 @@
 ZEND_METHOD(QDropEvent, pos){
 	if (ZEND_NUM_ARGS() == 0){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->pos();
+				const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -275,7 +278,7 @@
 ZEND_METHOD(QDropEvent, possibleActions){
 	if (ZEND_NUM_ARGS() == 0){
 			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
-			Qt::DropActions return_object = (Qt::DropActions) obj->possibleActions();
+				Qt::DropActions return_object = (Qt::DropActions) obj->possibleActions();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QDropEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qfileopenevent.cpp
===================================================================
--- trunk/qt/classes/qfileopenevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qfileopenevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFileOpenEvent.cpp - QFileOpenEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QFileOpenEvent, file){
 	if (ZEND_NUM_ARGS() == 0){
 			QFileOpenEvent *obj = (QFileOpenEvent*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->file();
+				QString return_object = (QString) obj->file();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFileOpenEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qfocusevent.cpp
===================================================================
--- trunk/qt/classes/qfocusevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qfocusevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFocusEvent.cpp - QFocusEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -53,7 +53,7 @@
 ZEND_METHOD(QFocusEvent, reason){
 	if (ZEND_NUM_ARGS() == 0){
 			QFocusEvent *obj = (QFocusEvent*) PHP_QT_FETCH();
-			Qt::FocusReason return_object = (Qt::FocusReason) obj->reason();
+				Qt::FocusReason return_object = (Qt::FocusReason) obj->reason();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFocusEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qfont.cpp
===================================================================
--- trunk/qt/classes/qfont.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qfont.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QFont.cpp - QFont PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -96,18 +96,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setOverline){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setOverline((bool) var_l_0);
+
+			obj->setOverline((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -119,25 +121,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QFont, insertSubstitution){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
 
 		/* const QString& , const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QString") {
-				obj->insertSubstitution((const QString&) var_oo_0, (const QString&) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
+				obj->insertSubstitution((const QString&) obj_z_0, (const QString&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -175,18 +177,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setKerning){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setKerning((bool) var_l_0);
+
+			obj->setKerning((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -211,22 +215,23 @@
  *    flags:    s
  */
 ZEND_METHOD(QFont, removeSubstitution){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				obj->removeSubstitution((const QString&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				obj->removeSubstitution((const QString&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -238,20 +243,20 @@
  *    flags:    s
  */
 ZEND_METHOD(QFont, substitute){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				QString return_object = (QString) obj->substitute((const QString&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QString return_object = (QString) obj->substitute((const QString&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -259,6 +264,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -270,18 +276,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setBold){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setBold((bool) var_l_0);
+
+			obj->setBold((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -297,31 +305,30 @@
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 			RETURN_LONG(obj->resolve());
 	}
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* unsigned int mask,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QFont *obj = (QFont*) PHP_QT_FETCH();
-
-			
-			obj->resolve((uint) var_l_0);
-			RETURN_NULL();
-		}
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QFont& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QFont") {
-				QFont return_object = (QFont) obj->resolve((const QFont&) var_o_0);
+
+			obj->resolve((uint) Z_LVAL_P(z_0));
+			RETURN_NULL();
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QFont *obj = (QFont*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QFont") {
+					QFont return_object = (QFont) obj->resolve((const QFont&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -329,6 +336,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -379,25 +387,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QFont, insertSubstitutions){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
 
 		/* const QString& , const QStringList& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString" && tmp_oo_1 == "const QStringList") {
-				obj->insertSubstitutions((const QString&) var_oo_0, (const QStringList&) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QStringList") {
+				obj->insertSubstitutions((const QString&) obj_z_0, (const QStringList&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -411,7 +419,7 @@
 ZEND_METHOD(QFont, key){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->key();
+				QString return_object = (QString) obj->key();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -428,18 +436,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setStrikeOut){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setStrikeOut((bool) var_l_0);
+
+			obj->setStrikeOut((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -491,21 +501,22 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, fromString){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				RETURN_BOOL(obj->fromString((const QString&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				RETURN_BOOL(obj->fromString((const QString&) obj_z_0));
 			}
+			}
 		}
 	}
 }
@@ -530,18 +541,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setWeight){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setWeight((int) var_l_0);
+
+			obj->setWeight((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -568,7 +581,7 @@
 ZEND_METHOD(QFont, handle){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			Qt::HANDLE return_object = (Qt::HANDLE) obj->handle();
+				Qt::HANDLE return_object = (Qt::HANDLE) obj->handle();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -585,18 +598,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setStyle){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		long var_o_0;    // default: 
 
 		/* QFont::Style style,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setStyle((QFont::Style) var_o_0);
+
+			obj->setStyle((QFont::Style) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -610,7 +625,7 @@
 ZEND_METHOD(QFont, rawName){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->rawName();
+				QString return_object = (QString) obj->rawName();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -627,18 +642,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setUnderline){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setUnderline((bool) var_l_0);
+
+			obj->setUnderline((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -652,7 +669,7 @@
 ZEND_METHOD(QFont, family){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->family();
+				QString return_object = (QString) obj->family();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -669,21 +686,22 @@
  *    flags:    c
  */
 ZEND_METHOD(QFont, isCopyOf){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QFont& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QFont") {
-				RETURN_BOOL(obj->isCopyOf((const QFont&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QFont") {
+				RETURN_BOOL(obj->isCopyOf((const QFont&) obj_z_0));
 			}
+			}
 		}
 	}
 }
@@ -708,20 +726,20 @@
  *    flags:    s
  */
 ZEND_METHOD(QFont, substitutes){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				QStringList return_object = (QStringList) obj->substitutes((const QString&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QStringList return_object = (QStringList) obj->substitutes((const QString&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -729,6 +747,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -740,18 +759,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setStretch){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setStretch((int) var_l_0);
+
+			obj->setStretch((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -779,7 +800,7 @@
 ZEND_METHOD(QFont, toString){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->toString();
+				QString return_object = (QString) obj->toString();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -798,7 +819,7 @@
 ZEND_METHOD(QFont, defaultFamily){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->defaultFamily();
+				QString return_object = (QString) obj->defaultFamily();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -815,18 +836,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setRawMode){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setRawMode((bool) var_l_0);
+
+			obj->setRawMode((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -851,19 +874,21 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setStyleHint){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: PreferDefault
 
 		/* int , int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setStyleHint((QFont::StyleHint) var_ll_0 ,(QFont::StyleStrategy) var_ll_1);
+
+			obj->setStyleHint((QFont::StyleHint) Z_LVAL_P(z_0) ,(QFont::StyleStrategy) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -877,7 +902,7 @@
 ZEND_METHOD(QFont, substitutions){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QStringList return_object = (QStringList) obj->substitutions();
+				QStringList return_object = (QStringList) obj->substitutions();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -894,22 +919,23 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setFamily){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				obj->setFamily((const QString&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				obj->setFamily((const QString&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -923,65 +949,68 @@
 ZEND_METHOD(QFont, __construct){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *QFont_ptr = new QFont();
-			PHP_QT_REGISTER(QFont_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QFont_ptr);
+				RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QFont& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QFont") {
-				QFont *QFont_ptr = new QFont((const QFont&) var_o_0);
-			PHP_QT_REGISTER(QFont_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QFont") {
+				QFont *QFont_ptr = new QFont((const QFont&) obj_z_0);
+				PHP_QT_REGISTER(QFont_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
 
 		/* const QFont& , qt_QPaintDevice* pd,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QFont") {
-				QFont *QFont_ptr = new QFont((const QFont&) var_ol_0, (QPaintDevice*) var_ol_1);
-			PHP_QT_REGISTER(QFont_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QFont") {
+				QFont *QFont_ptr = new QFont((const QFont&) obj_z_0, (QPaintDevice*) Z_LVAL_P(z_1));
+				PHP_QT_REGISTER(QFont_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* olll public*/
-		zval* z_var_olll_0;   // default: 
-		long var_olll_1;    // default: -1
-		long var_olll_2;    // default: -1
-		long var_olll_3;    // default: false
 
 		/* const QString& family, int pointSize, int weight, int italic,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|l|", &z_var_olll_0, &var_olll_1, &var_olll_2, &var_olll_3) == SUCCESS) {
-			QObject* var_olll_0 = (QObject*) php_qt_fetch(z_var_olll_0);
 
-			QString tmp_olll_0(var_olll_0->metaObject()->className());
-			
-			if(tmp_olll_0 == "const QString") {
-				QFont *QFont_ptr = new QFont((const QString&) var_olll_0, (int) var_olll_1, (int) var_olll_2, (bool) var_olll_3);
-			PHP_QT_REGISTER(QFont_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				QFont *QFont_ptr = new QFont((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (bool) Z_LVAL_P(z_3));
+				PHP_QT_REGISTER(QFont_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1008,7 +1037,7 @@
 ZEND_METHOD(QFont, style){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QFont::Style return_object = (QFont::Style) obj->style();
+				QFont::Style return_object = (QFont::Style) obj->style();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1025,18 +1054,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setPointSize){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setPointSize((int) var_l_0);
+
+			obj->setPointSize((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1048,22 +1079,23 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setRawName){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				obj->setRawName((const QString&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				obj->setRawName((const QString&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1075,18 +1107,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setStyleStrategy){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setStyleStrategy((QFont::StyleStrategy) var_l_0);
+
+			obj->setStyleStrategy((QFont::StyleStrategy) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1112,18 +1146,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setPixelSize){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setPixelSize((int) var_l_0);
+
+			obj->setPixelSize((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1135,18 +1171,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setFixedPitch){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setFixedPitch((bool) var_l_0);
+
+			obj->setFixedPitch((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1158,18 +1196,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setItalic){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int b,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setItalic((bool) var_l_0);
+
+			obj->setItalic((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1196,7 +1236,7 @@
 ZEND_METHOD(QFont, lastResortFont){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->lastResortFont();
+				QString return_object = (QString) obj->lastResortFont();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1215,7 +1255,7 @@
 ZEND_METHOD(QFont, lastResortFamily){
 	if (ZEND_NUM_ARGS() == 0){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->lastResortFamily();
+				QString return_object = (QString) obj->lastResortFamily();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QFont_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1258,18 +1298,20 @@
  *    flags:    
  */
 ZEND_METHOD(QFont, setPointSizeF){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* double ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QFont *obj = (QFont*) PHP_QT_FETCH();
 
-			
-			obj->setPointSizeF((qreal) var_l_0);
+
+			obj->setPointSizeF((qreal) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qgridlayout.cpp
===================================================================
--- trunk/qt/classes/qgridlayout.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qgridlayout.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QGridLayout.cpp - QGridLayout PHP implementation.
- * begin           : Thu Jan 19 02:44:10 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -84,7 +84,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(Z_OBJCE_P(z_0)->name == "QLayout") {
+			if(obj_z_0->inherits("QLayout")) {
 				obj->addLayout((QLayout*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
 			RETURN_NULL();
 			}
@@ -108,7 +108,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(Z_OBJCE_P(z_0)->name == "QLayout") {
+			if(obj_z_0->inherits("QLayout")) {
 				obj->addLayout((QLayout*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
 			RETURN_NULL();
 			}
@@ -140,7 +140,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(1 == 1) {
+			if(obj_z_0->inherits("QWidget")) {
 				QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget*) obj_z_0);
 				PHP_QT_REGISTER(QGridLayout_ptr);
 				RETURN_NULL();
@@ -184,7 +184,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(Z_OBJCE_P(z_0)->name == "QLayoutItem") {
+			if(obj_z_0->inherits("QLayoutItem")) {
 				obj->addItem((QLayoutItem*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
 			RETURN_NULL();
 			}
@@ -480,7 +480,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(1 == 1) {
+			if(obj_z_0->inherits("QWidget")) {
 				obj->addWidget((QWidget*) obj_z_0);
 			RETURN_NULL();
 			}
@@ -502,7 +502,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(1 == 1) {
+			if(obj_z_0->inherits("QWidget")) {
 				obj->addWidget((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
 			RETURN_NULL();
 			}
@@ -526,7 +526,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(1 == 1) {
+			if(obj_z_0->inherits("QWidget")) {
 				obj->addWidget((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
 			RETURN_NULL();
 			}

Modified: trunk/qt/classes/qhelpevent.cpp
===================================================================
--- trunk/qt/classes/qhelpevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qhelpevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHelpEvent.cpp - QHelpEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -66,7 +66,7 @@
 ZEND_METHOD(QHelpEvent, pos){
 	if (ZEND_NUM_ARGS() == 0){
 			QHelpEvent *obj = (QHelpEvent*) PHP_QT_FETCH();
-			const QPoint& return_object = (const QPoint&) obj->pos();
+				const QPoint& return_object = (const QPoint&) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QHelpEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -98,7 +98,7 @@
 ZEND_METHOD(QHelpEvent, globalPos){
 	if (ZEND_NUM_ARGS() == 0){
 			QHelpEvent *obj = (QHelpEvent*) PHP_QT_FETCH();
-			const QPoint& return_object = (const QPoint&) obj->globalPos();
+				const QPoint& return_object = (const QPoint&) obj->globalPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QHelpEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qhideevent.cpp
===================================================================
--- trunk/qt/classes/qhideevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qhideevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHideEvent.cpp - QHideEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qhoverevent.cpp
===================================================================
--- trunk/qt/classes/qhoverevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qhoverevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QHoverEvent.cpp - QHoverEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QHoverEvent, oldPos){
 	if (ZEND_NUM_ARGS() == 0){
 			QHoverEvent *obj = (QHoverEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->oldPos();
+				const QPoint & return_object = (const QPoint &) obj->oldPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QHoverEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -59,7 +59,7 @@
 ZEND_METHOD(QHoverEvent, pos){
 	if (ZEND_NUM_ARGS() == 0){
 			QHoverEvent *obj = (QHoverEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->pos();
+				const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QHoverEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qicondragevent.cpp
===================================================================
--- trunk/qt/classes/qicondragevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qicondragevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QIconDragEvent.cpp - QIconDragEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qinputevent.cpp
===================================================================
--- trunk/qt/classes/qinputevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qinputevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QInputEvent.cpp - QInputEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QInputEvent, modifiers){
 	if (ZEND_NUM_ARGS() == 0){
 			QInputEvent *obj = (QInputEvent*) PHP_QT_FETCH();
-			Qt::KeyboardModifiers return_object = (Qt::KeyboardModifiers) obj->modifiers();
+				Qt::KeyboardModifiers return_object = (Qt::KeyboardModifiers) obj->modifiers();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QInputEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qinputmethodevent.cpp
===================================================================
--- trunk/qt/classes/qinputmethodevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qinputmethodevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QInputMethodEvent.cpp - QInputMethodEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -48,7 +48,7 @@
 ZEND_METHOD(QInputMethodEvent, commitString){
 	if (ZEND_NUM_ARGS() == 0){
 			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
-			const QString & return_object = (const QString &) obj->commitString();
+				const QString & return_object = (const QString &) obj->commitString();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -78,24 +78,25 @@
  *    flags:    
  */
 ZEND_METHOD(QInputMethodEvent, setCommitString){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* oll public*/
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: 0
-		long var_oll_2;    // default: 0
 
 		/* const QString& commitString, int replaceFrom, int replaceLength,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "const QString") {
-				obj->setCommitString((const QString&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				obj->setCommitString((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -122,7 +123,7 @@
 ZEND_METHOD(QInputMethodEvent, preeditString){
 	if (ZEND_NUM_ARGS() == 0){
 			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
-			const QString & return_object = (const QString &) obj->preeditString();
+				const QString & return_object = (const QString &) obj->preeditString();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qkeyevent.cpp
===================================================================
--- trunk/qt/classes/qkeyevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qkeyevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QKeyEvent.cpp - QKeyEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -53,7 +53,7 @@
 ZEND_METHOD(QKeyEvent, text){
 	if (ZEND_NUM_ARGS() == 0){
 			QKeyEvent *obj = (QKeyEvent*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->text();
+				QString return_object = (QString) obj->text();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QKeyEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -85,7 +85,7 @@
 ZEND_METHOD(QKeyEvent, modifiers){
 	if (ZEND_NUM_ARGS() == 0){
 			QKeyEvent *obj = (QKeyEvent*) PHP_QT_FETCH();
-			Qt::KeyboardModifiers return_object = (Qt::KeyboardModifiers) obj->modifiers();
+				Qt::KeyboardModifiers return_object = (Qt::KeyboardModifiers) obj->modifiers();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QKeyEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qlabel.cpp
===================================================================
--- trunk/qt/classes/qlabel.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qlabel.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLabel.cpp - QLabel PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,28 +38,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QLabel, tr){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ss public*/
-		char* var_ss_0;   // default: 
-		int len_ss_0;
 
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
+		/* const char* , const char* ,  */
 
-
-		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -71,18 +69,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLabel, setMargin){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
-			obj->setMargin((int) var_l_0);
+
+			obj->setMargin((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -108,9 +108,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLabel, qt_invoke){
-
-	if (ZEND_NUM_ARGS() == 2){
-	}
 }
 
 /*********************************
@@ -120,22 +117,23 @@
  *    flags:    
  */
 ZEND_METHOD(QLabel, setBuddy){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* qt_QWidget* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QWidget") {
-				obj->setBuddy((QWidget*) var_o_0);
+
+			if(obj_z_0->inherits("QWidget")) {
+				obj->setBuddy((QWidget*) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -149,7 +147,7 @@
 ZEND_METHOD(QLabel, movie){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QMovie * return_object = (QMovie *) obj->movie();
+				QMovie * return_object = (QMovie *) obj->movie();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -179,9 +177,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLabel, qt_cast){
-
-	if (ZEND_NUM_ARGS() == 1){
-	}
 }
 
 /*********************************
@@ -193,7 +188,7 @@
 ZEND_METHOD(QLabel, metaObject){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
+				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -210,18 +205,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLabel, setScaledContents){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
-			obj->setScaledContents((bool) var_l_0);
+
+			obj->setScaledContents((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -233,10 +230,7 @@
  *    flags:    
  */
 ZEND_METHOD(QLabel, event){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o protected*/
-	}
 }
 
 /*********************************
@@ -259,9 +253,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLabel, qt_emit){
-
-	if (ZEND_NUM_ARGS() == 2){
-	}
 }
 
 /*********************************
@@ -273,7 +264,7 @@
 ZEND_METHOD(QLabel, pixmap){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			const QPixmap * return_object = (const QPixmap *) obj->pixmap();
+				const QPixmap * return_object = (const QPixmap *) obj->pixmap();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -290,18 +281,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLabel, setAlignment){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
-			obj->setAlignment((Qt::Alignment) var_l_0);
+
+			obj->setAlignment((Qt::Alignment) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -324,7 +317,7 @@
 ZEND_METHOD(QLabel, buddy){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QWidget * return_object = (QWidget *) obj->buddy();
+				QWidget * return_object = (QWidget *) obj->buddy();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -354,22 +347,23 @@
  *    flags:    l
  */
 ZEND_METHOD(QLabel, setMovie){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public_slots*/
-		zval* z_var_o_0;   // default: 
 
 		/* qt_QMovie* movie,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QMovie") {
-				obj->setMovie((QMovie*) var_o_0);
+
+			if(obj_z_0->inherits("QMovie")) {
+				obj->setMovie((QMovie*) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -381,22 +375,23 @@
  *    flags:    l
  */
 ZEND_METHOD(QLabel, setPicture){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public_slots*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QPicture& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QPicture") {
-				obj->setPicture((const QPicture&) var_o_0);
+
+			if(obj_z_0->inherits("QPicture")) {
+				obj->setPicture((const QPicture&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -408,18 +403,20 @@
  *    flags:    l
  */
 ZEND_METHOD(QLabel, setNum){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public_slots*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-						
-			obj->setNum((int) var_l_0);
+
+			obj->setNum((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -453,18 +450,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLabel, setTextFormat){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
-			obj->setTextFormat((Qt::TextFormat) var_l_0);
+
+			obj->setTextFormat((Qt::TextFormat) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -485,22 +484,23 @@
  *    flags:    l
  */
 ZEND_METHOD(QLabel, setText){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public_slots*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString") {
-				obj->setText((const QString&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				obj->setText((const QString&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -514,7 +514,7 @@
 ZEND_METHOD(QLabel, text){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->text();
+				QString return_object = (QString) obj->text();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -546,7 +546,7 @@
 ZEND_METHOD(QLabel, sizeHint){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->sizeHint();
+				QSize return_object = (QSize) obj->sizeHint();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -565,7 +565,7 @@
 ZEND_METHOD(QLabel, minimumSizeHint){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->minimumSizeHint();
+				QSize return_object = (QSize) obj->minimumSizeHint();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -582,17 +582,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QLabel, heightForWidth){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->heightForWidth((int) var_l_0));
+
+			RETURN_LONG(obj->heightForWidth((int) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -604,22 +606,23 @@
  *    flags:    l
  */
 ZEND_METHOD(QLabel, setPixmap){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public_slots*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QPixmap& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QPixmap") {
-				obj->setPixmap((const QPixmap&) var_o_0);
+
+			if(obj_z_0->inherits("QPixmap")) {
+				obj->setPixmap((const QPixmap&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -633,7 +636,7 @@
 ZEND_METHOD(QLabel, picture){
 	if (ZEND_NUM_ARGS() == 0){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
-			const QPicture * return_object = (const QPicture *) obj->picture();
+				const QPicture * return_object = (const QPicture *) obj->picture();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -650,18 +653,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLabel, setWordWrap){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int on,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
-			obj->setWordWrap((bool) var_l_0);
+
+			obj->setWordWrap((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -673,28 +678,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QLabel, trUtf8){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ss public*/
-		char* var_ss_0;   // default: 
-		int len_ss_0;
 
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
+		/* const char* , const char* ,  */
 
-
-		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLabel_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -706,9 +709,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLabel, qt_property){
-
-	if (ZEND_NUM_ARGS() == 3){
-	}
 }
 
 /*********************************
@@ -718,45 +718,46 @@
  *    flags:    t
  */
 ZEND_METHOD(QLabel, __construct){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 0
-		long var_ol_1;    // default: 0
 
 		/* qt_QWidget* parent, int f,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|l|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "QWidget") {
-				QLabel *QLabel_ptr = new QLabel((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
-			PHP_QT_REGISTER(QLabel_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(obj_z_0->inherits("QWidget")) {
+				QLabel *QLabel_ptr = new QLabel((QWidget*) obj_z_0, (Qt::WFlags) Z_LVAL_P(z_1));
+				PHP_QT_REGISTER(QLabel_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* ool public*/
-		zval* z_var_ool_0;   // default: 
-		zval* z_var_ool_1;   // default: 0
-		long var_ool_2;    // default: 0
 
 		/* const QString& text, qt_QWidget* parent, int f,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|l|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
-			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
-			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
 
-			QString tmp_ool_0(var_ool_0->metaObject()->className());
-			QString tmp_ool_1(var_ool_1->metaObject()->className());
-			
-			if(tmp_ool_0 == "const QString" && tmp_ool_1 == "QWidget") {
-				QLabel *QLabel_ptr = new QLabel((const QString&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
-			PHP_QT_REGISTER(QLabel_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && obj_z_1->inherits("QWidget")) {
+				QLabel *QLabel_ptr = new QLabel((const QString&) obj_z_0, (QWidget*) obj_z_1, (Qt::WFlags) Z_LVAL_P(z_2));
+				PHP_QT_REGISTER(QLabel_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -768,18 +769,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLabel, setIndent){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLabel *obj = (QLabel*) PHP_QT_FETCH();
 
-			
-			obj->setIndent((int) var_l_0);
+
+			obj->setIndent((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qlatin1char.cpp
===================================================================
--- trunk/qt/classes/qlatin1char.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qlatin1char.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLatin1Char.cpp - QLatin1Char PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -52,18 +52,20 @@
  *    flags:    t
  */
 ZEND_METHOD(QLatin1Char, __construct){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* char c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 
-			
-			QLatin1Char *QLatin1Char_ptr = new QLatin1Char((char) var_l_0);
-			PHP_QT_REGISTER(QLatin1Char_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
+
+
+			QLatin1Char *QLatin1Char_ptr = new QLatin1Char((char) Z_LVAL_P(z_0));
+				PHP_QT_REGISTER(QLatin1Char_ptr);
+				RETURN_NULL();
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qlatin1string.cpp
===================================================================
--- trunk/qt/classes/qlatin1string.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qlatin1string.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLatin1String.cpp - QLatin1String PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,21 +38,20 @@
  *    flags:    t
  */
 ZEND_METHOD(QLatin1String, __construct){
+		/* s public*/
 
+		/* const char* s,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING){
 
 
-		/* const char* s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QLatin1String *obj = (QLatin1String*) PHP_QT_FETCH();
-
-			
-			QLatin1String *QLatin1String_ptr = new QLatin1String( (const char*) var_s_0);
-			PHP_QT_REGISTER(QLatin1String_ptr);
-			RETURN_NULL();
+			QLatin1String *QLatin1String_ptr = new QLatin1String( (const char*) Z_STRVAL_P(z_0));
+				PHP_QT_REGISTER(QLatin1String_ptr);
+				RETURN_NULL();
+			}
 		}
 	}
 }
@@ -66,11 +65,11 @@
 ZEND_METHOD(QLatin1String, latin1){
 	if (ZEND_NUM_ARGS() == 0){
 			QLatin1String *obj = (QLatin1String*) PHP_QT_FETCH();
-			const char * return_object = (const char *) obj->latin1();
+				const char * return_object = (const char *) obj->latin1();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLatin1String_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}

Modified: trunk/qt/classes/qlcdnumber.cpp
===================================================================
--- trunk/qt/classes/qlcdnumber.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qlcdnumber.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLCDNumber.cpp - QLCDNumber PHP implementation.
- * begin           : Thu Jan 19 02:44:10 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -194,7 +194,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(1 == 1) {
+			if(Z_OBJCE_P(z_0)->name == "QString") {
 				obj->display((const QString&) obj_z_0);
 			RETURN_NULL();
 			}
@@ -399,7 +399,7 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
 
-			if(1 == 1) {
+			if(obj_z_0->inherits("QWidget")) {
 				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((QWidget*) obj_z_0);
 				PHP_QT_REGISTER(QLCDNumber_ptr);
 				RETURN_NULL();
@@ -419,7 +419,7 @@
 			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
 
-			if(1 == 1) {
+			if(obj_z_1->inherits("QWidget")) {
 				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((uint) Z_LVAL_P(z_0), (QWidget*) obj_z_1);
 				PHP_QT_REGISTER(QLCDNumber_ptr);
 				RETURN_NULL();

Modified: trunk/qt/classes/qmouseevent.cpp
===================================================================
--- trunk/qt/classes/qmouseevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qmouseevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QMouseEvent.cpp - QMouseEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -66,7 +66,7 @@
 ZEND_METHOD(QMouseEvent, globalPos){
 	if (ZEND_NUM_ARGS() == 0){
 			QMouseEvent *obj = (QMouseEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->globalPos();
+				const QPoint & return_object = (const QPoint &) obj->globalPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMouseEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -111,7 +111,7 @@
 ZEND_METHOD(QMouseEvent, pos){
 	if (ZEND_NUM_ARGS() == 0){
 			QMouseEvent *obj = (QMouseEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->pos();
+				const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMouseEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -130,7 +130,7 @@
 ZEND_METHOD(QMouseEvent, button){
 	if (ZEND_NUM_ARGS() == 0){
 			QMouseEvent *obj = (QMouseEvent*) PHP_QT_FETCH();
-			Qt::MouseButton return_object = (Qt::MouseButton) obj->button();
+				Qt::MouseButton return_object = (Qt::MouseButton) obj->button();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMouseEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -149,7 +149,7 @@
 ZEND_METHOD(QMouseEvent, buttons){
 	if (ZEND_NUM_ARGS() == 0){
 			QMouseEvent *obj = (QMouseEvent*) PHP_QT_FETCH();
-			Qt::MouseButtons return_object = (Qt::MouseButtons) obj->buttons();
+				Qt::MouseButtons return_object = (Qt::MouseButtons) obj->buttons();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMouseEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qmoveevent.cpp
===================================================================
--- trunk/qt/classes/qmoveevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qmoveevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QMoveEvent.cpp - QMoveEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QMoveEvent, oldPos){
 	if (ZEND_NUM_ARGS() == 0){
 			QMoveEvent *obj = (QMoveEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->oldPos();
+				const QPoint & return_object = (const QPoint &) obj->oldPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMoveEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -59,7 +59,7 @@
 ZEND_METHOD(QMoveEvent, pos){
 	if (ZEND_NUM_ARGS() == 0){
 			QMoveEvent *obj = (QMoveEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->pos();
+				const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QMoveEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qobjectdata.cpp
===================================================================
--- trunk/qt/classes/qobjectdata.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qobjectdata.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QObjectData.cpp - QObjectData PHP implementation.
- * begin           : Sun Jan 15 15:31:03 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -31,6 +31,5 @@
 #include "../php_qt.h"
 
 
-
 PHP_QT_DESTRUCT(QObjectData);
 

Modified: trunk/qt/classes/qobjectuserdata.cpp
===================================================================
--- trunk/qt/classes/qobjectuserdata.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qobjectuserdata.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QObjectUserData.cpp - QObjectUserData PHP implementation.
- * begin           : Sun Jan 15 15:31:03 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -31,6 +31,5 @@
 #include "../php_qt.h"
 
 
-
 PHP_QT_DESTRUCT(QObjectUserData);
 

Modified: trunk/qt/classes/qpainter.cpp
===================================================================
--- trunk/qt/classes/qpainter.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qpainter.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QPainter.cpp - QPainter PHP implementation.
- * begin           : Sun Jan 15 17:34:37 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -62,43 +62,46 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, eraseRect){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRectF& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRectF") {
-				obj->eraseRect((const QRectF&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF") {
+				obj->eraseRect((const QRectF&) obj_z_0);
 			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QRect") {
-				obj->eraseRect((const QRect&) var_o_0);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->eraseRect((const QRect&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 
 
 		/* int x, int y, int w, int h,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->eraseRect((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
+
+			obj->eraseRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -110,19 +113,21 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setClipPath){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: Qt::ReplaceClip
 
 		/* const QPainterPath& path, int op,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setClipPath((const QPainterPath&) var_ll_0 ,(Qt::ClipOperation) var_ll_1);
+
+			obj->setClipPath((const QPainterPath&) Z_LVAL_P(z_0) ,(Qt::ClipOperation) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -147,19 +152,21 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, shear){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* double sh, double sv,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->shear((qreal) var_ll_0 ,(qreal) var_ll_1);
+
+			obj->shear((qreal) Z_LVAL_P(z_0) ,(qreal) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -199,22 +206,23 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, initFrom){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QWidget* widget,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QWidget") {
-				obj->initFrom((const QWidget*) var_o_0);
+
+			if(obj_z_0->inherits("QWidget")) {
+				obj->initFrom((const QWidget*) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -228,7 +236,7 @@
 ZEND_METHOD(QPainter, fontInfo){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QFontInfo return_object = (QFontInfo) obj->fontInfo();
+				QFontInfo return_object = (QFontInfo) obj->fontInfo();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -245,18 +253,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setLayoutDirection){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int direction,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setLayoutDirection((Qt::LayoutDirection) var_l_0);
+
+			obj->setLayoutDirection((Qt::LayoutDirection) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -268,33 +278,37 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setBrushOrigin){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* const QPoint& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setBrushOrigin((const QPoint&) var_l_0);
+
+			obj->setBrushOrigin((const QPoint&) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int x, int y,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setBrushOrigin((int) var_ll_0 ,(int) var_ll_1);
+
+			obj->setBrushOrigin((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -308,7 +322,7 @@
 ZEND_METHOD(QPainter, pen){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			const QPen & return_object = (const QPen &) obj->pen();
+				const QPen & return_object = (const QPen &) obj->pen();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -325,23 +339,24 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawRects){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
 
 		/* const QRectF* rects, int rectCount,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QRectF") {
-				obj->drawRects((const QRectF*) var_ol_0, (int) var_ol_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF") {
+				obj->drawRects((const QRectF*) obj_z_0, (int) Z_LVAL_P(z_1));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -353,18 +368,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawPath){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* const QPainterPath& path,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawPath((const QPainterPath&) var_l_0);
+
+			obj->drawPath((const QPainterPath&) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -376,23 +393,24 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, fillPath){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* lo public*/
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
 
 		/* const QPainterPath& path, const QBrush& brush,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "const QBrush") {
-				obj->fillPath((const QPainterPath&) var_lo_0, (const QBrush&) var_lo_1);
+
+			if(obj_z_1->inherits("QBrush")) {
+				obj->fillPath((const QPainterPath&) Z_LVAL_P(z_0), (const QBrush&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -404,18 +422,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, rotate){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* double a,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->rotate((qreal) var_l_0);
+
+			obj->rotate((qreal) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -427,47 +447,50 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawPie){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* oll public*/
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: 
-		long var_oll_2;    // default: 
 
 		/* const QRectF& rect, int a, int alen,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "const QRectF") {
-				obj->drawPie((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF") {
+				obj->drawPie((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
 			RETURN_NULL();
-			}			
-			if(tmp_oll_0 == "const QRect") {
-				obj->drawPie((const QRect&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->drawPie((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 6){
 		/* llllll public*/
-		long var_llllll_0;    // default: 
-		long var_llllll_1;    // default: 
-		long var_llllll_2;    // default: 
-		long var_llllll_3;    // default: 
-		long var_llllll_4;    // default: 
-		long var_llllll_5;    // default: 
 
 		/* int x, int y, int w, int h, int a, int alen,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_llllll_0, &var_llllll_1, &var_llllll_2, &var_llllll_3, &var_llllll_4, &var_llllll_5) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 6){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawPie((int) var_llllll_0 ,(int) var_llllll_1 ,(int) var_llllll_2 ,(int) var_llllll_3 ,(int) var_llllll_4 ,(int) var_llllll_5);
+
+			obj->drawPie((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(int) Z_LVAL_P(z_4) ,(int) Z_LVAL_P(z_5));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -479,33 +502,37 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, translate){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* const QPointF& offset,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->translate((const QPointF&) var_l_0);
+
+			obj->translate((const QPointF&) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* double dx, double dy,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->translate((qreal) var_ll_0 ,(qreal) var_ll_1);
+
+			obj->translate((qreal) Z_LVAL_P(z_0) ,(qreal) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -517,18 +544,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setCompositionMode){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* QPainter::CompositionMode mode,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setCompositionMode((QPainter::CompositionMode) var_l_0);
+
+			obj->setCompositionMode((QPainter::CompositionMode) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -540,39 +569,42 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setWindow){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRect& window,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRect") {
-				obj->setWindow((const QRect&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->setWindow((const QRect&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 
 
 		/* int x, int y, int w, int h,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setWindow((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
+
+			obj->setWindow((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -586,7 +618,7 @@
 ZEND_METHOD(QPainter, fontMetrics){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QFontMetrics return_object = (QFontMetrics) obj->fontMetrics();
+				QFontMetrics return_object = (QFontMetrics) obj->fontMetrics();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -603,173 +635,163 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawPixmap){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
 
 		/* const QRect& r, const QPixmap& pm,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		/* lo public*/
+
+		/* const QPointF& p, const QPixmap& pm,  */
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QRect" && tmp_oo_1 == "const QPixmap") {
-				obj->drawPixmap((const QRect&) var_oo_0, (const QPixmap&) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QRect" && obj_z_1->inherits("QPixmap")) {
+				obj->drawPixmap((const QRect&) obj_z_0, (const QPixmap&) obj_z_1);
 			RETURN_NULL();
 			}
-		}
-		/* lo public*/
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* const QPointF& p, const QPixmap& pm,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "const QPixmap") {
-				obj->drawPixmap((const QPointF&) var_lo_0, (const QPixmap&) var_lo_1);
+
+			if(obj_z_1->inherits("QPixmap")) {
+				obj->drawPixmap((const QPointF&) Z_LVAL_P(z_0), (const QPixmap&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* loo public*/
-		long var_loo_0;    // default: 
-		zval* z_var_loo_1;   // default: 
-		zval* z_var_loo_2;   // default: 
 
 		/* const QPointF& p, const QPixmap& pm, const QRectF& sr,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"loo", &var_loo_0, &z_var_loo_1, &z_var_loo_2) == SUCCESS) {
+		/* ooo public*/
+
+		/* const QRectF& targetRect, const QPixmap& pixmap, const QRectF& sourceRect,  */
+		/* llo public*/
+
+		/* int x, int y, const QPixmap& pm,  */
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_loo_1 = (QObject*) php_qt_fetch(z_var_loo_1);
-			QObject* var_loo_2 = (QObject*) php_qt_fetch(z_var_loo_2);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_loo_0(var_loo_1->metaObject()->className());
-			QString tmp_loo_1(var_loo_2->metaObject()->className());
-			
-			if(tmp_loo_0 == "const QPixmap" && tmp_loo_1 == "const QRectF") {
-				obj->drawPixmap((const QPointF&) var_loo_0, (const QPixmap&) var_loo_1, (const QRectF&) var_loo_2);
+
+			if(obj_z_1->inherits("QPixmap") && Z_OBJCE_P(z_2)->name == "QRectF") {
+				obj->drawPixmap((const QPointF&) Z_LVAL_P(z_0), (const QPixmap&) obj_z_1, (const QRectF&) obj_z_2);
 			RETURN_NULL();
 			}
-		}
-		/* ooo public*/
-		zval* z_var_ooo_0;   // default: 
-		zval* z_var_ooo_1;   // default: 
-		zval* z_var_ooo_2;   // default: 
-
-		/* const QRectF& targetRect, const QPixmap& pixmap, const QRectF& sourceRect,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
-			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
-			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
-			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
-			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
-			
-			if(tmp_ooo_0 == "const QRectF" && tmp_ooo_1 == "const QPixmap" && tmp_ooo_2 == "const QRectF") {
-				obj->drawPixmap((const QRectF&) var_ooo_0, (const QPixmap&) var_ooo_1, (const QRectF&) var_ooo_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QPixmap") && Z_OBJCE_P(z_2)->name == "QRectF") {
+				obj->drawPixmap((const QRectF&) obj_z_0, (const QPixmap&) obj_z_1, (const QRectF&) obj_z_2);
 			RETURN_NULL();
 			}
-		}
-		/* llo public*/
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
-
-		/* int x, int y, const QPixmap& pm,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "const QPixmap") {
-				obj->drawPixmap((int) var_llo_0, (int) var_llo_1, (const QPixmap&) var_llo_2);
+
+			if(obj_z_2->inherits("QPixmap")) {
+				obj->drawPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QPixmap&) obj_z_2);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 5){
 		/* llllo public*/
-		long var_llllo_0;    // default: 
-		long var_llllo_1;    // default: 
-		long var_llllo_2;    // default: 
-		long var_llllo_3;    // default: 
-		zval* z_var_llllo_4;   // default: 
 
 		/* int x, int y, int w, int h, const QPixmap& pm,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &z_var_llllo_4) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 5){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llllo_4 = (QObject*) php_qt_fetch(z_var_llllo_4);
+			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);
 
-			QString tmp_llllo_0(var_llllo_4->metaObject()->className());
-			
-			if(tmp_llllo_0 == "const QPixmap") {
-				obj->drawPixmap((int) var_llllo_0, (int) var_llllo_1, (int) var_llllo_2, (int) var_llllo_3, (const QPixmap&) var_llllo_4);
+
+			if(obj_z_4->inherits("QPixmap")) {
+				obj->drawPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QPixmap&) obj_z_4);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 7){
 		/* llollll public*/
-		long var_llollll_0;    // default: 
-		long var_llollll_1;    // default: 
-		zval* z_var_llollll_2;   // default: 
-		long var_llollll_3;    // default: 
-		long var_llollll_4;    // default: 
-		long var_llollll_5;    // default: 
-		long var_llollll_6;    // default: 
 
 		/* int x, int y, const QPixmap& pm, int sx, int sy, int sw, int sh,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llollll", &var_llollll_0, &var_llollll_1, &z_var_llollll_2, &var_llollll_3, &var_llollll_4, &var_llollll_5, &var_llollll_6) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 7){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		zval *z_6; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG && Z_TYPE_P(z_6) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llollll_2 = (QObject*) php_qt_fetch(z_var_llollll_2);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llollll_0(var_llollll_2->metaObject()->className());
-			
-			if(tmp_llollll_0 == "const QPixmap") {
-				obj->drawPixmap((int) var_llollll_0, (int) var_llollll_1, (const QPixmap&) var_llollll_2, (int) var_llollll_3, (int) var_llollll_4, (int) var_llollll_5, (int) var_llollll_6);
+
+			if(obj_z_2->inherits("QPixmap")) {
+				obj->drawPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QPixmap&) obj_z_2, (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (int) Z_LVAL_P(z_5), (int) Z_LVAL_P(z_6));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 9){
 		/* llllollll public*/
-		long var_llllollll_0;    // default: 
-		long var_llllollll_1;    // default: 
-		long var_llllollll_2;    // default: 
-		long var_llllollll_3;    // default: 
-		zval* z_var_llllollll_4;   // default: 
-		long var_llllollll_5;    // default: 
-		long var_llllollll_6;    // default: 
-		long var_llllollll_7;    // default: 
-		long var_llllollll_8;    // default: 
 
 		/* int x, int y, int w, int h, const QPixmap& pm, int sx, int sy, int sw, int sh,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllollll", &var_llllollll_0, &var_llllollll_1, &var_llllollll_2, &var_llllollll_3, &z_var_llllollll_4, &var_llllollll_5, &var_llllollll_6, &var_llllollll_7, &var_llllollll_8) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 9){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		zval *z_6; // define ZVAL
+		zval *z_7; // define ZVAL
+		zval *z_8; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6, &z_7, &z_8) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT && Z_TYPE_P(z_5) == IS_LONG && Z_TYPE_P(z_6) == IS_LONG && Z_TYPE_P(z_7) == IS_LONG && Z_TYPE_P(z_8) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llllollll_4 = (QObject*) php_qt_fetch(z_var_llllollll_4);
+			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);
 
-			QString tmp_llllollll_0(var_llllollll_4->metaObject()->className());
-			
-			if(tmp_llllollll_0 == "const QPixmap") {
-				obj->drawPixmap((int) var_llllollll_0, (int) var_llllollll_1, (int) var_llllollll_2, (int) var_llllollll_3, (const QPixmap&) var_llllollll_4, (int) var_llllollll_5, (int) var_llllollll_6, (int) var_llllollll_7, (int) var_llllollll_8);
+
+			if(obj_z_4->inherits("QPixmap")) {
+				obj->drawPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QPixmap&) obj_z_4, (int) Z_LVAL_P(z_5), (int) Z_LVAL_P(z_6), (int) Z_LVAL_P(z_7), (int) Z_LVAL_P(z_8));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -781,41 +803,44 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawPolyline){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QPolygonF& polyline,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QPolygonF") {
-				obj->drawPolyline((const QPolygonF&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QPolygonF") {
+				obj->drawPolyline((const QPolygonF&) obj_z_0);
 			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QPolygon") {
-				obj->drawPolyline((const QPolygon&) var_o_0);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QPolygon") {
+				obj->drawPolyline((const QPolygon&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* const QPointF* points, int pointCount,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-						
-			obj->drawPolyline((const QPointF*) var_ll_0 ,(int) var_ll_1);
+
+			obj->drawPolyline((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -829,7 +854,7 @@
 ZEND_METHOD(QPainter, deviceMatrix){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			const QMatrix & return_object = (const QMatrix &) obj->deviceMatrix();
+				const QMatrix & return_object = (const QMatrix &) obj->deviceMatrix();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -846,54 +871,59 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawLine){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QLineF& line,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QLineF") {
-				obj->drawLine((const QLineF&) var_o_0);
+
+			if(obj_z_0->inherits("QLineF")) {
+				obj->drawLine((const QLineF&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* const QPoint& p1, const QPoint& p2,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawLine((const QPoint&) var_ll_0 ,(const QPoint&) var_ll_1);
+
+			obj->drawLine((const QPoint&) Z_LVAL_P(z_0) ,(const QPoint&) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 
 
 		/* int x1, int y1, int x2, int y2,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawLine((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
+
+			obj->drawLine((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -905,51 +935,52 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, fillRect){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
 
 		/* const QRectF& , const QBrush& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QRectF" && tmp_oo_1 == "const QBrush") {
-				obj->fillRect((const QRectF&) var_oo_0, (const QBrush&) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QBrush")) {
+				obj->fillRect((const QRectF&) obj_z_0, (const QBrush&) obj_z_1);
 			RETURN_NULL();
-			}			
-			if(tmp_oo_0 == "const QRect" && tmp_oo_1 == "const QBrush") {
-				obj->fillRect((const QRect&) var_oo_0, (const QBrush&) var_oo_1);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRect" && obj_z_1->inherits("QBrush")) {
+				obj->fillRect((const QRect&) obj_z_0, (const QBrush&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 5){
 		/* llllo public*/
-		long var_llllo_0;    // default: 
-		long var_llllo_1;    // default: 
-		long var_llllo_2;    // default: 
-		long var_llllo_3;    // default: 
-		zval* z_var_llllo_4;   // default: 
 
 		/* int x, int y, int w, int h, const QBrush& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &z_var_llllo_4) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 5){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llllo_4 = (QObject*) php_qt_fetch(z_var_llllo_4);
+			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);
 
-			QString tmp_llllo_0(var_llllo_4->metaObject()->className());
-			
-			if(tmp_llllo_0 == "const QBrush") {
-				obj->fillRect((int) var_llllo_0, (int) var_llllo_1, (int) var_llllo_2, (int) var_llllo_3, (const QBrush&) var_llllo_4);
+
+			if(obj_z_4->inherits("QBrush")) {
+				obj->fillRect((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QBrush&) obj_z_4);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -961,54 +992,47 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, boundingRect){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* ooo public*/
-		zval* z_var_ooo_0;   // default: 
-		zval* z_var_ooo_1;   // default: 
-		zval* z_var_ooo_2;   // default: QTextOption()
 
 		/* const QRectF& rect, const QString& text, const QTextOption& o,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
+		/* olo public*/
+
+		/* const QRectF& rect, int flags, const QString& text,  */
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
-			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
-			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
-			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
-			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
-			
-			if(tmp_ooo_0 == "const QRectF" && tmp_ooo_1 == "const QString" && tmp_ooo_2 == "const QTextOption") {
-				obj->boundingRect((const QRectF&) var_ooo_0, (const QString&) var_ooo_1, (const QTextOption&) var_ooo_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF" && Z_OBJCE_P(z_1)->name == "QString" && obj_z_2->inherits("QTextOption")) {
+				obj->boundingRect((const QRectF&) obj_z_0, (const QString&) obj_z_1, (const QTextOption&) obj_z_2);
 			RETURN_NULL();
 			}
-		}
-		/* olo public*/
-		zval* z_var_olo_0;   // default: 
-		long var_olo_1;    // default: 
-		zval* z_var_olo_2;   // default: 
-
-		/* const QRectF& rect, int flags, const QString& text,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &z_var_olo_0, &var_olo_1, &z_var_olo_2) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_olo_0 = (QObject*) php_qt_fetch(z_var_olo_0);
-			QObject* var_olo_2 = (QObject*) php_qt_fetch(z_var_olo_2);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_olo_0(var_olo_0->metaObject()->className());
-			QString tmp_olo_1(var_olo_2->metaObject()->className());
-			
-			if(tmp_olo_0 == "const QRectF" && tmp_olo_1 == "const QString") {
-/*				QRect return_object = (QRect) obj->boundingRect((const QRectF&) var_olo_0, (int) var_olo_1, (const QString&) var_olo_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF" && Z_OBJCE_P(z_2)->name == "QString") {
+/*					QRect return_object = (QRect) obj->boundingRect((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (const QString&) obj_z_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 */				return;                                             
-			}			
-			if(tmp_olo_0 == "const QRect" && tmp_olo_1 == "const QString") {
-				QRect return_object = (QRect) obj->boundingRect((const QRect&) var_olo_0, (int) var_olo_1, (const QString&) var_olo_2);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRect" && Z_OBJCE_P(z_2)->name == "QString") {
+					QRect return_object = (QRect) obj->boundingRect((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (const QString&) obj_z_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1016,27 +1040,28 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 6){
 		/* lllllo public*/
-		long var_lllllo_0;    // default: 
-		long var_lllllo_1;    // default: 
-		long var_lllllo_2;    // default: 
-		long var_lllllo_3;    // default: 
-		long var_lllllo_4;    // default: 
-		zval* z_var_lllllo_5;   // default: 
 
 		/* int x, int y, int w, int h, int flags, const QString& text,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllllo", &var_lllllo_0, &var_lllllo_1, &var_lllllo_2, &var_lllllo_3, &var_lllllo_4, &z_var_lllllo_5) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 6){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lllllo_5 = (QObject*) php_qt_fetch(z_var_lllllo_5);
+			QObject* obj_z_5 = (QObject*) php_qt_fetch(z_5);
 
-			QString tmp_lllllo_0(var_lllllo_5->metaObject()->className());
-			
-			if(tmp_lllllo_0 == "const QString") {
-				QRect return_object = (QRect) obj->boundingRect((int) var_lllllo_0, (int) var_lllllo_1, (int) var_lllllo_2, (int) var_lllllo_3, (int) var_lllllo_4, (const QString&) var_lllllo_5);
+
+			if(Z_OBJCE_P(z_5)->name == "QString") {
+					QRect return_object = (QRect) obj->boundingRect((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (const QString&) obj_z_5);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1044,6 +1069,7 @@
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -1055,41 +1081,44 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setClipRect){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::ReplaceClip
 
 		/* const QRectF& , int op,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QRectF") {
-				obj->setClipRect((const QRectF&) var_ol_0, (Qt::ClipOperation) var_ol_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF") {
+				obj->setClipRect((const QRectF&) obj_z_0, (Qt::ClipOperation) Z_LVAL_P(z_1));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 5){
 		/* lllll public*/
-		long var_lllll_0;    // default: 
-		long var_lllll_1;    // default: 
-		long var_lllll_2;    // default: 
-		long var_lllll_3;    // default: 
-		long var_lllll_4;    // default: Qt::ReplaceClip
 
 		/* int x, int y, int w, int h, int op,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll|", &var_lllll_0, &var_lllll_1, &var_lllll_2, &var_lllll_3, &var_lllll_4) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 5){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setClipRect((int) var_lllll_0 ,(int) var_lllll_1 ,(int) var_lllll_2 ,(int) var_lllll_3 ,(Qt::ClipOperation) var_lllll_4);
+
+			obj->setClipRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(Qt::ClipOperation) Z_LVAL_P(z_4));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1101,117 +1130,106 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawImage){
-
-	if (ZEND_NUM_ARGS() == 2){
+NOT_YET_IMPLEMENTED
 		/* oo public*/
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
 
 		/* const QRectF& r, const QImage& image,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+		/* lo public*/
+
+		/* const QPointF& p, const QImage& image,  */
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QRectF" && tmp_oo_1 == "const QImage") {
-				obj->drawImage((const QRectF&) var_oo_0, (const QImage&) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QImage")) {
+				obj->drawImage((const QRectF&) obj_z_0, (const QImage&) obj_z_1);
 			RETURN_NULL();
 			}
-		}
-		/* lo public*/
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* const QPointF& p, const QImage& image,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "const QImage") {
-				obj->drawImage((const QPointF&) var_lo_0, (const QImage&) var_lo_1);
+
+			if(obj_z_1->inherits("QImage")) {
+				obj->drawImage((const QPointF&) Z_LVAL_P(z_0), (const QImage&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* looo public*/
-		long var_looo_0;    // default: 
-		zval* z_var_looo_1;   // default: 
-		zval* z_var_looo_2;   // default: 
-		zval* z_var_looo_3;   // default: Qt::AutoColor
 
 		/* const QPointF& p, const QImage& image, const QRectF& sr, Qt::ImageConversionFlags flags,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"looo|", &var_looo_0, &z_var_looo_1, &z_var_looo_2, &z_var_looo_3) == SUCCESS) {
+		/* oooo public*/
+
+		/* const QRectF& targetRect, const QImage& image, const QRectF& sourceRect, Qt::ImageConversionFlags flags,  */
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_looo_1 = (QObject*) php_qt_fetch(z_var_looo_1);
-			QObject* var_looo_2 = (QObject*) php_qt_fetch(z_var_looo_2);
-			QObject* var_looo_3 = (QObject*) php_qt_fetch(z_var_looo_3);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
+			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);
 
-			QString tmp_looo_0(var_looo_1->metaObject()->className());
-			QString tmp_looo_1(var_looo_2->metaObject()->className());
-			QString tmp_looo_2(var_looo_3->metaObject()->className());
-			
-			if(tmp_looo_0 == "const QImage" && tmp_looo_1 == "const QRectF" && tmp_looo_2 == "Qt::ImageConversionFlags") {
-//				obj->drawImage((const QPointF&) var_looo_0, (const QImage&) var_looo_1, (const QRectF&) var_looo_2, (Qt::ImageConversionFlags) var_looo_3);
+
+			if(obj_z_1->inherits("QImage") && Z_OBJCE_P(z_2)->name == "QRectF" && obj_z_3->inherits("Qt::ImageConversionFlags")) {
+//				obj->drawImage((const QPointF&) Z_LVAL_P(z_0), (const QImage&) obj_z_1, (const QRectF&) obj_z_2, (Qt::ImageConversionFlags) obj_z_3);
 			RETURN_NULL();
 			}
-		}
-		/* oooo public*/
-		zval* z_var_oooo_0;   // default: 
-		zval* z_var_oooo_1;   // default: 
-		zval* z_var_oooo_2;   // default: 
-		zval* z_var_oooo_3;   // default: Qt::AutoColor
-
-		/* const QRectF& targetRect, const QImage& image, const QRectF& sourceRect, Qt::ImageConversionFlags flags,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo|", &z_var_oooo_0, &z_var_oooo_1, &z_var_oooo_2, &z_var_oooo_3) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oooo_0 = (QObject*) php_qt_fetch(z_var_oooo_0);
-			QObject* var_oooo_1 = (QObject*) php_qt_fetch(z_var_oooo_1);
-			QObject* var_oooo_2 = (QObject*) php_qt_fetch(z_var_oooo_2);
-			QObject* var_oooo_3 = (QObject*) php_qt_fetch(z_var_oooo_3);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
+			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);
 
-			QString tmp_oooo_0(var_oooo_0->metaObject()->className());
-			QString tmp_oooo_1(var_oooo_1->metaObject()->className());
-			QString tmp_oooo_2(var_oooo_2->metaObject()->className());
-			QString tmp_oooo_3(var_oooo_3->metaObject()->className());
-			
-			if(tmp_oooo_0 == "const QRectF" && tmp_oooo_1 == "const QImage" && tmp_oooo_2 == "const QRectF" && tmp_oooo_3 == "Qt::ImageConversionFlags") {
-//				obj->drawImage((const QRectF&) var_oooo_0, (const QImage&) var_oooo_1, (const QRectF&) var_oooo_2, (Qt::ImageConversionFlags) var_oooo_3);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QImage") && Z_OBJCE_P(z_2)->name == "QRectF" && obj_z_3->inherits("Qt::ImageConversionFlags")) {
+//				obj->drawImage((const QRectF&) obj_z_0, (const QImage&) obj_z_1, (const QRectF&) obj_z_2, (Qt::ImageConversionFlags) obj_z_3);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 8){
 		/* llollllo public*/
-		long var_llollllo_0;    // default: 
-		long var_llollllo_1;    // default: 
-		zval* z_var_llollllo_2;   // default: 
-		long var_llollllo_3;    // default: 0
-		long var_llollllo_4;    // default: 0
-		long var_llollllo_5;    // default: -1
-		long var_llollllo_6;    // default: -1
-		zval* z_var_llollllo_7;   // default: Qt::AutoColor
 
 		/* int x, int y, const QImage& image, int sx, int sy, int sw, int sh, Qt::ImageConversionFlags flags,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol|l|l|l|o|", &var_llollllo_0, &var_llollllo_1, &z_var_llollllo_2, &var_llollllo_3, &var_llollllo_4, &var_llollllo_5, &var_llollllo_6, &z_var_llollllo_7) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 8){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		zval *z_6; // define ZVAL
+		zval *z_7; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6, &z_7) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG && Z_TYPE_P(z_6) == IS_LONG && Z_TYPE_P(z_7) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llollllo_2 = (QObject*) php_qt_fetch(z_var_llollllo_2);
-			QObject* var_llollllo_7 = (QObject*) php_qt_fetch(z_var_llollllo_7);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
+			QObject* obj_z_7 = (QObject*) php_qt_fetch(z_7);
 
-			QString tmp_llollllo_0(var_llollllo_2->metaObject()->className());
-			QString tmp_llollllo_1(var_llollllo_7->metaObject()->className());
-			
-			if(tmp_llollllo_0 == "const QImage" && tmp_llollllo_1 == "Qt::ImageConversionFlags") {
-//				obj->drawImage((int) var_llollllo_0, (int) var_llollllo_1, (const QImage&) var_llollllo_2, (int) var_llollllo_3, (int) var_llollllo_4, (int) var_llollllo_5, (int) var_llollllo_6, (Qt::ImageConversionFlags) var_llollllo_7);
+
+			if(obj_z_2->inherits("QImage") && obj_z_7->inherits("Qt::ImageConversionFlags")) {
+//				obj->drawImage((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QImage&) obj_z_2, (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (int) Z_LVAL_P(z_5), (int) Z_LVAL_P(z_6), (Qt::ImageConversionFlags) obj_z_7);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1223,54 +1241,55 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawTiledPixmap){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* ool public*/
-		zval* z_var_ool_0;   // default: 
-		zval* z_var_ool_1;   // default: 
-		long var_ool_2;    // default: QPointF()
 
 		/* const QRectF& rect, const QPixmap& pm, const QPointF& offset,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
-			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_ool_0(var_ool_0->metaObject()->className());
-			QString tmp_ool_1(var_ool_1->metaObject()->className());
-			
-			if(tmp_ool_0 == "const QRectF" && tmp_ool_1 == "const QPixmap") {
-				obj->drawTiledPixmap((const QRectF&) var_ool_0, (const QPixmap&) var_ool_1, (const QPointF&) var_ool_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QPixmap")) {
+				obj->drawTiledPixmap((const QRectF&) obj_z_0, (const QPixmap&) obj_z_1, (const QPointF&) Z_LVAL_P(z_2));
 			RETURN_NULL();
-			}			
-			if(tmp_ool_0 == "const QRect" && tmp_ool_1 == "const QPixmap") {
-				obj->drawTiledPixmap((const QRect&) var_ool_0, (const QPixmap&) var_ool_1, (const QPoint&) var_ool_2);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRect" && obj_z_1->inherits("QPixmap")) {
+				obj->drawTiledPixmap((const QRect&) obj_z_0, (const QPixmap&) obj_z_1, (const QPoint&) Z_LVAL_P(z_2));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 7){
 		/* lllloll public*/
-		long var_lllloll_0;    // default: 
-		long var_lllloll_1;    // default: 
-		long var_lllloll_2;    // default: 
-		long var_lllloll_3;    // default: 
-		zval* z_var_lllloll_4;   // default: 
-		long var_lllloll_5;    // default: 0
-		long var_lllloll_6;    // default: 0
 
 		/* int x, int y, int w, int h, const QPixmap& , int sx, int sy,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllol|l|", &var_lllloll_0, &var_lllloll_1, &var_lllloll_2, &var_lllloll_3, &z_var_lllloll_4, &var_lllloll_5, &var_lllloll_6) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 7){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		zval *z_6; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT && Z_TYPE_P(z_5) == IS_LONG && Z_TYPE_P(z_6) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lllloll_4 = (QObject*) php_qt_fetch(z_var_lllloll_4);
+			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);
 
-			QString tmp_lllloll_0(var_lllloll_4->metaObject()->className());
-			
-			if(tmp_lllloll_0 == "const QPixmap") {
-				obj->drawTiledPixmap((int) var_lllloll_0, (int) var_lllloll_1, (int) var_lllloll_2, (int) var_lllloll_3, (const QPixmap&) var_lllloll_4, (int) var_lllloll_5, (int) var_lllloll_6);
+
+			if(obj_z_4->inherits("QPixmap")) {
+				obj->drawTiledPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QPixmap&) obj_z_4, (int) Z_LVAL_P(z_5), (int) Z_LVAL_P(z_6));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1297,7 +1316,7 @@
 ZEND_METHOD(QPainter, background){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			const QBrush & return_object = (const QBrush &) obj->background();
+				const QBrush & return_object = (const QBrush &) obj->background();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1314,43 +1333,46 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawPolygon){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::OddEvenFill
 
 		/* const QPolygonF& polygon, int fillRule,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QPolygonF") {
-				obj->drawPolygon((const QPolygonF&) var_ol_0, (Qt::FillRule) var_ol_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QPolygonF") {
+				obj->drawPolygon((const QPolygonF&) obj_z_0, (Qt::FillRule) Z_LVAL_P(z_1));
 			RETURN_NULL();
-			}			
-			if(tmp_ol_0 == "const QPolygon") {
-				obj->drawPolygon((const QPolygon&) var_ol_0, (Qt::FillRule) var_ol_1);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QPolygon") {
+				obj->drawPolygon((const QPolygon&) obj_z_0, (Qt::FillRule) Z_LVAL_P(z_1));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 
-		long var_lll_2;    // default: Qt::OddEvenFill
 
 		/* const QPointF* points, int pointCount, int fillRule,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-						
-			obj->drawPolygon((const QPointF*) var_lll_0 ,(int) var_lll_1 ,(Qt::FillRule) var_lll_2);
+
+			obj->drawPolygon((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(Qt::FillRule) Z_LVAL_P(z_2));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1364,7 +1386,7 @@
 ZEND_METHOD(QPainter, device){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QPaintDevice * return_object = (QPaintDevice *) obj->device();
+				QPaintDevice * return_object = (QPaintDevice *) obj->device();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1381,23 +1403,24 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setClipRegion){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::ReplaceClip
 
 		/* const QRegion& , int op,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QRegion") {
-				obj->setClipRegion((const QRegion&) var_ol_0, (Qt::ClipOperation) var_ol_1);
+
+			if(obj_z_0->inherits("QRegion")) {
+				obj->setClipRegion((const QRegion&) obj_z_0, (Qt::ClipOperation) Z_LVAL_P(z_1));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1409,18 +1432,20 @@
  *    flags:    s
  */
 ZEND_METHOD(QPainter, restoreRedirected){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* const QPaintDevice* device,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->restoreRedirected((const QPaintDevice*) var_l_0);
+
+			obj->restoreRedirected((const QPaintDevice*) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1432,18 +1457,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setMatrixEnabled){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int enabled,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setMatrixEnabled((bool) var_l_0);
+
+			obj->setMatrixEnabled((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1455,41 +1482,44 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawPoints){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QPolygonF& points,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QPolygonF") {
-				obj->drawPoints((const QPolygonF&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QPolygonF") {
+				obj->drawPoints((const QPolygonF&) obj_z_0);
 			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QPolygon") {
-				obj->drawPoints((const QPolygon&) var_o_0);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QPolygon") {
+				obj->drawPoints((const QPolygon&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* const QPointF* points, int pointCount,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-						
-			obj->drawPoints((const QPointF*) var_ll_0 ,(int) var_ll_1);
+
+			obj->drawPoints((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1501,47 +1531,50 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawRoundRect){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* oll public*/
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: 25
-		long var_oll_2;    // default: 25
 
 		/* const QRectF& r, int xround, int yround,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "const QRectF") {
-				obj->drawRoundRect((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF") {
+				obj->drawRoundRect((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
 			RETURN_NULL();
-			}			
-			if(tmp_oll_0 == "const QRect") {
-				obj->drawRoundRect((const QRect&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->drawRoundRect((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 6){
 		/* llllll public*/
-		long var_llllll_0;    // default: 
-		long var_llllll_1;    // default: 
-		long var_llllll_2;    // default: 
-		long var_llllll_3;    // default: 
-		long var_llllll_4;    // default: 25
-		long var_llllll_5;    // default: 25
 
 		/* int x, int y, int w, int h, int , int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll|l|", &var_llllll_0, &var_llllll_1, &var_llllll_2, &var_llllll_3, &var_llllll_4, &var_llllll_5) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 6){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawRoundRect((int) var_llllll_0 ,(int) var_llllll_1 ,(int) var_llllll_2 ,(int) var_llllll_3 ,(int) var_llllll_4 ,(int) var_llllll_5);
+
+			obj->drawRoundRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(int) Z_LVAL_P(z_4) ,(int) Z_LVAL_P(z_5));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1553,41 +1586,44 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawConvexPolygon){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QPolygonF& polygon,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QPolygonF") {
-				obj->drawConvexPolygon((const QPolygonF&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QPolygonF") {
+				obj->drawConvexPolygon((const QPolygonF&) obj_z_0);
 			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QPolygon") {
-				obj->drawConvexPolygon((const QPolygon&) var_o_0);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QPolygon") {
+				obj->drawConvexPolygon((const QPolygon&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* const QPointF* points, int pointCount,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-						
-			obj->drawConvexPolygon((const QPointF*) var_ll_0 ,(int) var_ll_1);
+
+			obj->drawConvexPolygon((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1599,23 +1635,24 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setMatrix){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: false
 
 		/* const QMatrix& matrix, int combine,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QMatrix") {
-				obj->setMatrix((const QMatrix&) var_ol_0, (bool) var_ol_1);
+
+			if(obj_z_0->inherits("QMatrix")) {
+				obj->setMatrix((const QMatrix&) obj_z_0, (bool) Z_LVAL_P(z_1));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1627,47 +1664,49 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawPicture){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* lo public*/
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
 
 		/* const QPointF& p, const QPicture& picture,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "const QPicture") {
-				obj->drawPicture((const QPointF&) var_lo_0, (const QPicture&) var_lo_1);
+
+			if(obj_z_1->inherits("QPicture")) {
+				obj->drawPicture((const QPointF&) Z_LVAL_P(z_0), (const QPicture&) obj_z_1);
 			RETURN_NULL();
-			}			
-			if(tmp_lo_0 == "const QPicture") {
-				obj->drawPicture((const QPoint&) var_lo_0, (const QPicture&) var_lo_1);
+			}
+			if(obj_z_1->inherits("QPicture")) {
+				obj->drawPicture((const QPoint&) Z_LVAL_P(z_0), (const QPicture&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* llo public*/
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
 
 		/* int x, int y, const QPicture& picture,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "const QPicture") {
-				obj->drawPicture((int) var_llo_0, (int) var_llo_1, (const QPicture&) var_llo_2);
+
+			if(obj_z_2->inherits("QPicture")) {
+				obj->drawPicture((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QPicture&) obj_z_2);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1695,7 +1734,7 @@
 ZEND_METHOD(QPainter, font){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			const QFont & return_object = (const QFont &) obj->font();
+				const QFont & return_object = (const QFont &) obj->font();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1714,7 +1753,7 @@
 ZEND_METHOD(QPainter, matrix){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			const QMatrix & return_object = (const QMatrix &) obj->matrix();
+				const QMatrix & return_object = (const QMatrix &) obj->matrix();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1733,7 +1772,7 @@
 ZEND_METHOD(QPainter, viewport){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QRect return_object = (QRect) obj->viewport();
+				QRect return_object = (QRect) obj->viewport();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1763,115 +1802,110 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawText){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* lo public*/
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
 
 		/* const QPointF& p, const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "const QString") {
-				obj->drawText((const QPointF&) var_lo_0, (const QString&) var_lo_1);
+
+			if(Z_OBJCE_P(z_1)->name == "QString") {
+				obj->drawText((const QPointF&) Z_LVAL_P(z_0), (const QString&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* ooo public*/
-		zval* z_var_ooo_0;   // default: 
-		zval* z_var_ooo_1;   // default: 
-		zval* z_var_ooo_2;   // default: QTextOption()
 
 		/* const QRectF& r, const QString& text, const QTextOption& o,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
+		/* llo public*/
+
+		/* int x, int y, const QString& s,  */
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
-			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
-			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
-			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
-			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
-			
-			if(tmp_ooo_0 == "const QRectF" && tmp_ooo_1 == "const QString" && tmp_ooo_2 == "const QTextOption") {
-				obj->drawText((const QRectF&) var_ooo_0, (const QString&) var_ooo_1, (const QTextOption&) var_ooo_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF" && Z_OBJCE_P(z_1)->name == "QString" && obj_z_2->inherits("QTextOption")) {
+				obj->drawText((const QRectF&) obj_z_0, (const QString&) obj_z_1, (const QTextOption&) obj_z_2);
 			RETURN_NULL();
 			}
-		}
-		/* llo public*/
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
-
-		/* int x, int y, const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "const QString") {
-				obj->drawText((int) var_llo_0, (int) var_llo_1, (const QString&) var_llo_2);
+
+			if(Z_OBJCE_P(z_2)->name == "QString") {
+				obj->drawText((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QString&) obj_z_2);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* oloo public*/
-		zval* z_var_oloo_0;   // default: 
-		long var_oloo_1;    // default: 
-		zval* z_var_oloo_2;   // default: 
-		zval* z_var_oloo_3;   // default: 0
 
 		/* const QRectF& r, int flags, const QString& text, QRectF* br,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oloo|", &z_var_oloo_0, &var_oloo_1, &z_var_oloo_2, &z_var_oloo_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oloo_0 = (QObject*) php_qt_fetch(z_var_oloo_0);
-			QObject* var_oloo_2 = (QObject*) php_qt_fetch(z_var_oloo_2);
-			QObject* var_oloo_3 = (QObject*) php_qt_fetch(z_var_oloo_3);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
+			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);
 
-			QString tmp_oloo_0(var_oloo_0->metaObject()->className());
-			QString tmp_oloo_1(var_oloo_2->metaObject()->className());
-			QString tmp_oloo_2(var_oloo_3->metaObject()->className());
-			
-			if(tmp_oloo_0 == "const QRectF" && tmp_oloo_1 == "const QString" && tmp_oloo_2 == "QRectF") {
-				obj->drawText((const QRectF&) var_oloo_0, (int) var_oloo_1, (const QString&) var_oloo_2, (QRectF*) var_oloo_3);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF" && Z_OBJCE_P(z_2)->name == "QString" && Z_OBJCE_P(z_3)->name == "QRectF") {
+				obj->drawText((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (const QString&) obj_z_2, (QRectF*) obj_z_3);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 7){
 		/* llllloo public*/
-		long var_llllloo_0;    // default: 
-		long var_llllloo_1;    // default: 
-		long var_llllloo_2;    // default: 
-		long var_llllloo_3;    // default: 
-		long var_llllloo_4;    // default: 
-		zval* z_var_llllloo_5;   // default: 
-		zval* z_var_llllloo_6;   // default: 0
 
 		/* int x, int y, int w, int h, int flags, const QString& text, qt_QRect* br,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllloo|", &var_llllloo_0, &var_llllloo_1, &var_llllloo_2, &var_llllloo_3, &var_llllloo_4, &z_var_llllloo_5, &z_var_llllloo_6) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 7){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		zval *z_6; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_OBJECT && Z_TYPE_P(z_6) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llllloo_5 = (QObject*) php_qt_fetch(z_var_llllloo_5);
-			QObject* var_llllloo_6 = (QObject*) php_qt_fetch(z_var_llllloo_6);
+			QObject* obj_z_5 = (QObject*) php_qt_fetch(z_5);
+			QObject* obj_z_6 = (QObject*) php_qt_fetch(z_6);
 
-			QString tmp_llllloo_0(var_llllloo_5->metaObject()->className());
-			QString tmp_llllloo_1(var_llllloo_6->metaObject()->className());
-			
-			if(tmp_llllloo_0 == "const QString" && tmp_llllloo_1 == "QRect") {
-				obj->drawText((int) var_llllloo_0, (int) var_llllloo_1, (int) var_llllloo_2, (int) var_llllloo_3, (int) var_llllloo_4, (const QString&) var_llllloo_5, (QRect*) var_llllloo_6);
+
+			if(Z_OBJCE_P(z_5)->name == "QString" && Z_OBJCE_P(z_6)->name == "QRect") {
+				obj->drawText((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (const QString&) obj_z_5, (QRect*) obj_z_6);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1883,47 +1917,50 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawChord){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* oll public*/
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: 
-		long var_oll_2;    // default: 
 
 		/* const QRectF& rect, int a, int alen,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "const QRectF") {
-				obj->drawChord((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF") {
+				obj->drawChord((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
 			RETURN_NULL();
-			}			
-			if(tmp_oll_0 == "const QRect") {
-				obj->drawChord((const QRect&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->drawChord((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 6){
 		/* llllll public*/
-		long var_llllll_0;    // default: 
-		long var_llllll_1;    // default: 
-		long var_llllll_2;    // default: 
-		long var_llllll_3;    // default: 
-		long var_llllll_4;    // default: 
-		long var_llllll_5;    // default: 
 
 		/* int x, int y, int w, int h, int a, int alen,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_llllll_0, &var_llllll_1, &var_llllll_2, &var_llllll_3, &var_llllll_4, &var_llllll_5) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 6){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawChord((int) var_llllll_0 ,(int) var_llllll_1 ,(int) var_llllll_2 ,(int) var_llllll_3 ,(int) var_llllll_4 ,(int) var_llllll_5);
+
+			obj->drawChord((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(int) Z_LVAL_P(z_4) ,(int) Z_LVAL_P(z_5));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1937,7 +1974,7 @@
 ZEND_METHOD(QPainter, clipRegion){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QRegion return_object = (QRegion) obj->clipRegion();
+				QRegion return_object = (QRegion) obj->clipRegion();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1969,7 +2006,7 @@
 ZEND_METHOD(QPainter, brushOrigin){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QPoint return_object = (QPoint) obj->brushOrigin();
+				QPoint return_object = (QPoint) obj->brushOrigin();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -1986,18 +2023,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setViewTransformEnabled){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int enable,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setViewTransformEnabled((bool) var_l_0);
+
+			obj->setViewTransformEnabled((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2009,19 +2048,21 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, scale){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* double sx, double sy,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->scale((qreal) var_ll_0 ,(qreal) var_ll_1);
+
+			obj->scale((qreal) Z_LVAL_P(z_0) ,(qreal) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2033,37 +2074,37 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setPen){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int style,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-
-			
-			obj->setPen((Qt::PenStyle) var_l_0);
-			RETURN_NULL();
-		}
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QColor& color,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QColor") {
-				obj->setPen((const QColor&) var_o_0);
+
+			obj->setPen((Qt::PenStyle) Z_LVAL_P(z_0));
 			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QPen") {
-				obj->setPen((const QPen&) var_o_0);
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(obj_z_0->inherits("QColor")) {
+				obj->setPen((const QColor&) obj_z_0);
 			RETURN_NULL();
 			}
+			if(obj_z_0->inherits("QPen")) {
+				obj->setPen((const QPen&) obj_z_0);
+			RETURN_NULL();
+			}
+			}
 		}
 	}
 }
@@ -2075,18 +2116,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setBackgroundMode){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int mode,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setBackgroundMode((Qt::BGMode) var_l_0);
+
+			obj->setBackgroundMode((Qt::BGMode) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2100,7 +2143,7 @@
 ZEND_METHOD(QPainter, window){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QRect return_object = (QRect) obj->window();
+				QRect return_object = (QRect) obj->window();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -2119,7 +2162,7 @@
 ZEND_METHOD(QPainter, paintEngine){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QPaintEngine * return_object = (QPaintEngine *) obj->paintEngine();
+				QPaintEngine * return_object = (QPaintEngine *) obj->paintEngine();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -2136,19 +2179,21 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setRenderHint){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: true
 
 		/* QPainter::RenderHint hint, int on,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setRenderHint((QPainter::RenderHint) var_ll_0 ,(bool) var_ll_1);
+
+			obj->setRenderHint((QPainter::RenderHint) Z_LVAL_P(z_0) ,(bool) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2162,7 +2207,7 @@
 ZEND_METHOD(QPainter, brush){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			const QBrush & return_object = (const QBrush &) obj->brush();
+				const QBrush & return_object = (const QBrush &) obj->brush();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -2179,23 +2224,24 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, strokePath){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* lo public*/
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
 
 		/* const QPainterPath& path, const QPen& pen,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "const QPen") {
-				obj->strokePath((const QPainterPath&) var_lo_0, (const QPen&) var_lo_1);
+
+			if(obj_z_1->inherits("QPen")) {
+				obj->strokePath((const QPainterPath&) Z_LVAL_P(z_0), (const QPen&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -2207,33 +2253,33 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setBrush){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int style,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
-			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-
-			
-			obj->setBrush((Qt::BrushStyle) var_l_0);
-			RETURN_NULL();
-		}
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QBrush& brush,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QBrush") {
-				obj->setBrush((const QBrush&) var_o_0);
+
+			obj->setBrush((Qt::BrushStyle) Z_LVAL_P(z_0));
 			RETURN_NULL();
 			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QPainter *obj = (QPainter*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(obj_z_0->inherits("QBrush")) {
+				obj->setBrush((const QBrush&) obj_z_0);
+			RETURN_NULL();
+			}
+			}
 		}
 	}
 }
@@ -2245,33 +2291,37 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawPoint){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* const QPointF& pt,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-						
-			obj->drawPoint((const QPointF&) var_l_0);
+
+			obj->drawPoint((const QPointF&) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
 
 		/* int x, int y,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawPoint((int) var_ll_0 ,(int) var_ll_1);
+
+			obj->drawPoint((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2285,21 +2335,23 @@
 ZEND_METHOD(QPainter, __construct){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *QPainter_ptr = new QPainter();
-			PHP_QT_REGISTER(QPainter_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QPainter_ptr);
+				RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* qt_QPaintDevice* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
 
-			
-			QPainter *QPainter_ptr = new QPainter((QPaintDevice*) var_l_0);
-			PHP_QT_REGISTER(QPainter_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
+
+
+			QPainter *QPainter_ptr = new QPainter((QPaintDevice*) Z_LVAL_P(z_0));
+				PHP_QT_REGISTER(QPainter_ptr);
+				RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2311,20 +2363,22 @@
  *    flags:    s
  */
 ZEND_METHOD(QPainter, setRedirected){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* lll public*/
-		long var_lll_0;    // default: 
-		long var_lll_1;    // default: 
-		long var_lll_2;    // default: QPoint()
 
 		/* const QPaintDevice* device, qt_QPaintDevice* replacement, const QPoint& offset,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setRedirected((const QPaintDevice*) var_lll_0 ,(QPaintDevice*) var_lll_1 ,(const QPoint&) var_lll_2);
+
+			obj->setRedirected((const QPaintDevice*) Z_LVAL_P(z_0) ,(QPaintDevice*) Z_LVAL_P(z_1) ,(const QPoint&) Z_LVAL_P(z_2));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2338,7 +2392,7 @@
 ZEND_METHOD(QPainter, compositionMode){
 	if (ZEND_NUM_ARGS() == 0){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QPainter::CompositionMode return_object = (QPainter::CompositionMode) obj->compositionMode();
+				QPainter::CompositionMode return_object = (QPainter::CompositionMode) obj->compositionMode();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -2355,22 +2409,23 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setFont){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QFont& f,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QFont") {
-				obj->setFont((const QFont&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QFont") {
+				obj->setFont((const QFont&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -2382,17 +2437,19 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, begin){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* qt_QPaintDevice* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			RETURN_BOOL(obj->begin((QPaintDevice*) var_l_0));
+
+			RETURN_BOOL(obj->begin((QPaintDevice*) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -2404,39 +2461,42 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setViewport){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRect& viewport,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRect") {
-				obj->setViewport((const QRect&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->setViewport((const QRect&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 
 
 		/* int x, int y, int w, int h,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setViewport((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
+
+			obj->setViewport((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2448,39 +2508,42 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawEllipse){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRectF& r,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRectF") {
-				obj->drawEllipse((const QRectF&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF") {
+				obj->drawEllipse((const QRectF&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 
 
 		/* int x, int y, int w, int h,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawEllipse((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
+
+			obj->drawEllipse((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2492,47 +2555,50 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawArc){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* oll public*/
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: 
-		long var_oll_2;    // default: 
 
 		/* const QRectF& rect, int a, int alen,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "const QRectF") {
-				obj->drawArc((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF") {
+				obj->drawArc((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
 			RETURN_NULL();
-			}			
-			if(tmp_oll_0 == "const QRect") {
-				obj->drawArc((const QRect&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->drawArc((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 6){
 		/* llllll public*/
-		long var_llllll_0;    // default: 
-		long var_llllll_1;    // default: 
-		long var_llllll_2;    // default: 
-		long var_llllll_3;    // default: 
-		long var_llllll_4;    // default: 
-		long var_llllll_5;    // default: 
 
 		/* int x, int y, int w, int h, int a, int alen,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_llllll_0, &var_llllll_1, &var_llllll_2, &var_llllll_3, &var_llllll_4, &var_llllll_5) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 6){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		zval *z_5; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawArc((int) var_llllll_0 ,(int) var_llllll_1 ,(int) var_llllll_2 ,(int) var_llllll_3 ,(int) var_llllll_4 ,(int) var_llllll_5);
+
+			obj->drawArc((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(int) Z_LVAL_P(z_4) ,(int) Z_LVAL_P(z_5));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2544,22 +2610,23 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setBackground){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QBrush& bg,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QBrush") {
-				obj->setBackground((const QBrush&) var_o_0);
+
+			if(obj_z_0->inherits("QBrush")) {
+				obj->setBackground((const QBrush&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -2584,43 +2651,46 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawRect){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRectF& rect,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRectF") {
-				obj->drawRect((const QRectF&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRectF") {
+				obj->drawRect((const QRectF&) obj_z_0);
 			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QRect") {
-				obj->drawRect((const QRect&) var_o_0);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->drawRect((const QRect&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 4){
 		/* llll public*/
-		long var_llll_0;    // default: 
-		long var_llll_1;    // default: 
-		long var_llll_2;    // default: 
-		long var_llll_3;    // default: 
 
 		/* int x1, int y1, int w, int h,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->drawRect((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
+
+			obj->drawRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2632,39 +2702,38 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawLines){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ol public*/
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
 
 		/* const QLineF* lines, int lineCount,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		/* ll public*/
+
+		/* const QPointF* pointPairs, int lineCount,  */
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QLineF") {
-				obj->drawLines((const QLineF*) var_ol_0, (int) var_ol_1);
+
+			if(obj_z_0->inherits("QLineF")) {
+				obj->drawLines((const QLineF*) obj_z_0, (int) Z_LVAL_P(z_1));
 			RETURN_NULL();
-			}			
-			if(tmp_ol_0 == "const QLine") {
-				obj->drawLines((const QLine*) var_ol_0, (int) var_ol_1);
+			}
+			if(obj_z_0->inherits("QLine")) {
+				obj->drawLines((const QLine*) obj_z_0, (int) Z_LVAL_P(z_1));
 			RETURN_NULL();
 			}
-		}
-		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
-
-		/* const QPointF* pointPairs, int lineCount,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-						
-			obj->drawLines((const QPointF*) var_ll_0 ,(int) var_ll_1);
+
+			obj->drawLines((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2703,24 +2772,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QPainter, redirected){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ll public*/
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 0
 
 		/* const QPaintDevice* device, qt_QPoint* offset,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			QPaintDevice * return_object = (QPaintDevice *) obj->redirected((const QPaintDevice*) var_ll_0 ,(QPoint*) var_ll_1);
+
+				QPaintDevice * return_object = (QPaintDevice *) obj->redirected((const QPaintDevice*) Z_LVAL_P(z_0) ,(QPoint*) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPainter_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -2745,47 +2816,49 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, drawTextItem){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* lo public*/
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
 
 		/* const QPointF& p, const QTextItem& ti,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "const QTextItem") {
-				obj->drawTextItem((const QPointF&) var_lo_0, (const QTextItem&) var_lo_1);
+
+			if(obj_z_1->inherits("QTextItem")) {
+				obj->drawTextItem((const QPointF&) Z_LVAL_P(z_0), (const QTextItem&) obj_z_1);
 			RETURN_NULL();
-			}			
-			if(tmp_lo_0 == "const QTextItem") {
-				obj->drawTextItem((const QPoint&) var_lo_0, (const QTextItem&) var_lo_1);
+			}
+			if(obj_z_1->inherits("QTextItem")) {
+				obj->drawTextItem((const QPoint&) Z_LVAL_P(z_0), (const QTextItem&) obj_z_1);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* llo public*/
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
 
 		/* int x, int y, const QTextItem& ti,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "const QTextItem") {
-				obj->drawTextItem((int) var_llo_0, (int) var_llo_1, (const QTextItem&) var_llo_2);
+
+			if(obj_z_2->inherits("QTextItem")) {
+				obj->drawTextItem((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QTextItem&) obj_z_2);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -2797,18 +2870,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPainter, setClipping){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int enable,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPainter *obj = (QPainter*) PHP_QT_FETCH();
 
-			
-			obj->setClipping((bool) var_l_0);
+
+			obj->setClipping((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qpaintevent.cpp
===================================================================
--- trunk/qt/classes/qpaintevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qpaintevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QPaintEvent.cpp - QPaintEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QPaintEvent, rect){
 	if (ZEND_NUM_ARGS() == 0){
 			QPaintEvent *obj = (QPaintEvent*) PHP_QT_FETCH();
-			const QRect & return_object = (const QRect &) obj->rect();
+				const QRect & return_object = (const QRect &) obj->rect();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPaintEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -59,7 +59,7 @@
 ZEND_METHOD(QPaintEvent, region){
 	if (ZEND_NUM_ARGS() == 0){
 			QPaintEvent *obj = (QPaintEvent*) PHP_QT_FETCH();
-			const QRegion & return_object = (const QRegion &) obj->region();
+				const QRegion & return_object = (const QRegion &) obj->region();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPaintEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qpushbutton.cpp
===================================================================
--- trunk/qt/classes/qpushbutton.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qpushbutton.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QPushButton.cpp - QPushButton PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,28 +38,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QPushButton, tr){
+		/* ss public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
-		char* var_ss_0;   // default: 
-		int len_ss_0;
-
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
-
-
 		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPushButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -85,18 +83,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPushButton, setFlat){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* int ,  */
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
-			
-			obj->setFlat((bool) var_b_0);
+
+			obj->setFlat((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -108,24 +108,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QPushButton, qt_invoke){
-
-	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* int , QUObject* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -135,16 +117,6 @@
  *    flags:    s
  */
 ZEND_METHOD(QPushButton, staticMetaObject){
-	if (ZEND_NUM_ARGS() == 0){
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QPushButton_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -154,16 +126,6 @@
  *    flags:    
  */
 ZEND_METHOD(QPushButton, qObject){
-	if (ZEND_NUM_ARGS() == 0){
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QObject* return_object = (QObject*) obj->qObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QPushButton_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -186,18 +148,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPushButton, setAutoDefault){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* int ,  */
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
-			
-			obj->setAutoDefault((bool) var_b_0);
+
+			obj->setAutoDefault((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -211,11 +175,11 @@
 ZEND_METHOD(QPushButton, sizeHint){
 	if (ZEND_NUM_ARGS() == 0){
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->sizeHint();
+				QSize return_object = (QSize) obj->sizeHint();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPushButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -228,22 +192,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QPushButton, qt_cast){
-
-	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
-
-
-		/* const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-
-			
-			obj->qt_cast( (const char*) var_s_0);
-			RETURN_NULL();
-		}
-	}
 }
 
 /*********************************
@@ -255,11 +203,11 @@
 ZEND_METHOD(QPushButton, metaObject){
 	if (ZEND_NUM_ARGS() == 0){
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
+				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPushButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -274,11 +222,11 @@
 ZEND_METHOD(QPushButton, menu){
 	if (ZEND_NUM_ARGS() == 0){
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QMenu* return_object = (QMenu*) obj->menu();
+				QMenu* return_object = (QMenu*) obj->menu();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPushButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -291,18 +239,20 @@
  *    flags:    
  */
 ZEND_METHOD(QPushButton, setDefault){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
+		/* int ,  */
 
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
-			
-			obj->setDefault((bool) var_b_0);
+
+			obj->setDefault((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -314,24 +264,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QPushButton, qt_emit){
-
-	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* int , QUObject* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -341,70 +273,67 @@
  *    flags:    t
  */
 ZEND_METHOD(QPushButton, __construct){
+		/* o public*/
 
+		/* qt_QWidget* parent,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 0
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-		/* QWidget* parent,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QWidget*") {
-				QPushButton *QPushButton_ptr = new QPushButton((QWidget*) var_o_0);
-			PHP_QT_REGISTER(QPushButton_ptr);
-			RETURN_NULL();
+			if(obj_z_0->inherits("QWidget")) {
+				QPushButton *QPushButton_ptr = new QPushButton((QWidget*) obj_z_0);
+				PHP_QT_REGISTER(QPushButton_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
+		/* oo public*/
 
+		/* const QString& text, qt_QWidget* parent,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 0
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-		/* const QString& text, QWidget* parent,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "QWidget*") {
-				QPushButton *QPushButton_ptr = new QPushButton((const QString&) var_oo_0, (QWidget*) var_oo_1);
-			PHP_QT_REGISTER(QPushButton_ptr);
-			RETURN_NULL();
+			if(Z_OBJCE_P(z_0)->name == "QString" && obj_z_1->inherits("QWidget")) {
+				QPushButton *QPushButton_ptr = new QPushButton((const QString&) obj_z_0, (QWidget*) obj_z_1);
+				PHP_QT_REGISTER(QPushButton_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
+		/* ooo public*/
 
+		/* const QIcon& icon, const QString& text, qt_QWidget* parent,  */
+
 	if (ZEND_NUM_ARGS() == 3){
-		/* ooo */
-		zval* z_var_ooo_0;   // default: 
-		zval* z_var_ooo_1;   // default: 
-		zval* z_var_ooo_2;   // default: 0
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-		/* const QIcon& icon, const QString& text, QWidget* parent,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
-			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
-			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);
 
-			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
-			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
-			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
-			
-			if(tmp_ooo_0 == "const QIcon&" && tmp_ooo_1 == "const QString&" && tmp_ooo_2 == "QWidget*") {
-				QPushButton *QPushButton_ptr = new QPushButton((const QIcon&) var_ooo_0, (const QString&) var_ooo_1, (QWidget*) var_ooo_2);
-			PHP_QT_REGISTER(QPushButton_ptr);
-			RETURN_NULL();
+			if(obj_z_0->inherits("QIcon") && Z_OBJCE_P(z_1)->name == "QString" && obj_z_2->inherits("QWidget")) {
+				QPushButton *QPushButton_ptr = new QPushButton((const QIcon&) obj_z_0, (const QString&) obj_z_1, (QWidget*) obj_z_2);
+				PHP_QT_REGISTER(QPushButton_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -416,16 +345,6 @@
  *    flags:    cv
  */
 ZEND_METHOD(QPushButton, className){
-	if (ZEND_NUM_ARGS() == 0){
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			const char * return_object = (const char *) obj->className();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QPushButton_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -448,28 +367,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QPushButton, trUtf8){
+		/* ss public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
-		char* var_ss_0;   // default: 
-		int len_ss_0;
-
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
-
-
 		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QPushButton_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -494,25 +411,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QPushButton, qt_property){
-
-	if (ZEND_NUM_ARGS() == 3){
-		/* llo */
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
-
-		/* int , int , QVariant* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
-			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
-
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "QVariant*") {
-				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -522,22 +420,23 @@
  *    flags:    
  */
 ZEND_METHOD(QPushButton, setMenu){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* QMenu* menu,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QPushButton *obj = (QPushButton*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QMenu*") {
-				obj->setMenu((QMenu*) var_o_0);
+
+			if(obj_z_0->inherits("QMenu")) {
+				obj->setMenu((QMenu*) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qresizeevent.cpp
===================================================================
--- trunk/qt/classes/qresizeevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qresizeevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QResizeEvent.cpp - QResizeEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QResizeEvent, oldSize){
 	if (ZEND_NUM_ARGS() == 0){
 			QResizeEvent *obj = (QResizeEvent*) PHP_QT_FETCH();
-			const QSize & return_object = (const QSize &) obj->oldSize();
+				const QSize & return_object = (const QSize &) obj->oldSize();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QResizeEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -59,7 +59,7 @@
 ZEND_METHOD(QResizeEvent, size){
 	if (ZEND_NUM_ARGS() == 0){
 			QResizeEvent *obj = (QResizeEvent*) PHP_QT_FETCH();
-			const QSize & return_object = (const QSize &) obj->size();
+				const QSize & return_object = (const QSize &) obj->size();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QResizeEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qshortcutevent.cpp
===================================================================
--- trunk/qt/classes/qshortcutevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qshortcutevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QShortcutEvent.cpp - QShortcutEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -66,7 +66,7 @@
 ZEND_METHOD(QShortcutEvent, key){
 	if (ZEND_NUM_ARGS() == 0){
 			QShortcutEvent *obj = (QShortcutEvent*) PHP_QT_FETCH();
-			const QKeySequence & return_object = (const QKeySequence &) obj->key();
+				const QKeySequence & return_object = (const QKeySequence &) obj->key();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QShortcutEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qshowevent.cpp
===================================================================
--- trunk/qt/classes/qshowevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qshowevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QShowEvent.cpp - QShowEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qstatustipevent.cpp
===================================================================
--- trunk/qt/classes/qstatustipevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qstatustipevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QStatusTipEvent.cpp - QStatusTipEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QStatusTipEvent, tip){
 	if (ZEND_NUM_ARGS() == 0){
 			QStatusTipEvent *obj = (QStatusTipEvent*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->tip();
+				QString return_object = (QString) obj->tip();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QStatusTipEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qstring.cpp
===================================================================
--- trunk/qt/classes/qstring.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qstring.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QString.cpp - QString PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -31,7 +31,16 @@
 #include "../php_qt.h"
 
 
+ZEND_METHOD(QString,__toString){
 
+  QString *QString_ptr = (QString *) PHP_QT_FETCH();
+
+  int l = QString_ptr->size();
+  char* c = (char*) (QString_ptr->toAscii()).constData();
+  RETURN_STRING(c,l);
+}
+
+
 /*		public enumSectionFlag:long {
 			SectionDefault = 0x00,
 			SectionSkipEmpty = 0x01,
@@ -61,41 +70,42 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, compare){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString&") {
-				RETURN_LONG(obj->compare((const QString&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				RETURN_LONG(obj->compare((const QString&) obj_z_0));
 			}
+			}
 		}
 	}
+		/* oo public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
-
 		/* const QString& s1, const QString& s2,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
-				RETURN_LONG(obj->compare((const QString&) var_oo_0, (const QString&) var_oo_1));
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
+				RETURN_LONG(obj->compare((const QString&) obj_z_0, (const QString&) obj_z_1));
 			}
+			}
 		}
 	}
 }
@@ -109,11 +119,11 @@
 ZEND_METHOD(QString, utf16){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			const ushort * return_object = (const ushort *) obj->utf16();
+				const ushort * return_object = (const ushort *) obj->utf16();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -128,11 +138,11 @@
 ZEND_METHOD(QString, constData){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			const QChar * return_object = (const QChar *) obj->constData();
+				const QChar * return_object = (const QChar *) obj->constData();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -145,62 +155,70 @@
  *    flags:    
  */
 ZEND_METHOD(QString, insert){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
+		/* int i, char c,  */
+		/* lo public*/
 
-		/* int i, QChar c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
+		/* int i, const QString& s,  */
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
 
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QChar") {
-				QString & return_object = (QString &) obj->insert((int) var_lo_0, (QChar) var_lo_1);
+
+				QString & return_object = (QString &) obj->insert((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_lo_0 == "const QString&") {
-				QString & return_object = (QString &) obj->insert((int) var_lo_2, (const QString&) var_lo_1);
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+
+
+			if(Z_OBJCE_P(z_1)->name == "QString") {
+					QString & return_object = (QString &) obj->insert((int) Z_LVAL_P(z_0), (const QString&) obj_z_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
+		/* lol public*/
 
-	if (ZEND_NUM_ARGS() == 3){
-		/* lol */
-		long var_lol_0;    // default: 
-		zval* z_var_lol_1;   // default: 
-		long var_lol_2;    // default: 
-
 		/* int i, const QChar* uc, int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_lol_0, &z_var_lol_1, &var_lol_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lol_1 = (QObject*) php_qt_fetch(z_var_lol_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_lol_0(var_lol_1->metaObject()->className());
-			
-			if(tmp_lol_0 == "const QChar*") {
-				QString & return_object = (QString &) obj->insert((int) var_lol_0, (const QChar*) var_lol_1, (int) var_lol_2);
+
+			if(Z_OBJCE_P(z_1)->name == "char") {
+					QString & return_object = (QString &) obj->insert((int) Z_LVAL_P(z_0), (const QChar*) obj_z_1, (int) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -226,25 +244,23 @@
  *    flags:    
  */
 ZEND_METHOD(QString, setUtf16){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
-
 		/* const ushort* utf16, int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const ushort*") {
-				QString & return_object = (QString &) obj->setUtf16((const ushort*) var_ol_0, (int) var_ol_1);
+
+				QString & return_object = (QString &) obj->setUtf16((const ushort*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -259,63 +275,67 @@
  *    flags:    
  */
 ZEND_METHOD(QString, prepend){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		/* char c,  */
+		/* s public*/
 
-
 		/* const char* s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+		/* o public*/
+
+		/* const QString& s,  */
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString & return_object = (QString &) obj->prepend( (const char*) var_s_0);
+
+				QString & return_object = (QString &) obj->prepend((char) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-		}
-		/* o */
-		zval* z_var_o_1;   // default: 
-
-		/* QChar c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_STRING){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
-			
-			if(tmp_o_0 == "QChar") {
-				QString & return_object = (QString &) obj->prepend((QChar) var_o_1);
+
+				QString & return_object = (QString &) obj->prepend( (const char*) Z_STRVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_o_0 == "const QString&") {
-				QString & return_object = (QString &) obj->prepend((const QString&) var_o_1);
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QString & return_object = (QString &) obj->prepend((const QString&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_o_0 == "const QByteArray&") {
-				QString & return_object = (QString &) obj->prepend((const QByteArray&) var_o_1);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QByteArray") {
+					QString & return_object = (QString &) obj->prepend((const QByteArray&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -329,11 +349,11 @@
 ZEND_METHOD(QString, trimmed){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->trimmed();
+				QString return_object = (QString) obj->trimmed();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -346,18 +366,20 @@
  *    flags:    
  */
 ZEND_METHOD(QString, chop){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
 		/* int n,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->chop((int) var_l_0);
+
+			obj->chop((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -369,26 +391,24 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, leftJustified){
+		/* lll public*/
 
-	if (ZEND_NUM_ARGS() == 3){
-		/* lob */
-		long var_lob_0;    // default: 
-		zval* z_var_lob_1;   // default: QLatin1Char(' ')
-		bool var_lob_2;   // _default: false
+		/* int width, char fill, int trunc,  */
 
-		/* int width, QChar fill, bool trunc,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|b|", &var_lob_0, &z_var_lob_1, &var_lob_2) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lob_1 = (QObject*) php_qt_fetch(z_var_lob_1);
 
-			QString tmp_lob_0(var_lob_1->metaObject()->className());
-			
-			if(tmp_lob_0 == "QChar") {
-				QString return_object = (QString) obj->leftJustified((int) var_lob_0, (QChar) var_lob_1, (bool) var_lob_2);
+
+				QString return_object = (QString) obj->leftJustified((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(bool) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -421,41 +441,49 @@
 			QString *obj = (QString*) PHP_QT_FETCH();
 			RETURN_LONG(obj->count());
 	}
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* const QRegExp& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRegExp&") {
-				RETURN_LONG(obj->count((const QRegExp&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
+				RETURN_LONG(obj->count((const QRegExp&) obj_z_0));
 			}
+			}
 		}
 	}
+		/* ol public*/
 
+		/* const QString& s, int cs,  */
+		/* ll public*/
+
+		/* char c, int cs,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-		/* QChar c, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				RETURN_LONG(obj->count((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
+			}
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "QChar") {
-				RETURN_LONG(obj->count((QChar) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
-			}			
-			if(tmp_ol_0 == "const QString&") {
-				RETURN_LONG(obj->count((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_3));
+
+			RETURN_LONG(obj->count((char) Z_LVAL_P(z_0) ,(Qt::CaseSensitivity) Z_LVAL_P(z_1)));
 			}
 		}
 	}
@@ -468,26 +496,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QString, fromAscii){
+		/* sl public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* sl */
-		char* var_sl_0;   // default: 
-		int len_sl_0;
-
-		long var_sl_1;    // default: -1
-
 		/* const char* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->fromAscii( (const char*) var_sl_0 ,(int) var_sl_1);
+
+				QString return_object = (QString) obj->fromAscii( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -499,19 +527,21 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toLongLong){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 0
-		long var_bl_1;    // default: 10
+		/* int* ok, int base,  */
 
-		/* bool* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->toLongLong((bool*) var_bl_0 ,(int) var_bl_1);
+
+			obj->toLongLong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -525,11 +555,11 @@
 ZEND_METHOD(QString, toUpper){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->toUpper();
+				QString return_object = (QString) obj->toUpper();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -544,96 +574,90 @@
 ZEND_METHOD(QString, __construct){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *QString_ptr = new QString();
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
 	}
+		/* l public*/
 
+		/* char c,  */
+		/* s public*/
+
+		/* const char* ch,  */
+		/* o public*/
+
+		/* const QLatin1String& latin1,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 
 
-		/* const char* ch,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
+			QString *QString_ptr = new QString((char) Z_LVAL_P(z_0));
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
+			}
+			if(Z_TYPE_P(z_0) == IS_STRING){
 
-			
-			QString *QString_ptr = new QString( (const char*) var_s_0);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-		}
-		/* o */
-		zval* z_var_o_1;   // default: 
 
-		/* QChar c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
+			QString *QString_ptr = new QString( (const char*) Z_STRVAL_P(z_0));
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
-			
-			if(tmp_o_0 == "QChar") {
-				QString *QString_ptr = new QString((QChar) var_o_1);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QLatin1String&") {
-				QString *QString_ptr = new QString((const QLatin1String&) var_o_1);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QString&") {
-				QString *QString_ptr = new QString((const QString&) var_o_1);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QByteArray&") {
-				QString *QString_ptr = new QString((const QByteArray&) var_o_1);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const Null&") {
-				QString *QString_ptr = new QString((const Null&) var_o_1);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
+
+			if(obj_z_0->inherits("QLatin1String")) {
+				QString *QString_ptr = new QString((const QLatin1String&) obj_z_0);
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
 			}
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				QString *QString_ptr = new QString((const QString&) obj_z_0);
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
+			}
+			if(Z_OBJCE_P(z_0)->name == "QByteArray") {
+				QString *QString_ptr = new QString((const QByteArray&) obj_z_0);
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
+			}
+			if(obj_z_0->inherits("Null")) {
+				QString *QString_ptr = new QString((const Null&) obj_z_0);
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
+			}
+			}
 		}
 	}
+		/* ol public*/
 
+		/* const QChar* unicode, int size,  */
+		/* ll public*/
+
+		/* int size, char c,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-		/* const QChar* unicode, int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QChar*") {
-				QString *QString_ptr = new QString((const QChar*) var_ol_0, (int) var_ol_1);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
+			if(Z_OBJCE_P(z_0)->name == "char") {
+				QString *QString_ptr = new QString((const QChar*) obj_z_0, (int) Z_LVAL_P(z_1));
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
 			}
-		}
-		/* lo */
-		long var_lo_2;    // default: 
-		zval* z_var_lo_3;   // default: 
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 
-		/* int size, QChar c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &z_var_lo_3) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lo_3 = (QObject*) php_qt_fetch(z_var_lo_3);
 
-			QString tmp_lo_0(var_lo_3->metaObject()->className());
-			
-			if(tmp_lo_0 == "QChar") {
-				QString *QString_ptr = new QString((int) var_lo_2, (QChar) var_lo_3);
-			PHP_QT_REGISTER(QString_ptr);
-			RETURN_NULL();
+			QString *QString_ptr = new QString((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1));
+				PHP_QT_REGISTER(QString_ptr);
+				RETURN_NULL();
 			}
 		}
 	}
@@ -646,50 +670,44 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, normalized){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
+		/* QString::NormalizationForm mode,  */
 
-		/* NormalizationForm mode,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "NormalizationForm") {
-				QString return_object = (QString) obj->normalized((NormalizationForm) var_o_0);
+
+				QString return_object = (QString) obj->normalized((QString::NormalizationForm) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
 		}
 	}
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
+		/* QString::NormalizationForm mode, int version,  */
 
-		/* NormalizationForm mode, QChar::UnicodeVersion version,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "NormalizationForm" && tmp_oo_1 == "QChar::UnicodeVersion") {
-				QString return_object = (QString) obj->normalized((NormalizationForm) var_oo_0, (QChar::UnicodeVersion) var_oo_1);
+
+				QString return_object = (QString) obj->normalized((QString::NormalizationForm) Z_LVAL_P(z_0) ,(QChar::UnicodeVersion) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -704,25 +722,23 @@
  *    flags:    s
  */
 ZEND_METHOD(QString, fromUtf16){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: -1
-
 		/* const ushort* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const ushort*") {
-				QString return_object = (QString) obj->fromUtf16((const ushort*) var_ol_0, (int) var_ol_1);
+
+				QString return_object = (QString) obj->fromUtf16((const ushort*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -750,112 +766,61 @@
  *    flags:    
  */
 ZEND_METHOD(QString, setNum){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 10
-
 		/* short , int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "short") {
-				QString & return_object = (QString &) obj->setNum((short) var_ol_0, (int) var_ol_1);
+
+				QString & return_object = (QString &) obj->setNum((short) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ol_0 == "ushort") {
-				QString & return_object = (QString &) obj->setNum((ushort) var_ol_0, (int) var_ol_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}			
-			if(tmp_ol_0 == "ulong") {
-				QString & return_object = (QString &) obj->setNum((ulong) var_ol_0, (int) var_ol_5);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}			
-			if(tmp_ol_0 == "qlonglong") {
-				QString & return_object = (QString &) obj->setNum((qlonglong) var_ol_0, (int) var_ol_7);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}			
-			if(tmp_ol_0 == "qulonglong") {
-				QString & return_object = (QString &) obj->setNum((qulonglong) var_ol_0, (int) var_ol_9);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
 			}
 		}
-		/* ll */
-		long var_ll_10;    // default: 
-		long var_ll_11;    // default: 10
+	}
+		/* oll public*/
 
-		/* int , int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_10, &var_ll_11) == SUCCESS) {
-			QString *obj = (QString*) PHP_QT_FETCH();
+		/* float , char f, int prec,  */
+		/* lll public*/
 
-			
-			QString & return_object = (QString &) obj->setNum((int) var_ll_10 ,(int) var_ll_11);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-		}
-	}
+		/* double , char f, int prec,  */
 
 	if (ZEND_NUM_ARGS() == 3){
-		/* oll */
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: 'g'
-		long var_oll_2;    // default: 6
-
-		/* float , char f, int prec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
 
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "float") {
-				QString & return_object = (QString &) obj->setNum((float) var_oll_0, (char) var_oll_1, (int) var_oll_2);
+
+				QString & return_object = (QString &) obj->setNum((float) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_oll_0 == "double") {
-				QString & return_object = (QString &) obj->setNum((double) var_oll_0, (char) var_oll_4, (int) var_oll_5);
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+				QString & return_object = (QString &) obj->setNum((double) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -870,25 +835,26 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, endsWith){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
-
 		/* const QString& s, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString&") {
-				RETURN_BOOL(obj->endsWith((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
-			}			
-			if(tmp_ol_0 == "const QChar&") {
-				RETURN_BOOL(obj->endsWith((const QChar&) var_ol_0, (Qt::CaseSensitivity) var_ol_3));
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				RETURN_BOOL(obj->endsWith((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
 			}
+			if(Z_OBJCE_P(z_0)->name == "char") {
+				RETURN_BOOL(obj->endsWith((const QChar&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
+			}
+			}
 		}
 	}
 }
@@ -900,85 +866,61 @@
  *    flags:    s
  */
 ZEND_METHOD(QString, number){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 10
+		/* unsigned long , int base,  */
+		/* ll public*/
 
-		/* ulong , int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		/* int , int base,  */
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "ulong") {
-				QString return_object = (QString) obj->number((ulong) var_ol_0, (int) var_ol_1);
+
+				QString return_object = (QString) obj->number((ulong) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ol_0 == "qlonglong") {
-				QString return_object = (QString) obj->number((qlonglong) var_ol_0, (int) var_ol_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}			
-			if(tmp_ol_0 == "qulonglong") {
-				QString return_object = (QString) obj->number((qulonglong) var_ol_0, (int) var_ol_5);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
 			}
-		}
-		/* ll */
-		long var_ll_6;    // default: 
-		long var_ll_7;    // default: 10
-
-		/* int , int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_6, &var_ll_7) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->number((int) var_ll_6 ,(int) var_ll_7);
+
+				QString return_object = (QString) obj->number((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
+		/* lll public*/
 
-	if (ZEND_NUM_ARGS() == 3){
-		/* oll */
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: 'g'
-		long var_oll_2;    // default: 6
-
 		/* double , char f, int prec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
 
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "double") {
-				QString return_object = (QString) obj->number((double) var_oll_0, (char) var_oll_1, (int) var_oll_2);
+
+				QString return_object = (QString) obj->number((double) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -993,41 +935,42 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, localeAwareCompare){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* const QString& s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString&") {
-				RETURN_LONG(obj->localeAwareCompare((const QString&) var_o_0));
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				RETURN_LONG(obj->localeAwareCompare((const QString&) obj_z_0));
 			}
+			}
 		}
 	}
+		/* oo public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
-
 		/* const QString& s1, const QString& s2,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
-				RETURN_LONG(obj->localeAwareCompare((const QString&) var_oo_0, (const QString&) var_oo_1));
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
+				RETURN_LONG(obj->localeAwareCompare((const QString&) obj_z_0, (const QString&) obj_z_1));
 			}
+			}
 		}
 	}
 }
@@ -1039,50 +982,55 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, section){
+		/* lllo public*/
 
-	if (ZEND_NUM_ARGS() == 4){
-		/* ollo */
-		zval* z_var_ollo_0;   // default: 
-		long var_ollo_1;    // default: 
-		long var_ollo_2;    // default: -1
-		zval* z_var_ollo_3;   // default: SectionDefault
+		/* char sep, int start, int end, QString::SectionFlags flags,  */
+		/* ollo public*/
 
-		/* QChar sep, int start, int end, SectionFlags flags,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll|o|", &z_var_ollo_0, &var_ollo_1, &var_ollo_2, &z_var_ollo_3) == SUCCESS) {
+		/* const QString& in_sep, int start, int end, QString::SectionFlags flags,  */
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ollo_0 = (QObject*) php_qt_fetch(z_var_ollo_0);
-			QObject* var_ollo_3 = (QObject*) php_qt_fetch(z_var_ollo_3);
 
-			QString tmp_ollo_0(var_ollo_0->metaObject()->className());
-			QString tmp_ollo_1(var_ollo_3->metaObject()->className());
-			
-			if(tmp_ollo_0 == "QChar" && tmp_ollo_1 == "SectionFlags") {
-				QString return_object = (QString) obj->section((QChar) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (SectionFlags) var_ollo_3);
+
+				QString return_object = (QString) obj->section((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(QString::SectionFlags) Z_LVAL_P(z_3));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ollo_0 == "const QString&" && tmp_ollo_1 == "SectionFlags") {
-				QString return_object = (QString) obj->section((const QString&) var_ollo_0, (int) var_ollo_5, (int) var_ollo_6, (SectionFlags) var_ollo_3);
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QString return_object = (QString) obj->section((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (QString::SectionFlags) Z_LVAL_P(z_3));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ollo_0 == "const QRegExp&" && tmp_ollo_1 == "SectionFlags") {
-				QString return_object = (QString) obj->section((const QRegExp&) var_ollo_0, (int) var_ollo_9, (int) var_ollo_10, (SectionFlags) var_ollo_3);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
+					QString return_object = (QString) obj->section((const QRegExp&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (QString::SectionFlags) Z_LVAL_P(z_3));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -1122,11 +1070,11 @@
 ZEND_METHOD(QString, simplified){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->simplified();
+				QString return_object = (QString) obj->simplified();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1139,18 +1087,20 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toUInt){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 0
-		long var_bl_1;    // default: 10
+		/* int* ok, int base,  */
 
-		/* bool* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->toUInt((bool*) var_bl_0 ,(int) var_bl_1));
+
+			RETURN_LONG(obj->toUInt((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -1162,18 +1112,20 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toUShort){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 0
-		long var_bl_1;    // default: 10
+		/* int* ok, int base,  */
 
-		/* bool* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_USHORT(obj->toUShort((bool*) var_bl_0 ,(int) var_bl_1));
+
+			RETURN_LONG(obj->toUShort((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -1185,18 +1137,20 @@
  *    flags:    
  */
 ZEND_METHOD(QString, truncate){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
 		/* int pos,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->truncate((int) var_l_0);
+
+			obj->truncate((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1210,7 +1164,7 @@
 ZEND_METHOD(QString, toAscii){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			RETURN_BYTE[](obj->toAscii());
+			RETURN_STRING((char*) obj->toAscii(), 1);
 	}
 }
 
@@ -1234,23 +1188,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, right){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
 		/* int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->right((int) var_l_0);
+
+				QString return_object = (QString) obj->right((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -1262,26 +1218,33 @@
  *    flags:    
  */
 ZEND_METHOD(QString, push_front){
+		/* l public*/
 
+		/* char c,  */
+		/* o public*/
+
+		/* const QString& s,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
 
-		/* QChar c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+			obj->push_front((char) Z_LVAL_P(z_0));
+			RETURN_NULL();
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QChar") {
-				obj->push_front((QChar) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				obj->push_front((const QString&) obj_z_0);
 			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QString&") {
-				obj->push_front((const QString&) var_o_0);
-			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1295,7 +1258,7 @@
 ZEND_METHOD(QString, toUtf8){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			RETURN_BYTE[](obj->toUtf8());
+			RETURN_STRING((char*) obj->toUtf8(), 1);
 	}
 }
 
@@ -1306,19 +1269,21 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toULongLong){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 0
-		long var_bl_1;    // default: 10
+		/* int* ok, int base,  */
 
-		/* bool* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->toULongLong((bool*) var_bl_0 ,(int) var_bl_1);
+
+			obj->toULongLong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1330,43 +1295,51 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, indexOf){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 0
-
 		/* const QRegExp& , int from,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QRegExp&") {
-				RETURN_LONG(obj->indexOf((const QRegExp&) var_ol_0, (int) var_ol_1));
+
+			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
+				RETURN_LONG(obj->indexOf((const QRegExp&) obj_z_0, (int) Z_LVAL_P(z_1)));
 			}
+			}
 		}
 	}
+		/* oll public*/
 
+		/* const QString& s, int from, int cs,  */
+		/* lll public*/
+
+		/* char c, int from, int cs,  */
+
 	if (ZEND_NUM_ARGS() == 3){
-		/* oll */
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: 0
-		long var_oll_2;    // default: Qt::CaseSensitive
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-		/* QChar c, int from, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				RETURN_LONG(obj->indexOf((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (Qt::CaseSensitivity) Z_LVAL_P(z_2)));
+			}
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
 
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "QChar") {
-				RETURN_LONG(obj->indexOf((QChar) var_oll_0, (int) var_oll_1, (Qt::CaseSensitivity) var_oll_2));
-			}			
-			if(tmp_oll_0 == "const QString&") {
-				RETURN_LONG(obj->indexOf((const QString&) var_oll_0, (int) var_oll_4, (Qt::CaseSensitivity) var_oll_5));
+
+			RETURN_LONG(obj->indexOf((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(Qt::CaseSensitivity) Z_LVAL_P(z_2)));
 			}
 		}
 	}
@@ -1379,28 +1352,29 @@
  *    flags:    s
  */
 ZEND_METHOD(QString, fromRawData){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
-
 		/* const QChar* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QChar*") {
-				QString return_object = (QString) obj->fromRawData((const QChar*) var_ol_0, (int) var_ol_1);
+
+			if(Z_OBJCE_P(z_0)->name == "char") {
+					QString return_object = (QString) obj->fromRawData((const QChar*) obj_z_0, (int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -1426,23 +1400,25 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, left){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
 		/* int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->left((int) var_l_0);
+
+				QString return_object = (QString) obj->left((int) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -1454,26 +1430,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QString, fromLocal8Bit){
+		/* sl public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* sl */
-		char* var_sl_0;   // default: 
-		int len_sl_0;
-
-		long var_sl_1;    // default: -1
-
 		/* const char* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->fromLocal8Bit( (const char*) var_sl_0 ,(int) var_sl_1);
+
+				QString return_object = (QString) obj->fromLocal8Bit( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -1485,25 +1461,26 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, startsWith){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
-
 		/* const QString& s, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QString&") {
-				RETURN_BOOL(obj->startsWith((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
-			}			
-			if(tmp_ol_0 == "const QChar&") {
-				RETURN_BOOL(obj->startsWith((const QChar&) var_ol_0, (Qt::CaseSensitivity) var_ol_3));
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				RETURN_BOOL(obj->startsWith((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
 			}
+			if(Z_OBJCE_P(z_0)->name == "char") {
+				RETURN_BOOL(obj->startsWith((const QChar&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
+			}
+			}
 		}
 	}
 }
@@ -1515,77 +1492,68 @@
  *    flags:    
  */
 ZEND_METHOD(QString, remove){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* const QRegExp& rx,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRegExp&") {
-				QString & return_object = (QString &) obj->remove((const QRegExp&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
+					QString & return_object = (QString &) obj->remove((const QRegExp&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
+		/* const QString& s, int cs,  */
+		/* ll public*/
 
-		/* QChar c, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+		/* int i, int len,  */
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "QChar") {
-				QString & return_object = (QString &) obj->remove((QChar) var_ol_0, (Qt::CaseSensitivity) var_ol_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QString & return_object = (QString &) obj->remove((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ol_0 == "const QString&") {
-				QString & return_object = (QString &) obj->remove((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_3);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
 			}
-		}
-		/* ll */
-		long var_ll_4;    // default: 
-		long var_ll_5;    // default: 
-
-		/* int i, int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_4, &var_ll_5) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString & return_object = (QString &) obj->remove((int) var_ll_4 ,(int) var_ll_5);
+
+				QString & return_object = (QString &) obj->remove((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -1610,268 +1578,234 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, arg){
+		/* oo public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
-
 		/* const QString& a1, const QString& a2,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
-				QString return_object = (QString) obj->arg((const QString&) var_oo_0, (const QString&) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
+					QString return_object = (QString) obj->arg((const QString&) obj_z_0, (const QString&) obj_z_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
+		/* ooo public*/
 
-	if (ZEND_NUM_ARGS() == 3){
-		/* ooo */
-		zval* z_var_ooo_0;   // default: 
-		zval* z_var_ooo_1;   // default: 
-		zval* z_var_ooo_2;   // default: 
-
 		/* const QString& a1, const QString& a2, const QString& a3,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
+		/* olo public*/
+
+		/* const QString& a, int fieldWidth, const QChar& fillChar,  */
+		/* llo public*/
+
+		/* char a, int fieldWidth, const QChar& fillChar,  */
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
-			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
-			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
-			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
-			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
-			
-			if(tmp_ooo_0 == "const QString&" && tmp_ooo_1 == "const QString&" && tmp_ooo_2 == "const QString&") {
-				QString return_object = (QString) obj->arg((const QString&) var_ooo_0, (const QString&) var_ooo_1, (const QString&) var_ooo_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString" && Z_OBJCE_P(z_2)->name == "QString") {
+					QString return_object = (QString) obj->arg((const QString&) obj_z_0, (const QString&) obj_z_1, (const QString&) obj_z_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
-		}
-		/* olo */
-		zval* z_var_olo_3;   // default: 
-		long var_olo_4;    // default: 0
-		zval* z_var_olo_5;   // default: QLatin1Char(' ')
-
-		/* QChar a, int fieldWidth, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|o|", &z_var_olo_3, &var_olo_4, &z_var_olo_5) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_olo_3 = (QObject*) php_qt_fetch(z_var_olo_3);
-			QObject* var_olo_5 = (QObject*) php_qt_fetch(z_var_olo_5);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_olo_0(var_olo_3->metaObject()->className());
-			QString tmp_olo_1(var_olo_5->metaObject()->className());
-			
-			if(tmp_olo_0 == "QChar" && tmp_olo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((QChar) var_olo_3, (int) var_olo_4, (const QChar&) var_olo_5);
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_2)->name == "char") {
+					QString return_object = (QString) obj->arg((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (const QChar&) obj_z_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_olo_0 == "const QString&" && tmp_olo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((const QString&) var_olo_3, (int) var_olo_7, (const QChar&) var_olo_5);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
 			}
-		}
-		/* llo */
-		long var_llo_9;    // default: 
-		long var_llo_10;    // default: 0
-		zval* z_var_llo_11;   // default: QLatin1Char(' ')
-
-		/* char a, int fieldWidth, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|o|", &var_llo_9, &var_llo_10, &z_var_llo_11) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_llo_11 = (QObject*) php_qt_fetch(z_var_llo_11);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llo_0(var_llo_11->metaObject()->className());
-			
-			if(tmp_llo_0 == "const QChar&") {
-				QString return_object = (QString) obj->arg((char) var_llo_9, (int) var_llo_10, (const QChar&) var_llo_11);
+
+			if(Z_OBJCE_P(z_2)->name == "char") {
+					QString return_object = (QString) obj->arg((char) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QChar&) obj_z_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
+		/* lllo public*/
 
-	if (ZEND_NUM_ARGS() == 4){
-		/* lllo */
-		long var_lllo_0;    // default: 
-		long var_lllo_1;    // default: 0
-		long var_lllo_2;    // default: 10
-		zval* z_var_lllo_3;   // default: QLatin1Char(' ')
-
 		/* int a, int fieldWidth, int base, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|o|", &var_lllo_0, &var_lllo_1, &var_lllo_2, &z_var_lllo_3) == SUCCESS) {
+		/* ollo public*/
+
+		/* qlonglong a, int fieldwidth, int base, const QChar& fillChar,  */
+		/* oooo public*/
+
+		/* const QString& a1, const QString& a2, const QString& a3, const QString& a4,  */
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lllo_3 = (QObject*) php_qt_fetch(z_var_lllo_3);
+			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);
 
-			QString tmp_lllo_0(var_lllo_3->metaObject()->className());
-			
-			if(tmp_lllo_0 == "const QChar&") {
-				QString return_object = (QString) obj->arg((int) var_lllo_0, (int) var_lllo_1, (int) var_lllo_2, (const QChar&) var_lllo_3);
+
+			if(Z_OBJCE_P(z_3)->name == "char") {
+					QString return_object = (QString) obj->arg((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
-		}
-		/* ollo */
-		zval* z_var_ollo_4;   // default: 
-		long var_ollo_5;    // default: 0
-		long var_ollo_6;    // default: 10
-		zval* z_var_ollo_7;   // default: QLatin1Char(' ')
-
-		/* qlonglong a, int fieldwidth, int base, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|o|", &z_var_ollo_4, &var_ollo_5, &var_ollo_6, &z_var_ollo_7) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ollo_4 = (QObject*) php_qt_fetch(z_var_ollo_4);
-			QObject* var_ollo_7 = (QObject*) php_qt_fetch(z_var_ollo_7);
+			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);
 
-			QString tmp_ollo_0(var_ollo_4->metaObject()->className());
-			QString tmp_ollo_1(var_ollo_7->metaObject()->className());
-			
-			if(tmp_ollo_0 == "qlonglong" && tmp_ollo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((qlonglong) var_ollo_4, (int) var_ollo_5, (int) var_ollo_6, (const QChar&) var_ollo_7);
+
+			if(Z_OBJCE_P(z_3)->name == "char") {
+					QString return_object = (QString) obj->arg((qlonglong) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ollo_0 == "qulonglong" && tmp_ollo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((qulonglong) var_ollo_4, (int) var_ollo_9, (int) var_ollo_10, (const QChar&) var_ollo_7);
+			}
+			if(Z_OBJCE_P(z_3)->name == "char") {
+					QString return_object = (QString) obj->arg((qulonglong) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ollo_0 == "long" && tmp_ollo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((long) var_ollo_4, (int) var_ollo_13, (int) var_ollo_14, (const QChar&) var_ollo_7);
+			}
+			if(Z_OBJCE_P(z_3)->name == "char") {
+					QString return_object = (QString) obj->arg((long) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ollo_0 == "ulong" && tmp_ollo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((ulong) var_ollo_4, (int) var_ollo_17, (int) var_ollo_18, (const QChar&) var_ollo_7);
+			}
+			if(Z_OBJCE_P(z_3)->name == "char") {
+					QString return_object = (QString) obj->arg((ulong) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ollo_0 == "short" && tmp_ollo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((short) var_ollo_4, (int) var_ollo_21, (int) var_ollo_22, (const QChar&) var_ollo_7);
+			}
+			if(Z_OBJCE_P(z_3)->name == "char") {
+					QString return_object = (QString) obj->arg((short) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ollo_0 == "ushort" && tmp_ollo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((ushort) var_ollo_4, (int) var_ollo_25, (int) var_ollo_26, (const QChar&) var_ollo_7);
+			}
+			if(Z_OBJCE_P(z_3)->name == "char") {
+					QString return_object = (QString) obj->arg((ushort) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
-		}
-		/* oooo */
-		zval* z_var_oooo_28;   // default: 
-		zval* z_var_oooo_29;   // default: 
-		zval* z_var_oooo_30;   // default: 
-		zval* z_var_oooo_31;   // default: 
-
-		/* const QString& a1, const QString& a2, const QString& a3, const QString& a4,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &z_var_oooo_28, &z_var_oooo_29, &z_var_oooo_30, &z_var_oooo_31) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oooo_28 = (QObject*) php_qt_fetch(z_var_oooo_28);
-			QObject* var_oooo_29 = (QObject*) php_qt_fetch(z_var_oooo_29);
-			QObject* var_oooo_30 = (QObject*) php_qt_fetch(z_var_oooo_30);
-			QObject* var_oooo_31 = (QObject*) php_qt_fetch(z_var_oooo_31);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
+			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);
 
-			QString tmp_oooo_0(var_oooo_28->metaObject()->className());
-			QString tmp_oooo_1(var_oooo_29->metaObject()->className());
-			QString tmp_oooo_2(var_oooo_30->metaObject()->className());
-			QString tmp_oooo_3(var_oooo_31->metaObject()->className());
-			
-			if(tmp_oooo_0 == "const QString&" && tmp_oooo_1 == "const QString&" && tmp_oooo_2 == "const QString&" && tmp_oooo_3 == "const QString&") {
-				QString return_object = (QString) obj->arg((const QString&) var_oooo_28, (const QString&) var_oooo_29, (const QString&) var_oooo_30, (const QString&) var_oooo_31);
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString" && Z_OBJCE_P(z_2)->name == "QString" && Z_OBJCE_P(z_3)->name == "QString") {
+					QString return_object = (QString) obj->arg((const QString&) obj_z_0, (const QString&) obj_z_1, (const QString&) obj_z_2, (const QString&) obj_z_3);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
+		/* llllo public*/
 
-	if (ZEND_NUM_ARGS() == 5){
-		/* olllo */
-		zval* z_var_olllo_0;   // default: 
-		long var_olllo_1;    // default: 0
-		long var_olllo_2;    // default: 'g'
-		long var_olllo_3;    // default: -1
-		zval* z_var_olllo_4;   // default: QLatin1Char(' ')
-
 		/* double a, int fieldWidth, char fmt, int prec, const QChar& fillChar,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|l|o|", &z_var_olllo_0, &var_olllo_1, &var_olllo_2, &var_olllo_3, &z_var_olllo_4) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 5){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		zval *z_4; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_olllo_0 = (QObject*) php_qt_fetch(z_var_olllo_0);
-			QObject* var_olllo_4 = (QObject*) php_qt_fetch(z_var_olllo_4);
+			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);
 
-			QString tmp_olllo_0(var_olllo_0->metaObject()->className());
-			QString tmp_olllo_1(var_olllo_4->metaObject()->className());
-			
-			if(tmp_olllo_0 == "double" && tmp_olllo_1 == "const QChar&") {
-				QString return_object = (QString) obj->arg((double) var_olllo_0, (int) var_olllo_1, (char) var_olllo_2, (int) var_olllo_3, (const QChar&) var_olllo_4);
+
+			if(Z_OBJCE_P(z_4)->name == "char") {
+					QString return_object = (QString) obj->arg((double) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (char) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QChar&) obj_z_4);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -1883,30 +1817,29 @@
  *    flags:    
  */
 ZEND_METHOD(QString, vsprintf){
+		/* so public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* so */
-		char* var_so_0;   // default: 
-		int len_so_0;
-
-		zval* z_var_so_1;   // default: 
-
 		/* const char* format, va_list ap,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_so_0, len_so_0, &z_var_so_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_so_1 = (QObject*) php_qt_fetch(z_var_so_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_so_0(var_so_1->metaObject()->className());
-			
-			if(tmp_so_0 == "va_list") {
-				QString & return_object = (QString &) obj->vsprintf((const char*) var_so_0, (va_list) var_so_1);
+
+			if(obj_z_1->inherits("va_list")) {
+					QString & return_object = (QString &) obj->vsprintf((const char*) Z_LVAL_P(z_0), (va_list) obj_z_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -1918,17 +1851,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toFloat){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 0
+		/* int* ok,  */
 
-		/* bool* ok,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_FLOAT(obj->toFloat((bool*) var_b_0));
+
+			RETURN_FLOAT(obj->toFloat((bool*) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -1953,18 +1888,20 @@
  *    flags:    
  */
 ZEND_METHOD(QString, reserve){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
 		/* int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->reserve((int) var_l_0);
+
+			obj->reserve((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1976,18 +1913,20 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toULong){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 0
-		long var_bl_1;    // default: 10
+		/* int* ok, int base,  */
 
-		/* bool* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_ULONG(obj->toULong((bool*) var_bl_0 ,(int) var_bl_1));
+
+			RETURN_ULONG(obj->toULong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -1999,18 +1938,20 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toShort){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 0
-		long var_bl_1;    // default: 10
+		/* int* ok, int base,  */
 
-		/* bool* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_SHORT(obj->toShort((bool*) var_bl_0 ,(int) var_bl_1));
+
+			RETURN_SHORT(obj->toShort((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -2022,57 +1963,55 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, split){
+		/* oo public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: KeepEmptyParts
+		/* const QRegExp& sep, QString::SplitBehavior behavior,  */
 
-		/* const QRegExp& sep, SplitBehavior behavior,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QRegExp&" && tmp_oo_1 == "SplitBehavior") {
-				QStringList return_object = (QStringList) obj->split((const QRegExp&) var_oo_0, (SplitBehavior) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
+					QStringList return_object = (QStringList) obj->split((const QRegExp&) obj_z_0, (QString::SplitBehavior) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
+		/* ool public*/
 
-	if (ZEND_NUM_ARGS() == 3){
-		/* ool */
-		zval* z_var_ool_0;   // default: 
-		zval* z_var_ool_1;   // default: KeepEmptyParts
-		long var_ool_2;    // default: Qt::CaseSensitive
+		/* const QString& sep, QString::SplitBehavior behavior, int cs,  */
 
-		/* const QString& sep, SplitBehavior behavior, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|l|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
-			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ool_0(var_ool_0->metaObject()->className());
-			QString tmp_ool_1(var_ool_1->metaObject()->className());
-			
-			if(tmp_ool_0 == "const QString&" && tmp_ool_1 == "SplitBehavior") {
-				QStringList return_object = (QStringList) obj->split((const QString&) var_ool_0, (SplitBehavior) var_ool_1, (Qt::CaseSensitivity) var_ool_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QStringList return_object = (QStringList) obj->split((const QString&) obj_z_0, (QString::SplitBehavior) Z_LVAL_P(z_1), (Qt::CaseSensitivity) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -2084,28 +2023,29 @@
  *    flags:    
  */
 ZEND_METHOD(QString, setUnicode){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: 
-
 		/* const QChar* unicode, int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QChar*") {
-				QString & return_object = (QString &) obj->setUnicode((const QChar*) var_ol_0, (int) var_ol_1);
+
+			if(Z_OBJCE_P(z_0)->name == "char") {
+					QString & return_object = (QString &) obj->setUnicode((const QChar*) obj_z_0, (int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -2117,26 +2057,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QString, fromLatin1){
+		/* sl public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* sl */
-		char* var_sl_0;   // default: 
-		int len_sl_0;
-
-		long var_sl_1;    // default: -1
-
 		/* const char* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->fromLatin1( (const char*) var_sl_0 ,(int) var_sl_1);
+
+				QString return_object = (QString) obj->fromLatin1( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -2150,11 +2090,11 @@
 ZEND_METHOD(QString, data){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QChar * return_object = (QChar *) obj->data();
+				QChar * return_object = (QChar *) obj->data();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -2169,7 +2109,7 @@
 ZEND_METHOD(QString, toLatin1){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			RETURN_BYTE[](obj->toLatin1());
+			RETURN_STRING((char*) obj->toLatin1(), 1);
 	}
 }
 
@@ -2193,44 +2133,52 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, contains){
+		/* o public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
 		/* const QRegExp& rx,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRegExp&") {
-				obj->contains((const QRegExp&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
+				obj->contains((const QRegExp&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
+		/* ol public*/
 
+		/* const QString& s, int cs,  */
+		/* ll public*/
+
+		/* char c, int cs,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: Qt::CaseSensitive
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-		/* QChar c, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				obj->contains((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1));
+			RETURN_NULL();
+			}
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "QChar") {
-				obj->contains((QChar) var_ol_0, (Qt::CaseSensitivity) var_ol_1);
+
+			obj->contains((char) Z_LVAL_P(z_0) ,(Qt::CaseSensitivity) Z_LVAL_P(z_1));
 			RETURN_NULL();
-			}			
-			if(tmp_ol_0 == "const QString&") {
-				obj->contains((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_3);
-			RETURN_NULL();
 			}
 		}
 	}
@@ -2243,18 +2191,20 @@
  *    flags:    
  */
 ZEND_METHOD(QString, resize){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
 		/* int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->resize((int) var_l_0);
+
+			obj->resize((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2266,132 +2216,135 @@
  *    flags:    
  */
 ZEND_METHOD(QString, replace){
+		/* oo public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 
-
 		/* const QRegExp& rx, const QString& after,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QRegExp&" && tmp_oo_1 == "const QString&") {
-				QString & return_object = (QString &) obj->replace((const QRegExp&) var_oo_0, (const QString&) var_oo_1);
+
+			if(Z_OBJCE_P(z_0)->name == "QRegExp" && Z_OBJCE_P(z_1)->name == "QString") {
+					QString & return_object = (QString &) obj->replace((const QRegExp&) obj_z_0, (const QString&) obj_z_1);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
+		/* ool public*/
 
-	if (ZEND_NUM_ARGS() == 3){
-		/* ool */
-		zval* z_var_ool_0;   // default: 
-		zval* z_var_ool_1;   // default: 
-		long var_ool_2;    // default: Qt::CaseSensitive
+		/* const QString& before, const QString& after, int cs,  */
+		/* lol public*/
 
-		/* QChar before, QChar after, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
+		/* char c, const QString& after, int cs,  */
+		/* lll public*/
+
+		/* int i, int len, char after,  */
+		/* llo public*/
+
+		/* int i, int len, const QString& after,  */
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
-			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_ool_0(var_ool_0->metaObject()->className());
-			QString tmp_ool_1(var_ool_1->metaObject()->className());
-			
-			if(tmp_ool_0 == "QChar" && tmp_ool_1 == "QChar") {
-				QString & return_object = (QString &) obj->replace((QChar) var_ool_0, (QChar) var_ool_1, (Qt::CaseSensitivity) var_ool_2);
+
+			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
+					QString & return_object = (QString &) obj->replace((const QString&) obj_z_0, (const QString&) obj_z_1, (Qt::CaseSensitivity) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ool_0 == "QChar" && tmp_ool_1 == "const QString&") {
-				QString & return_object = (QString &) obj->replace((QChar) var_ool_0, (const QString&) var_ool_1, (Qt::CaseSensitivity) var_ool_5);
+			}
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+
+
+			if(Z_OBJCE_P(z_1)->name == "QString") {
+					QString & return_object = (QString &) obj->replace((char) Z_LVAL_P(z_0), (const QString&) obj_z_1, (Qt::CaseSensitivity) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_ool_0 == "const QString&" && tmp_ool_1 == "const QString&") {
-				QString & return_object = (QString &) obj->replace((const QString&) var_ool_0, (const QString&) var_ool_1, (Qt::CaseSensitivity) var_ool_8);
+			}
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+
+
+				QString & return_object = (QString &) obj->replace((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(char) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
-		}
-		/* llo */
-		long var_llo_9;    // default: 
-		long var_llo_10;    // default: 
-		zval* z_var_llo_11;   // default: 
-
-		/* int i, int len, QChar after,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_9, &var_llo_10, &z_var_llo_11) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_llo_11 = (QObject*) php_qt_fetch(z_var_llo_11);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llo_0(var_llo_11->metaObject()->className());
-			
-			if(tmp_llo_0 == "QChar") {
-				QString & return_object = (QString &) obj->replace((int) var_llo_9, (int) var_llo_10, (QChar) var_llo_11);
+
+			if(Z_OBJCE_P(z_2)->name == "QString") {
+					QString & return_object = (QString &) obj->replace((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QString&) obj_z_2);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_llo_0 == "const QString&") {
-				QString & return_object = (QString &) obj->replace((int) var_llo_12, (int) var_llo_13, (const QString&) var_llo_11);
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
 			}
+			}
 		}
 	}
+		/* llol public*/
 
-	if (ZEND_NUM_ARGS() == 4){
-		/* llol */
-		long var_llol_0;    // default: 
-		long var_llol_1;    // default: 
-		zval* z_var_llol_2;   // default: 
-		long var_llol_3;    // default: 
-
 		/* int i, int len, const QChar* s, int slen,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol", &var_llol_0, &var_llol_1, &z_var_llol_2, &var_llol_3) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 4){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		zval *z_3; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_llol_2 = (QObject*) php_qt_fetch(z_var_llol_2);
+			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
 
-			QString tmp_llol_0(var_llol_2->metaObject()->className());
-			
-			if(tmp_llol_0 == "const QChar*") {
-				QString & return_object = (QString &) obj->replace((int) var_llol_0, (int) var_llol_1, (const QChar*) var_llol_2, (int) var_llol_3);
+
+			if(Z_OBJCE_P(z_2)->name == "char") {
+					QString & return_object = (QString &) obj->replace((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QChar*) obj_z_2, (int) Z_LVAL_P(z_3));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -2403,26 +2356,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QString, fromUtf8){
+		/* sl public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* sl */
-		char* var_sl_0;   // default: 
-		int len_sl_0;
-
-		long var_sl_1;    // default: -1
-
 		/* const char* , int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->fromUtf8( (const char*) var_sl_0 ,(int) var_sl_1);
+
+				QString return_object = (QString) obj->fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -2434,18 +2387,20 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toLong){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 0
-		long var_bl_1;    // default: 10
+		/* int* ok, int base,  */
 
-		/* bool* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->toLong((bool*) var_bl_0 ,(int) var_bl_1));
+
+			RETURN_LONG(obj->toLong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }
@@ -2471,63 +2426,67 @@
  *    flags:    
  */
 ZEND_METHOD(QString, append){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
+		/* char c,  */
+		/* s public*/
 
-
 		/* const char* s,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
+		/* o public*/
+
+		/* const QString& s,  */
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString & return_object = (QString &) obj->append( (const char*) var_s_0);
+
+				QString & return_object = (QString &) obj->append((char) Z_LVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-		}
-		/* o */
-		zval* z_var_o_1;   // default: 
-
-		/* QChar c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
+			}
+			if(Z_TYPE_P(z_0) == IS_STRING){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);
 
-			QString tmp_o_0(var_o_1->metaObject()->className());
-			
-			if(tmp_o_0 == "QChar") {
-				QString & return_object = (QString &) obj->append((QChar) var_o_1);
+
+				QString & return_object = (QString &) obj->append( (const char*) Z_STRVAL_P(z_0));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_o_0 == "const QString&") {
-				QString & return_object = (QString &) obj->append((const QString&) var_o_1);
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+					QString & return_object = (QString &) obj->append((const QString&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
-			}			
-			if(tmp_o_0 == "const QByteArray&") {
-				QString & return_object = (QString &) obj->append((const QByteArray&) var_o_1);
+			}
+			if(Z_OBJCE_P(z_0)->name == "QByteArray") {
+					QString & return_object = (QString &) obj->append((const QByteArray&) obj_z_0);
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
+			}
 		}
 	}
 }
@@ -2539,24 +2498,26 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, mid){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: -1
-
 		/* int i, int len,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->mid((int) var_ll_0 ,(int) var_ll_1);
+
+				QString return_object = (QString) obj->mid((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -2568,17 +2529,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toDouble){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 0
+		/* int* ok,  */
 
-		/* bool* ok,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|", &var_b_0) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_DOUBLE(obj->toDouble((bool*) var_b_0));
+
+			RETURN_DOUBLE(obj->toDouble((bool*) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -2590,25 +2553,23 @@
  *    flags:    
  */
 ZEND_METHOD(QString, fill){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: -1
+		/* char c, int size,  */
 
-		/* QChar c, int size,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "QChar") {
-				QString & return_object = (QString &) obj->fill((QChar) var_ol_0, (int) var_ol_1);
+
+				QString & return_object = (QString &) obj->fill((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -2623,26 +2584,24 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, rightJustified){
+		/* lll public*/
 
-	if (ZEND_NUM_ARGS() == 3){
-		/* lob */
-		long var_lob_0;    // default: 
-		zval* z_var_lob_1;   // default: QLatin1Char(' ')
-		bool var_lob_2;   // _default: false
+		/* int width, char fill, int trunc,  */
 
-		/* int width, QChar fill, bool trunc,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|b|", &var_lob_0, &z_var_lob_1, &var_lob_2) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_lob_1 = (QObject*) php_qt_fetch(z_var_lob_1);
 
-			QString tmp_lob_0(var_lob_1->metaObject()->className());
-			
-			if(tmp_lob_0 == "QChar") {
-				QString return_object = (QString) obj->rightJustified((int) var_lob_0, (QChar) var_lob_1, (bool) var_lob_2);
+
+				QString return_object = (QString) obj->rightJustified((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(bool) Z_LVAL_P(z_2));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 			}
@@ -2659,11 +2618,11 @@
 ZEND_METHOD(QString, toLower){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->toLower();
+				QString return_object = (QString) obj->toLower();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -2676,43 +2635,51 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, lastIndexOf){
+		/* ol public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* ol */
-		zval* z_var_ol_0;   // default: 
-		long var_ol_1;    // default: -1
-
 		/* const QRegExp& , int from,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_ol_0(var_ol_0->metaObject()->className());
-			
-			if(tmp_ol_0 == "const QRegExp&") {
-				RETURN_LONG(obj->lastIndexOf((const QRegExp&) var_ol_0, (int) var_ol_1));
+
+			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
+				RETURN_LONG(obj->lastIndexOf((const QRegExp&) obj_z_0, (int) Z_LVAL_P(z_1)));
 			}
+			}
 		}
 	}
+		/* oll public*/
 
+		/* const QString& s, int from, int cs,  */
+		/* lll public*/
+
+		/* char c, int from, int cs,  */
+
 	if (ZEND_NUM_ARGS() == 3){
-		/* oll */
-		zval* z_var_oll_0;   // default: 
-		long var_oll_1;    // default: -1
-		long var_oll_2;    // default: Qt::CaseSensitive
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-		/* QChar c, int from, int cs,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				RETURN_LONG(obj->lastIndexOf((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (Qt::CaseSensitivity) Z_LVAL_P(z_2)));
+			}
+			}
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);
 
-			QString tmp_oll_0(var_oll_0->metaObject()->className());
-			
-			if(tmp_oll_0 == "QChar") {
-				RETURN_LONG(obj->lastIndexOf((QChar) var_oll_0, (int) var_oll_1, (Qt::CaseSensitivity) var_oll_2));
-			}			
-			if(tmp_oll_0 == "const QString&") {
-				RETURN_LONG(obj->lastIndexOf((const QString&) var_oll_0, (int) var_oll_4, (Qt::CaseSensitivity) var_oll_5));
+
+			RETURN_LONG(obj->lastIndexOf((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(Qt::CaseSensitivity) Z_LVAL_P(z_2)));
 			}
 		}
 	}
@@ -2727,11 +2694,11 @@
 ZEND_METHOD(QString, unicode){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			const QChar * return_object = (const QChar *) obj->unicode();
+				const QChar * return_object = (const QChar *) obj->unicode();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QString_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -2744,18 +2711,20 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, at){
+		/* l public*/
 
-	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
 		/* int i,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			obj->at((int) var_l_0);
+
+			obj->at((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -2780,26 +2749,33 @@
  *    flags:    
  */
 ZEND_METHOD(QString, push_back){
+		/* l public*/
 
+		/* char c,  */
+		/* o public*/
+
+		/* const QString& s,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
+			QString *obj = (QString*) PHP_QT_FETCH();
 
-		/* QChar c,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+			obj->push_back((char) Z_LVAL_P(z_0));
+			RETURN_NULL();
+			}
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QChar") {
-				obj->push_back((QChar) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QString") {
+				obj->push_back((const QString&) obj_z_0);
 			RETURN_NULL();
-			}			
-			if(tmp_o_0 == "const QString&") {
-				obj->push_back((const QString&) var_o_0);
-			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -2840,7 +2816,7 @@
 ZEND_METHOD(QString, toLocal8Bit){
 	if (ZEND_NUM_ARGS() == 0){
 			QString *obj = (QString*) PHP_QT_FETCH();
-			RETURN_BYTE[](obj->toLocal8Bit());
+			RETURN_STRING((char*) obj->toLocal8Bit(), 1);
 	}
 }
 
@@ -2851,18 +2827,20 @@
  *    flags:    c
  */
 ZEND_METHOD(QString, toInt){
+		/* ll public*/
 
-	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 0
-		long var_bl_1;    // default: 10
+		/* int* ok, int base,  */
 
-		/* bool* ok, int base,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QString *obj = (QString*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->toInt((bool*) var_bl_0 ,(int) var_bl_1));
+
+			RETURN_LONG(obj->toInt((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qtabletevent.cpp
===================================================================
--- trunk/qt/classes/qtabletevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qtabletevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTabletEvent.cpp - QTabletEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -84,7 +84,7 @@
 ZEND_METHOD(QTabletEvent, hiResGlobalPos){
 	if (ZEND_NUM_ARGS() == 0){
 			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
-			const QPointF & return_object = (const QPointF &) obj->hiResGlobalPos();
+				const QPointF & return_object = (const QPointF &) obj->hiResGlobalPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTabletEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -142,7 +142,7 @@
 ZEND_METHOD(QTabletEvent, globalPos){
 	if (ZEND_NUM_ARGS() == 0){
 			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->globalPos();
+				const QPoint & return_object = (const QPoint &) obj->globalPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTabletEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -201,7 +201,7 @@
 ZEND_METHOD(QTabletEvent, pos){
 	if (ZEND_NUM_ARGS() == 0){
 			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->pos();
+				const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTabletEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qtimer.cpp
===================================================================
--- trunk/qt/classes/qtimer.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qtimer.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QTimer.cpp - QTimer PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -38,28 +38,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QTimer, tr){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ss public*/
-		char* var_ss_0;   // default: 
-		int len_ss_0;
 
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
-
-
 		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTimer_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -71,9 +69,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QTimer, qt_invoke){
-
-	if (ZEND_NUM_ARGS() == 2){
-	}
 }
 
 /*********************************
@@ -92,18 +87,20 @@
  *    flags:    
  */
 ZEND_METHOD(QTimer, setInterval){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int msec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
-			
-			obj->setInterval((int) var_l_0);
+
+			obj->setInterval((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -137,26 +134,25 @@
  *    flags:    s
  */
 ZEND_METHOD(QTimer, singleShot){
-
-	if (ZEND_NUM_ARGS() == 3){
 		/* los public*/
-		long var_los_0;    // default: 
-		zval* z_var_los_1;   // default: 
-		char* var_los_2;   // default: 
-		int len_los_2;
 
-
 		/* int msec, qt_QObject* receiver, const char* member,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"los", &var_los_0, &z_var_los_1, &var_los_2, len_los_2) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 3){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		zval *z_2; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_STRING){
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-			QObject* var_los_1 = (QObject*) php_qt_fetch(z_var_los_1);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-			QString tmp_los_0(var_los_1->metaObject()->className());
-			
-			if(tmp_los_0 == "QObject") {
-				obj->singleShot((int) var_los_0, (QObject*) var_los_1, (const char*) var_los_2);
+
+			if(obj_z_1->inherits("QObject")) {
+				obj->singleShot((int) Z_LVAL_P(z_0), (QObject*) obj_z_1, (const char*) Z_LVAL_P(z_2));
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -168,9 +164,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QTimer, qt_cast){
-
-	if (ZEND_NUM_ARGS() == 1){
-	}
 }
 
 /*********************************
@@ -182,7 +175,7 @@
 ZEND_METHOD(QTimer, metaObject){
 	if (ZEND_NUM_ARGS() == 0){
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
-			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
+				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTimer_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -226,22 +219,23 @@
  *    flags:    t
  */
 ZEND_METHOD(QTimer, __construct){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 0
 
 		/* qt_QObject* parent,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QObject") {
-				QTimer *QTimer_ptr = new QTimer((QObject*) var_o_0);
-			PHP_QT_REGISTER(QTimer_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(obj_z_0->inherits("QObject")) {
+				QTimer *QTimer_ptr = new QTimer((QObject*) obj_z_0);
+				PHP_QT_REGISTER(QTimer_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -253,9 +247,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QTimer, qt_emit){
-
-	if (ZEND_NUM_ARGS() == 2){
-	}
 }
 
 /*********************************
@@ -278,18 +269,20 @@
  *    flags:    
  */
 ZEND_METHOD(QTimer, setSingleShot){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int singleShot,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
-			
-			obj->setSingleShot((bool) var_l_0);
+
+			obj->setSingleShot((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -310,28 +303,26 @@
  *    flags:    s
  */
 ZEND_METHOD(QTimer, trUtf8){
-
-	if (ZEND_NUM_ARGS() == 2){
 		/* ss public*/
-		char* var_ss_0;   // default: 
-		int len_ss_0;
 
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
-
-
 		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 2){
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
-			
-			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
+
+				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QTimer_ce_ptr);     
 				zend_rsrc_list_entry le;                            
 				le.ptr = (void*) &return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -343,9 +334,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QTimer, qt_property){
-
-	if (ZEND_NUM_ARGS() == 3){
-	}
 }
 
 /*********************************
@@ -373,18 +361,20 @@
 			obj->start();
 			RETURN_NULL();
 	}
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public_slots*/
-		long var_l_0;    // default: 
 
 		/* int msec,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QTimer *obj = (QTimer*) PHP_QT_FETCH();
 
-			
-			obj->start((int) var_l_0);
+
+			obj->start((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }

Modified: trunk/qt/classes/qtoolbarchangeevent.cpp
===================================================================
--- trunk/qt/classes/qtoolbarchangeevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qtoolbarchangeevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QToolBarChangeEvent.cpp - QToolBarChangeEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qwhatsthisclickedevent.cpp
===================================================================
--- trunk/qt/classes/qwhatsthisclickedevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qwhatsthisclickedevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWhatsThisClickedEvent.cpp - QWhatsThisClickedEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QWhatsThisClickedEvent, href){
 	if (ZEND_NUM_ARGS() == 0){
 			QWhatsThisClickedEvent *obj = (QWhatsThisClickedEvent*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->href();
+				QString return_object = (QString) obj->href();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWhatsThisClickedEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qwheelevent.cpp
===================================================================
--- trunk/qt/classes/qwheelevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qwheelevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWheelEvent.cpp - QWheelEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -79,7 +79,7 @@
 ZEND_METHOD(QWheelEvent, globalPos){
 	if (ZEND_NUM_ARGS() == 0){
 			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->globalPos();
+				const QPoint & return_object = (const QPoint &) obj->globalPos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWheelEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -137,7 +137,7 @@
 ZEND_METHOD(QWheelEvent, pos){
 	if (ZEND_NUM_ARGS() == 0){
 			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
-			const QPoint & return_object = (const QPoint &) obj->pos();
+				const QPoint & return_object = (const QPoint &) obj->pos();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWheelEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -156,7 +156,7 @@
 ZEND_METHOD(QWheelEvent, buttons){
 	if (ZEND_NUM_ARGS() == 0){
 			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
-			Qt::MouseButtons return_object = (Qt::MouseButtons) obj->buttons();
+				Qt::MouseButtons return_object = (Qt::MouseButtons) obj->buttons();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWheelEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qwidgetdata.cpp
===================================================================
--- trunk/qt/classes/qwidgetdata.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qwidgetdata.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWidgetData.cpp - QWidgetData PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 

Modified: trunk/qt/classes/qwidgetitem.cpp
===================================================================
--- trunk/qt/classes/qwidgetitem.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qwidgetitem.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWidgetItem.cpp - QWidgetItem PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -64,22 +64,23 @@
  *    flags:    
  */
 ZEND_METHOD(QWidgetItem, setGeometry){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* const QRect& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QRect") {
-				obj->setGeometry((const QRect&) var_o_0);
+
+			if(Z_OBJCE_P(z_0)->name == "QRect") {
+				obj->setGeometry((const QRect&) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -91,22 +92,23 @@
  *    flags:    t
  */
 ZEND_METHOD(QWidgetItem, __construct){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* o public*/
-		zval* z_var_o_0;   // default: 
 
 		/* qt_QWidget* w,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QWidget") {
-				QWidgetItem *QWidgetItem_ptr = new QWidgetItem((QWidget*) var_o_0);
-			PHP_QT_REGISTER(QWidgetItem_ptr);
-			RETURN_NULL();
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+
+
+			if(obj_z_0->inherits("QWidget")) {
+				QWidgetItem *QWidgetItem_ptr = new QWidgetItem((QWidget*) obj_z_0);
+				PHP_QT_REGISTER(QWidgetItem_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -120,7 +122,7 @@
 ZEND_METHOD(QWidgetItem, minimumSize){
 	if (ZEND_NUM_ARGS() == 0){
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->minimumSize();
+				QSize return_object = (QSize) obj->minimumSize();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -139,7 +141,7 @@
 ZEND_METHOD(QWidgetItem, sizeHint){
 	if (ZEND_NUM_ARGS() == 0){
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->sizeHint();
+				QSize return_object = (QSize) obj->sizeHint();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -158,7 +160,7 @@
 ZEND_METHOD(QWidgetItem, maximumSize){
 	if (ZEND_NUM_ARGS() == 0){
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->maximumSize();
+				QSize return_object = (QSize) obj->maximumSize();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -175,17 +177,19 @@
  *    flags:    c
  */
 ZEND_METHOD(QWidgetItem, heightForWidth){
-
-	if (ZEND_NUM_ARGS() == 1){
 		/* l public*/
-		long var_l_0;    // default: 
 
 		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+
+	if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->heightForWidth((int) var_l_0));
+
+			RETURN_LONG(obj->heightForWidth((int) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -199,7 +203,7 @@
 ZEND_METHOD(QWidgetItem, widget){
 	if (ZEND_NUM_ARGS() == 0){
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
-			QWidget * return_object = (QWidget *) obj->widget();
+				QWidget * return_object = (QWidget *) obj->widget();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -218,7 +222,7 @@
 ZEND_METHOD(QWidgetItem, expandingDirections){
 	if (ZEND_NUM_ARGS() == 0){
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
-			Qt::Orientations return_object = (Qt::Orientations) obj->expandingDirections();
+				Qt::Orientations return_object = (Qt::Orientations) obj->expandingDirections();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            
@@ -237,7 +241,7 @@
 ZEND_METHOD(QWidgetItem, geometry){
 	if (ZEND_NUM_ARGS() == 0){
 			QWidgetItem *obj = (QWidgetItem*) PHP_QT_FETCH();
-			QRect return_object = (QRect) obj->geometry();
+				QRect return_object = (QRect) obj->geometry();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWidgetItem_ce_ptr);     
 				zend_rsrc_list_entry le;                            

Modified: trunk/qt/classes/qwindowstatechangeevent.cpp
===================================================================
--- trunk/qt/classes/qwindowstatechangeevent.cpp	2006-01-22 20:29:43 UTC (rev 203)
+++ trunk/qt/classes/qwindowstatechangeevent.cpp	2006-01-22 20:31:14 UTC (rev 204)
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWindowStateChangeEvent.cpp - QWindowStateChangeEvent PHP implementation.
- * begin           : Sun Jan 15 17:39:22 2006
+ * begin           : Sun Jan 22 19:46:39 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
@@ -40,7 +40,7 @@
 ZEND_METHOD(QWindowStateChangeEvent, oldState){
 	if (ZEND_NUM_ARGS() == 0){
 			QWindowStateChangeEvent *obj = (QWindowStateChangeEvent*) PHP_QT_FETCH();
-			Qt::WindowStates return_object = (Qt::WindowStates) obj->oldState();
+				Qt::WindowStates return_object = (Qt::WindowStates) obj->oldState();
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QWindowStateChangeEvent_ce_ptr);     
 				zend_rsrc_list_entry le;                            



From tm243 at berlios.de  Sun Jan 22 22:26:11 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 22 Jan 2006 22:26:11 +0100
Subject: [Php-qt-svn] r206 - trunk/qt/classes
Message-ID: <200601222126.k0MLQBrP025483@sheep.berlios.de>

Author: tm243
Date: 2006-01-22 22:26:11 +0100 (Sun, 22 Jan 2006)
New Revision: 206

Modified:
   trunk/qt/classes/qpushbutton.cpp
Log:
added support for php strings.

Modified: trunk/qt/classes/qpushbutton.cpp
===================================================================
--- trunk/qt/classes/qpushbutton.cpp	2006-01-22 20:50:00 UTC (rev 205)
+++ trunk/qt/classes/qpushbutton.cpp	2006-01-22 21:26:11 UTC (rev 206)
@@ -289,6 +289,10 @@
 				PHP_QT_REGISTER(QPushButton_ptr);
 				RETURN_NULL();
 			}
+			} else if(Z_TYPE_P(z_0) == IS_STRING) {
+				QPushButton *QPushButton_ptr = new QPushButton((const char*) Z_STRVAL_P(z_0));
+				PHP_QT_REGISTER(QPushButton_ptr);
+				RETURN_NULL();
 			}
 		}
 	}
@@ -304,13 +308,21 @@
 			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
 
-
-			if(Z_OBJCE_P(z_0)->name == "QString" && obj_z_1->inherits("QWidget")) {
+			if(!(strcmp(Z_OBJCE_P(z_0)->name,"QString")) && obj_z_1->inherits("QWidget")) {
 				QPushButton *QPushButton_ptr = new QPushButton((const QString&) obj_z_0, (QWidget*) obj_z_1);
 				PHP_QT_REGISTER(QPushButton_ptr);
 				RETURN_NULL();
+			} 
+			} else if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_OBJECT){
+
+			  QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+
+			if(obj_z_1->inherits("QWidget")) {
+				QPushButton *QPushButton_ptr = new QPushButton((const char*) Z_STRVAL_P(z_0), (QWidget*) obj_z_1);
+				PHP_QT_REGISTER(QPushButton_ptr);
+				RETURN_NULL();
+			} 
 			}
-			}
 		}
 	}
 		/* ooo public*/



From tm243 at berlios.de  Mon Jan 23 00:33:18 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 23 Jan 2006 00:33:18 +0100
Subject: [Php-qt-svn] r207 - trunk
Message-ID: <200601222333.k0MNXIEQ027227@sheep.berlios.de>

Author: tm243
Date: 2006-01-23 00:33:17 +0100 (Mon, 23 Jan 2006)
New Revision: 207

Modified:
   trunk/config.m4
Log:
qpushbutton, qlcdnumber, qabstractbutton moved.

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-01-22 21:26:11 UTC (rev 206)
+++ trunk/config.m4	2006-01-22 23:33:17 UTC (rev 207)
@@ -86,14 +86,11 @@
   PHP_NEW_EXTENSION(php_qt, \
   qt/main_window/qapplication.cpp \
   qt/main_window/qcoreapplication.cpp \
-  qt/abstract_widgets/qabstractbutton.cpp \
   qt/abstract_widgets/qwidget.cpp \
   qt/abstract_widgets/qabstractslider.cpp \
   qt/abstract_widgets/QFrame.cpp \
   qt/basic_widgets/qlineedit.cpp \
-  qt/basic_widgets/qpushbutton.cpp \
   qt/basic_widgets/qslider.cpp \
-  qt/basic_widgets/QLCDNumber.cpp \
   qt/layout_management/qlayoutitem.cpp \
   qt/layout_management/qlayout.cpp \
   qt/layout_management/qboxlayout.cpp \
@@ -105,6 +102,7 @@
   qt/classes/qchar.cpp \
   qt/event/qevent.cpp \
 	qt/classes/qactionevent.cpp \
+	qt/classes/qabstractbutton.cpp \
 	qt/classes/qcharref.cpp \
 	qt/classes/qclipboardevent.cpp \
 	qt/classes/qcloseevent.cpp \
@@ -129,12 +127,14 @@
 	qt/classes/qkeyevent.cpp \
 	qt/classes/qlabel.cpp \
 	qt/classes/qlatin1char.cpp \
+	qt/classes/qlcdnumber.cpp \
 	qt/classes/qmouseevent.cpp \
 	qt/classes/qmoveevent.cpp \
 	qt/classes/qobjectdata.cpp \
 	qt/classes/qobjectuserdata.cpp \
 	qt/classes/qpaintevent.cpp \
-	qt/classes/qpainter.cpp \ 
+	qt/classes/qpainter.cpp \
+	qt/classes/qpushbutton.cpp \
 	qt/classes/qresizeevent.cpp \
 	qt/classes/qshortcutevent.cpp \
 	qt/classes/qshowevent.cpp \



From tm243 at berlios.de  Mon Jan 23 01:31:14 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 23 Jan 2006 01:31:14 +0100
Subject: [Php-qt-svn] r209 - trunk
Message-ID: <200601230031.k0N0VE0r023938@sheep.berlios.de>

Author: tm243
Date: 2006-01-23 01:31:11 +0100 (Mon, 23 Jan 2006)
New Revision: 209

Added:
   trunk/ChangeLog
Removed:
   trunk/CHANGELOG
Log:
file formatted.

Deleted: trunk/CHANGELOG
===================================================================
--- trunk/CHANGELOG	2006-01-23 00:14:48 UTC (rev 208)
+++ trunk/CHANGELOG	2006-01-23 00:31:11 UTC (rev 209)
@@ -1,6 +0,0 @@
-0.0.2 - a lot of new classes added
-	  - multiple inheritance solved
-	  - kalyptus extension written
-	  - tutorials (1-6) added
-	  - UTF-8/UTF-16 support
-0.0.1 - initial import -
\ No newline at end of file

Copied: trunk/ChangeLog (from rev 202, trunk/CHANGELOG)
===================================================================
--- trunk/CHANGELOG	2006-01-22 19:25:26 UTC (rev 202)
+++ trunk/ChangeLog	2006-01-23 00:31:11 UTC (rev 209)
@@ -0,0 +1,13 @@
+2006-01-23  Thomas Moenicke  <tm at ippfp.org> (v.0.0.2) "Fridolin"
+
+        * a lot of new classes added
+		* kalyptus extension written
+		* multiple inheritance added
+		* method overloading added
+		* tutorials (1-6) added
+		* UTF-8/UTF-16 support
+		* objects are stored in a way that ensures safety
+
+2005-11-06  Thomas Moenicke  <tm at ippfp.org> (v.0.0.1)
+
+		* initial import



From tm243 at berlios.de  Mon Jan 23 10:39:49 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 23 Jan 2006 10:39:49 +0100
Subject: [Php-qt-svn] r210 - trunk/qt
Message-ID: <200601230939.k0N9dnO4018327@sheep.berlios.de>

Author: tm243
Date: 2006-01-23 10:39:48 +0100 (Mon, 23 Jan 2006)
New Revision: 210

Modified:
   trunk/qt/ag_php_qt_cpp.inc
   trunk/qt/ag_zend_php_qt.inc
Log:
fixed a bug of __toString.

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-01-23 00:31:11 UTC (rev 209)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-01-23 09:39:48 UTC (rev 210)
@@ -994,6 +994,7 @@
 
 }
 static zend_function_entry QString_methods[] = {
+	ZEND_ME(QString,__toString,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QString,compare,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QString,utf16,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QString,constData,NULL,ZEND_ACC_PUBLIC)

Modified: trunk/qt/ag_zend_php_qt.inc
===================================================================
--- trunk/qt/ag_zend_php_qt.inc	2006-01-23 00:31:11 UTC (rev 209)
+++ trunk/qt/ag_zend_php_qt.inc	2006-01-23 09:39:48 UTC (rev 210)
@@ -483,6 +483,7 @@
 ZEND_METHOD(QShortcutEvent, isAmbiguous);
 ZEND_METHOD(QShortcutEvent, key);
 ZEND_METHOD(QStatusTipEvent, tip);
+ZEND_METHOD(QString, __toString);
 ZEND_METHOD(QString, compare);
 ZEND_METHOD(QString, utf16);
 ZEND_METHOD(QString, constData);



From tm243 at berlios.de  Mon Jan 23 11:06:53 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 23 Jan 2006 11:06:53 +0100
Subject: [Php-qt-svn] r211 - trunk
Message-ID: <200601231006.k0NA6rl4021476@sheep.berlios.de>

Author: tm243
Date: 2006-01-23 11:06:52 +0100 (Mon, 23 Jan 2006)
New Revision: 211

Modified:
   trunk/COPYING
Log:
typing error.

Modified: trunk/COPYING
===================================================================
--- trunk/COPYING	2006-01-23 09:39:48 UTC (rev 210)
+++ trunk/COPYING	2006-01-23 10:06:52 UTC (rev 211)
@@ -3,7 +3,7 @@
 About licensing
 ===============
 
-PHP-Qt is licensed under the terms of the GNU Lesser Public License.
+PHP-Qt is licensed under the terms of the GNU Lesser General Public License.
 Qt is dual licensed software. Please note that PHP-Qt is dynamically linked 
 against the Qt library, Qt header files are neccessary for building PHP-Qt.
 



From tm243 at berlios.de  Mon Jan 23 17:10:21 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 23 Jan 2006 17:10:21 +0100
Subject: [Php-qt-svn] r212 - in trunk: . qt tools
Message-ID: <200601231610.k0NGAL1g004052@sheep.berlios.de>

Author: tm243
Date: 2006-01-23 17:10:20 +0100 (Mon, 23 Jan 2006)
New Revision: 212

Modified:
   trunk/ChangeLog
   trunk/qt/php_qt.cpp
   trunk/qt/zend_php_qt.h
   trunk/tools/kalyptusCxxToPHP.pm
Log:
wrong license notices removed.

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2006-01-23 10:06:52 UTC (rev 211)
+++ trunk/ChangeLog	2006-01-23 16:10:20 UTC (rev 212)
@@ -5,7 +5,7 @@
 		* multiple inheritance added
 		* method overloading added
 		* tutorials (1-6) added
-		* UTF-8/UTF-16 support
+		* UTF-8/UTF-16 support prepared
 		* objects are stored in a way that ensures safety
 
 2005-11-06  Thomas Moenicke  <tm at ippfp.org> (v.0.0.1)

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-01-23 10:06:52 UTC (rev 211)
+++ trunk/qt/php_qt.cpp	2006-01-23 16:10:20 UTC (rev 212)
@@ -1,20 +1,29 @@
 /*
-  +----------------------------------------------------------------------+
-  | PHP Version 5                                                        |
-  +----------------------------------------------------------------------+
-  | Copyright (c) 1997-2004 The PHP Group                                |
-  +----------------------------------------------------------------------+
-  | This source file is subject to version 3.0 of the PHP license,       |
-  | that is bundled with this package in the file LICENSE, and is        |
-  | available through the world-wide-web at the following url:           |
-  | http://www.php.net/license/3_0.txt.                                  |
-  | If you did not receive a copy of the PHP license and are unable to   |
-  | obtain it through the world-wide-web, please send a note to          |
-  | license at php.net so we can mail you a copy immediately.               |
-  +----------------------------------------------------------------------+
-  | Author:                                                              |
-  +----------------------------------------------------------------------+
-*/
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005 
+ * Thomas Moenicke <tm at ippfp.org>, 
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QFrame.cpp - QFrame PHP implementation.
+ * begin           : Sun Dec 11 13:58:03 2005
+ * generated by    : moni using kalyptus 0.9.
+ */
+
 /*
  * Copyright (C) 2005 
  * Thomas Moenicke <tm at ippfp.org>, 

Modified: trunk/qt/zend_php_qt.h
===================================================================
--- trunk/qt/zend_php_qt.h	2006-01-23 10:06:52 UTC (rev 211)
+++ trunk/qt/zend_php_qt.h	2006-01-23 16:10:20 UTC (rev 212)
@@ -1,20 +1,29 @@
 /*
-  +----------------------------------------------------------------------+
-  | PHP Version 5                                                        |
-  +----------------------------------------------------------------------+
-  | Copyright (c) 1997-2004 The PHP Group                                |
-  +----------------------------------------------------------------------+
-  | This source file is subject to version 3.0 of the PHP license,       |
-  | that is bundled with this package in the file LICENSE, and is        |
-  | available through the world-wide-web at the following url:           |
-  | http://www.php.net/license/3_0.txt.                                  |
-  | If you did not receive a copy of the PHP license and are unable to   |
-  | obtain it through the world-wide-web, please send a note to          |
-  | license at php.net so we can mail you a copy immediately.               |
-  +----------------------------------------------------------------------+
-  | Author:                                                              |
-  +----------------------------------------------------------------------+
-*/
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005 
+ * Thomas Moenicke <tm at ippfp.org>, 
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QFrame.cpp - QFrame PHP implementation.
+ * begin           : Sun Dec 11 13:58:03 2005
+ * generated by    : moni using kalyptus 0.9.
+ */
+
 /*
  * Copyright (C) 2005 
  * Thomas Moenicke <tm at ippfp.org>, 

Modified: trunk/tools/kalyptusCxxToPHP.pm
===================================================================
--- trunk/tools/kalyptusCxxToPHP.pm	2006-01-23 10:06:52 UTC (rev 211)
+++ trunk/tools/kalyptusCxxToPHP.pm	2006-01-23 16:10:20 UTC (rev 212)
@@ -645,22 +645,31 @@
     $file_ag_php_qt_cpp =~ s/\.h/.h/;
 
     print ZEND_PHP_QT "/*
-  +----------------------------------------------------------------------+
-  | PHP Version 5                                                        |
-  +----------------------------------------------------------------------+
-  | Copyright (c) 1997-2004 The PHP Group                                |
-  +----------------------------------------------------------------------+
-  | This source file is subject to version 3.0 of the PHP license,       |
-  | that is bundled with this package in the file LICENSE, and is        |
-  | available through the world-wide-web at the following url:           |
-  | http://www.php.net/license/3_0.txt.                                  |
-  | If you did not receive a copy of the PHP license and are unable to   |
-  | obtain it through the world-wide-web, please send a note to          |
-  | license\@php.net so we can mail you a copy immediately.               |
-  +----------------------------------------------------------------------+
-  | Author:                                                              |
-  +----------------------------------------------------------------------+
-*/
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005 
+ * Thomas Moenicke <tm at ippfp.org>, 
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QFrame.cpp - QFrame PHP implementation.
+ * begin           : Sun Dec 11 13:58:03 2005
+ * generated by    : moni using kalyptus 0.9.
+ */
+
 /*
  * Copyright (C) 2005
  * Thomas Moenicke <tm\@ippfp.org>,



From tm243 at berlios.de  Tue Jan 24 11:07:52 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Tue, 24 Jan 2006 11:07:52 +0100
Subject: [Php-qt-svn] r213 - trunk/tests
Message-ID: <200601241007.k0OA7q6b015578@sheep.berlios.de>

Author: tm243
Date: 2006-01-24 11:07:51 +0100 (Tue, 24 Jan 2006)
New Revision: 213

Modified:
   trunk/tests/qstring.php
Log:
typos fixed.

Modified: trunk/tests/qstring.php
===================================================================
--- trunk/tests/qstring.php	2006-01-23 16:10:20 UTC (rev 212)
+++ trunk/tests/qstring.php	2006-01-24 10:07:51 UTC (rev 213)
@@ -11,34 +11,34 @@
 	$QString_2 = new QString(40);
 	$QString_3 = new QString(41);
 
-/* this works: */
+/* this work: */
 	echo $QString_2;
 	echo $QString_1;
 	echo $QString_3;
     echo "\n";
 
-/* this does not works */
+/* this does not work */
 	echo $QString_2." ".$QString_1." ".$QString_3;
     echo "\n";
 
-/* this does not works */
+/* this does not work */
 	$tmp = $QString_2." ".$QString_1." ".$QString_3;
 	print($tmp);
 
     echo "\n";
 
-/* this does not works */
+/* this does not work */
 	$tmp2 = $QString_2;
 	$tmp2 = $QString_1;
 	$tmp2 = $QString_3;
 	echo $tmp;
     echo "\n";
 
-/* this does not works */
+/* this does not work */
 	echo "$QString_2 $QString_1 $QString_3";
     echo "\n";
 
-/* this works: */
+/* this work: */
 	$var1 = $QString_1->__toString();
 	$var2 = $QString_2->__toString();
 	$var3 = $QString_3->__toString();




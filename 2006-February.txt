From tm243 at berlios.de  Thu Feb  9 23:45:21 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Thu, 9 Feb 2006 23:45:21 +0100
Subject: [Php-qt-svn] r214 - in trunk: qt qt/classes qt/text_related tests
Message-ID: <200602092245.k19MjLhX004836@sheep.berlios.de>

Author: tm243
Date: 2006-02-09 23:45:19 +0100 (Thu, 09 Feb 2006)
New Revision: 214

Added:
   trunk/tests/unicode.xml
Modified:
   trunk/qt/classes/qlineedit.cpp
   trunk/qt/php_qt.h
   trunk/qt/text_related/qstring.cpp
   trunk/tests/unicode.php
Log:
QLineEdit and QString improved to pass unicode test from Ferenc Veres. Thanks Ferenc.

Modified: trunk/qt/classes/qlineedit.cpp
===================================================================
--- trunk/qt/classes/qlineedit.cpp	2006-01-24 10:07:51 UTC (rev 213)
+++ trunk/qt/classes/qlineedit.cpp	2006-02-09 22:45:19 UTC (rev 214)
@@ -20,18 +20,19 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QLineEdit.cpp - QLineEdit PHP implementation.
- * begin           : Wed Jan 11 20:29:53 2006
+ * begin           : Thu Feb  9 23:08:03 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
 #include <iostream>
 using namespace std;
 
+#include "../php_qt.h"
 #include <QLineEdit>
-#include "../php_qt.h"
 
 
 
+
 /*		public enumEchoMode:long {
 			EchoMode = 0,
 			EchoMode = 1,
@@ -45,28 +46,32 @@
  *    flags:    s
  */
 ZEND_METHOD(QLineEdit, tr){
+		/* ss public*/
 
+		/* const char* , const char* ,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
-		char* var_ss_0;   // default: 
-		int len_ss_0;
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
+			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
 
-
-		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-
-			
-			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
+			QString* return_object = new QString;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
+			} else {
+				*return_object = (QString) QLineEdit::tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -80,11 +85,17 @@
 ZEND_METHOD(QLineEdit, inputMask){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->inputMask();
+			QString* return_object = new QString;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QString) obj->inputMask();
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -97,22 +108,23 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, insert){
+		/* o public*/
 
+		/* const QString& ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
-		/* const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString&") {
-				obj->insert((const QString&) var_o_0);
+
+			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
+				obj->insert((const QString&) *obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -164,18 +176,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setMaxLength){
+		/* l public*/
 
+		/* int ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
-		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->setMaxLength((int) var_l_0);
+
+			obj->setMaxLength((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -187,24 +201,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLineEdit, qt_invoke){
-
-	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* int , QUObject* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -214,18 +210,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setModified){
+		/* l public*/
 
+		/* int ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
-
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->setModified((bool) var_b_0);
+
+			obj->setModified((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -237,18 +235,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setFrame){
+		/* l public*/
 
+		/* int ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
-
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->setFrame((bool) var_b_0);
+
+			obj->setFrame((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -260,22 +260,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLineEdit, qt_cast){
-
-	if (ZEND_NUM_ARGS() == 1){
-		/* s */
-		char* var_s_0;   // default: 
-		int len_s_0;
-
-
-		/* const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-
-			
-			obj->qt_cast( (const char*) var_s_0);
-			RETURN_NULL();
-		}
-	}
 }
 
 /*********************************
@@ -285,18 +269,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setReadOnly){
+		/* l public*/
 
+		/* int ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
-
-		/* bool ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->setReadOnly((bool) var_b_0);
+
+			obj->setReadOnly((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -308,20 +294,18 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setEchoMode){
+		/* l public*/
 
+		/* int ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
-		/* EchoMode ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "EchoMode") {
-				obj->setEchoMode((EchoMode) var_o_0);
+
+			obj->setEchoMode((QLineEdit::EchoMode) Z_LVAL_P(z_0));
 			RETURN_NULL();
 			}
 		}
@@ -337,11 +321,17 @@
 ZEND_METHOD(QLineEdit, metaObject){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
+			QMetaObject ** return_object = new QMetaObject *;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QMetaObject *) obj->metaObject();
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -354,19 +344,21 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, cursorBackward){
+		/* ll public*/
 
+		/* int mark, int steps,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 
-		long var_bl_1;    // default: 1
-
-		/* bool mark, int steps,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl|", &var_bl_0, &var_bl_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->cursorBackward((bool) var_bl_0 ,(int) var_bl_1);
+
+			obj->cursorBackward((bool) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -378,18 +370,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, cursorWordBackward){
+		/* l public*/
 
+		/* int mark,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
-
-		/* bool mark,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->cursorWordBackward((bool) var_b_0);
+
+			obj->cursorWordBackward((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -401,24 +395,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLineEdit, qt_emit){
-
-	if (ZEND_NUM_ARGS() == 2){
-		/* lo */
-		long var_lo_0;    // default: 
-		zval* z_var_lo_1;   // default: 
-
-		/* int , QUObject* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);
-
-			QString tmp_lo_0(var_lo_1->metaObject()->className());
-			
-			if(tmp_lo_0 == "QUObject*") {
-				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -428,18 +404,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setAlignment){
+		/* l public*/
 
+		/* int flag,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
-		/* int flag,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->setAlignment((Qt::Alignment) var_l_0);
+
+			obj->setAlignment((Qt::Alignment) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -451,16 +429,6 @@
  *    flags:    cv
  */
 ZEND_METHOD(QLineEdit, className){
-	if (ZEND_NUM_ARGS() == 0){
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			const char * return_object = (const char *) obj->className();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLineEdit_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -470,45 +438,60 @@
  *    flags:    t
  */
 ZEND_METHOD(QLineEdit, __construct){
+		/* o public*/
 
+		/* qt_QWidget* parent,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 0
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-		/* QWidget* parent,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QWidget*") {
-				QLineEdit *QLineEdit_ptr = new QLineEdit((QWidget*) var_o_0);
-			PHP_QT_REGISTER(QLineEdit_ptr);
-			RETURN_NULL();
+			if(obj_z_0->inherits("QWidget")) {
+				QLineEdit *QLineEdit_ptr = new QLineEdit((QWidget*) obj_z_0);
+				PHP_QT_REGISTER(QLineEdit_ptr);
+				RETURN_NULL();
 			}
+			}
 		}
 	}
+		/* oo public*/
 
+		/* const QString& , qt_QWidget* parent,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* oo */
-		zval* z_var_oo_0;   // default: 
-		zval* z_var_oo_1;   // default: 0
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
 
-		/* const QString& , QWidget* parent,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
-			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);
 
-			QString tmp_oo_0(var_oo_0->metaObject()->className());
-			QString tmp_oo_1(var_oo_1->metaObject()->className());
-			
-			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "QWidget*") {
-				QLineEdit *QLineEdit_ptr = new QLineEdit((const QString&) var_oo_0, (QWidget*) var_oo_1);
-			PHP_QT_REGISTER(QLineEdit_ptr);
-			RETURN_NULL();
+			if(Z_TYPE_P(z_0) == IS_STRING){
+
+			  QString *str = new QString("");
+			  *str = QString(QString::fromUtf8(Z_STRVAL_P(z_0)));
+
+			  zend_class_entry *ce;                                   
+			  object_init_ex(z_0, QString_ce_ptr);
+			  zend_rsrc_list_entry le;                            
+			  le.ptr = str;
+			  php_qt_register(z_0,le);                                 
+
 			}
+
+
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+
+
+//			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString") && obj_z_1->inherits("QWidget")) {
+				QLineEdit *QLineEdit_ptr = new QLineEdit((const QString&) *obj_z_0, (QWidget*) obj_z_1);
+				PHP_QT_REGISTER(QLineEdit_ptr);
+				RETURN_NULL();
+//			}
+			}
 		}
 	}
 }
@@ -520,16 +503,6 @@
  *    flags:    s
  */
 ZEND_METHOD(QLineEdit, staticMetaObject){
-	if (ZEND_NUM_ARGS() == 0){
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLineEdit_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -539,16 +512,6 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, qObject){
-	if (ZEND_NUM_ARGS() == 0){
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* return_object = (QObject*) obj->qObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLineEdit_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
 }
 
 /*********************************
@@ -558,23 +521,31 @@
  *    flags:    c
  */
 ZEND_METHOD(QLineEdit, inputMethodQuery){
+		/* l public*/
 
+		/* int ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
-		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			QVariant return_object = (QVariant) obj->inputMethodQuery((Qt::InputMethodQuery) var_l_0);
+
+			QVariant* return_object = new QVariant;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QVariant) obj->inputMethodQuery((Qt::InputMethodQuery) Z_LVAL_P(z_0));
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }
@@ -588,11 +559,17 @@
 ZEND_METHOD(QLineEdit, text){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->text();
+			QString* return_object = new QString;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QString) obj->text();
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -607,11 +584,17 @@
 ZEND_METHOD(QLineEdit, minimumSizeHint){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->minimumSizeHint();
+			QSize* return_object = new QSize;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QSize) obj->minimumSizeHint();
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -624,18 +607,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, home){
+		/* l public*/
 
+		/* int mark,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
-
-		/* bool mark,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->home((bool) var_b_0);
+
+			obj->home((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -661,19 +646,21 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, cursorForward){
+		/* ll public*/
 
+		/* int mark, int steps,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* bl */
-		bool var_bl_0;   // _default: 
-		long var_bl_1;    // default: 1
-
-		/* bool mark, int steps,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl|", &var_bl_0, &var_bl_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->cursorForward((bool) var_bl_0 ,(int) var_bl_1);
+
+			obj->cursorForward((bool) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -685,18 +672,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setDragEnabled){
+		/* l public*/
 
+		/* int b,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
-
-		/* bool b,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->setDragEnabled((bool) var_b_0);
+
+			obj->setDragEnabled((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -708,25 +697,6 @@
  *    flags:    v
  */
 ZEND_METHOD(QLineEdit, qt_property){
-
-	if (ZEND_NUM_ARGS() == 3){
-		/* llo */
-		long var_llo_0;    // default: 
-		long var_llo_1;    // default: 
-		zval* z_var_llo_2;   // default: 
-
-		/* int , int , QVariant* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);
-
-			QString tmp_llo_0(var_llo_2->metaObject()->className());
-			
-			if(tmp_llo_0 == "QVariant*") {
-				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
-			}
-		}
-	}
 }
 
 /*********************************
@@ -749,22 +719,23 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setValidator){
+		/* o public*/
 
+		/* const QValidator* ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
-		/* const QValidator* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QValidator*") {
-				obj->setValidator((const QValidator*) var_o_0);
+
+			if(obj_z_0->inherits("QValidator")) {
+				obj->setValidator((const QValidator*) obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -860,11 +831,17 @@
 ZEND_METHOD(QLineEdit, displayText){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->displayText();
+			QString* return_object = new QString;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QString) obj->displayText();
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -877,18 +854,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, cursorWordForward){
+		/* l public*/
 
+		/* int mark,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
-
-		/* bool mark,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->cursorWordForward((bool) var_b_0);
+
+			obj->cursorWordForward((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -900,21 +879,22 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, event){
+		/* o public*/
 
+		/* qt_QEvent* ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
-		/* QEvent* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "QEvent*") {
-				RETURN_BOOL(obj->event((QEvent*) var_o_0));
+
+			if(!strcmp(Z_OBJCE_P(z_0)->name,"QEvent")) {
+				RETURN_BOOL(obj->event((QEvent*) obj_z_0));
 			}
+			}
 		}
 	}
 }
@@ -928,11 +908,17 @@
 ZEND_METHOD(QLineEdit, validator){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			const QValidator * return_object = (const QValidator *) obj->validator();
+			const QValidator ** return_object = new const QValidator *;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (const QValidator *) obj->validator();
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -945,18 +931,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, end){
+		/* l public*/
 
+		/* int mark,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* b */
-		bool var_b_0;   // _default: 
-
-		/* bool mark,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->end((bool) var_b_0);
+
+			obj->end((bool) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -981,17 +969,19 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, cursorPositionAt){
+		/* l public*/
 
+		/* const QPoint& pos,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
-		/* const QPoint& pos,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			RETURN_LONG(obj->cursorPositionAt((const QPoint&) var_l_0));
+
+			RETURN_LONG(obj->cursorPositionAt((const QPoint&) Z_LVAL_P(z_0)));
+			}
 		}
 	}
 }
@@ -1017,19 +1007,21 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setSelection){
+		/* ll public*/
 
+		/* int , int ,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* ll */
-		long var_ll_0;    // default: 
-		long var_ll_1;    // default: 
-
-		/* int , int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->setSelection((int) var_ll_0 ,(int) var_ll_1);
+
+			obj->setSelection((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1043,11 +1035,17 @@
 ZEND_METHOD(QLineEdit, selectedText){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QString return_object = (QString) obj->selectedText();
+			QString* return_object = new QString;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QString) obj->selectedText();
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1086,22 +1084,23 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setInputMask){
+		/* o public*/
 
+		/* const QString& inputMask,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
-		/* const QString& inputMask,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString&") {
-				obj->setInputMask((const QString&) var_o_0);
+
+			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
+				obj->setInputMask((const QString&) *obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1140,22 +1139,23 @@
  *    flags:    l
  */
 ZEND_METHOD(QLineEdit, setText){
+		/* o public_slots*/
 
+		/* const QString& ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* o */
-		zval* z_var_o_0;   // default: 
-
-		/* const QString& ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);
+			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
-			QString tmp_o_0(var_o_0->metaObject()->className());
-			
-			if(tmp_o_0 == "const QString&") {
-				obj->setText((const QString&) var_o_0);
+
+			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
+				obj->setText((const QString&) *obj_z_0);
 			RETURN_NULL();
 			}
+			}
 		}
 	}
 }
@@ -1169,13 +1169,7 @@
 ZEND_METHOD(QLineEdit, alignment){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			Qt::Alignment return_object = (Qt::Alignment) obj->alignment();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QLineEdit_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			RETURN_LONG(obj->alignment());
 	}
 }
 
@@ -1188,11 +1182,17 @@
 ZEND_METHOD(QLineEdit, sizeHint){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QSize return_object = (QSize) obj->sizeHint();
+			QSize* return_object = new QSize;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QSize) obj->sizeHint();
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1205,18 +1205,20 @@
  *    flags:    
  */
 ZEND_METHOD(QLineEdit, setCursorPosition){
+		/* l public*/
 
+		/* int ,  */
+
 	if (ZEND_NUM_ARGS() == 1){
-		/* l */
-		long var_l_0;    // default: 
-
-		/* int ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_LONG){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-			
-			obj->setCursorPosition((int) var_l_0);
+
+			obj->setCursorPosition((int) Z_LVAL_P(z_0));
 			RETURN_NULL();
+			}
 		}
 	}
 }
@@ -1230,11 +1232,17 @@
 ZEND_METHOD(QLineEdit, createStandardContextMenu){
 	if (ZEND_NUM_ARGS() == 0){
 			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-			QMenu * return_object = (QMenu *) obj->createStandardContextMenu();
+			QMenu ** return_object = new QMenu *;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QMenu *) obj->createStandardContextMenu();
+			} else {
+				php_error(E_ERROR,"Object not found");
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
 	}
@@ -1301,28 +1309,32 @@
  *    flags:    s
  */
 ZEND_METHOD(QLineEdit, trUtf8){
+		/* ss public*/
 
+		/* const char* , const char* ,  */
+
 	if (ZEND_NUM_ARGS() == 2){
-		/* ss */
-		char* var_ss_0;   // default: 
-		int len_ss_0;
+		zval *z_0; // define ZVAL
+		zval *z_1; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
+			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
 
-		char* var_ss_1;   // default: 0
-		int len_ss_1;
 
-
-		/* const char* , const char* ,  */
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
-			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
-
-			
-			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
+			QString* return_object = new QString;
+			// static?
+			if(getThis() != NULL){
+				*return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
+			} else {
+				*return_object = (QString) QLineEdit::trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
+			}
 				zend_class_entry *ce;                                   
 				object_init_ex(return_value, QLineEdit_ce_ptr);     
 				zend_rsrc_list_entry le;                            
-				le.ptr = &return_object;                                       
+				le.ptr = return_object;                                       
 				php_qt_register(return_value,le);                   
 				return;                                             
+			}
 		}
 	}
 }

Modified: trunk/qt/php_qt.h
===================================================================
--- trunk/qt/php_qt.h	2006-01-24 10:07:51 UTC (rev 213)
+++ trunk/qt/php_qt.h	2006-02-09 22:45:19 UTC (rev 214)
@@ -24,6 +24,7 @@
 #define debug
 
 #include <QTextStream>
+#include <QVariant>
 #define QOUT()                                              \
     extern QTextStream qout(stdout, QIODevice::WriteOnly);  \
 

Modified: trunk/qt/text_related/qstring.cpp
===================================================================
--- trunk/qt/text_related/qstring.cpp	2006-01-24 10:07:51 UTC (rev 213)
+++ trunk/qt/text_related/qstring.cpp	2006-02-09 22:45:19 UTC (rev 214)
@@ -553,8 +553,8 @@
 			}
 			if(Z_TYPE_P(z_0) == IS_STRING){
 
+			QString *QString_ptr = new QString( (const char*) Z_STRVAL_P(z_0));
 
-			QString *QString_ptr = new QString( (const char*) Z_STRVAL_P(z_0));
 				PHP_QT_REGISTER(QString_ptr);
 				RETURN_NULL();
 			}
@@ -2016,20 +2016,23 @@
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
 			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
 
-	QString return_object;			
-    if(getThis() != NULL){
-        QString *obj = (QString*) PHP_QT_FETCH();
-        return_object = (QString) obj->fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-    }else {
-        return_object = (QString) QString::fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-    }
-				
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QString_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+// wichtig: Speicher auf dem Heap alloziieren
+			  QString *return_object = new QString;
+  			  if(getThis() != NULL){
+		        QString *obj = (QString*) PHP_QT_FETCH();
+// hier einfach ?berschreiben
+      			*return_object = (QString) obj->fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
+// static
+		      } else {
+		        *return_object = (QString) QString::fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
+
+		      }		
+			  zend_class_entry *ce;                                   
+			  object_init_ex(return_value, QString_ce_ptr);
+			  zend_rsrc_list_entry le;                            
+			  le.ptr = return_object;
+			  php_qt_register(return_value,le);
+			  return;
 			}
 		}
 	}

Modified: trunk/tests/unicode.php
===================================================================
--- trunk/tests/unicode.php	2006-01-24 10:07:51 UTC (rev 213)
+++ trunk/tests/unicode.php	2006-02-09 22:45:19 UTC (rev 214)
@@ -1,19 +1,48 @@
 <?php
 
+	/* unicode test from Ferenc Verec */
+
     if(!extension_loaded('php_qt')) {
         dl('php_qt.' . PHP_SHLIB_SUFFIX);
     }
 
-	$QString = new QString("hello");
+	class TestButtons extends QWidget
+	{
+		public $layout;
+		public $buttons;
 
-	echo $QString->toUTF8();
+		public function __construct() 
+		{
+			parent::__construct();
+			
+			$this->layout = new QVBoxLayout($this);
 
-	echo $QString;
+			// Load the test xml
+			$unicodeXml = new DOMDocument();
+			$unicodeXml->load("unicode.xml");
+			$xpath = new DOMXPath($unicodeXml);
+			$dataNodes = $xpath->query("/test/data");
 
-	$QString->setUnicode(new QChar(65), 1);
+			// Loop on all data node and create buttons
+			foreach($dataNodes as $data)
+			{
+				$this->buttons[] = new QLineEdit(QString::fromUtf8($data->nodeValue, -1),$this);
+				$this->layout->addWidget($this->buttons[count($this->buttons)-1]);
+			}
 
-	echo $QString;
+			$this->buttons[] = new QLineEdit("Test",$this);
+			$this->layout->addWidget($this->buttons[count($this->buttons)-1]);
 
-	echo "\n";
+			$this->buttons[] = new QLineEdit(("second Test"),$this);
+			$this->layout->addWidget($this->buttons[count($this->buttons)-1]);
 
-?>
\ No newline at end of file
+		}
+
+	}
+
+    $app = new QApplication();
+	$widget = new TestButtons();
+	$widget->show();
+	$app->exec();
+
+?>

Added: trunk/tests/unicode.xml
===================================================================
--- trunk/tests/unicode.xml	2006-01-24 10:07:51 UTC (rev 213)
+++ trunk/tests/unicode.xml	2006-02-09 22:45:19 UTC (rev 214)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<test>
+	<data lang="en">This is a test text</data>
+	<data lang="hu">??rv??zt??r?? t??k??rf??r??g??p</data>
+	<data lang="jp">???????????????????????????????????????</data>
+	<data lang="ko">????????? ?????? ?????? ??????</data>
+	<data lang="ru">?????? ?????????? ?????????? ??????????????????</data>
+</test>
\ No newline at end of file



From tm243 at berlios.de  Sun Feb 12 11:44:17 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 12 Feb 2006 11:44:17 +0100
Subject: [Php-qt-svn] r215 - trunk
Message-ID: <200602121044.k1CAiH7Q005910@sheep.berlios.de>

Author: tm243
Date: 2006-02-12 11:44:17 +0100 (Sun, 12 Feb 2006)
New Revision: 215

Modified:
   trunk/config.m4
Log:
only cli sapi allowed

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-02-09 22:45:19 UTC (rev 214)
+++ trunk/config.m4	2006-02-12 10:44:17 UTC (rev 215)
@@ -149,7 +149,7 @@
 	qt/classes/qwidgetdata.cpp \
 	qt/classes/qwidgetitem.cpp \
 	qt/classes/qwindowstatechangeevent.cpp \
-  qt/php_qt.cpp,$ext_shared)
+  qt/php_qt.cpp,$ext_shared,cli)
   PHP_ADD_BUILD_DIR($ext_builddir/qt)
 
 fi



From tm243 at berlios.de  Sun Feb 12 12:29:56 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sun, 12 Feb 2006 12:29:56 +0100
Subject: [Php-qt-svn] r216 - trunk/qt
Message-ID: <200602121129.k1CBTuIS011082@sheep.berlios.de>

Author: tm243
Date: 2006-02-12 12:29:55 +0100 (Sun, 12 Feb 2006)
New Revision: 216

Modified:
   trunk/qt/php_qt.cpp
Log:
warning should be an error.

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-02-12 10:44:17 UTC (rev 215)
+++ trunk/qt/php_qt.cpp	2006-02-12 11:29:55 UTC (rev 216)
@@ -1196,7 +1196,7 @@
 	TSRMLS_FETCH();
 
 	if(zend_hash_index_find(Z_OBJPROP_P(this_ptr), 0, (void**) &listhandle) == FAILURE){
-	  php_error(E_WARNING,"reference to Qt object missing.");
+	  php_error(E_ERROR,"Object not found in list.");
 	}
 	ptr = zend_list_find(Z_LVAL_PP(listhandle), &type);
 




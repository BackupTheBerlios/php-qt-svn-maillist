From tm243 at berlios.de  Mon Apr 17 14:20:29 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 17 Apr 2006 14:20:29 +0200
Subject: [Php-qt-svn] r221 - trunk
Message-ID: <200604171220.k3HCKT29020526@sheep.berlios.de>

Author: tm243
Date: 2006-04-17 14:20:10 +0200 (Mon, 17 Apr 2006)
New Revision: 221

Removed:
   trunk/build/
   trunk/install-sh
Log:
cleanup build system

Deleted: trunk/install-sh
===================================================================



From tm243 at berlios.de  Mon Apr 17 14:44:22 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 17 Apr 2006 14:44:22 +0200
Subject: [Php-qt-svn] r222 - trunk
Message-ID: <200604171244.k3HCiMWf030730@sheep.berlios.de>

Author: tm243
Date: 2006-04-17 14:44:09 +0200 (Mon, 17 Apr 2006)
New Revision: 222

Modified:
   trunk/config.m4
Log:
bugfix: breaks for-statement if file was found in path

Modified: trunk/config.m4
===================================================================
--- trunk/config.m4	2006-04-17 12:20:10 UTC (rev 221)
+++ trunk/config.m4	2006-04-17 12:44:09 UTC (rev 222)
@@ -13,7 +13,7 @@
     if test -r "$PHP_QTLIB"; then
         AC_MSG_RESULT(found in $PHP_QTLIB)
     else 
-        AC_MSG_ERROR([Please reinstall the Qt distribution] $PHP_QTLIB)
+        AC_MSG_ERROR([Please check the Qt distribution] $PHP_QTLIB)
     fi
 
   PHP_ADD_LIBPATH($PHP_QTLIB/lib/qt4 )
@@ -60,6 +60,7 @@
       if test -r $i$j/$SEARCH_OBJ; then
         PHP_QT_DIR=$i$j
         AC_MSG_RESULT(found)
+        break 2
       else
         AC_MSG_RESULT(not found)
       fi



From tm243 at berlios.de  Mon Apr 17 22:09:42 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Mon, 17 Apr 2006 22:09:42 +0200
Subject: [Php-qt-svn] r223 - trunk/qt
Message-ID: <200604172009.k3HK9g9B015959@sheep.berlios.de>

Author: tm243
Date: 2006-04-17 22:09:39 +0200 (Mon, 17 Apr 2006)
New Revision: 223

Modified:
   trunk/qt/ag_php_qt_cpp.inc
   trunk/qt/ag_qt_minit.inc
Log:
moved QCoreApplication before QApplication

Modified: trunk/qt/ag_php_qt_cpp.inc
===================================================================
--- trunk/qt/ag_php_qt_cpp.inc	2006-04-17 12:44:09 UTC (rev 222)
+++ trunk/qt/ag_php_qt_cpp.inc	2006-04-17 20:09:39 UTC (rev 223)
@@ -94,6 +94,53 @@
 
 
 }
+static zend_function_entry QCoreApplication_methods[] = {
+	ZEND_ME(QCoreApplication,removeTranslator,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,installTranslator,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,startingUp,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,exit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,addLibraryPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,setOrganizationDomain,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,argv,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,libraryPaths,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,exec,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,setLibraryPaths,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,removeLibraryPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,organizationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,setOrganizationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,instance,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,organizationDomain,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,hasPendingEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,sendPostedEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,applicationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,flush,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,processEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,translate,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,applicationDirPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,qObject,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCoreApplication,argc,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,quit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication, __construct,NULL,ZEND_ACC_PUBLIC)
+	ZEND_ME(QCoreApplication,watchUnixSignal,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,removePostedEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,applicationFilePath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,setApplicationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+	ZEND_ME(QCoreApplication,closingDown,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
+
+    {NULL,NULL,NULL}
+};
+
+void _register_QCoreApplication(TSRMLS_D)
+{
+    zend_class_entry ce;
+    INIT_CLASS_ENTRY(ce,"QCoreApplication",QCoreApplication_methods);
+    QCoreApplication_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QObject_ce_ptr,NULL TSRMLS_CC);
+
+
+}
 static zend_function_entry QApplication_methods[] = {
 	ZEND_ME(QApplication,sessionKey,NULL,ZEND_ACC_PUBLIC)
 	ZEND_ME(QApplication,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
@@ -369,53 +416,7 @@
 
 
 }
-static zend_function_entry QCoreApplication_methods[] = {
-	ZEND_ME(QCoreApplication,removeTranslator,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,installTranslator,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,startingUp,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,exit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,addLibraryPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,setOrganizationDomain,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,argv,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,libraryPaths,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,exec,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,setLibraryPaths,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,removeLibraryPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,organizationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,setOrganizationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,instance,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,organizationDomain,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,hasPendingEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,sendPostedEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,applicationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,flush,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,processEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,translate,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,applicationDirPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,qObject,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QCoreApplication,argc,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,quit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication, __construct,NULL,ZEND_ACC_PUBLIC)
-	ZEND_ME(QCoreApplication,watchUnixSignal,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,removePostedEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,applicationFilePath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,setApplicationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
-	ZEND_ME(QCoreApplication,closingDown,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 
-    {NULL,NULL,NULL}
-};
-
-void _register_QCoreApplication(TSRMLS_D)
-{
-    zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce,"QCoreApplication",QCoreApplication_methods);
-    QCoreApplication_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QObject_ce_ptr,NULL TSRMLS_CC);
-
-
-}
 static zend_function_entry QDate_methods[] = {
 	ZEND_ME(QDate,longDayName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	ZEND_ME(QDate,dayOfWeek,NULL,ZEND_ACC_PUBLIC)

Modified: trunk/qt/ag_qt_minit.inc
===================================================================
--- trunk/qt/ag_qt_minit.inc	2006-04-17 12:44:09 UTC (rev 222)
+++ trunk/qt/ag_qt_minit.inc	2006-04-17 20:09:39 UTC (rev 223)
@@ -31,6 +31,10 @@
 
 	_register_QActionEvent(TSRMLS_C);
 
+	_register_QCoreApplication(TSRMLS_C);
+	  REGISTER_LONG_CONSTANT("QCOREAPPLICATION_ENCODING_DEFAULTCODEC", QCoreApplication::DefaultCodec, CONST_CS | CONST_PERSISTENT);
+	  REGISTER_LONG_CONSTANT("QCOREAPPLICATION_ENCODING_UNICODEUTF8", QCoreApplication::UnicodeUTF8, CONST_CS | CONST_PERSISTENT);
+
 	_register_QApplication(TSRMLS_C);
 	  REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_TTY", QApplication::Tty, CONST_CS | CONST_PERSISTENT);
 	  REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_GUICLIENT", QApplication::GuiClient, CONST_CS | CONST_PERSISTENT);
@@ -167,10 +171,8 @@
 
 	_register_QContextMenuEvent(TSRMLS_C);
 
-	_register_QCoreApplication(TSRMLS_C);
-	  REGISTER_LONG_CONSTANT("QCOREAPPLICATION_ENCODING_DEFAULTCODEC", QCoreApplication::DefaultCodec, CONST_CS | CONST_PERSISTENT);
-	  REGISTER_LONG_CONSTANT("QCOREAPPLICATION_ENCODING_UNICODEUTF8", QCoreApplication::UnicodeUTF8, CONST_CS | CONST_PERSISTENT);
 
+
 	_register_QDate(TSRMLS_C);
 
 	_register_QDateTime(TSRMLS_C);



From tm243 at berlios.de  Tue Apr 18 16:01:07 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Tue, 18 Apr 2006 16:01:07 +0200
Subject: [Php-qt-svn] r224 - trunk/qt/classes
Message-ID: <200604181401.k3IE17WL009308@sheep.berlios.de>

Author: tm243
Date: 2006-04-18 16:00:51 +0200 (Tue, 18 Apr 2006)
New Revision: 224

Modified:
   trunk/qt/classes/qwidget.cpp
Log:
regeneration of class, constructor is handmade.

Modified: trunk/qt/classes/qwidget.cpp
===================================================================
--- trunk/qt/classes/qwidget.cpp	2006-04-17 20:09:39 UTC (rev 223)
+++ trunk/qt/classes/qwidget.cpp	2006-04-18 14:00:51 UTC (rev 224)
@@ -20,4588 +20,5768 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QWidget.cpp - QWidget PHP implementation.
- * begin           : Thu Feb 23 16:27:14 2006
+ * begin           : Tue Apr 11 10:33:13 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
 #include <iostream>
 using namespace std;
+
 #include "../php_qt.h"
 
 
 #include <QWidget>
 #include <QIcon>
 
-/*********************************
- *    class     QWidget
- *    function  nextInFocusChain
- *    flags:    c
- *    access:    public
- *    return:    QWidget *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  nextInFocusChain
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    
  */
-ZEND_METHOD(QWidget, nextInFocusChain){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->nextInFocusChain();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, nextInFocusChain)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QWidget **return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return: pointer
+
+/// return value is object: QWidget *
+      *return_object = static_cast < QWidget * >(obj->nextInFocusChain());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  tr
- *    flags:    s
- *    access:    public
- *    return:    QString
- *    params:     const char *, const char * = 0 
+/*!
+ *    @class     QWidget
+ *    @function  tr
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    QString
+ *    @param     const char *, const char * = 0 
  */
-ZEND_METHOD(QWidget, tr){
-		/* ss public*/
+ZEND_METHOD(QWidget, tr)
+{
+/*! ss public*/
+/*! const char* , const char* ,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* const char* , const char* ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        QString *return_object;
 
+        if (getThis() != NULL) {
+/// return value is object: QString
+          *return_object = static_cast < QString > (obj->tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
+/// check whether method call is static.
+        } else {
+          return_object = (QString *) malloc(sizeof (QWidget::tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1))));       /// memory allocation
+          *return_object = static_cast < QString > (QWidget::tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
+        } zend_class_entry *ce;
 
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
-			} else {
-				*return_object = (QString) QWidget::tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        object_init_ex(return_value, QWidget_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object;
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  focusPolicy
- *    flags:    c
- *    access:    public
- *    return:    Qt::FocusPolicy
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  focusPolicy
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    Qt::FocusPolicy
+ *    @param    
  */
-ZEND_METHOD(QWidget, focusPolicy){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->focusPolicy());
-	}
+ZEND_METHOD(QWidget, focusPolicy)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    Qt::FocusPolicy * return_object;
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->focusPolicy());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  windowOpacity
- *    flags:    c
- *    access:    public
- *    return:    qreal
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  windowOpacity
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    qreal
+ *    @param    
  */
-ZEND_METHOD(QWidget, windowOpacity){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_DOUBLE(obj->windowOpacity());
-	}
+ZEND_METHOD(QWidget, windowOpacity)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    qreal *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_DOUBLE(obj->windowOpacity());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  y
- *    flags:    c
- *    access:    public
- *    return:    int
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  y
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QWidget, y){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->y());
-	}
-}
+ZEND_METHOD(QWidget, y)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
 
-/*********************************
- *    class     QWidget
- *    function  clearFocus
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
- */
-ZEND_METHOD(QWidget, clearFocus){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->clearFocus();
-			RETURN_NULL();
-	}
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->y());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  fontInfo
- *    flags:    c
- *    access:    public
- *    return:    QFontInfo
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  clearFocus
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, fontInfo){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QFontInfo* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QFontInfo) obj->fontInfo();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
-}
+ZEND_METHOD(QWidget, clearFocus)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
 
-/*********************************
- *    class     QWidget
- *    function  isHidden
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
- */
-ZEND_METHOD(QWidget, isHidden){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isHidden());
-	}
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->clearFocus();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setMaximumWidth
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int maxw
+/*!
+ *    @class     QWidget
+ *    @function  fontInfo
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QFontInfo
+ *    @param    
  */
-ZEND_METHOD(QWidget, setMaximumWidth){
-		/* l public*/
+ZEND_METHOD(QWidget, fontInfo)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QFontInfo *return_object;
 
-		/* int maxw,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QFontInfo
+      *return_object = static_cast < QFontInfo > (obj->fontInfo());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			obj->setMaximumWidth((int) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  contentsRect
- *    flags:    c
- *    access:    public
- *    return:    QRect
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isHidden
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, contentsRect){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QRect* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QRect) obj->contentsRect();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, isHidden)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isHidden());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setContextMenuPolicy
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    Qt::ContextMenuPolicy policy
+/*!
+ *    @class     QWidget
+ *    @function  setMaximumWidth
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int maxw
  */
-ZEND_METHOD(QWidget, setContextMenuPolicy){
-		/* l public*/
+ZEND_METHOD(QWidget, setMaximumWidth)
+{
+/*! l public*/
+/*! int maxw,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int policy,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setContextMenuPolicy((Qt::ContextMenuPolicy) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setMaximumWidth((int)Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  focusProxy
- *    flags:    c
- *    access:    public
- *    return:    QWidget *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  contentsRect
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QRect
+ *    @param    
  */
-ZEND_METHOD(QWidget, focusProxy){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->focusProxy();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, contentsRect)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QRect *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return value is object: QRect
+      *return_object = static_cast < QRect > (obj->contentsRect());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  statusTip
- *    flags:    c
- *    access:    public
- *    return:    QString
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setContextMenuPolicy
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::ContextMenuPolicy policy
  */
-ZEND_METHOD(QWidget, statusTip){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->statusTip();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
-}
+ZEND_METHOD(QWidget, setContextMenuPolicy)
+{
+/*! l public*/
+/*! int policy,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-/*********************************
- *    class     QWidget
- *    function  visibleRegion
- *    flags:    c
- *    access:    public
- *    return:    QRegion
- *    params:    
- */
-ZEND_METHOD(QWidget, visibleRegion){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QRegion* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QRegion) obj->visibleRegion();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->setContextMenuPolicy((Qt::ContextMenuPolicy) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  isVisibleTo
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    QWidget*
+/*!
+ *    @class     QWidget
+ *    @function  focusProxy
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    
  */
-ZEND_METHOD(QWidget, isVisibleTo){
-//qt_QWidget*
-		/* o public*/
+ZEND_METHOD(QWidget, focusProxy)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QWidget **return_object;
 
-		/* qt_QWidget* ,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+/// return: pointer
 
+/// return value is object: QWidget *
+      *return_object = static_cast < QWidget * >(obj->focusProxy());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
-			if(obj_z_0->inherits("QWidget")) {
-				RETURN_BOOL(obj->isVisibleTo((QWidget*) obj_z_0));
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  releaseMouse
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  statusTip
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QString
+ *    @param    
  */
-ZEND_METHOD(QWidget, releaseMouse){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->releaseMouse();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, statusTip)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QString *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return value is object: QString
+      *return_object = static_cast < QString > (obj->statusTip());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setTabOrder
- *    flags:    s
- *    access:    public
- *    return:    void
- *    params:    QWidget *, QWidget *
+/*!
+ *    @class     QWidget
+ *    @function  visibleRegion
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QRegion
+ *    @param    
  */
-ZEND_METHOD(QWidget, setTabOrder){
-//qt_QWidget*
-//qt_QWidget*
-		/* oo public*/
+ZEND_METHOD(QWidget, visibleRegion)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QRegion *return_object;
 
-		/* qt_QWidget* , qt_QWidget* ,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
-			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+/// return value is object: QRegion
+      *return_object = static_cast < QRegion > (obj->visibleRegion());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			if(obj_z_0->inherits("QWidget") && obj_z_1->inherits("QWidget")) {
-				obj->setTabOrder((QWidget*) obj_z_0, (QWidget*) obj_z_1);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setFocusProxy
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QWidget *
+/*!
+ *    @class     QWidget
+ *    @function  isVisibleTo
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    QWidget*
  */
-ZEND_METHOD(QWidget, setFocusProxy){
-//qt_QWidget*
-		/* o public*/
+ZEND_METHOD(QWidget, isVisibleTo)
+{
+///QWidget*
+/*! o public*/
+/*! QWidget* ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QWidget* ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QWidget")) {
+          bool *return_object;
 
+          if (getThis() != NULL) {
+            RETURN_BOOL(obj->isVisibleTo((QWidget *) obj_z_0));
+          }                     /// 5 END getThis(), simple types
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			if(obj_z_0->inherits("QWidget")) {
-				obj->setFocusProxy((QWidget*) obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  releaseMouse
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
+ */
+ZEND_METHOD(QWidget, releaseMouse)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->releaseMouse();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  topLevelWidget
- *    flags:    c
- *    access:    public
- *    return:    QWidget *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setTabOrder
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    void
+ *    @param    QWidget *, QWidget *
  */
-ZEND_METHOD(QWidget, topLevelWidget){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->topLevelWidget();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, setTabOrder)
+{
+///QWidget*
+///QWidget*
+/*! oo public*/
+/*! QWidget* , QWidget* ,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
+        QObject *obj_z_1 = (QObject *) php_qt_fetch(z_1);
+
+        if (obj_z_0->inherits("QWidget") && obj_z_1->inherits("QWidget")) {
+          void *return_object;
+
+          if (getThis() != NULL) {
+            obj->setTabOrder((QWidget *) obj_z_0, (QWidget *) obj_z_1);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  mapToParent
- *    flags:    c
- *    access:    public
- *    return:    QPoint
- *    params:    const QPoint &
+/*!
+ *    @class     QWidget
+ *    @function  setFocusProxy
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QWidget *
  */
-ZEND_METHOD(QWidget, mapToParent){
-		/* l public*/
+ZEND_METHOD(QWidget, setFocusProxy)
+{
+///QWidget*
+/*! o public*/
+/*! QWidget* ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QPoint& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        if (obj_z_0->inherits("QWidget")) {
+          void *return_object;
 
-
-			QPoint* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QPoint) obj->mapToParent((const QPoint&) Z_LVAL_P(z_0));
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setFocusProxy((QWidget *) obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  overrideWindowFlags
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    Qt::WindowFlags type
+/*!
+ *    @class     QWidget
+ *    @function  topLevelWidget
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    
  */
-ZEND_METHOD(QWidget, overrideWindowFlags){
-		/* l public*/
+ZEND_METHOD(QWidget, topLevelWidget)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QWidget **return_object;
 
-		/* int type,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return: pointer
 
+/// return value is object: QWidget *
+      *return_object = static_cast < QWidget * >(obj->topLevelWidget());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
-			obj->overrideWindowFlags((Qt::WindowFlags) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
-}
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-/*********************************
- *    class     QWidget
- *    function  hide
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    
- */
-ZEND_METHOD(QWidget, hide){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->hide();
-			RETURN_NULL();
-	}
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  mapTo
- *    flags:    c
- *    access:    public
- *    return:    QPoint
- *    params:    QWidget *, const QPoint &
+/*!
+ *    @class     QWidget
+ *    @function  mapToParent
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPoint
+ *    @param    const QPoint &
  */
-ZEND_METHOD(QWidget, mapTo){
-//qt_QWidget*
-		/* ol public*/
+ZEND_METHOD(QWidget, mapToParent)
+{
+/*! l public*/
+/*! const QPoint& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QWidget* , const QPoint& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        QPoint *return_object;
 
+        if (getThis() != NULL) {
+/// return value is object: QPoint
+          *return_object = static_cast < QPoint > (obj->mapToParent((const QPoint &)Z_LVAL_P(z_0)));
+        } else {                /// END getThis(), static
+          php_error(E_ERROR, "Object not found");
+        }
+        zend_class_entry *ce;
 
-			if(obj_z_0->inherits("QWidget")) {
-				QPoint* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QPoint) obj->mapTo((QWidget*) obj_z_0, (const QPoint&) Z_LVAL_P(z_1));
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
-}
+        object_init_ex(return_value, QWidget_ce_ptr);
+        zend_rsrc_list_entry le;
 
-/*********************************
- *    class     QWidget
- *    function  childrenRect
- *    flags:    c
- *    access:    public
- *    return:    QRect
- *    params:    
- */
-ZEND_METHOD(QWidget, childrenRect){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QRect* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QRect) obj->childrenRect();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+        le.ptr = return_object;
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setStyle
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QStyle *
+/*!
+ *    @class     QWidget
+ *    @function  overrideWindowFlags
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::WindowFlags type
  */
-ZEND_METHOD(QWidget, setStyle){
-//qt_QStyle*
-		/* o public*/
+ZEND_METHOD(QWidget, overrideWindowFlags)
+{
+/*! l public*/
+/*! int type,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QStyle* ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        void *return_object;
 
-
-			if(obj_z_0->inherits("QStyle")) {
-				obj->setStyle((QStyle*) obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->overrideWindowFlags((Qt::WindowFlags) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  isRightToLeft
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  hide
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, isRightToLeft){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isRightToLeft());
-	}
+ZEND_METHOD(QWidget, hide)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->hide();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setWindowModified
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    bool
+/*!
+ *    @class     QWidget
+ *    @function  mapTo
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPoint
+ *    @param    QWidget *, const QPoint &
  */
-ZEND_METHOD(QWidget, setWindowModified){
-		/* l public_slots*/
+ZEND_METHOD(QWidget, mapTo)
+{
+///QWidget*
+/*! ol public*/
+/*! QWidget* , const QPoint& ,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        if (obj_z_0->inherits("QWidget")) {
+          QPoint *return_object;
 
+          if (getThis() != NULL) {
+/// return value is object: QPoint
+            *return_object = static_cast < QPoint > (obj->mapTo((QWidget *) obj_z_0, (const QPoint &)Z_LVAL_P(z_1)));
+          } else {              /// END getThis(), static
+            php_error(E_ERROR, "Object not found");
+          }
+          zend_class_entry *ce;
 
-			obj->setWindowModified((bool) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          object_init_ex(return_value, QWidget_ce_ptr);
+          zend_rsrc_list_entry le;
+
+          le.ptr = return_object;
+          php_qt_register(return_value, le);
+          return;
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setBackgroundRole
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QPalette::ColorRole
+/*!
+ *    @class     QWidget
+ *    @function  childrenRect
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QRect
+ *    @param    
  */
-ZEND_METHOD(QWidget, setBackgroundRole){
-		/* l public*/
+ZEND_METHOD(QWidget, childrenRect)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QRect *return_object;
 
-		/* int ,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QRect
+      *return_object = static_cast < QRect > (obj->childrenRect());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			obj->setBackgroundRole((QPalette::ColorRole) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setFixedSize
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QSize &
+/*!
+ *    @class     QWidget
+ *    @function  setStyle
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QStyle *
  */
-ZEND_METHOD(QWidget, setFixedSize){
-//const QSize&
-		/* o public*/
+ZEND_METHOD(QWidget, setStyle)
+{
+///qt_QStyle*
+/*! o public*/
+/*! qt_QStyle* ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QSize& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QStyle")) {
+          void *return_object;
 
+          if (getThis() != NULL) {
+            obj->setStyle((QStyle *) obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			if(obj_z_0->inherits("QSize")) {
-				obj->setFixedSize((const QSize&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  isRightToLeft
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
+ */
+ZEND_METHOD(QWidget, isRightToLeft)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isRightToLeft());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  focusPreviousChild
- *    flags:    
- *    access:    protected
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setWindowModified
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    bool
  */
-// method focusPreviousChild is protected, skipped.
+ZEND_METHOD(QWidget, setWindowModified)
+{
+/*! l public_slots*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-/*********************************
- *    class     QWidget
- *    function  inputContext
- *    flags:    
- *    access:    public
- *    return:    QInputContext *
- *    params:    
- */
-ZEND_METHOD(QWidget, inputContext){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QInputContext ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QInputContext *) obj->inputContext();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->setWindowModified((bool) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  palette
- *    flags:    c
- *    access:    public
- *    return:    const QPalette &
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setBackgroundRole
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QPalette::ColorRole
  */
-ZEND_METHOD(QWidget, palette){
-	if (ZEND_NUM_ARGS() == 0){
-	}
+ZEND_METHOD(QWidget, setBackgroundRole)
+{
+/*! l public*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->setBackgroundRole((QPalette::ColorRole) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setFixedHeight
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int h
+/*!
+ *    @class     QWidget
+ *    @function  setFixedSize
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QSize &
  */
-ZEND_METHOD(QWidget, setFixedHeight){
-		/* l public*/
+ZEND_METHOD(QWidget, setFixedSize)
+{
+///const QSize&
+/*! o public*/
+/*! const QSize& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int h,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        if (obj_z_0->inherits("QSize")) {
+          void *return_object;
 
-
-			obj->setFixedHeight((int) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setFixedSize((const QSize &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  repaint
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int x, int y, int w, int h
+/*!
+ *    @class     QWidget
+ *    @function  focusPreviousChild
+ *
+ *    @flags    
+ *    @access    protected
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, repaint){
-		/* llll public*/
+// method focusPreviousChild is protected, skipped.
 
-		/* int x, int y, int w, int h,  */
+/*!
+ *    @class     QWidget
+ *    @function  inputContext
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    QInputContext *
+ *    @param    
+ */
+ZEND_METHOD(QWidget, inputContext)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QInputContext **return_object;
 
-	if (ZEND_NUM_ARGS() == 4){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
+/// return: pointer
 
-			obj->repaint((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/// return value is object: QInputContext *
+      *return_object = static_cast < QInputContext * >(obj->inputContext());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  cursor
- *    flags:    c
- *    access:    public
- *    return:    QCursor
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  palette
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    const QPalette &
+ *    @param    
  */
-ZEND_METHOD(QWidget, cursor){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QCursor* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QCursor) obj->cursor();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, palette)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setWindowIconText
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QString &
+/*!
+ *    @class     QWidget
+ *    @function  setFixedHeight
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int h
  */
-ZEND_METHOD(QWidget, setWindowIconText){
-//const QString&
-		/* o public*/
+ZEND_METHOD(QWidget, setFixedHeight)
+{
+/*! l public*/
+/*! int h,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QString& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        void *return_object;
 
-
-			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
-				obj->setWindowIconText((const QString&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setFixedHeight((int)Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  fontMetrics
- *    flags:    c
- *    access:    public
- *    return:    QFontMetrics
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  repaint
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int x, int y, int w, int h
  */
-ZEND_METHOD(QWidget, fontMetrics){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QFontMetrics* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QFontMetrics) obj->fontMetrics();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, repaint)
+{
+/*! llll public*/
+/*! int x, int y, int w, int h,  */
+  if (ZEND_NUM_ARGS() == 4) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+    zval *z_2;                  /// define ZVAL
+    zval *z_3;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->repaint((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  grabShortcut
- *    flags:    
- *    access:    public
- *    return:    int
- *    params:    const QKeySequence &key, Qt::ShortcutContext context = Qt::WindowShortcut
+/*!
+ *    @class     QWidget
+ *    @function  cursor
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QCursor
+ *    @param    
  */
-ZEND_METHOD(QWidget, grabShortcut){
-//const QKeySequence&
-		/* ol public*/
+ZEND_METHOD(QWidget, cursor)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QCursor *return_object;
 
-		/* const QKeySequence& key, int context,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+/// return value is object: QCursor
+      *return_object = static_cast < QCursor > (obj->cursor());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			if(obj_z_0->inherits("QKeySequence")) {
-				RETURN_LONG(obj->grabShortcut((const QKeySequence&) *obj_z_0, (Qt::ShortcutContext) Z_LVAL_P(z_1)));
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  releaseKeyboard
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setWindowIconText
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QString &
  */
-ZEND_METHOD(QWidget, releaseKeyboard){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->releaseKeyboard();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, setWindowIconText)
+{
+///const QString&
+/*! o public*/
+/*! const QString& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
+
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
+          void *return_object;
+
+          if (getThis() != NULL) {
+            obj->setWindowIconText((const QString &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setAccessibleDescription
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QString &description
+/*!
+ *    @class     QWidget
+ *    @function  fontMetrics
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QFontMetrics
+ *    @param    
  */
-ZEND_METHOD(QWidget, setAccessibleDescription){
-//const QString&
-		/* o public*/
+ZEND_METHOD(QWidget, fontMetrics)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QFontMetrics *return_object;
 
-		/* const QString& description,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+/// return value is object: QFontMetrics
+      *return_object = static_cast < QFontMetrics > (obj->fontMetrics());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
-				obj->setAccessibleDescription((const QString&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  qObject
- *    flags:    
- *    access:    public
- *    return:    QObject*
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  grabShortcut
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    int
+ *    @param    const QKeySequence &key, Qt::ShortcutContext context = Qt::WindowShortcut
  */
-ZEND_METHOD(QWidget, qObject){
+ZEND_METHOD(QWidget, grabShortcut)
+{
+///const QKeySequence&
+/*! ol public*/
+/*! const QKeySequence& key, int context,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
+
+        if (obj_z_0->inherits("QKeySequence")) {
+          int *return_object;
+
+          if (getThis() != NULL) {
+            RETURN_LONG(obj->grabShortcut((const QKeySequence &)*obj_z_0, (Qt::ShortcutContext) Z_LVAL_P(z_1)));
+          }                     /// 5 END getThis(), simple types
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  maximumWidth
- *    flags:    c
- *    access:    public
- *    return:    int
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  releaseKeyboard
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, maximumWidth){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->maximumWidth());
-	}
+ZEND_METHOD(QWidget, releaseKeyboard)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->releaseKeyboard();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setWindowOpacity
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    qreal level
+/*!
+ *    @class     QWidget
+ *    @function  setAccessibleDescription
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QString &description
  */
-ZEND_METHOD(QWidget, setWindowOpacity){
-		/* l public*/
+ZEND_METHOD(QWidget, setAccessibleDescription)
+{
+///const QString&
+/*! o public*/
+/*! const QString& description,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* double level,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
+          void *return_object;
 
+          if (getThis() != NULL) {
+            obj->setAccessibleDescription((const QString &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			obj->setWindowOpacity((qreal) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  qObject
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    QObject*
+ *    @param    
+ */
+ZEND_METHOD(QWidget, qObject)
+{
 }
 
-/*********************************
- *    class     QWidget
- *    function  isTopLevel
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  maximumWidth
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QWidget, isTopLevel){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isTopLevel());
-	}
+ZEND_METHOD(QWidget, maximumWidth)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->maximumWidth());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  mask
- *    flags:    c
- *    access:    public
- *    return:    QRegion
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setWindowOpacity
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    qreal level
  */
-ZEND_METHOD(QWidget, mask){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QRegion* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QRegion) obj->mask();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, setWindowOpacity)
+{
+/*! l public*/
+/*! double level,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->setWindowOpacity((qreal) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  isActiveWindow
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isTopLevel
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, isActiveWindow){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isActiveWindow());
-	}
+ZEND_METHOD(QWidget, isTopLevel)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isTopLevel());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  isEnabledTo
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    QWidget*
+/*!
+ *    @class     QWidget
+ *    @function  mask
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QRegion
+ *    @param    
  */
-ZEND_METHOD(QWidget, isEnabledTo){
-//qt_QWidget*
-		/* o public*/
+ZEND_METHOD(QWidget, mask)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QRegion *return_object;
 
-		/* qt_QWidget* ,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+/// return value is object: QRegion
+      *return_object = static_cast < QRegion > (obj->mask());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			if(obj_z_0->inherits("QWidget")) {
-				RETURN_BOOL(obj->isEnabledTo((QWidget*) obj_z_0));
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  layoutDirection
- *    flags:    c
- *    access:    public
- *    return:    Qt::LayoutDirection
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isActiveWindow
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, layoutDirection){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->layoutDirection());
-	}
+ZEND_METHOD(QWidget, isActiveWindow)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isActiveWindow());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  isAncestorOf
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    const QWidget *child
+/*!
+ *    @class     QWidget
+ *    @function  isEnabledTo
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    QWidget*
  */
-ZEND_METHOD(QWidget, isAncestorOf){
-//const QWidget*
-		/* o public*/
+ZEND_METHOD(QWidget, isEnabledTo)
+{
+///QWidget*
+/*! o public*/
+/*! QWidget* ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QWidget* child,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QWidget")) {
+          bool *return_object;
 
+          if (getThis() != NULL) {
+            RETURN_BOOL(obj->isEnabledTo((QWidget *) obj_z_0));
+          }                     /// 5 END getThis(), simple types
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			if(obj_z_0->inherits("QWidget")) {
-				RETURN_BOOL(obj->isAncestorOf((const QWidget*) obj_z_0));
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  layoutDirection
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    Qt::LayoutDirection
+ *    @param    
+ */
+ZEND_METHOD(QWidget, layoutDirection)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    Qt::LayoutDirection * return_object;
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->layoutDirection());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  windowIcon
- *    flags:    c
- *    access:    public
- *    return:    QIcon
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isAncestorOf
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    const QWidget *child
  */
-ZEND_METHOD(QWidget, windowIcon){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->windowIcon();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, isAncestorOf)
+{
+///const QWidget*
+/*! o public*/
+/*! const QWidget* child,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
+
+        if (obj_z_0->inherits("QWidget")) {
+          bool *return_object;
+
+          if (getThis() != NULL) {
+            RETURN_BOOL(obj->isAncestorOf((const QWidget *)obj_z_0));
+          }                     /// 5 END getThis(), simple types
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  updatesEnabled
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  windowIcon
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QIcon
+ *    @param    
  */
-ZEND_METHOD(QWidget, updatesEnabled){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->updatesEnabled());
-	}
+ZEND_METHOD(QWidget, windowIcon)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QIcon *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->windowIcon();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  isMinimized
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  updatesEnabled
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, isMinimized){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isMinimized());
-	}
+ZEND_METHOD(QWidget, updatesEnabled)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->updatesEnabled());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  height
- *    flags:    c
- *    access:    public
- *    return:    int
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isMinimized
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, height){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->height());
-	}
+ZEND_METHOD(QWidget, isMinimized)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isMinimized());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  normalGeometry
- *    flags:    c
- *    access:    public
- *    return:    QRect
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  height
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QWidget, normalGeometry){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QRect* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QRect) obj->normalGeometry();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, height)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->height());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setMask
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QBitmap &
+/*!
+ *    @class     QWidget
+ *    @function  normalGeometry
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QRect
+ *    @param    
  */
-ZEND_METHOD(QWidget, setMask){
-//const QBitmap&
-		/* o public*/
+ZEND_METHOD(QWidget, normalGeometry)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QRect *return_object;
 
-		/* const QBitmap& ,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+/// return value is object: QRect
+      *return_object = static_cast < QRect > (obj->normalGeometry());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			if(obj_z_0->inherits("QBitmap")) {
-				obj->setMask((const QBitmap&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setForegroundRole
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QPalette::ColorRole
+/*!
+ *    @class     QWidget
+ *    @function  setMask
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QBitmap &
  */
-ZEND_METHOD(QWidget, setForegroundRole){
-		/* l public*/
+ZEND_METHOD(QWidget, setMask)
+{
+///const QBitmap&
+/*! o public*/
+/*! const QBitmap& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        if (obj_z_0->inherits("QBitmap")) {
+          void *return_object;
 
-
-			obj->setForegroundRole((QPalette::ColorRole) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setMask((const QBitmap &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  update
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int x, int y, int w, int h
+/*!
+ *    @class     QWidget
+ *    @function  setForegroundRole
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QPalette::ColorRole
  */
-ZEND_METHOD(QWidget, update){
-		/* llll public*/
+ZEND_METHOD(QWidget, setForegroundRole)
+{
+/*! l public*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int x, int y, int w, int h,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 4){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->update((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setForegroundRole((QPalette::ColorRole) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  adjustSize
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  update
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int x, int y, int w, int h
  */
-ZEND_METHOD(QWidget, adjustSize){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->adjustSize();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, update)
+{
+/*! llll public*/
+/*! int x, int y, int w, int h,  */
+  if (ZEND_NUM_ARGS() == 4) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+    zval *z_2;                  /// define ZVAL
+    zval *z_3;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->update((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  toolTip
- *    flags:    c
- *    access:    public
- *    return:    QString
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  adjustSize
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, toolTip){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->toolTip();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, adjustSize)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->adjustSize();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setCursor
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QCursor &
+/*!
+ *    @class     QWidget
+ *    @function  toolTip
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QString
+ *    @param    
  */
-ZEND_METHOD(QWidget, setCursor){
-//const QCursor&
-		/* o public*/
+ZEND_METHOD(QWidget, toolTip)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QString *return_object;
 
-		/* const QCursor& ,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+/// return value is object: QString
+      *return_object = static_cast < QString > (obj->toolTip());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			if(obj_z_0->inherits("QCursor")) {
-				obj->setCursor((const QCursor&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setMinimumWidth
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int minw
+/*!
+ *    @class     QWidget
+ *    @function  setCursor
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QCursor &
  */
-ZEND_METHOD(QWidget, setMinimumWidth){
-		/* l public*/
+ZEND_METHOD(QWidget, setCursor)
+{
+///const QCursor&
+/*! o public*/
+/*! const QCursor& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int minw,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        if (obj_z_0->inherits("QCursor")) {
+          void *return_object;
 
+          if (getThis() != NULL) {
+            obj->setCursor((const QCursor &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			obj->setMinimumWidth((int) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  setMinimumWidth
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int minw
+ */
+ZEND_METHOD(QWidget, setMinimumWidth)
+{
+/*! l public*/
+/*! int minw,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->setMinimumWidth((int)Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  isEnabledToTLW
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isEnabledToTLW
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, isEnabledToTLW){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isEnabledToTLW());
-	}
+ZEND_METHOD(QWidget, isEnabledToTLW)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isEnabledToTLW());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setWindowRole
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QString &
+/*!
+ *    @class     QWidget
+ *    @function  setWindowRole
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QString &
  */
-ZEND_METHOD(QWidget, setWindowRole){
-//const QString&
-		/* o public*/
+ZEND_METHOD(QWidget, setWindowRole)
+{
+///const QString&
+/*! o public*/
+/*! const QString& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QString& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
+          void *return_object;
 
-
-			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
-				obj->setWindowRole((const QString&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setWindowRole((const QString &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setPalette
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QPalette &
+/*!
+ *    @class     QWidget
+ *    @function  setPalette
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QPalette &
  */
-ZEND_METHOD(QWidget, setPalette){
-//const QPalette&
-		/* o public*/
+ZEND_METHOD(QWidget, setPalette)
+{
+///const QPalette&
+/*! o public*/
+/*! const QPalette& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QPalette& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QPalette")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QPalette")) {
-				obj->setPalette((const QPalette&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setPalette((const QPalette &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  acceptDrops
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  acceptDrops
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, acceptDrops){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->acceptDrops());
-	}
+ZEND_METHOD(QWidget, acceptDrops)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->acceptDrops());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  focusNextChild
- *    flags:    
- *    access:    protected
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  focusNextChild
+ *
+ *    @flags    
+ *    @access    protected
+ *    @return    bool
+ *    @param    
  */
 // method focusNextChild is protected, skipped.
 
-/*********************************
- *    class     QWidget
- *    function  setShortcutEnabled
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int id, bool enable = true
+/*!
+ *    @class     QWidget
+ *    @function  setShortcutEnabled
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int id, bool enable = true
  */
-ZEND_METHOD(QWidget, setShortcutEnabled){
-		/* ll public*/
+ZEND_METHOD(QWidget, setShortcutEnabled)
+{
+/*! ll public*/
+/*! int id, int enable,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int id, int enable,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
+        if (getThis() != NULL) {
+          obj->setShortcutEnabled((int)Z_LVAL_P(z_0), (bool) Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			obj->setShortcutEnabled((int) Z_LVAL_P(z_0) ,(bool) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  geometry
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    const QRect &
+ *    @param    
+ */
+ZEND_METHOD(QWidget, geometry)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  geometry
- *    flags:    c
- *    access:    public
- *    return:    const QRect &
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setShown
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    bool shown
  */
-ZEND_METHOD(QWidget, geometry){
-	if (ZEND_NUM_ARGS() == 0){
-	}
+ZEND_METHOD(QWidget, setShown)
+{
+/*! l public_slots*/
+/*! int shown,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->setShown((bool) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setShown
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    bool shown
+/*!
+ *    @class     QWidget
+ *    @function  accessibleDescription
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QString
+ *    @param    
  */
-ZEND_METHOD(QWidget, setShown){
-		/* l public_slots*/
+ZEND_METHOD(QWidget, accessibleDescription)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QString *return_object;
 
-		/* int shown,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QString
+      *return_object = static_cast < QString > (obj->accessibleDescription());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			obj->setShown((bool) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  accessibleDescription
- *    flags:    c
- *    access:    public
- *    return:    QString
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setMaximumSize
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QSize &
  */
-ZEND_METHOD(QWidget, accessibleDescription){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->accessibleDescription();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, setMaximumSize)
+{
+///const QSize&
+/*! o public*/
+/*! const QSize& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
+
+        if (obj_z_0->inherits("QSize")) {
+          void *return_object;
+
+          if (getThis() != NULL) {
+            obj->setMaximumSize((const QSize &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setMaximumSize
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QSize &
+/*!
+ *    @class     QWidget
+ *    @function  setContentsMargins
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int left, int top, int right, int bottom
  */
-ZEND_METHOD(QWidget, setMaximumSize){
-//const QSize&
-		/* o public*/
+ZEND_METHOD(QWidget, setContentsMargins)
+{
+/*! llll public*/
+/*! int left, int top, int right, int bottom,  */
+  if (ZEND_NUM_ARGS() == 4) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+    zval *z_2;                  /// define ZVAL
+    zval *z_3;                  /// define ZVAL
 
-		/* const QSize& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        void *return_object;
 
+        if (getThis() != NULL) {
+          obj->setContentsMargins((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			if(obj_z_0->inherits("QSize")) {
-				obj->setMaximumSize((const QSize&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  backgroundRole
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPalette::ColorRole
+ *    @param    
+ */
+ZEND_METHOD(QWidget, backgroundRole)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QPalette::ColorRole * return_object;
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->backgroundRole());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setContentsMargins
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int left, int top, int right, int bottom
+/*!
+ *    @class     QWidget
+ *    @function  mapFromParent
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPoint
+ *    @param    const QPoint &
  */
-ZEND_METHOD(QWidget, setContentsMargins){
-		/* llll public*/
+ZEND_METHOD(QWidget, mapFromParent)
+{
+/*! l public*/
+/*! const QPoint& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int left, int top, int right, int bottom,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 4){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        QPoint *return_object;
 
+        if (getThis() != NULL) {
+/// return value is object: QPoint
+          *return_object = static_cast < QPoint > (obj->mapFromParent((const QPoint &)Z_LVAL_P(z_0)));
+        } else {                /// END getThis(), static
+          php_error(E_ERROR, "Object not found");
+        }
+        zend_class_entry *ce;
 
-			obj->setContentsMargins((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        object_init_ex(return_value, QWidget_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object;
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  backgroundRole
- *    flags:    c
- *    access:    public
- *    return:    QPalette::ColorRole
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  updateGeometry
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, backgroundRole){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->backgroundRole());
-	}
+ZEND_METHOD(QWidget, updateGeometry)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->updateGeometry();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  mapFromParent
- *    flags:    c
- *    access:    public
- *    return:    QPoint
- *    params:    const QPoint &
+/*!
+ *    @class     QWidget
+ *    @function  setAttribute
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::WidgetAttribute, bool on = true
  */
-ZEND_METHOD(QWidget, mapFromParent){
-		/* l public*/
+ZEND_METHOD(QWidget, setAttribute)
+{
+/*! ll public*/
+/*! int , int on,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* const QPoint& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			QPoint* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QPoint) obj->mapFromParent((const QPoint&) Z_LVAL_P(z_0));
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setAttribute((Qt::WidgetAttribute) Z_LVAL_P(z_0), (bool) Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  updateGeometry
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  windowType
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    Qt::WindowType
+ *    @param    
  */
-ZEND_METHOD(QWidget, updateGeometry){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->updateGeometry();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, windowType)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    Qt::WindowType * return_object;
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->windowType();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setAttribute
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    Qt::WidgetAttribute, bool on = true
+/*!
+ *    @class     QWidget
+ *    @function  focusWidget
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    
  */
-ZEND_METHOD(QWidget, setAttribute){
-		/* ll public*/
+ZEND_METHOD(QWidget, focusWidget)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QWidget **return_object;
 
-		/* int , int on,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return: pointer
 
+/// return value is object: QWidget *
+      *return_object = static_cast < QWidget * >(obj->focusWidget());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
-			obj->setAttribute((Qt::WidgetAttribute) Z_LVAL_P(z_0) ,(bool) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  windowType
- *    flags:    c
- *    access:    public
- *    return:    Qt::WindowType
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  ensurePolished
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, windowType){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->windowType();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, ensurePolished)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->ensurePolished();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  focusWidget
- *    flags:    c
- *    access:    public
- *    return:    QWidget *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  foregroundRole
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPalette::ColorRole
+ *    @param    
  */
-ZEND_METHOD(QWidget, focusWidget){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->focusWidget();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, foregroundRole)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QPalette::ColorRole * return_object;
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->foregroundRole());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  ensurePolished
- *    flags:    c
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setEnabled
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    bool
  */
-ZEND_METHOD(QWidget, ensurePolished){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->ensurePolished();
-			RETURN_NULL();
-	}
-}
+ZEND_METHOD(QWidget, setEnabled)
+{
+/*! l public_slots*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-/*********************************
- *    class     QWidget
- *    function  foregroundRole
- *    flags:    c
- *    access:    public
- *    return:    QPalette::ColorRole
- *    params:    
- */
-ZEND_METHOD(QWidget, foregroundRole){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->foregroundRole());
-	}
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->setEnabled((bool) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setEnabled
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    bool
+/*!
+ *    @class     QWidget
+ *    @function  windowIconText
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QString
+ *    @param    
  */
-ZEND_METHOD(QWidget, setEnabled){
-		/* l public_slots*/
+ZEND_METHOD(QWidget, windowIconText)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QString *return_object;
 
-		/* int ,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QString
+      *return_object = static_cast < QString > (obj->windowIconText());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			obj->setEnabled((bool) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  windowIconText
- *    flags:    c
- *    access:    public
- *    return:    QString
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  updateMicroFocus
+ *
+ *    @flags    
+ *    @access    protected
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, windowIconText){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->windowIconText();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
-}
-
-/*********************************
- *    class     QWidget
- *    function  updateMicroFocus
- *    flags:    
- *    access:    protected
- *    return:    void
- *    params:    
- */
 // method updateMicroFocus is protected, skipped.
 
-/*********************************
- *    class     QWidget
- *    function  metric
- *    flags:    c
- *    access:    protected
- *    return:    int
- *    params:    PaintDeviceMetric
+/*!
+ *    @class     QWidget
+ *    @function  metric
+ *
+ *    @flags    c
+ *    @access    protected
+ *    @return    int
+ *    @param    PaintDeviceMetric
  */
 // method metric is protected, skipped.
 
-/*********************************
- *    class     QWidget
- *    function  winId
- *    flags:    c
- *    access:    public
- *    return:    WId
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  winId
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    WId
+ *    @param    
  */
-ZEND_METHOD(QWidget, winId){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->winId());
-	}
+ZEND_METHOD(QWidget, winId)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    WId *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->winId());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  close
- *    flags:    l
- *    access:    public_slots
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  close
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, close){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->close());
-	}
+ZEND_METHOD(QWidget, close)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->close());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  childAt
- *    flags:    c
- *    access:    public
- *    return:    QWidget *
- *    params:    int x, int y
+/*!
+ *    @class     QWidget
+ *    @function  childAt
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    int x, int y
  */
-ZEND_METHOD(QWidget, childAt){
-		/* ll public*/
+ZEND_METHOD(QWidget, childAt)
+{
+/*! ll public*/
+/*! int x, int y,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int x, int y,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        QWidget **return_object;
 
+        if (getThis() != NULL) {
+/// return: pointer
 
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->childAt((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/// return value is object: QWidget *
+          *return_object = static_cast < QWidget * >(obj->childAt((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1)));
+        } else {                /// END getThis(), static
+          php_error(E_ERROR, "Object not found");
+        }
+        zend_class_entry *ce;
+
+        object_init_ex(return_value, QWidget_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object[0];
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setFixedWidth
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int w
+/*!
+ *    @class     QWidget
+ *    @function  setFixedWidth
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int w
  */
-ZEND_METHOD(QWidget, setFixedWidth){
-		/* l public*/
+ZEND_METHOD(QWidget, setFixedWidth)
+{
+/*! l public*/
+/*! int w,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int w,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setFixedWidth((int) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setFixedWidth((int)Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  windowRole
- *    flags:    c
- *    access:    public
- *    return:    QString
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  windowRole
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QString
+ *    @param    
  */
-ZEND_METHOD(QWidget, windowRole){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->windowRole();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, windowRole)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QString *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return value is object: QString
+      *return_object = static_cast < QString > (obj->windowRole());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setFont
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QFont &
+/*!
+ *    @class     QWidget
+ *    @function  setFont
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QFont &
  */
-ZEND_METHOD(QWidget, setFont){
-//const QFont&
-		/* o public*/
+ZEND_METHOD(QWidget, setFont)
+{
+///const QFont&
+/*! o public*/
+/*! const QFont& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QFont& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QFont")) {
+          void *return_object;
 
-
-			if(!strcmp(Z_OBJCE_P(z_0)->name,"QFont")) {
-				obj->setFont((const QFont&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setFont((const QFont &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  hasMouseTracking
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  hasMouseTracking
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, hasMouseTracking){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->hasMouseTracking());
-	}
+ZEND_METHOD(QWidget, hasMouseTracking)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->hasMouseTracking());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  childrenRegion
- *    flags:    c
- *    access:    public
- *    return:    QRegion
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  childrenRegion
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QRegion
+ *    @param    
  */
-ZEND_METHOD(QWidget, childrenRegion){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QRegion* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QRegion) obj->childrenRegion();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, childrenRegion)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QRegion *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return value is object: QRegion
+      *return_object = static_cast < QRegion > (obj->childrenRegion());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  QWidget
- *    flags:    t
- *    access:    public
- *    return:    
- *    params:    QWidget* parent = 0, Qt::WFlags f = 0
+/*!
+ *    @class     QWidget
+ *    @function  QWidget
+ *
+ *    @flags    t
+ *    @access    public
+ *    @return    
+ *    @param    QWidget* parent = 0, Qt::WFlags f = 0
  */
-ZEND_METHOD(QWidget, __construct){
-//qt_QWidget*
-		/* ol public*/
+ZEND_METHOD(QWidget, __construct)
+{
+///QWidget*
+  if (ZEND_NUM_ARGS() == 0) {
+          QWidget *QWidget_ptr = new QWidget();
 
-		/* qt_QWidget* parent, int f,  */
+          PHP_QT_REGISTER(QWidget_ptr);
+          RETURN_NULL();
+  }
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+/*! ol public*/
+/*! QWidget* parent, int f,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG) {
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-//			if(obj_z_0->inherits("QWidget")) {
-				QWidget *QWidget_ptr = new QWidget((QWidget*) obj_z_0, (Qt::WFlags) Z_LVAL_P(z_1));
-				PHP_QT_REGISTER(QWidget_ptr);
-				RETURN_NULL();
-//			} else { php_error(E_ERROR,"error."); }
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (obj_z_0->inherits("QWidget")) {
+          QWidget *QWidget_ptr = new QWidget((QWidget *) obj_z_0, (Qt::WFlags) Z_LVAL_P(z_1));
+
+          PHP_QT_REGISTER(QWidget_ptr);
+          RETURN_NULL();
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setInputContext
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QInputContext *
+/*!
+ *    @class     QWidget
+ *    @function  setInputContext
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QInputContext *
  */
-ZEND_METHOD(QWidget, setInputContext){
-//QInputContext*
-		/* o public*/
+ZEND_METHOD(QWidget, setInputContext)
+{
+///QInputContext*
+/*! o public*/
+/*! QInputContext* ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* QInputContext* ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QInputContext")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QInputContext")) {
-				obj->setInputContext((QInputContext*) obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setInputContext((QInputContext *) obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  unsetLayoutDirection
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  unsetLayoutDirection
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, unsetLayoutDirection){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->unsetLayoutDirection();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, unsetLayoutDirection)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->unsetLayoutDirection();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  sizeIncrement
- *    flags:    c
- *    access:    public
- *    return:    QSize
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  sizeIncrement
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSize
+ *    @param    
  */
-ZEND_METHOD(QWidget, sizeIncrement){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QSize* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QSize) obj->sizeIncrement();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, sizeIncrement)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSize *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return value is object: QSize
+      *return_object = static_cast < QSize > (obj->sizeIncrement());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  mouseGrabber
- *    flags:    s
- *    access:    public
- *    return:    QWidget *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  mouseGrabber
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    
  */
-ZEND_METHOD(QWidget, mouseGrabber){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->mouseGrabber();
-			} else {
-				*return_object = (QWidget *) QWidget::mouseGrabber();
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, mouseGrabber)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QWidget **return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return: pointer
+
+/// return value is object: QWidget *
+      *return_object = static_cast < QWidget * >(obj->mouseGrabber());
+/// check whether method call is static.
+    } else {
+      return_object = (QWidget **) malloc(sizeof (QWidget::mouseGrabber()));    /// memory allocation
+      *return_object = static_cast < QWidget * >(QWidget::mouseGrabber());
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  trUtf8
- *    flags:    s
- *    access:    public
- *    return:    QString
- *    params:     const char *, const char * = 0 
+/*!
+ *    @class     QWidget
+ *    @function  trUtf8
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    QString
+ *    @param     const char *, const char * = 0 
  */
-ZEND_METHOD(QWidget, trUtf8){
-		/* ss public*/
+ZEND_METHOD(QWidget, trUtf8)
+{
+/*! ss public*/
+/*! const char* , const char* ,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* const char* , const char* ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        QString *return_object;
 
+        if (getThis() != NULL) {
+/// return value is object: QString
+          *return_object = static_cast < QString > (obj->trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
+/// check whether method call is static.
+        } else {
+          return_object = (QString *) malloc(sizeof (QWidget::trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1))));   /// memory allocation
+          *return_object = static_cast < QString > (QWidget::trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
+        } zend_class_entry *ce;
 
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
-			} else {
-				*return_object = (QString) QWidget::trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        object_init_ex(return_value, QWidget_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object;
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  resetInputContext
- *    flags:    
- *    access:    protected
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  resetInputContext
+ *
+ *    @flags    
+ *    @access    protected
+ *    @return    void
+ *    @param    
  */
 // method resetInputContext is protected, skipped.
 
-/*********************************
- *    class     QWidget
- *    function  isFullScreen
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isFullScreen
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, isFullScreen){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isFullScreen());
-	}
+ZEND_METHOD(QWidget, isFullScreen)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isFullScreen());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  mapToGlobal
- *    flags:    c
- *    access:    public
- *    return:    QPoint
- *    params:    const QPoint &
+/*!
+ *    @class     QWidget
+ *    @function  mapToGlobal
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPoint
+ *    @param    const QPoint &
  */
-ZEND_METHOD(QWidget, mapToGlobal){
-		/* l public*/
+ZEND_METHOD(QWidget, mapToGlobal)
+{
+/*! l public*/
+/*! const QPoint& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QPoint& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        QPoint *return_object;
 
+        if (getThis() != NULL) {
+/// return value is object: QPoint
+          *return_object = static_cast < QPoint > (obj->mapToGlobal((const QPoint &)Z_LVAL_P(z_0)));
+        } else {                /// END getThis(), static
+          php_error(E_ERROR, "Object not found");
+        }
+        zend_class_entry *ce;
 
-			QPoint* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QPoint) obj->mapToGlobal((const QPoint&) Z_LVAL_P(z_0));
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        object_init_ex(return_value, QWidget_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object;
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  move
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int x, int y
+/*!
+ *    @class     QWidget
+ *    @function  move
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int x, int y
  */
-ZEND_METHOD(QWidget, move){
-		/* ll public*/
+ZEND_METHOD(QWidget, move)
+{
+/*! ll public*/
+/*! int x, int y,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int x, int y,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->move((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->move((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  mapFromGlobal
- *    flags:    c
- *    access:    public
- *    return:    QPoint
- *    params:    const QPoint &
+/*!
+ *    @class     QWidget
+ *    @function  mapFromGlobal
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPoint
+ *    @param    const QPoint &
  */
-ZEND_METHOD(QWidget, mapFromGlobal){
-		/* l public*/
+ZEND_METHOD(QWidget, mapFromGlobal)
+{
+/*! l public*/
+/*! const QPoint& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QPoint& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        QPoint *return_object;
 
+        if (getThis() != NULL) {
+/// return value is object: QPoint
+          *return_object = static_cast < QPoint > (obj->mapFromGlobal((const QPoint &)Z_LVAL_P(z_0)));
+        } else {                /// END getThis(), static
+          php_error(E_ERROR, "Object not found");
+        }
+        zend_class_entry *ce;
 
-			QPoint* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QPoint) obj->mapFromGlobal((const QPoint&) Z_LVAL_P(z_0));
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        object_init_ex(return_value, QWidget_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object;
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setUpdatesEnabled
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    bool enable
+/*!
+ *    @class     QWidget
+ *    @function  setUpdatesEnabled
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    bool enable
  */
-ZEND_METHOD(QWidget, setUpdatesEnabled){
-		/* l public*/
+ZEND_METHOD(QWidget, setUpdatesEnabled)
+{
+/*! l public*/
+/*! int enable,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int enable,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setUpdatesEnabled((bool) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setUpdatesEnabled((bool) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setSizeIncrement
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QSize &
+/*!
+ *    @class     QWidget
+ *    @function  setSizeIncrement
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QSize &
  */
-ZEND_METHOD(QWidget, setSizeIncrement){
-//const QSize&
-		/* o public*/
+ZEND_METHOD(QWidget, setSizeIncrement)
+{
+///const QSize&
+/*! o public*/
+/*! const QSize& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QSize& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QSize")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QSize")) {
-				obj->setSizeIncrement((const QSize&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setSizeIncrement((const QSize &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  grabMouse
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  grabMouse
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, grabMouse){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->grabMouse();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, grabMouse)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->grabMouse();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  layout
- *    flags:    c
- *    access:    public
- *    return:    QLayout *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  layout
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QLayout *
+ *    @param    
  */
-ZEND_METHOD(QWidget, layout){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QLayout ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QLayout *) obj->layout();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, layout)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QLayout **return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return: pointer
+
+/// return value is object: QLayout *
+      *return_object = static_cast < QLayout * >(obj->layout());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  mapFrom
- *    flags:    c
- *    access:    public
- *    return:    QPoint
- *    params:    QWidget *, const QPoint &
+/*!
+ *    @class     QWidget
+ *    @function  mapFrom
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPoint
+ *    @param    QWidget *, const QPoint &
  */
-ZEND_METHOD(QWidget, mapFrom){
-//qt_QWidget*
-		/* ol public*/
+ZEND_METHOD(QWidget, mapFrom)
+{
+///QWidget*
+/*! ol public*/
+/*! QWidget* , const QPoint& ,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* qt_QWidget* , const QPoint& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QWidget")) {
+          QPoint *return_object;
 
+          if (getThis() != NULL) {
+/// return value is object: QPoint
+            *return_object = static_cast < QPoint > (obj->mapFrom((QWidget *) obj_z_0, (const QPoint &)Z_LVAL_P(z_1)));
+          } else {              /// END getThis(), static
+            php_error(E_ERROR, "Object not found");
+          }
+          zend_class_entry *ce;
 
-			if(obj_z_0->inherits("QWidget")) {
-				QPoint* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QPoint) obj->mapFrom((QWidget*) obj_z_0, (const QPoint&) Z_LVAL_P(z_1));
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          object_init_ex(return_value, QWidget_ce_ptr);
+          zend_rsrc_list_entry le;
+
+          le.ptr = return_object;
+          php_qt_register(return_value, le);
+          return;
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  windowFlags
- *    flags:    c
- *    access:    public
- *    return:    Qt::WindowFlags
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  windowFlags
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    Qt::WindowFlags
+ *    @param    
  */
-ZEND_METHOD(QWidget, windowFlags){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->windowFlags());
-	}
+ZEND_METHOD(QWidget, windowFlags)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    Qt::WindowFlags * return_object;
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->windowFlags());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  isModal
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isModal
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, isModal){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isModal());
-	}
+ZEND_METHOD(QWidget, isModal)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isModal());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  unsetCursor
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  unsetCursor
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, unsetCursor){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->unsetCursor();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, unsetCursor)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->unsetCursor();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setLayoutDirection
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    Qt::LayoutDirection direction
+/*!
+ *    @class     QWidget
+ *    @function  setLayoutDirection
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::LayoutDirection direction
  */
-ZEND_METHOD(QWidget, setLayoutDirection){
-		/* l public*/
+ZEND_METHOD(QWidget, setLayoutDirection)
+{
+/*! l public*/
+/*! int direction,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int direction,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
+        if (getThis() != NULL) {
+          obj->setLayoutDirection((Qt::LayoutDirection) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			obj->setLayoutDirection((Qt::LayoutDirection) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  maximumHeight
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QWidget, maximumHeight)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->maximumHeight());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  maximumHeight
- *    flags:    c
- *    access:    public
- *    return:    int
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  frameGeometry
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QRect
+ *    @param    
  */
-ZEND_METHOD(QWidget, maximumHeight){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->maximumHeight());
-	}
+ZEND_METHOD(QWidget, frameGeometry)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QRect *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return value is object: QRect
+      *return_object = static_cast < QRect > (obj->frameGeometry());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  frameGeometry
- *    flags:    c
- *    access:    public
- *    return:    QRect
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  handle
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    Qt::HANDLE
+ *    @param    
  */
-ZEND_METHOD(QWidget, frameGeometry){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QRect* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QRect) obj->frameGeometry();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, handle)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    Qt::HANDLE * return_object;
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->handle();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  handle
- *    flags:    c
- *    access:    public
- *    return:    Qt::HANDLE
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  lower
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, handle){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->handle();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, lower)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->lower();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  lower
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setWindowTitle
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QString &
  */
-ZEND_METHOD(QWidget, lower){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->lower();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, setWindowTitle)
+{
+///const QString&
+/*! o public*/
+/*! const QString& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
+
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
+          void *return_object;
+
+          if (getThis() != NULL) {
+            obj->setWindowTitle((const QString &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setWindowTitle
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QString &
+/*!
+ *    @class     QWidget
+ *    @function  setWindowState
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::WindowStates state
  */
-ZEND_METHOD(QWidget, setWindowTitle){
-//const QString&
-		/* o public*/
+ZEND_METHOD(QWidget, setWindowState)
+{
+/*! l public*/
+/*! int state,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QString& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        void *return_object;
 
-
-			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
-				obj->setWindowTitle((const QString&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setWindowState((Qt::WindowStates) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setWindowState
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    Qt::WindowStates state
+/*!
+ *    @class     QWidget
+ *    @function  scroll
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int dx, int dy
  */
-ZEND_METHOD(QWidget, setWindowState){
-		/* l public*/
+ZEND_METHOD(QWidget, scroll)
+{
+/*! ll public*/
+/*! int dx, int dy,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int state,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setWindowState((Qt::WindowStates) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->scroll((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  scroll
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int dx, int dy
+/*!
+ *    @class     QWidget
+ *    @function  sizePolicy
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSizePolicy
+ *    @param    
  */
-ZEND_METHOD(QWidget, scroll){
-		/* ll public*/
+ZEND_METHOD(QWidget, sizePolicy)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSizePolicy *return_object;
 
-		/* int dx, int dy,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QSizePolicy
+      *return_object = static_cast < QSizePolicy > (obj->sizePolicy());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			obj->scroll((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  sizePolicy
- *    flags:    c
- *    access:    public
- *    return:    QSizePolicy
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  width
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QWidget, sizePolicy){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QSizePolicy* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QSizePolicy) obj->sizePolicy();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
-}
+ZEND_METHOD(QWidget, width)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
 
-/*********************************
- *    class     QWidget
- *    function  width
- *    flags:    c
- *    access:    public
- *    return:    int
- *    params:    
- */
-ZEND_METHOD(QWidget, width){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->width());
-	}
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->width());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setHidden
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    bool hidden
+/*!
+ *    @class     QWidget
+ *    @function  setHidden
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    bool hidden
  */
-ZEND_METHOD(QWidget, setHidden){
-		/* l public_slots*/
+ZEND_METHOD(QWidget, setHidden)
+{
+/*! l public_slots*/
+/*! int hidden,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int hidden,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setHidden((bool) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setHidden((bool) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  find
- *    flags:    s
- *    access:    public
- *    return:    QWidget *
- *    params:    WId
+/*!
+ *    @class     QWidget
+ *    @function  find
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    WId
  */
-ZEND_METHOD(QWidget, find){
-		/* l public*/
+ZEND_METHOD(QWidget, find)
+{
+/*! l public*/
+/*! unsigned int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* unsigned int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        QWidget **return_object;
 
+        if (getThis() != NULL) {
+/// return: pointer
 
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->find((WId) Z_LVAL_P(z_0));
-			} else {
-				*return_object = (QWidget *) QWidget::find((WId) Z_LVAL_P(z_0));
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/// return value is object: QWidget *
+          *return_object = static_cast < QWidget * >(obj->find((WId) Z_LVAL_P(z_0)));
+/// check whether method call is static.
+        } else {
+          return_object = (QWidget **) malloc(sizeof (QWidget::find((WId) Z_LVAL_P(z_0))));     /// memory allocation
+          *return_object = static_cast < QWidget * >(QWidget::find((WId) Z_LVAL_P(z_0)));
+        }
+        zend_class_entry *ce;
+
+        object_init_ex(return_value, QWidget_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object[0];
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  staticMetaObject
- *    flags:    s
- *    access:    public
- *    return:    QMetaObject*
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  staticMetaObject
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    QMetaObject*
+ *    @param    
  */
-ZEND_METHOD(QWidget, staticMetaObject){
+ZEND_METHOD(QWidget, staticMetaObject)
+{
 }
 
-/*********************************
- *    class     QWidget
- *    function  size
- *    flags:    c
- *    access:    public
- *    return:    QSize
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  size
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSize
+ *    @param    
  */
-ZEND_METHOD(QWidget, size){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QSize* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QSize) obj->size();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, size)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSize *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return value is object: QSize
+      *return_object = static_cast < QSize > (obj->size());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  activateWindow
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  activateWindow
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, activateWindow){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->activateWindow();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, activateWindow)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->activateWindow();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setToolTip
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QString &
+/*!
+ *    @class     QWidget
+ *    @function  setToolTip
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QString &
  */
-ZEND_METHOD(QWidget, setToolTip){
-//const QString&
-		/* o public*/
+ZEND_METHOD(QWidget, setToolTip)
+{
+///const QString&
+/*! o public*/
+/*! const QString& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QString& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
+          void *return_object;
 
-
-			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
-				obj->setToolTip((const QString&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setToolTip((const QString &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setParent
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QWidget *parent
+/*!
+ *    @class     QWidget
+ *    @function  setParent
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QWidget *parent
  */
-ZEND_METHOD(QWidget, setParent){
-//qt_QWidget*
-		/* o public*/
+ZEND_METHOD(QWidget, setParent)
+{
+///QWidget*
+/*! o public*/
+/*! QWidget* parent,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QWidget* parent,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QWidget")) {
+          void *return_object;
 
+          if (getThis() != NULL) {
+            obj->setParent((QWidget *) obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			if(obj_z_0->inherits("QWidget")) {
-				obj->setParent((QWidget*) obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  isWindowModified
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
+ */
+ZEND_METHOD(QWidget, isWindowModified)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isWindowModified());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  isWindowModified
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  testAttribute
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    Qt::WidgetAttribute
  */
-ZEND_METHOD(QWidget, isWindowModified){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isWindowModified());
-	}
+ZEND_METHOD(QWidget, testAttribute)
+{
+/*! l public*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        bool *return_object;
+
+        if (getThis() != NULL) {
+          RETURN_BOOL(obj->testAttribute((Qt::WidgetAttribute) Z_LVAL_P(z_0)));
+        }                       /// 5 END getThis(), simple types
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  testAttribute
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    Qt::WidgetAttribute
+/*!
+ *    @class     QWidget
+ *    @function  pos
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPoint
+ *    @param    
  */
-ZEND_METHOD(QWidget, testAttribute){
-		/* l public*/
+ZEND_METHOD(QWidget, pos)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QPoint *return_object;
 
-		/* int ,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QPoint
+      *return_object = static_cast < QPoint > (obj->pos());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			RETURN_BOOL(obj->testAttribute((Qt::WidgetAttribute) Z_LVAL_P(z_0)));
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  pos
- *    flags:    c
- *    access:    public
- *    return:    QPoint
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isWindow
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, pos){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QPoint* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QPoint) obj->pos();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
-}
+ZEND_METHOD(QWidget, isWindow)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
 
-/*********************************
- *    class     QWidget
- *    function  isWindow
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
- */
-ZEND_METHOD(QWidget, isWindow){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isWindow());
-	}
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isWindow());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  create
- *    flags:    
- *    access:    protected
- *    return:    void
- *    params:    WId = 0, bool initializeWindow = true, bool destroyOldWindow = true
+/*!
+ *    @class     QWidget
+ *    @function  create
+ *
+ *    @flags    
+ *    @access    protected
+ *    @return    void
+ *    @param    WId = 0, bool initializeWindow = true, bool destroyOldWindow = true
  */
 // method create is protected, skipped.
 
-/*********************************
- *    class     QWidget
- *    function  setFocusPolicy
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    Qt::FocusPolicy policy
+/*!
+ *    @class     QWidget
+ *    @function  setFocusPolicy
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::FocusPolicy policy
  */
-ZEND_METHOD(QWidget, setFocusPolicy){
-		/* l public*/
+ZEND_METHOD(QWidget, setFocusPolicy)
+{
+/*! l public*/
+/*! int policy,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int policy,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
+        if (getThis() != NULL) {
+          obj->setFocusPolicy((Qt::FocusPolicy) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			obj->setFocusPolicy((Qt::FocusPolicy) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  getContentsMargins
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    void
+ *    @param    int *left, int *top, int *right, int *bottom
+ */
+ZEND_METHOD(QWidget, getContentsMargins)
+{
+/*! llll public*/
+/*! int* left, int* top, int* right, int* bottom,  */
+  if (ZEND_NUM_ARGS() == 4) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+    zval *z_2;                  /// define ZVAL
+    zval *z_3;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->getContentsMargins((int *)Z_LVAL_P(z_0), (int *)Z_LVAL_P(z_1), (int *)Z_LVAL_P(z_2), (int *)Z_LVAL_P(z_3));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  getContentsMargins
- *    flags:    c
- *    access:    public
- *    return:    void
- *    params:    int *left, int *top, int *right, int *bottom
+/*!
+ *    @class     QWidget
+ *    @function  windowTitle
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QString
+ *    @param    
  */
-ZEND_METHOD(QWidget, getContentsMargins){
-		/* llll public*/
+ZEND_METHOD(QWidget, windowTitle)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QString *return_object;
 
-		/* int* left, int* top, int* right, int* bottom,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 4){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QString
+      *return_object = static_cast < QString > (obj->windowTitle());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			obj->getContentsMargins((int*) Z_LVAL_P(z_0) ,(int*) Z_LVAL_P(z_1) ,(int*) Z_LVAL_P(z_2) ,(int*) Z_LVAL_P(z_3));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  windowTitle
- *    flags:    c
- *    access:    public
- *    return:    QString
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  style
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QStyle *
+ *    @param    
  */
-ZEND_METHOD(QWidget, windowTitle){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->windowTitle();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, style)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QStyle **return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return: pointer
+
+/// return value is object: QStyle *
+      *return_object = static_cast < QStyle * >(obj->style());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  style
- *    flags:    c
- *    access:    public
- *    return:    QStyle *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  windowState
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    Qt::WindowStates
+ *    @param    
  */
-ZEND_METHOD(QWidget, style){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QStyle ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QStyle *) obj->style();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, windowState)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    Qt::WindowStates * return_object;
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->windowState());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  windowState
- *    flags:    c
- *    access:    public
- *    return:    Qt::WindowStates
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  frameSize
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSize
+ *    @param    
  */
-ZEND_METHOD(QWidget, windowState){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->windowState());
-	}
-}
+ZEND_METHOD(QWidget, frameSize)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSize *return_object;
 
-/*********************************
- *    class     QWidget
- *    function  frameSize
- *    flags:    c
- *    access:    public
- *    return:    QSize
- *    params:    
- */
-ZEND_METHOD(QWidget, frameSize){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QSize* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QSize) obj->frameSize();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return value is object: QSize
+      *return_object = static_cast < QSize > (obj->frameSize());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setAccessibleName
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QString &name
+/*!
+ *    @class     QWidget
+ *    @function  setAccessibleName
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QString &name
  */
-ZEND_METHOD(QWidget, setAccessibleName){
-//const QString&
-		/* o public*/
+ZEND_METHOD(QWidget, setAccessibleName)
+{
+///const QString&
+/*! o public*/
+/*! const QString& name,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QString& name,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
+          void *return_object;
 
-
-			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
-				obj->setAccessibleName((const QString&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setAccessibleName((const QString &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setAcceptDrops
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    bool on
+/*!
+ *    @class     QWidget
+ *    @function  setAcceptDrops
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    bool on
  */
-ZEND_METHOD(QWidget, setAcceptDrops){
-		/* l public*/
+ZEND_METHOD(QWidget, setAcceptDrops)
+{
+/*! l public*/
+/*! int on,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int on,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setAcceptDrops((bool) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setAcceptDrops((bool) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  removeAction
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QAction *action
+/*!
+ *    @class     QWidget
+ *    @function  removeAction
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QAction *action
  */
-ZEND_METHOD(QWidget, removeAction){
-//qt_QAction*
-		/* o public*/
+ZEND_METHOD(QWidget, removeAction)
+{
+///qt_QAction*
+/*! o public*/
+/*! qt_QAction* action,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QAction* action,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QAction")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QAction")) {
-				obj->removeAction((QAction*) obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->removeAction((QAction *) obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  hasFocus
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  hasFocus
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, hasFocus){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->hasFocus());
-	}
+ZEND_METHOD(QWidget, hasFocus)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->hasFocus());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  showFullScreen
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  showFullScreen
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, showFullScreen){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->showFullScreen();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, showFullScreen)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->showFullScreen();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setMouseTracking
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    bool enable
+/*!
+ *    @class     QWidget
+ *    @function  setMouseTracking
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    bool enable
  */
-ZEND_METHOD(QWidget, setMouseTracking){
-		/* l public*/
+ZEND_METHOD(QWidget, setMouseTracking)
+{
+/*! l public*/
+/*! int enable,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int enable,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setMouseTracking((bool) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setMouseTracking((bool) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  clearMask
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  clearMask
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, clearMask){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->clearMask();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, clearMask)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->clearMask();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  showMaximized
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  showMaximized
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, showMaximized){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->showMaximized();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, showMaximized)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->showMaximized();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  devType
- *    flags:    c
- *    access:    public
- *    return:    int
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  devType
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QWidget, devType){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->devType());
-	}
+ZEND_METHOD(QWidget, devType)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->devType());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  font
- *    flags:    c
- *    access:    public
- *    return:    const QFont &
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  font
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    const QFont &
+ *    @param    
  */
-ZEND_METHOD(QWidget, font){
-	if (ZEND_NUM_ARGS() == 0){
-	}
+ZEND_METHOD(QWidget, font)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  stackUnder
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QWidget*
+/*!
+ *    @class     QWidget
+ *    @function  stackUnder
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QWidget*
  */
-ZEND_METHOD(QWidget, stackUnder){
-//qt_QWidget*
-		/* o public*/
+ZEND_METHOD(QWidget, stackUnder)
+{
+///QWidget*
+/*! o public*/
+/*! QWidget* ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QWidget* ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QWidget")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QWidget")) {
-				obj->stackUnder((QWidget*) obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->stackUnder((QWidget *) obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setMinimumSize
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QSize &
+/*!
+ *    @class     QWidget
+ *    @function  setMinimumSize
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QSize &
  */
-ZEND_METHOD(QWidget, setMinimumSize){
-//const QSize&
-		/* o public*/
+ZEND_METHOD(QWidget, setMinimumSize)
+{
+///const QSize&
+/*! o public*/
+/*! const QSize& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QSize& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QSize")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QSize")) {
-				obj->setMinimumSize((const QSize&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setMinimumSize((const QSize &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setDisabled
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    bool
+/*!
+ *    @class     QWidget
+ *    @function  setDisabled
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    bool
  */
-ZEND_METHOD(QWidget, setDisabled){
-		/* l public_slots*/
+ZEND_METHOD(QWidget, setDisabled)
+{
+/*! l public_slots*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setDisabled((bool) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setDisabled((bool) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  show
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  show
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, show){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->show();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, show)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->show();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  underMouse
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  underMouse
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, underMouse){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->underMouse());
-	}
+ZEND_METHOD(QWidget, underMouse)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->underMouse());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setWindowIcon
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QIcon &icon
+/*!
+ *    @class     QWidget
+ *    @function  setWindowIcon
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QIcon &icon
  */
-ZEND_METHOD(QWidget, setWindowIcon){
-//const QIcon&
-		/* o public*/
+ZEND_METHOD(QWidget, setWindowIcon)
+{
+///const QIcon&
+/*! o public*/
+/*! const QIcon& icon,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QIcon& icon,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QIcon")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QIcon")) {
-				obj->setWindowIcon((const QIcon&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setWindowIcon((const QIcon &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  grabKeyboard
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  grabKeyboard
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, grabKeyboard){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->grabKeyboard();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, grabKeyboard)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->grabKeyboard();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  raise
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  raise
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, raise){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->raise();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, raise)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->raise();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  event
- *    flags:    
- *    access:    protected
- *    return:    bool
- *    params:    QEvent *
+/*!
+ *    @class     QWidget
+ *    @function  event
+ *
+ *    @flags    
+ *    @access    protected
+ *    @return    bool
+ *    @param    QEvent *
  */
 // method event is protected, skipped.
 
-/*********************************
- *    class     QWidget
- *    function  setWhatsThis
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QString &
+/*!
+ *    @class     QWidget
+ *    @function  setWhatsThis
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QString &
  */
-ZEND_METHOD(QWidget, setWhatsThis){
-//const QString&
-		/* o public*/
+ZEND_METHOD(QWidget, setWhatsThis)
+{
+///const QString&
+/*! o public*/
+/*! const QString& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QString& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
+          void *return_object;
 
-
-			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
-				obj->setWhatsThis((const QString&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setWhatsThis((const QString &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setGeometry
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int x, int y, int w, int h
+/*!
+ *    @class     QWidget
+ *    @function  setGeometry
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int x, int y, int w, int h
  */
-ZEND_METHOD(QWidget, setGeometry){
-		/* llll public*/
+ZEND_METHOD(QWidget, setGeometry)
+{
+/*! llll public*/
+/*! int x, int y, int w, int h,  */
+  if (ZEND_NUM_ARGS() == 4) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+    zval *z_2;                  /// define ZVAL
+    zval *z_3;                  /// define ZVAL
 
-		/* int x, int y, int w, int h,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 4){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setGeometry((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setGeometry((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  contextMenuPolicy
- *    flags:    c
- *    access:    public
- *    return:    Qt::ContextMenuPolicy
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  contextMenuPolicy
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    Qt::ContextMenuPolicy
+ *    @param    
  */
-ZEND_METHOD(QWidget, contextMenuPolicy){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->contextMenuPolicy());
-	}
+ZEND_METHOD(QWidget, contextMenuPolicy)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    Qt::ContextMenuPolicy * return_object;
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->contextMenuPolicy());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  resize
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int w, int h
+/*!
+ *    @class     QWidget
+ *    @function  resize
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int w, int h
  */
-ZEND_METHOD(QWidget, resize){
-		/* ll public*/
+ZEND_METHOD(QWidget, resize)
+{
+/*! ll public*/
+/*! int w, int h,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int w, int h,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        void *return_object;
 
+        if (getThis() != NULL) {
+          obj->resize((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			obj->resize((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  isLeftToRight
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
+ */
+ZEND_METHOD(QWidget, isLeftToRight)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isLeftToRight());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  isLeftToRight
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setWindowFlags
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::WindowFlags type
  */
-ZEND_METHOD(QWidget, isLeftToRight){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isLeftToRight());
-	}
+ZEND_METHOD(QWidget, setWindowFlags)
+{
+/*! l public*/
+/*! int type,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->setWindowFlags((Qt::WindowFlags) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setWindowFlags
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    Qt::WindowFlags type
+/*!
+ *    @class     QWidget
+ *    @function  baseSize
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSize
+ *    @param    
  */
-ZEND_METHOD(QWidget, setWindowFlags){
-		/* l public*/
+ZEND_METHOD(QWidget, baseSize)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSize *return_object;
 
-		/* int type,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QSize
+      *return_object = static_cast < QSize > (obj->baseSize());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			obj->setWindowFlags((Qt::WindowFlags) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  baseSize
- *    flags:    c
- *    access:    public
- *    return:    QSize
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setLayout
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QLayout *
  */
-ZEND_METHOD(QWidget, baseSize){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QSize* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QSize) obj->baseSize();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, setLayout)
+{
+///qt_QLayout*
+/*! o public*/
+/*! qt_QLayout* ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
+
+        if (obj_z_0->inherits("QLayout")) {
+          void *return_object;
+
+          if (getThis() != NULL) {
+            obj->setLayout((QLayout *) obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setLayout
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QLayout *
+/*!
+ *    @class     QWidget
+ *    @function  setMaximumHeight
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int maxh
  */
-ZEND_METHOD(QWidget, setLayout){
-//qt_QLayout*
-		/* o public*/
+ZEND_METHOD(QWidget, setMaximumHeight)
+{
+/*! l public*/
+/*! int maxh,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QLayout* ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        void *return_object;
 
+        if (getThis() != NULL) {
+          obj->setMaximumHeight((int)Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			if(obj_z_0->inherits("QLayout")) {
-				obj->setLayout((QLayout*) obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+/*!
+ *    @class     QWidget
+ *    @function  showNormal
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    
+ */
+ZEND_METHOD(QWidget, showNormal)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->showNormal();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setMaximumHeight
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int maxh
+/*!
+ *    @class     QWidget
+ *    @function  insertAction
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QAction *before, QAction *action
  */
-ZEND_METHOD(QWidget, setMaximumHeight){
-		/* l public*/
+ZEND_METHOD(QWidget, insertAction)
+{
+///qt_QAction*
+///qt_QAction*
+/*! oo public*/
+/*! qt_QAction* before, qt_QAction* action,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int maxh,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
+        QObject *obj_z_1 = (QObject *) php_qt_fetch(z_1);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        if (obj_z_0->inherits("QAction") && obj_z_1->inherits("QAction")) {
+          void *return_object;
 
-
-			obj->setMaximumHeight((int) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->insertAction((QAction *) obj_z_0, (QAction *) obj_z_1);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  showNormal
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  window
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    
  */
-ZEND_METHOD(QWidget, showNormal){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->showNormal();
-			RETURN_NULL();
-	}
+ZEND_METHOD(QWidget, window)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QWidget **return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return: pointer
+
+/// return value is object: QWidget *
+      *return_object = static_cast < QWidget * >(obj->window());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  insertAction
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QAction *before, QAction *action
+/*!
+ *    @class     QWidget
+ *    @function  paintEngine
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QPaintEngine *
+ *    @param    
  */
-ZEND_METHOD(QWidget, insertAction){
-//qt_QAction*
-//qt_QAction*
-		/* oo public*/
+ZEND_METHOD(QWidget, paintEngine)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QPaintEngine **return_object;
 
-		/* qt_QAction* before, qt_QAction* action,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
-			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
+/// return: pointer
 
+/// return value is object: QPaintEngine *
+      *return_object = static_cast < QPaintEngine * >(obj->paintEngine());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
-			if(obj_z_0->inherits("QAction") && obj_z_1->inherits("QAction")) {
-				obj->insertAction((QAction*) obj_z_0, (QAction*) obj_z_1);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  window
- *    flags:    c
- *    access:    public
- *    return:    QWidget *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  minimumHeight
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QWidget, window){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->window();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, minimumHeight)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->minimumHeight());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  paintEngine
- *    flags:    c
- *    access:    public
- *    return:    QPaintEngine *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  x
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QWidget, paintEngine){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QPaintEngine ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QPaintEngine *) obj->paintEngine();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, x)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->x());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  minimumHeight
- *    flags:    c
- *    access:    public
- *    return:    int
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  releaseShortcut
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int id
  */
-ZEND_METHOD(QWidget, minimumHeight){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->minimumHeight());
-	}
+ZEND_METHOD(QWidget, releaseShortcut)
+{
+/*! l public*/
+/*! int id,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->releaseShortcut((int)Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  x
- *    flags:    c
- *    access:    public
- *    return:    int
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setStatusTip
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QString &
  */
-ZEND_METHOD(QWidget, x){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->x());
-	}
+ZEND_METHOD(QWidget, setStatusTip)
+{
+///const QString&
+/*! o public*/
+/*! const QString& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
+
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
+          void *return_object;
+
+          if (getThis() != NULL) {
+            obj->setStatusTip((const QString &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  releaseShortcut
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int id
+/*!
+ *    @class     QWidget
+ *    @function  setBaseSize
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QSize &
  */
-ZEND_METHOD(QWidget, releaseShortcut){
-		/* l public*/
+ZEND_METHOD(QWidget, setBaseSize)
+{
+///const QSize&
+/*! o public*/
+/*! const QSize& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int id,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+        if (obj_z_0->inherits("QSize")) {
+          void *return_object;
 
-
-			obj->releaseShortcut((int) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setBaseSize((const QSize &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  setStatusTip
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QString &
+/*!
+ *    @class     QWidget
+ *    @function  rect
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QRect
+ *    @param    
  */
-ZEND_METHOD(QWidget, setStatusTip){
-//const QString&
-		/* o public*/
+ZEND_METHOD(QWidget, rect)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QRect *return_object;
 
-		/* const QString& ,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+/// return value is object: QRect
+      *return_object = static_cast < QRect > (obj->rect());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
-				obj->setStatusTip((const QString&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setBaseSize
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    const QSize &
+/*!
+ *    @class     QWidget
+ *    @function  addAction
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QAction *action
  */
-ZEND_METHOD(QWidget, setBaseSize){
-//const QSize&
-		/* o public*/
+ZEND_METHOD(QWidget, addAction)
+{
+///qt_QAction*
+/*! o public*/
+/*! qt_QAction* action,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* const QSize& ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QAction")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QSize")) {
-				obj->setBaseSize((const QSize&) *obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+          if (getThis() != NULL) {
+            obj->addAction((QAction *) obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  rect
- *    flags:    c
- *    access:    public
- *    return:    QRect
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  minimumSize
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSize
+ *    @param    
  */
-ZEND_METHOD(QWidget, rect){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QRect* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QRect) obj->rect();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, minimumSize)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSize *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return value is object: QSize
+      *return_object = static_cast < QSize > (obj->minimumSize());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  addAction
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    QAction *action
+/*!
+ *    @class     QWidget
+ *    @function  setFocus
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::FocusReason reason
  */
-ZEND_METHOD(QWidget, addAction){
-//qt_QAction*
-		/* o public*/
+ZEND_METHOD(QWidget, setFocus)
+{
+/*! l public*/
+/*! int reason,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QAction* action,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        void *return_object;
 
-
-			if(obj_z_0->inherits("QAction")) {
-				obj->addAction((QAction*) obj_z_0);
-			RETURN_NULL();
-			}
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setFocus((Qt::FocusReason) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  minimumSize
- *    flags:    c
- *    access:    public
- *    return:    QSize
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  destroy
+ *
+ *    @flags    
+ *    @access    protected
+ *    @return    void
+ *    @param    bool destroyWindow = true, bool destroySubWindows = true
  */
-ZEND_METHOD(QWidget, minimumSize){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QSize* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QSize) obj->minimumSize();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+// method destroy is protected, skipped.
+
+/*!
+ *    @class     QWidget
+ *    @function  isVisible
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
+ */
+ZEND_METHOD(QWidget, isVisible)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isVisible());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setFocus
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    Qt::FocusReason reason
+/*!
+ *    @class     QWidget
+ *    @function  accessibleName
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QString
+ *    @param    
  */
-ZEND_METHOD(QWidget, setFocus){
-		/* l public*/
+ZEND_METHOD(QWidget, accessibleName)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QString *return_object;
 
-		/* int reason,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QString
+      *return_object = static_cast < QString > (obj->accessibleName());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			obj->setFocus((Qt::FocusReason) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  destroy
- *    flags:    
- *    access:    protected
- *    return:    void
- *    params:    bool destroyWindow = true, bool destroySubWindows = true
+/*!
+ *    @class     QWidget
+ *    @function  minimumWidth
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-// method destroy is protected, skipped.
+ZEND_METHOD(QWidget, minimumWidth)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
 
-/*********************************
- *    class     QWidget
- *    function  isVisible
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->minimumWidth());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QWidget
+ *    @function  isEnabled
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, isVisible){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isVisible());
-	}
+ZEND_METHOD(QWidget, isEnabled)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isEnabled());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  accessibleName
- *    flags:    c
- *    access:    public
- *    return:    QString
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  keyboardGrabber
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    
  */
-ZEND_METHOD(QWidget, accessibleName){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->accessibleName();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, keyboardGrabber)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QWidget **return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+/// return: pointer
+
+/// return value is object: QWidget *
+      *return_object = static_cast < QWidget * >(obj->keyboardGrabber());
+/// check whether method call is static.
+    } else {
+      return_object = (QWidget **) malloc(sizeof (QWidget::keyboardGrabber())); /// memory allocation
+      *return_object = static_cast < QWidget * >(QWidget::keyboardGrabber());
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  minimumWidth
- *    flags:    c
- *    access:    public
- *    return:    int
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  overrideWindowState
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::WindowStates state
  */
-ZEND_METHOD(QWidget, minimumWidth){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_LONG(obj->minimumWidth());
-	}
+ZEND_METHOD(QWidget, overrideWindowState)
+{
+/*! l public*/
+/*! int state,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->overrideWindowState((Qt::WindowStates) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  isEnabled
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  setMinimumHeight
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int minh
  */
-ZEND_METHOD(QWidget, isEnabled){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isEnabled());
-	}
+ZEND_METHOD(QWidget, setMinimumHeight)
+{
+/*! l public*/
+/*! int minh,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
+
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+        void *return_object;
+
+        if (getThis() != NULL) {
+          obj->setMinimumHeight((int)Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QWidget
- *    function  keyboardGrabber
- *    flags:    s
- *    access:    public
- *    return:    QWidget *
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  isMaximized
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QWidget, keyboardGrabber){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->keyboardGrabber();
-			} else {
-				*return_object = (QWidget *) QWidget::keyboardGrabber();
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QWidget, isMaximized)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->isMaximized());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  overrideWindowState
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    Qt::WindowStates state
+/*!
+ *    @class     QWidget
+ *    @function  parentWidget
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QWidget *
+ *    @param    
  */
-ZEND_METHOD(QWidget, overrideWindowState){
-		/* l public*/
+ZEND_METHOD(QWidget, parentWidget)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QWidget **return_object;
 
-		/* int state,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return: pointer
 
+/// return value is object: QWidget *
+      *return_object = static_cast < QWidget * >(obj->parentWidget());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
-			obj->overrideWindowState((Qt::WindowStates) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  setMinimumHeight
- *    flags:    
- *    access:    public
- *    return:    void
- *    params:    int minh
+/*!
+ *    @class     QWidget
+ *    @function  whatsThis
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QString
+ *    @param    
  */
-ZEND_METHOD(QWidget, setMinimumHeight){
-		/* l public*/
+ZEND_METHOD(QWidget, whatsThis)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QString *return_object;
 
-		/* int minh,  */
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
+/// return value is object: QString
+      *return_object = static_cast < QString > (obj->whatsThis());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
 
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
 
-			obj->setMinimumHeight((int) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			} else { php_error(E_ERROR,"argument not allowed"); }
-		}
-	}
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  isMaximized
- *    flags:    c
- *    access:    public
- *    return:    bool
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  maximumSize
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSize
+ *    @param    
  */
-ZEND_METHOD(QWidget, isMaximized){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->isMaximized());
-	}
-}
+ZEND_METHOD(QWidget, maximumSize)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSize *return_object;
 
-/*********************************
- *    class     QWidget
- *    function  parentWidget
- *    flags:    c
- *    access:    public
- *    return:    QWidget *
- *    params:    
- */
-ZEND_METHOD(QWidget, parentWidget){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QWidget ** return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QWidget *) obj->parentWidget();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
-}
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
 
-/*********************************
- *    class     QWidget
- *    function  whatsThis
- *    flags:    c
- *    access:    public
- *    return:    QString
- *    params:    
- */
-ZEND_METHOD(QWidget, whatsThis){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QString* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QString) obj->whatsThis();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+/// return value is object: QSize
+      *return_object = static_cast < QSize > (obj->maximumSize());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QWidget_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QWidget
- *    function  maximumSize
- *    flags:    c
- *    access:    public
- *    return:    QSize
- *    params:    
+/*!
+ *    @class     QWidget
+ *    @function  showMinimized
+ *
+ *    @flags    l
+ *    @access    public_slots
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QWidget, maximumSize){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			QSize* return_object;
-			// check whether method call is static.
-			if(getThis() != NULL){
-				*return_object = (QSize) obj->maximumSize();
-			} else {
-				php_error(E_ERROR,"Object not found");
-			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QWidget_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
-}
+ZEND_METHOD(QWidget, showMinimized)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
 
-/*********************************
- *    class     QWidget
- *    function  showMinimized
- *    flags:    l
- *    access:    public_slots
- *    return:    void
- *    params:    
- */
-ZEND_METHOD(QWidget, showMinimized){
-	if (ZEND_NUM_ARGS() == 0){
-			QWidget *obj = (QWidget*) PHP_QT_FETCH();
-			obj->showMinimized();
-			RETURN_NULL();
-	}
+    if (getThis() != NULL) {
+      QWidget *obj = (QWidget *) PHP_QT_FETCH();
+
+      obj->showMinimized();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
 
 PHP_QT_DESTRUCT(QWidget);
-



From tm243 at berlios.de  Thu Apr 27 23:26:34 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Thu, 27 Apr 2006 23:26:34 +0200
Subject: [Php-qt-svn] r225 - trunk/qt
Message-ID: <200604272126.k3RLQYG6026823@sheep.berlios.de>

Author: tm243
Date: 2006-04-27 23:26:32 +0200 (Thu, 27 Apr 2006)
New Revision: 225

Modified:
   trunk/qt/php_qt.cpp
Log:
better error messages with object name

Modified: trunk/qt/php_qt.cpp
===================================================================
--- trunk/qt/php_qt.cpp	2006-04-18 14:00:51 UTC (rev 224)
+++ trunk/qt/php_qt.cpp	2006-04-27 21:26:32 UTC (rev 225)
@@ -1106,7 +1106,7 @@
 void* php_qt_fetch(zval* this_ptr){
 
 	if(this_ptr == NULL){
-	  php_error(E_ERROR,"fatal: object 'this' does not exists");
+	  php_error(E_ERROR,"fatal: object does not exists and could not be fetched, %s",Z_OBJCE_P(this_ptr)->name);
 	}
 
 	void *ptr;
@@ -1115,15 +1115,15 @@
 	TSRMLS_FETCH();
 
 	if(zend_hash_index_find(Z_OBJPROP_P(this_ptr), 0, (void**) &listhandle) == FAILURE){
-	  php_error(E_ERROR,"Object not found in list.");
+	  php_error(E_ERROR,"Object not found in list, %s",Z_OBJCE_P(this_ptr)->name);
 	}
 	ptr = zend_list_find(Z_LVAL_PP(listhandle), &type);
 
 	if(!ptr){
-		php_error(E_ERROR,"reference to Qt object missing.");
+		php_error(E_ERROR,"reference to Qt object missing, %s",Z_OBJCE_P(this_ptr)->name);
 	} 
 	if(type != le_php_qt_hashtype){
-		php_error(E_ERROR,"wrong type.");
+		php_error(E_ERROR,"wrong type, %s",Z_OBJCE_P(this_ptr)->name);
 	}
 
 	return ptr;



From tm243 at berlios.de  Thu Apr 27 23:29:36 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Thu, 27 Apr 2006 23:29:36 +0200
Subject: [Php-qt-svn] r226 - trunk/qt/object_model
Message-ID: <200604272129.k3RLTamS027637@sheep.berlios.de>

Author: tm243
Date: 2006-04-27 23:28:37 +0200 (Thu, 27 Apr 2006)
New Revision: 226

Modified:
   trunk/qt/object_model/qobject.cpp
Log:
c casts turned into c++ casts

Modified: trunk/qt/object_model/qobject.cpp
===================================================================
--- trunk/qt/object_model/qobject.cpp	2006-04-27 21:26:32 UTC (rev 225)
+++ trunk/qt/object_model/qobject.cpp	2006-04-27 21:28:37 UTC (rev 226)
@@ -96,23 +96,23 @@
         if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ozoz", &sender, &signal, &receiver, &slot) == FAILURE) {
             RETURN_NULL(); 
         }
-        receiver_ptr = (QObject*) php_qt_fetch(receiver);    
+        receiver_ptr = static_cast<QObject*>(php_qt_fetch(receiver));    
     } else {
         if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ozz", &sender, &signal, &slot) == FAILURE) {
             RETURN_NULL(); 
         }
-        receiver_ptr = (QObject*) PHP_QT_FETCH();
+        receiver_ptr = static_cast<QObject*>(PHP_QT_FETCH());
     }
 
-    QObject *sender_ptr = (QObject*) php_qt_fetch(sender);
+    QObject *sender_ptr = static_cast<QObject*>(php_qt_fetch(sender));
 
     const char* __signal = Z_STRVAL_P(signal);
     const char* __slot = Z_STRVAL_P(slot);
 
     if(num_args==4){
-        RETURN_BOOL(QObject::connect((const QObject*) sender_ptr, __signal, (const QObject*) receiver_ptr, __slot));
+        RETURN_BOOL(QObject::connect(static_cast<const QObject*>(sender_ptr), __signal, static_cast<const QObject*>(receiver_ptr), __slot));
     } else if(num_args==3){
-        RETURN_BOOL(receiver_ptr->connect((const QObject*) sender_ptr, __signal, __slot));
+        RETURN_BOOL(receiver_ptr->connect(static_cast<const QObject*>(sender_ptr), __signal, __slot));
     }
 
 }



From tm243 at berlios.de  Thu Apr 27 23:37:02 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Thu, 27 Apr 2006 23:37:02 +0200
Subject: [Php-qt-svn] r227 - trunk/qt/classes
Message-ID: <200604272137.k3RLb2vI003995@sheep.berlios.de>

Author: tm243
Date: 2006-04-27 23:36:45 +0200 (Thu, 27 Apr 2006)
New Revision: 227

Modified:
   trunk/qt/classes/qboxlayout.cpp
   trunk/qt/classes/qcoreapplication.cpp
   trunk/qt/classes/qgridlayout.cpp
   trunk/qt/classes/qlayout.cpp
   trunk/qt/classes/qvboxlayout.cpp
   trunk/qt/classes/qwidget.cpp
Log:
prepared for tutorials

Modified: trunk/qt/classes/qboxlayout.cpp
===================================================================
--- trunk/qt/classes/qboxlayout.cpp	2006-04-27 21:28:37 UTC (rev 226)
+++ trunk/qt/classes/qboxlayout.cpp	2006-04-27 21:36:45 UTC (rev 227)
@@ -322,6 +322,21 @@
 			} else { php_error(E_ERROR,"argument not allowed"); }
 		}
 	}
+    if (ZEND_NUM_ARGS() == 1){
+		zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT){
+
+			    QBoxLayout *obj = static_cast<QBoxLayout*>(PHP_QT_FETCH());
+			    QWidget* obj_z_0 = static_cast<QWidget*>(php_qt_fetch(z_0));
+
+//			if(obj_z_0->inherits("QWidget")) {
+				obj->addWidget(obj_z_0);
+			    RETURN_NULL();
+//			}
+			} else { php_error(E_ERROR,"argument not allowed"); }
+		}
+	}
 }
 
 /*********************************

Modified: trunk/qt/classes/qcoreapplication.cpp
===================================================================
--- trunk/qt/classes/qcoreapplication.cpp	2006-04-27 21:28:37 UTC (rev 226)
+++ trunk/qt/classes/qcoreapplication.cpp	2006-04-27 21:36:45 UTC (rev 227)
@@ -406,20 +406,22 @@
  */
 ZEND_METHOD(QCoreApplication, instance){
 	if (ZEND_NUM_ARGS() == 0){
-			QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
+
 			QCoreApplication ** return_object;
 			// check whether method call is static.
 			if(getThis() != NULL){
-				*return_object = (QCoreApplication *) obj->instance();
+			    QCoreApplication *obj = (QCoreApplication*) PHP_QT_FETCH();
+				*return_object = static_cast<QCoreApplication*>(obj->instance());
 			} else {
-				*return_object = (QCoreApplication *) QCoreApplication::instance();
+                return_object = (QCoreApplication **) malloc(sizeof(QCoreApplication::instance()));
+				*return_object = static_cast<QCoreApplication *>(QCoreApplication::instance());
 			}
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QCoreApplication_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
+			zend_class_entry *ce;                                   
+			object_init_ex(return_value, QCoreApplication_ce_ptr);     
+			zend_rsrc_list_entry le;                            
+			le.ptr = return_object[0];
+			php_qt_register(return_value,le);                   
+			return;                                             
 	}
 }
 

Modified: trunk/qt/classes/qgridlayout.cpp
===================================================================
--- trunk/qt/classes/qgridlayout.cpp	2006-04-27 21:28:37 UTC (rev 226)
+++ trunk/qt/classes/qgridlayout.cpp	2006-04-27 21:36:45 UTC (rev 227)
@@ -20,959 +20,1166 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * QGridLayout.cpp - QGridLayout PHP implementation.
- * begin           : Sun Jan 22 19:46:39 2006
+ * begin           : Tue Apr 11 10:33:13 2006
  * generated by    : moni using kalyptus 0.9.
  */
 
 #include <iostream>
 using namespace std;
 
-#include <QGridLayout>
 #include "../php_qt.h"
 
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  tr
- *    flags:    s
+#include <QGridLayout>
+#include <QWidget>
+
+/*!
+ *    @class     QGridLayout
+ *    @function  tr
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    QString
+ *    @param     const char *, const char * = 0 
  */
-ZEND_METHOD(QGridLayout, tr){
-		/* ss public*/
+ZEND_METHOD(QGridLayout, tr)
+{
+/*! ss public*/
+/*! const char* , const char* ,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* const char* , const char* ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        QString *return_object;
 
+        if (getThis() != NULL) {
+/// return value is object: QString
+          *return_object = static_cast < QString > (obj->tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
+/// check whether method call is static.
+        } else {
+          return_object = (QString *) malloc(sizeof (QGridLayout::tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1))));   /// memory allocation
+          *return_object = static_cast < QString > (QGridLayout::tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
+        } zend_class_entry *ce;
 
-				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
-	}
+        object_init_ex(return_value, QGridLayout_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object;
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  addLayout
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  addLayout
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QLayout *, int row, int column, Qt::Alignment = 0
  */
-ZEND_METHOD(QGridLayout, addLayout){
-		/* olll public*/
+ZEND_METHOD(QGridLayout, addLayout)
+{
+///qt_QLayout*
+/*! olll public*/
+/*! qt_QLayout* , int row, int column, int ,  */
+  if (ZEND_NUM_ARGS() == 4) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+    zval *z_2;                  /// define ZVAL
+    zval *z_3;                  /// define ZVAL
 
-		/* qt_QLayout* , int row, int column, int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 4){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QLayout")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QLayout")) {
-				obj->addLayout((QLayout*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
-			RETURN_NULL();
-			}
-			}
-		}
-	}
-		/* olllll public*/
-
-		/* qt_QLayout* , int row, int column, int rowSpan, int columnSpan, int ,  */
-
-	if (ZEND_NUM_ARGS() == 6){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		zval *z_4; // define ZVAL
-		zval *z_5; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
-
-
-			if(obj_z_0->inherits("QLayout")) {
-				obj->addLayout((QLayout*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
-			RETURN_NULL();
-			}
-			}
-		}
-	}
+          if (getThis() != NULL) {
+            obj->addLayout((QLayout *) obj_z_0, (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  QGridLayout
- *    flags:    t
+/*!
+ *    @class     QGridLayout
+ *    @function  QGridLayout
+ *
+ *    @flags    t
+ *    @access    public
+ *    @return    
+ *    @param    QWidget *parent
  */
-ZEND_METHOD(QGridLayout, __construct){
+ZEND_METHOD(QGridLayout, __construct)
+{
+///QWidget*
 	if (ZEND_NUM_ARGS() == 0){
 			QGridLayout *QGridLayout_ptr = new QGridLayout();
 				PHP_QT_REGISTER(QGridLayout_ptr);
 				RETURN_NULL();
 	}
-		/* o public*/
+/*! o public*/
+/*! QWidget* parent,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QWidget* parent,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QWidget")) {
+          QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget *) obj_z_0);
 
-
-			if(obj_z_0->inherits("QWidget")) {
-				QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget*) obj_z_0);
-				PHP_QT_REGISTER(QGridLayout_ptr);
-				RETURN_NULL();
-			}
-			}
-		}
-	}
+          PHP_QT_REGISTER(QGridLayout_ptr);
+          RETURN_NULL();
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  qt_invoke
- *    flags:    v
+/*!
+ *    @class     QGridLayout
+ *    @function  addItem
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QLayoutItem *item, int row, int column, int rowSpan = 1, int columnSpan = 1, Qt::Alignment = 0
  */
-ZEND_METHOD(QGridLayout, qt_invoke){
-}
+ZEND_METHOD(QGridLayout, addItem)
+{
+///qt_QLayoutItem*
+/*! olllll public*/
+/*! qt_QLayoutItem* item, int row, int column, int rowSpan, int columnSpan, int ,  */
+  if (ZEND_NUM_ARGS() == 6) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+    zval *z_2;                  /// define ZVAL
+    zval *z_3;                  /// define ZVAL
+    zval *z_4;                  /// define ZVAL
+    zval *z_5;                  /// define ZVAL
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  addItem
- *    flags:    
- */
-ZEND_METHOD(QGridLayout, addItem){
-		/* o protected*/
-		/* olllll public*/
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG &&
+          Z_TYPE_P(z_5) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-		/* qt_QLayoutItem* item, int row, int column, int rowSpan, int columnSpan, int ,  */
+        if (obj_z_0->inherits("QLayoutItem")) {
+          void *return_object;
 
-	if (ZEND_NUM_ARGS() == 6){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		zval *z_4; // define ZVAL
-		zval *z_5; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
-
-
-			if(obj_z_0->inherits("QLayoutItem")) {
-				obj->addItem((QLayoutItem*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
-			RETURN_NULL();
-			}
-			}
-		}
-	}
+          if (getThis() != NULL) {
+            obj->addItem((QLayoutItem *) obj_z_0, (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3), (int)Z_LVAL_P(z_4),
+                         (Qt::Alignment) Z_LVAL_P(z_5));
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  rowMinimumHeight
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  rowMinimumHeight
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    int row
  */
-ZEND_METHOD(QGridLayout, rowMinimumHeight){
-		/* l public*/
+ZEND_METHOD(QGridLayout, rowMinimumHeight)
+{
+/*! l public*/
+/*! int row,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int row,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        int *return_object;
 
-
-			RETURN_LONG(obj->rowMinimumHeight((int) Z_LVAL_P(z_0)));
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          RETURN_LONG(obj->rowMinimumHeight((int)Z_LVAL_P(z_0)));
+        }                       /// 5 END getThis(), simple types
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  setOriginCorner
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  setOriginCorner
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    Qt::Corner
  */
-ZEND_METHOD(QGridLayout, setOriginCorner){
-		/* l public*/
+ZEND_METHOD(QGridLayout, setOriginCorner)
+{
+/*! l public*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setOriginCorner((Qt::Corner) Z_LVAL_P(z_0));
-			RETURN_NULL();
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setOriginCorner((Qt::Corner) Z_LVAL_P(z_0));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  qt_cast
- *    flags:    v
+/*!
+ *    @class     QGridLayout
+ *    @function  count
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, qt_cast){
-}
+ZEND_METHOD(QGridLayout, count)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  metaObject
- *    flags:    cv
- */
-ZEND_METHOD(QGridLayout, metaObject){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
-}
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  count
- *    flags:    c
- */
-ZEND_METHOD(QGridLayout, count){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			RETURN_LONG(obj->count());
-	}
+      RETURN_LONG(obj->count());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  originCorner
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  originCorner
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    Qt::Corner
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, originCorner){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			RETURN_LONG(obj->originCorner());
-	}
-}
+ZEND_METHOD(QGridLayout, originCorner)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    Qt::Corner * return_object;
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  invalidate
- *    flags:    
- */
-ZEND_METHOD(QGridLayout, invalidate){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			obj->invalidate();
-			RETURN_NULL();
-	}
+      RETURN_LONG(obj->originCorner());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  setGeometry
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  invalidate
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, setGeometry){
-		/* o public*/
+ZEND_METHOD(QGridLayout, invalidate)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    void *return_object;
 
-		/* const QRect& ,  */
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
-
-
-			if(Z_OBJCE_P(z_0)->name == "QRect") {
-				obj->setGeometry((const QRect&) obj_z_0);
-			RETURN_NULL();
-			}
-			}
-		}
-	}
+      obj->invalidate();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  qt_emit
- *    flags:    v
+/*!
+ *    @class     QGridLayout
+ *    @function  setGeometry
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    const QRect&
  */
-ZEND_METHOD(QGridLayout, qt_emit){
-}
+ZEND_METHOD(QGridLayout, setGeometry)
+{
+///const QRect&
+/*! o public*/
+/*! const QRect& ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  setRowStretch
- *    flags:    
- */
-ZEND_METHOD(QGridLayout, setRowStretch){
-		/* ll public*/
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-		/* int row, int stretch,  */
+        if (!strcmp(Z_OBJCE_P(z_0)->name, "QRect")) {
+          void *return_object;
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-
-
-			obj->setRowStretch((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			}
-		}
-	}
+          if (getThis() != NULL) {
+            obj->setGeometry((const QRect &)*obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  getItemPosition
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  setRowStretch
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int row, int stretch
  */
-ZEND_METHOD(QGridLayout, getItemPosition){
-		/* lllll public*/
+ZEND_METHOD(QGridLayout, setRowStretch)
+{
+/*! ll public*/
+/*! int row, int stretch,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int idx, int* row, int* column, int* rowSpan, int* columnSpan,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 5){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		zval *z_4; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->getItemPosition((int) Z_LVAL_P(z_0) ,(int*) Z_LVAL_P(z_1) ,(int*) Z_LVAL_P(z_2) ,(int*) Z_LVAL_P(z_3) ,(int*) Z_LVAL_P(z_4));
-			RETURN_NULL();
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setRowStretch((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  setDefaultPositioning
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  getItemPosition
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int idx, int *row, int *column, int *rowSpan, int *columnSpan
  */
-ZEND_METHOD(QGridLayout, setDefaultPositioning){
-		/* ll public*/
+ZEND_METHOD(QGridLayout, getItemPosition)
+{
+/*! lllll public*/
+/*! int idx, int* row, int* column, int* rowSpan, int* columnSpan,  */
+  if (ZEND_NUM_ARGS() == 5) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
+    zval *z_2;                  /// define ZVAL
+    zval *z_3;                  /// define ZVAL
+    zval *z_4;                  /// define ZVAL
 
-		/* int n, int orient,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setDefaultPositioning((int) Z_LVAL_P(z_0) ,(Qt::Orientation) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          obj->getItemPosition((int)Z_LVAL_P(z_0), (int *)Z_LVAL_P(z_1), (int *)Z_LVAL_P(z_2), (int *)Z_LVAL_P(z_3), (int *)Z_LVAL_P(z_4));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  className
- *    flags:    cv
+/*!
+ *    @class     QGridLayout
+ *    @function  setDefaultPositioning
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int n, Qt::Orientation orient
  */
-ZEND_METHOD(QGridLayout, className){
-}
+ZEND_METHOD(QGridLayout, setDefaultPositioning)
+{
+/*! ll public*/
+/*! int n, int orient,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  columnStretch
- *    flags:    c
- */
-ZEND_METHOD(QGridLayout, columnStretch){
-		/* l public*/
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-		/* int column,  */
+        void *return_object;
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-
-
-			RETURN_LONG(obj->columnStretch((int) Z_LVAL_P(z_0)));
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setDefaultPositioning((int)Z_LVAL_P(z_0), (Qt::Orientation) Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  addWidget
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  columnStretch
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    int column
  */
-ZEND_METHOD(QGridLayout, addWidget){
-		/* o public*/
+ZEND_METHOD(QGridLayout, columnStretch)
+{
+/*! l public*/
+/*! int column,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QWidget* w,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        int *return_object;
 
+        if (getThis() != NULL) {
+          RETURN_LONG(obj->columnStretch((int)Z_LVAL_P(z_0)));
+        }                       /// 5 END getThis(), simple types
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
+}
 
-			if(obj_z_0->inherits("QWidget")) {
-				obj->addWidget((QWidget*) obj_z_0);
-			RETURN_NULL();
-			}
-			}
-		}
-	}
-		/* olll public*/
-
-		/* qt_QWidget* , int row, int column, int ,  */
-
-	if (ZEND_NUM_ARGS() == 4){
+/*!
+ *    @class     QGridLayout
+ *    @function  addWidget
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    QWidget *w
+ */
+ZEND_METHOD(QGridLayout, addWidget)
+{
+///QWidget*
+	if (ZEND_NUM_ARGS() == 3){
 		zval *z_0; // define ZVAL
 		zval *z_1; // define ZVAL
 		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
+			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
 			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+			QWidget* obj_z_0 = static_cast<QWidget*>(php_qt_fetch(z_0));
 
-
 			if(obj_z_0->inherits("QWidget")) {
-				obj->addWidget((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
-			RETURN_NULL();
-			}
-			}
+				obj->addWidget(obj_z_0, (int) Z_LVAL_P(z_1), (Qt::Alignment) Z_LVAL_P(z_2));
+			    RETURN_NULL();
+			} else { php_error(E_ERROR,"argument is no QWidget"); }
+			} else { php_error(E_ERROR,"argument not allowed"); }
 		}
 	}
-		/* olllll public*/
+/*! o public*/
+/*! QWidget* w,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* qt_QWidget* , int row, int column, int rowSpan, int columnSpan, int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_OBJECT) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
 
-	if (ZEND_NUM_ARGS() == 6){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		zval *z_2; // define ZVAL
-		zval *z_3; // define ZVAL
-		zval *z_4; // define ZVAL
-		zval *z_5; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
+        if (obj_z_0->inherits("QWidget")) {
+          void *return_object;
 
-
-			if(obj_z_0->inherits("QWidget")) {
-				obj->addWidget((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
-			RETURN_NULL();
-			}
-			}
-		}
-	}
+          if (getThis() != NULL) {
+            obj->addWidget((QWidget *) obj_z_0);
+            RETURN_NULL();
+          }                     /// END getThis(), NULL
+        }
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  takeAt
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  takeAt
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    QLayoutItem *
+ *    @param    int
  */
-ZEND_METHOD(QGridLayout, takeAt){
-		/* l public*/
+ZEND_METHOD(QGridLayout, takeAt)
+{
+/*! l public*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        QLayoutItem **return_object;
 
+        if (getThis() != NULL) {
+/// return: pointer
 
-				QLayoutItem * return_object = (QLayoutItem *) obj->takeAt((int) Z_LVAL_P(z_0));
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
-	}
+/// return value is object: QLayoutItem *
+          *return_object = static_cast < QLayoutItem * >(obj->takeAt((int)Z_LVAL_P(z_0)));
+        } else {                /// END getThis(), static
+          php_error(E_ERROR, "Object not found");
+        }
+        zend_class_entry *ce;
+
+        object_init_ex(return_value, QGridLayout_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object[0];
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  staticMetaObject
- *    flags:    s
+/*!
+ *    @class     QGridLayout
+ *    @function  staticMetaObject
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    QMetaObject*
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, staticMetaObject){
+ZEND_METHOD(QGridLayout, staticMetaObject)
+{
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  itemAt
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  itemAt
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QLayoutItem *
+ *    @param    int
  */
-ZEND_METHOD(QGridLayout, itemAt){
-		/* l public*/
+ZEND_METHOD(QGridLayout, itemAt)
+{
+/*! l public*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        QLayoutItem **return_object;
 
+        if (getThis() != NULL) {
+/// return: pointer
 
-				QLayoutItem * return_object = (QLayoutItem *) obj->itemAt((int) Z_LVAL_P(z_0));
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
-	}
+/// return value is object: QLayoutItem *
+          *return_object = static_cast < QLayoutItem * >(obj->itemAt((int)Z_LVAL_P(z_0)));
+        } else {                /// END getThis(), static
+          php_error(E_ERROR, "Object not found");
+        }
+        zend_class_entry *ce;
+
+        object_init_ex(return_value, QGridLayout_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object[0];
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  qObject
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  qObject
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    QObject*
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, qObject){
+ZEND_METHOD(QGridLayout, qObject)
+{
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  minimumSize
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  minimumSize
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSize
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, minimumSize){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-				QSize return_object = (QSize) obj->minimumSize();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QGridLayout, minimumSize)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSize *return_object;
+
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+
+/// return value is object: QSize
+      *return_object = static_cast < QSize > (obj->minimumSize());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QGridLayout_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  sizeHint
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  sizeHint
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSize
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, sizeHint){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-				QSize return_object = (QSize) obj->sizeHint();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QGridLayout, sizeHint)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSize *return_object;
+
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+
+/// return value is object: QSize
+      *return_object = static_cast < QSize > (obj->sizeHint());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QGridLayout_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  setColumnMinimumWidth
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  setColumnMinimumWidth
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int column, int minSize
  */
-ZEND_METHOD(QGridLayout, setColumnMinimumWidth){
-		/* ll public*/
+ZEND_METHOD(QGridLayout, setColumnMinimumWidth)
+{
+/*! ll public*/
+/*! int column, int minSize,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int column, int minSize,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setColumnMinimumWidth((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setColumnMinimumWidth((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  heightForWidth
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  heightForWidth
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    int
  */
-ZEND_METHOD(QGridLayout, heightForWidth){
-		/* l public*/
+ZEND_METHOD(QGridLayout, heightForWidth)
+{
+/*! l public*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        int *return_object;
 
-
-			RETURN_LONG(obj->heightForWidth((int) Z_LVAL_P(z_0)));
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          RETURN_LONG(obj->heightForWidth((int)Z_LVAL_P(z_0)));
+        }                       /// 5 END getThis(), simple types
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  hasHeightForWidth
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  hasHeightForWidth
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, hasHeightForWidth){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			RETURN_BOOL(obj->hasHeightForWidth());
-	}
+ZEND_METHOD(QGridLayout, hasHeightForWidth)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->hasHeightForWidth());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  setColumnStretch
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  setColumnStretch
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int column, int stretch
  */
-ZEND_METHOD(QGridLayout, setColumnStretch){
-		/* ll public*/
+ZEND_METHOD(QGridLayout, setColumnStretch)
+{
+/*! ll public*/
+/*! int column, int stretch,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int column, int stretch,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setColumnStretch((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setColumnStretch((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  rowCount
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  rowCount
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, rowCount){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			RETURN_LONG(obj->rowCount());
-	}
+ZEND_METHOD(QGridLayout, rowCount)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->rowCount());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  columnMinimumWidth
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  columnMinimumWidth
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    int column
  */
-ZEND_METHOD(QGridLayout, columnMinimumWidth){
-		/* l public*/
+ZEND_METHOD(QGridLayout, columnMinimumWidth)
+{
+/*! l public*/
+/*! int column,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int column,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        int *return_object;
 
-
-			RETURN_LONG(obj->columnMinimumWidth((int) Z_LVAL_P(z_0)));
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          RETURN_LONG(obj->columnMinimumWidth((int)Z_LVAL_P(z_0)));
+        }                       /// 5 END getThis(), simple types
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  cellRect
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  cellRect
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QRect
+ *    @param    int row, int column
  */
-ZEND_METHOD(QGridLayout, cellRect){
-		/* ll public*/
+ZEND_METHOD(QGridLayout, cellRect)
+{
+/*! ll public*/
+/*! int row, int column,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int row, int column,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        QRect *return_object;
 
+        if (getThis() != NULL) {
+/// return value is object: QRect
+          *return_object = static_cast < QRect > (obj->cellRect((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1)));
+        } else {                /// END getThis(), static
+          php_error(E_ERROR, "Object not found");
+        }
+        zend_class_entry *ce;
 
-				QRect return_object = (QRect) obj->cellRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
-	}
+        object_init_ex(return_value, QGridLayout_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object;
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  columnCount
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  columnCount
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, columnCount){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-			RETURN_LONG(obj->columnCount());
-	}
+ZEND_METHOD(QGridLayout, columnCount)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->columnCount());
+    }                           /// 5 END getThis(), simple types
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  setRowMinimumHeight
- *    flags:    
+/*!
+ *    @class     QGridLayout
+ *    @function  setRowMinimumHeight
+ *
+ *    @flags    
+ *    @access    public
+ *    @return    void
+ *    @param    int row, int minSize
  */
-ZEND_METHOD(QGridLayout, setRowMinimumHeight){
-		/* ll public*/
+ZEND_METHOD(QGridLayout, setRowMinimumHeight)
+{
+/*! ll public*/
+/*! int row, int minSize,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* int row, int minSize,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        void *return_object;
 
-
-			obj->setRowMinimumHeight((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
-			RETURN_NULL();
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          obj->setRowMinimumHeight((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
+          RETURN_NULL();
+        }                       /// END getThis(), NULL
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  trUtf8
- *    flags:    s
+/*!
+ *    @class     QGridLayout
+ *    @function  trUtf8
+ *
+ *    @flags    s
+ *    @access    public
+ *    @return    QString
+ *    @param     const char *, const char * = 0 
  */
-ZEND_METHOD(QGridLayout, trUtf8){
-		/* ss public*/
+ZEND_METHOD(QGridLayout, trUtf8)
+{
+/*! ss public*/
+/*! const char* , const char* ,  */
+  if (ZEND_NUM_ARGS() == 2) {
+    zval *z_0;                  /// define ZVAL
+    zval *z_1;                  /// define ZVAL
 
-		/* const char* , const char* ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 2){
-		zval *z_0; // define ZVAL
-		zval *z_1; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        QString *return_object;
 
+        if (getThis() != NULL) {
+/// return value is object: QString
+          *return_object = static_cast < QString > (obj->trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
+/// check whether method call is static.
+        } else {
+          return_object = (QString *) malloc(sizeof (QGridLayout::trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1))));       /// memory allocation
+          *return_object = static_cast < QString > (QGridLayout::trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
+        } zend_class_entry *ce;
 
-				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-			}
-		}
-	}
+        object_init_ex(return_value, QGridLayout_ce_ptr);
+        zend_rsrc_list_entry le;
+
+        le.ptr = return_object;
+        php_qt_register(return_value, le);
+        return;
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  maximumSize
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  maximumSize
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QSize
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, maximumSize){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-				QSize return_object = (QSize) obj->maximumSize();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
-}
+ZEND_METHOD(QGridLayout, maximumSize)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QSize *return_object;
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  qt_property
- *    flags:    v
- */
-ZEND_METHOD(QGridLayout, qt_property){
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+
+/// return value is object: QSize
+      *return_object = static_cast < QSize > (obj->maximumSize());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QGridLayout_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object;
+    php_qt_register(return_value, le);
+    return;
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  minimumHeightForWidth
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  minimumHeightForWidth
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    int
  */
-ZEND_METHOD(QGridLayout, minimumHeightForWidth){
-		/* l public*/
+ZEND_METHOD(QGridLayout, minimumHeightForWidth)
+{
+/*! l public*/
+/*! int ,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int ,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        int *return_object;
 
-
-			RETURN_LONG(obj->minimumHeightForWidth((int) Z_LVAL_P(z_0)));
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          RETURN_LONG(obj->minimumHeightForWidth((int)Z_LVAL_P(z_0)));
+        }                       /// 5 END getThis(), simple types
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  expandingDirections
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  expandingDirections
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    Qt::Orientations
+ *    @param    
  */
-ZEND_METHOD(QGridLayout, expandingDirections){
-	if (ZEND_NUM_ARGS() == 0){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
-				Qt::Orientations return_object = (Qt::Orientations) obj->expandingDirections();
-				zend_class_entry *ce;                                   
-				object_init_ex(return_value, QGridLayout_ce_ptr);     
-				zend_rsrc_list_entry le;                            
-				le.ptr = (void*) &return_object;                                       
-				php_qt_register(return_value,le);                   
-				return;                                             
-	}
+ZEND_METHOD(QGridLayout, expandingDirections)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    Qt::Orientations * return_object;
+    if (getThis() != NULL) {
+      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
+
+      obj->expandingDirections();
+      RETURN_NULL();
+    }                           /// END getThis(), NULL
+  }
 }
 
-/*********************************
- *    class     QGridLayout */
-/*
- *    function  rowStretch
- *    flags:    c
+/*!
+ *    @class     QGridLayout
+ *    @function  rowStretch
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    int row
  */
-ZEND_METHOD(QGridLayout, rowStretch){
-		/* l public*/
+ZEND_METHOD(QGridLayout, rowStretch)
+{
+/*! l public*/
+/*! int row,  */
+  if (ZEND_NUM_ARGS() == 1) {
+    zval *z_0;                  /// define ZVAL
 
-		/* int row,  */
+    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
+      if (Z_TYPE_P(z_0) == IS_LONG) {
+        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
 
-	if (ZEND_NUM_ARGS() == 1){
-		zval *z_0; // define ZVAL
-		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
-			if(Z_TYPE_P(z_0) == IS_LONG){
-			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
+        int *return_object;
 
-
-			RETURN_LONG(obj->rowStretch((int) Z_LVAL_P(z_0)));
-			}
-		}
-	}
+        if (getThis() != NULL) {
+          RETURN_LONG(obj->rowStretch((int)Z_LVAL_P(z_0)));
+        }                       /// 5 END getThis(), simple types
+      } else {
+        php_error(E_ERROR, "argument not allowed");
+      }                         /// END check of argument types
+    }                           /// END zend_parse_parameters
+  }                             /// END ZEND_NUM_ARGS
 }
 
 
 PHP_QT_DESTRUCT(QGridLayout);
-

Modified: trunk/qt/classes/qlayout.cpp
===================================================================
--- trunk/qt/classes/qlayout.cpp	2006-04-27 21:28:37 UTC (rev 226)
+++ trunk/qt/classes/qlayout.cpp	2006-04-27 21:36:45 UTC (rev 227)
@@ -440,19 +440,18 @@
 		/* o public*/
 
 		/* qt_QWidget* w,  */
-
 	if (ZEND_NUM_ARGS() == 1){
 		zval *z_0; // define ZVAL
 		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
 			if(Z_TYPE_P(z_0) == IS_OBJECT){
-			QLayout *obj = (QLayout*) PHP_QT_FETCH();
-			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
 
+			    QLayout *obj = static_cast<QLayout*>(PHP_QT_FETCH());
+			    QWidget* obj_z_0 = static_cast<QWidget*>(php_qt_fetch(z_0));
 
-			if(obj_z_0->inherits("QWidget")) {
-				obj->addWidget((QWidget*) obj_z_0);
-			RETURN_NULL();
-			}
+//			if(obj_z_0->inherits("QWidget")) {
+				obj->addWidget(obj_z_0);
+			    RETURN_NULL();
+//			}
 			} else { php_error(E_ERROR,"argument not allowed"); }
 		}
 	}

Modified: trunk/qt/classes/qvboxlayout.cpp
===================================================================
--- trunk/qt/classes/qvboxlayout.cpp	2006-04-27 21:28:37 UTC (rev 226)
+++ trunk/qt/classes/qvboxlayout.cpp	2006-04-27 21:36:45 UTC (rev 227)
@@ -145,6 +145,16 @@
 				PHP_QT_REGISTER(QVBoxLayout_ptr);
 				RETURN_NULL();
 	}
+/// handmade
+    if (ZEND_NUM_ARGS() == 1){
+    	zval *z_0; // define ZVAL
+		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
+            QWidget *qw = static_cast<QWidget*>(php_qt_fetch(z_0));
+			QVBoxLayout *QVBoxLayout_ptr = new QVBoxLayout(qw);
+			PHP_QT_REGISTER(QVBoxLayout_ptr);
+			RETURN_NULL();
+        }
+	}
 }
 
 

Modified: trunk/qt/classes/qwidget.cpp
===================================================================
--- trunk/qt/classes/qwidget.cpp	2006-04-27 21:28:37 UTC (rev 226)
+++ trunk/qt/classes/qwidget.cpp	2006-04-27 21:36:45 UTC (rev 227)
@@ -4968,7 +4968,13 @@
         php_error(E_ERROR, "argument not allowed");
       }                         /// END check of argument types
     }                           /// END zend_parse_parameters
+    else {
+        php_error(E_ERROR, "arg parse error.");
+    }
   }                             /// END ZEND_NUM_ARGS
+  else {
+    php_error(E_ERROR, "wrong arg count.");
+  }
 }
 
 /*!



From tm243 at berlios.de  Sat Apr 29 09:27:30 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 29 Apr 2006 09:27:30 +0200
Subject: [Php-qt-svn] r228 - trunk/qt/classes
Message-ID: <200604290727.k3T7RUir028187@sheep.berlios.de>

Author: tm243
Date: 2006-04-29 09:27:26 +0200 (Sat, 29 Apr 2006)
New Revision: 228

Added:
   trunk/qt/classes/qchildevent.cpp
   trunk/qt/classes/qpaintdevice.cpp
   trunk/qt/classes/qtimerevent.cpp
Log:
three new classes

Added: trunk/qt/classes/qchildevent.cpp
===================================================================
--- trunk/qt/classes/qchildevent.cpp	2006-04-27 21:36:45 UTC (rev 227)
+++ trunk/qt/classes/qchildevent.cpp	2006-04-29 07:27:26 UTC (rev 228)
@@ -0,0 +1,137 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QChildEvent.cpp - QChildEvent PHP implementation.
+ * begin           : Tue Apr 11 10:33:13 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+#include <QChildEvent>
+
+/*!
+ *    @class     QChildEvent
+ *    @function  polished
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
+ */
+ZEND_METHOD(QChildEvent, polished)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QChildEvent *obj = (QChildEvent *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->polished());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QChildEvent
+ *    @function  removed
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
+ */
+ZEND_METHOD(QChildEvent, removed)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QChildEvent *obj = (QChildEvent *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->removed());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QChildEvent
+ *    @function  added
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
+ */
+ZEND_METHOD(QChildEvent, added)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QChildEvent *obj = (QChildEvent *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->added());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QChildEvent
+ *    @function  child
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    QObject *
+ *    @param    
+ */
+ZEND_METHOD(QChildEvent, child)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    QObject **return_object;
+
+    if (getThis() != NULL) {
+      QChildEvent *obj = (QChildEvent *) PHP_QT_FETCH();
+
+/// return: pointer
+
+/// return value is object: QObject *
+      *return_object = static_cast < QObject * >(obj->child());
+    } else {                    /// END getThis(), static
+      php_error(E_ERROR, "Object not found");
+    }
+    zend_class_entry *ce;
+
+    object_init_ex(return_value, QChildEvent_ce_ptr);
+    zend_rsrc_list_entry le;
+
+    le.ptr = return_object[0];
+    php_qt_register(return_value, le);
+    return;
+  }
+}
+
+
+PHP_QT_DESTRUCT(QChildEvent);

Added: trunk/qt/classes/qpaintdevice.cpp
===================================================================
--- trunk/qt/classes/qpaintdevice.cpp	2006-04-27 21:36:45 UTC (rev 227)
+++ trunk/qt/classes/qpaintdevice.cpp	2006-04-29 07:27:26 UTC (rev 228)
@@ -0,0 +1,292 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QPaintDevice.cpp - QPaintDevice PHP implementation.
+ * begin           : Tue Apr 11 10:33:13 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+#include <QPaintDevice>
+
+
+/*		public enumPaintDeviceMetric:long {
+			PdmWidth = 1,
+			PaintDeviceMetric = 1,
+			PaintDeviceMetric = 2,
+			PaintDeviceMetric = 3,
+			PaintDeviceMetric = 4,
+			PaintDeviceMetric = 5,
+			PaintDeviceMetric = 6,
+			PaintDeviceMetric = 7,
+			PaintDeviceMetric = 8,
+			PaintDeviceMetric = 9
+		}
+*/
+/*!
+ *    @class     QPaintDevice
+ *    @function  width
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, width)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->width());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  physicalDpiX
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, physicalDpiX)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->physicalDpiX());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  logicalDpiY
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, logicalDpiY)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->logicalDpiY());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  heightMM
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, heightMM)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->heightMM());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  paintingActive
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    bool
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, paintingActive)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    bool *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_BOOL(obj->paintingActive());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  numColors
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, numColors)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->numColors());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  logicalDpiX
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, logicalDpiX)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->logicalDpiX());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  depth
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, depth)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->depth());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  height
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, height)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->height());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  physicalDpiY
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, physicalDpiY)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->physicalDpiY());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+/*!
+ *    @class     QPaintDevice
+ *    @function  widthMM
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QPaintDevice, widthMM)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->widthMM());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+
+PHP_QT_DESTRUCT(QPaintDevice);

Added: trunk/qt/classes/qtimerevent.cpp
===================================================================
--- trunk/qt/classes/qtimerevent.cpp	2006-04-27 21:36:45 UTC (rev 227)
+++ trunk/qt/classes/qtimerevent.cpp	2006-04-29 07:27:26 UTC (rev 228)
@@ -0,0 +1,58 @@
+/*
+ * PHP-Qt - The PHP language bindings for Qt
+ *
+ * Copyright (C) 2005
+ * Thomas Moenicke <tm at ippfp.org>,
+ * Jean-Luc Gyger <jean_luc.gyger at freesurf.ch>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * QTimerEvent.cpp - QTimerEvent PHP implementation.
+ * begin           : Tue Apr 11 10:33:13 2006
+ * generated by    : moni using kalyptus 0.9.
+ */
+
+#include <iostream>
+using namespace std;
+
+#include "../php_qt.h"
+
+
+#include <QTimerEvent>
+
+/*!
+ *    @class     QTimerEvent
+ *    @function  timerId
+ *
+ *    @flags    c
+ *    @access    public
+ *    @return    int
+ *    @param    
+ */
+ZEND_METHOD(QTimerEvent, timerId)
+{
+  if (ZEND_NUM_ARGS() == 0) {
+    int *return_object;
+
+    if (getThis() != NULL) {
+      QTimerEvent *obj = (QTimerEvent *) PHP_QT_FETCH();
+
+      RETURN_LONG(obj->timerId());
+    }                           /// 5 END getThis(), simple types
+  }
+}
+
+
+PHP_QT_DESTRUCT(QTimerEvent);



From tm243 at berlios.de  Sat Apr 29 09:36:26 2006
From: tm243 at berlios.de (tm243 at BerliOS)
Date: Sat, 29 Apr 2006 09:36:26 +0200
Subject: [Php-qt-svn] r229 - trunk/tutorials/t6
Message-ID: <200604290736.k3T7aQDK029427@sheep.berlios.de>

Author: tm243
Date: 2006-04-29 09:36:12 +0200 (Sat, 29 Apr 2006)
New Revision: 229

Modified:
   trunk/tutorials/t6/main.php
Log:
some method calls repaired (with correct count of args)

Modified: trunk/tutorials/t6/main.php
===================================================================
--- trunk/tutorials/t6/main.php	2006-04-29 07:27:26 UTC (rev 228)
+++ trunk/tutorials/t6/main.php	2006-04-29 07:36:12 UTC (rev 229)
@@ -42,7 +42,6 @@
         var $quit;
         var $grid;
         var $layout;
-        var $LCDRange_array = array();
 
         function __construct(){
 
@@ -51,17 +50,17 @@
             $this->quit = new QPushButton("Quit");
     //        $this->quit->setFont(QFont("Times", 18, QFont::Bold));
             $this->connect($this->quit, SIGNAL("clicked()"), QApplication::instance(), SLOT("quit()"));
-    
+
             $this->grid = new QGridLayout();
             for ($row = 0; $row < 4; ++$row) {
                 for ($column = 0; $column < 4; ++$column) {
-                    $this->grid->addWidget(new LCDRange(), $row, $column, 0);
+                    $this->grid->addWidget(new LCDRange(), $row, $column);
                 }
             }
 
             $this->layout = new QVBoxLayout($this);
             $this->layout->addWidget($this->quit);
-            $this->layout->addLayout($this->grid);
+            $this->layout->addLayout($this->grid,0);
             $this->setLayout($this->layout);
         }
     }



